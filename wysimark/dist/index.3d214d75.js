// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"3QC3y":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "0a8ecb283d214d75";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        if (e.message) console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"bB7Pu":[function(require,module,exports) {
var _standalone = require("@wysimark/standalone");
// Get the editor container element
const container = document.getElementById("editor-container");
// Create the Wysimark component
const wysimark = (0, _standalone.createWysimark)(container, {
    initialMarkdown: "# Hello World"
});
const fileSelector = document.getElementById("fileSelector");
const button = document.getElementById("button");
fileSelector.addEventListener("change", (event)=>{
    const fileName = event.target.value;
    if (fileName === "new") wysimark.setMarkdown("");
    else fetch(`http://localhost:3000/getFile/${fileName}`).then((response)=>response.json()).then((data)=>{
        wysimark.setMarkdown(data.content);
    }).catch((error)=>console.error("Error:", error));
});
// Function to populate the file selector
function populateFileSelector() {
    fetch("http://localhost:3000/listFiles").then((response)=>response.json()).then((data)=>{
        if (data.files && data.files.length > 0) data.files.forEach((file)=>{
            const option = document.createElement("option");
            option.value = option.textContent = file;
            fileSelector.appendChild(option);
        });
    }).catch((error)=>console.error("Error:", error));
}
// Populate the file selector on page load
populateFileSelector();
button.addEventListener("click", ()=>{
    const markdown = wysimark.getMarkdown();
    let fileName = fileSelector.value;
    if (fileName === "new") {
        fileName = prompt("Enter a file name for the new Markdown file:", "newFile.md");
        if (!fileName) return; // Do not proceed if no filename is provided
    }
    fetch("http://localhost:3000/saveMarkdown", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            markdown,
            fileName
        })
    }).then((response)=>response.json()).then((data)=>console.log(data)).catch((error)=>console.error("Error:", error));
});

},{"@wysimark/standalone":"gBh69"}],"gBh69":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
        newObj.default = obj;
        return newObj;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _nullishCoalesce(lhs, rhsFn) {
    if (lhs != null) return lhs;
    else return rhsFn();
}
function _optionalChain(ops) {
    let lastAccessLHS = undefined;
    let value = ops[0];
    let i = 1;
    while(i < ops.length){
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        if ((op === "optionalAccess" || op === "optionalCall") && value == null) return undefined;
        if (op === "access" || op === "optionalAccess") {
            lastAccessLHS = value;
            value = fn(value);
        } else if (op === "call" || op === "optionalCall") {
            value = fn((...args)=>value.call(lastAccessLHS, ...args));
            lastAccessLHS = undefined;
        }
    }
    return value;
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res)=>function __init() {
        return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
    };
var __commonJS = (cb, mod)=>function __require() {
        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
            exports: {}
        }).exports, mod), mod.exports;
    };
var __export = (target, all2)=>{
    for(var name in all2)__defProp(target, name, {
        get: all2[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key2 of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key2) && key2 !== except) __defProp(to, key2, {
            get: ()=>from[key2],
            enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable
        });
    }
    return to;
};
var __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod));
// react-shim.js
var _react = require("26c68d34452fa7ec");
var _react2 = _interopRequireDefault(_react);
var init_react_shim = __esm({
    "react-shim.js" () {
        "use strict";
    }
});
// ../../node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
    "../../node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js" (exports1, module) {
        init_react_shim();
        module.exports = function isBuffer2(obj) {
            return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
        };
    }
});
// ../../node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js
var require_extend = __commonJS({
    "../../node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js" (exports1, module) {
        "use strict";
        init_react_shim();
        var hasOwn = Object.prototype.hasOwnProperty;
        var toStr = Object.prototype.toString;
        var defineProperty = Object.defineProperty;
        var gOPD = Object.getOwnPropertyDescriptor;
        var isArray = function isArray2(arr) {
            if (typeof Array.isArray === "function") return Array.isArray(arr);
            return toStr.call(arr) === "[object Array]";
        };
        var isPlainObject2 = function isPlainObject3(obj) {
            if (!obj || toStr.call(obj) !== "[object Object]") return false;
            var hasOwnConstructor = hasOwn.call(obj, "constructor");
            var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
            if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) return false;
            var key2;
            for(key2 in obj);
            return typeof key2 === "undefined" || hasOwn.call(obj, key2);
        };
        var setProperty = function setProperty2(target, options) {
            if (defineProperty && options.name === "__proto__") defineProperty(target, options.name, {
                enumerable: true,
                configurable: true,
                value: options.newValue,
                writable: true
            });
            else target[options.name] = options.newValue;
        };
        var getProperty = function getProperty2(obj, name) {
            if (name === "__proto__") {
                if (!hasOwn.call(obj, name)) return void 0;
                else if (gOPD) return gOPD(obj, name).value;
            }
            return obj[name];
        };
        module.exports = function extend2() {
            var options, name, src, copy, copyIsArray, clone;
            var target = arguments[0];
            var i = 1;
            var length = arguments.length;
            var deep = false;
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2;
            }
            if (target == null || typeof target !== "object" && typeof target !== "function") target = {};
            for(; i < length; ++i){
                options = arguments[i];
                if (options != null) for(name in options){
                    src = getProperty(target, name);
                    copy = getProperty(options, name);
                    if (target !== copy) {
                        if (deep && copy && (isPlainObject2(copy) || (copyIsArray = isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && isArray(src) ? src : [];
                            } else clone = src && isPlainObject2(src) ? src : {};
                            setProperty(target, {
                                name,
                                newValue: extend2(deep, clone, copy)
                            });
                        } else if (typeof copy !== "undefined") setProperty(target, {
                            name,
                            newValue: copy
                        });
                    }
                }
            }
            return target;
        };
    }
});
// src/index.ts
init_react_shim();
// src/entry/index.tsx
init_react_shim();
var _client = require("d0ea530ad52caa8f");
// ../react/src/entry/index.tsx
init_react_shim();
var _lodashthrottle = require("a6eb89848ced5f77");
var _lodashthrottle2 = _interopRequireDefault(_lodashthrottle);
var _slate = require("b94affb311b8d9ed");
var Slate = _interopRequireWildcard(_slate);
var _slatereact = require("d7b7895a02002429");
// ../react/src/convert/index.ts
init_react_shim();
// ../react/src/convert/parse/index.ts
init_react_shim();
// ../../node_modules/.pnpm/remark-gfm@3.0.1/node_modules/remark-gfm/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-extension-gfm@2.0.3/node_modules/micromark-extension-gfm/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-combine-extensions@1.1.0/node_modules/micromark-util-combine-extensions/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-chunked@1.1.0/node_modules/micromark-util-chunked/index.js
init_react_shim();
function splice(list2, start, remove, items) {
    const end = list2.length;
    let chunkStart = 0;
    let parameters;
    if (start < 0) start = -start > end ? 0 : end + start;
    else start = start > end ? end : start;
    remove = remove > 0 ? remove : 0;
    if (items.length < 1e4) {
        parameters = Array.from(items);
        parameters.unshift(start, remove);
        list2.splice(...parameters);
    } else {
        if (remove) list2.splice(start, remove);
        while(chunkStart < items.length){
            parameters = items.slice(chunkStart, chunkStart + 1e4);
            parameters.unshift(start, 0);
            list2.splice(...parameters);
            chunkStart += 1e4;
            start += 1e4;
        }
    }
}
function push(list2, items) {
    if (list2.length > 0) {
        splice(list2, list2.length, 0, items);
        return list2;
    }
    return items;
}
// ../../node_modules/.pnpm/micromark-util-combine-extensions@1.1.0/node_modules/micromark-util-combine-extensions/index.js
var hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
    const all2 = {};
    let index2 = -1;
    while(++index2 < extensions.length)syntaxExtension(all2, extensions[index2]);
    return all2;
}
function syntaxExtension(all2, extension2) {
    let hook;
    for(hook in extension2){
        const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;
        const left = maybe || (all2[hook] = {});
        const right = extension2[hook];
        let code2;
        if (right) for(code2 in right){
            if (!hasOwnProperty.call(left, code2)) left[code2] = [];
            const value = right[code2];
            constructs(// @ts-expect-error Looks like a list.
            left[code2], Array.isArray(value) ? value : value ? [
                value
            ] : []);
        }
    }
}
function constructs(existing, list2) {
    let index2 = -1;
    const before = [];
    while(++index2 < list2.length)(list2[index2].add === "after" ? existing : before).push(list2[index2]);
    splice(existing, 0, 0, before);
}
// ../../node_modules/.pnpm/micromark-extension-gfm-autolink-literal@1.0.5/node_modules/micromark-extension-gfm-autolink-literal/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-extension-gfm-autolink-literal@1.0.5/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js
init_react_shim();
var unicodePunctuationRegex = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
// ../../node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/index.js
var asciiAlpha = regexCheck(/[A-Za-z]/);
var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code2) {
    return(// Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code2 !== null && (code2 < 32 || code2 === 127));
}
var asciiDigit = regexCheck(/\d/);
var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code2) {
    return code2 !== null && code2 < -2;
}
function markdownLineEndingOrSpace(code2) {
    return code2 !== null && (code2 < 0 || code2 === 32);
}
function markdownSpace(code2) {
    return code2 === -2 || code2 === -1 || code2 === 32;
}
var unicodePunctuation = regexCheck(unicodePunctuationRegex);
var unicodeWhitespace = regexCheck(/\s/);
function regexCheck(regex) {
    return check;
    function check(code2) {
        return code2 !== null && regex.test(String.fromCharCode(code2));
    }
}
// ../../node_modules/.pnpm/micromark-extension-gfm-autolink-literal@1.0.5/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js
var wwwPrefix = {
    tokenize: tokenizeWwwPrefix,
    partial: true
};
var domain = {
    tokenize: tokenizeDomain,
    partial: true
};
var path = {
    tokenize: tokenizePath,
    partial: true
};
var trail = {
    tokenize: tokenizeTrail,
    partial: true
};
var emailDomainDotTrail = {
    tokenize: tokenizeEmailDomainDotTrail,
    partial: true
};
var wwwAutolink = {
    tokenize: tokenizeWwwAutolink,
    previous: previousWww
};
var protocolAutolink = {
    tokenize: tokenizeProtocolAutolink,
    previous: previousProtocol
};
var emailAutolink = {
    tokenize: tokenizeEmailAutolink,
    previous: previousEmail
};
var text = {};
var gfmAutolinkLiteral = {
    text
};
var code = 48;
while(code < 123){
    text[code] = emailAutolink;
    code++;
    if (code === 58) code = 65;
    else if (code === 91) code = 97;
}
text[43] = emailAutolink;
text[45] = emailAutolink;
text[46] = emailAutolink;
text[95] = emailAutolink;
text[72] = [
    emailAutolink,
    protocolAutolink
];
text[104] = [
    emailAutolink,
    protocolAutolink
];
text[87] = [
    emailAutolink,
    wwwAutolink
];
text[119] = [
    emailAutolink,
    wwwAutolink
];
function tokenizeEmailAutolink(effects, ok2, nok) {
    const self = this;
    let dot;
    let data2;
    return start;
    function start(code2) {
        if (!gfmAtext(code2) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) return nok(code2);
        effects.enter("literalAutolink");
        effects.enter("literalAutolinkEmail");
        return atext(code2);
    }
    function atext(code2) {
        if (gfmAtext(code2)) {
            effects.consume(code2);
            return atext;
        }
        if (code2 === 64) {
            effects.consume(code2);
            return emailDomain;
        }
        return nok(code2);
    }
    function emailDomain(code2) {
        if (code2 === 46) return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code2);
        if (code2 === 45 || code2 === 95 || asciiAlphanumeric(code2)) {
            data2 = true;
            effects.consume(code2);
            return emailDomain;
        }
        return emailDomainAfter(code2);
    }
    function emailDomainDot(code2) {
        effects.consume(code2);
        dot = true;
        return emailDomain;
    }
    function emailDomainAfter(code2) {
        if (data2 && dot && asciiAlpha(self.previous)) {
            effects.exit("literalAutolinkEmail");
            effects.exit("literalAutolink");
            return ok2(code2);
        }
        return nok(code2);
    }
}
function tokenizeWwwAutolink(effects, ok2, nok) {
    const self = this;
    return wwwStart;
    function wwwStart(code2) {
        if (code2 !== 87 && code2 !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) return nok(code2);
        effects.enter("literalAutolink");
        effects.enter("literalAutolinkWww");
        return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code2);
    }
    function wwwAfter(code2) {
        effects.exit("literalAutolinkWww");
        effects.exit("literalAutolink");
        return ok2(code2);
    }
}
function tokenizeProtocolAutolink(effects, ok2, nok) {
    const self = this;
    let buffer2 = "";
    let seen = false;
    return protocolStart;
    function protocolStart(code2) {
        if ((code2 === 72 || code2 === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {
            effects.enter("literalAutolink");
            effects.enter("literalAutolinkHttp");
            buffer2 += String.fromCodePoint(code2);
            effects.consume(code2);
            return protocolPrefixInside;
        }
        return nok(code2);
    }
    function protocolPrefixInside(code2) {
        if (asciiAlpha(code2) && buffer2.length < 5) {
            buffer2 += String.fromCodePoint(code2);
            effects.consume(code2);
            return protocolPrefixInside;
        }
        if (code2 === 58) {
            const protocol = buffer2.toLowerCase();
            if (protocol === "http" || protocol === "https") {
                effects.consume(code2);
                return protocolSlashesInside;
            }
        }
        return nok(code2);
    }
    function protocolSlashesInside(code2) {
        if (code2 === 47) {
            effects.consume(code2);
            if (seen) return afterProtocol;
            seen = true;
            return protocolSlashesInside;
        }
        return nok(code2);
    }
    function afterProtocol(code2) {
        return code2 === null || asciiControl(code2) || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2) || unicodePunctuation(code2) ? nok(code2) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code2);
    }
    function protocolAfter(code2) {
        effects.exit("literalAutolinkHttp");
        effects.exit("literalAutolink");
        return ok2(code2);
    }
}
function tokenizeWwwPrefix(effects, ok2, nok) {
    let size = 0;
    return wwwPrefixInside;
    function wwwPrefixInside(code2) {
        if ((code2 === 87 || code2 === 119) && size < 3) {
            size++;
            effects.consume(code2);
            return wwwPrefixInside;
        }
        if (code2 === 46 && size === 3) {
            effects.consume(code2);
            return wwwPrefixAfter;
        }
        return nok(code2);
    }
    function wwwPrefixAfter(code2) {
        return code2 === null ? nok(code2) : ok2(code2);
    }
}
function tokenizeDomain(effects, ok2, nok) {
    let underscoreInLastSegment;
    let underscoreInLastLastSegment;
    let seen;
    return domainInside;
    function domainInside(code2) {
        if (code2 === 46 || code2 === 95) return effects.check(trail, domainAfter, domainAtPunctuation)(code2);
        if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2) || code2 !== 45 && unicodePunctuation(code2)) return domainAfter(code2);
        seen = true;
        effects.consume(code2);
        return domainInside;
    }
    function domainAtPunctuation(code2) {
        if (code2 === 95) underscoreInLastSegment = true;
        else {
            underscoreInLastLastSegment = underscoreInLastSegment;
            underscoreInLastSegment = void 0;
        }
        effects.consume(code2);
        return domainInside;
    }
    function domainAfter(code2) {
        if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) return nok(code2);
        return ok2(code2);
    }
}
function tokenizePath(effects, ok2) {
    let sizeOpen = 0;
    let sizeClose = 0;
    return pathInside;
    function pathInside(code2) {
        if (code2 === 40) {
            sizeOpen++;
            effects.consume(code2);
            return pathInside;
        }
        if (code2 === 41 && sizeClose < sizeOpen) return pathAtPunctuation(code2);
        if (code2 === 33 || code2 === 34 || code2 === 38 || code2 === 39 || code2 === 41 || code2 === 42 || code2 === 44 || code2 === 46 || code2 === 58 || code2 === 59 || code2 === 60 || code2 === 63 || code2 === 93 || code2 === 95 || code2 === 126) return effects.check(trail, ok2, pathAtPunctuation)(code2);
        if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) return ok2(code2);
        effects.consume(code2);
        return pathInside;
    }
    function pathAtPunctuation(code2) {
        if (code2 === 41) sizeClose++;
        effects.consume(code2);
        return pathInside;
    }
}
function tokenizeTrail(effects, ok2, nok) {
    return trail2;
    function trail2(code2) {
        if (code2 === 33 || code2 === 34 || code2 === 39 || code2 === 41 || code2 === 42 || code2 === 44 || code2 === 46 || code2 === 58 || code2 === 59 || code2 === 63 || code2 === 95 || code2 === 126) {
            effects.consume(code2);
            return trail2;
        }
        if (code2 === 38) {
            effects.consume(code2);
            return trailCharRefStart;
        }
        if (code2 === 93) {
            effects.consume(code2);
            return trailBracketAfter;
        }
        if (// `<` is an end.
        code2 === 60 || // So is whitespace.
        code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) return ok2(code2);
        return nok(code2);
    }
    function trailBracketAfter(code2) {
        if (code2 === null || code2 === 40 || code2 === 91 || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) return ok2(code2);
        return trail2(code2);
    }
    function trailCharRefStart(code2) {
        return asciiAlpha(code2) ? trailCharRefInside(code2) : nok(code2);
    }
    function trailCharRefInside(code2) {
        if (code2 === 59) {
            effects.consume(code2);
            return trail2;
        }
        if (asciiAlpha(code2)) {
            effects.consume(code2);
            return trailCharRefInside;
        }
        return nok(code2);
    }
}
function tokenizeEmailDomainDotTrail(effects, ok2, nok) {
    return start;
    function start(code2) {
        effects.consume(code2);
        return after;
    }
    function after(code2) {
        return asciiAlphanumeric(code2) ? nok(code2) : ok2(code2);
    }
}
function previousWww(code2) {
    return code2 === null || code2 === 40 || code2 === 42 || code2 === 95 || code2 === 91 || code2 === 93 || code2 === 126 || markdownLineEndingOrSpace(code2);
}
function previousProtocol(code2) {
    return !asciiAlpha(code2);
}
function previousEmail(code2) {
    return !(code2 === 47 || gfmAtext(code2));
}
function gfmAtext(code2) {
    return code2 === 43 || code2 === 45 || code2 === 46 || code2 === 95 || asciiAlphanumeric(code2);
}
function previousUnbalanced(events) {
    let index2 = events.length;
    let result = false;
    while(index2--){
        const token = events[index2][1];
        if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
            result = true;
            break;
        }
        if (token._gfmAutolinkLiteralWalkedInto) {
            result = false;
            break;
        }
    }
    if (events.length > 0 && !result) events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
    return result;
}
// ../../node_modules/.pnpm/micromark-extension-gfm-footnote@1.1.2/node_modules/micromark-extension-gfm-footnote/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-extension-gfm-footnote@1.1.2/node_modules/micromark-extension-gfm-footnote/lib/syntax.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/attention.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-classify-character@1.1.0/node_modules/micromark-util-classify-character/index.js
init_react_shim();
function classifyCharacter(code2) {
    if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) return 1;
    if (unicodePunctuation(code2)) return 2;
}
// ../../node_modules/.pnpm/micromark-util-resolve-all@1.1.0/node_modules/micromark-util-resolve-all/index.js
init_react_shim();
function resolveAll(constructs2, events, context) {
    const called = [];
    let index2 = -1;
    while(++index2 < constructs2.length){
        const resolve = constructs2[index2].resolveAll;
        if (resolve && !called.includes(resolve)) {
            events = resolve(events, context);
            called.push(resolve);
        }
    }
    return events;
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/attention.js
var attention = {
    name: "attention",
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention
};
function resolveAllAttention(events, context) {
    let index2 = -1;
    let open;
    let group;
    let text4;
    let openingSequence;
    let closingSequence;
    let use;
    let nextEvents;
    let offset;
    while(++index2 < events.length)if (events[index2][0] === "enter" && events[index2][1].type === "attentionSequence" && events[index2][1]._close) {
        open = index2;
        while(open--)if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {
            if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) continue;
            use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;
            const start = Object.assign({}, events[open][1].end);
            const end = Object.assign({}, events[index2][1].start);
            movePoint(start, -use);
            movePoint(end, use);
            openingSequence = {
                type: use > 1 ? "strongSequence" : "emphasisSequence",
                start,
                end: Object.assign({}, events[open][1].end)
            };
            closingSequence = {
                type: use > 1 ? "strongSequence" : "emphasisSequence",
                start: Object.assign({}, events[index2][1].start),
                end
            };
            text4 = {
                type: use > 1 ? "strongText" : "emphasisText",
                start: Object.assign({}, events[open][1].end),
                end: Object.assign({}, events[index2][1].start)
            };
            group = {
                type: use > 1 ? "strong" : "emphasis",
                start: Object.assign({}, openingSequence.start),
                end: Object.assign({}, closingSequence.end)
            };
            events[open][1].end = Object.assign({}, openingSequence.start);
            events[index2][1].start = Object.assign({}, closingSequence.end);
            nextEvents = [];
            if (events[open][1].end.offset - events[open][1].start.offset) nextEvents = push(nextEvents, [
                [
                    "enter",
                    events[open][1],
                    context
                ],
                [
                    "exit",
                    events[open][1],
                    context
                ]
            ]);
            nextEvents = push(nextEvents, [
                [
                    "enter",
                    group,
                    context
                ],
                [
                    "enter",
                    openingSequence,
                    context
                ],
                [
                    "exit",
                    openingSequence,
                    context
                ],
                [
                    "enter",
                    text4,
                    context
                ]
            ]);
            nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index2), context));
            nextEvents = push(nextEvents, [
                [
                    "exit",
                    text4,
                    context
                ],
                [
                    "enter",
                    closingSequence,
                    context
                ],
                [
                    "exit",
                    closingSequence,
                    context
                ],
                [
                    "exit",
                    group,
                    context
                ]
            ]);
            if (events[index2][1].end.offset - events[index2][1].start.offset) {
                offset = 2;
                nextEvents = push(nextEvents, [
                    [
                        "enter",
                        events[index2][1],
                        context
                    ],
                    [
                        "exit",
                        events[index2][1],
                        context
                    ]
                ]);
            } else offset = 0;
            splice(events, open - 1, index2 - open + 3, nextEvents);
            index2 = open + nextEvents.length - offset - 2;
            break;
        }
    }
    index2 = -1;
    while(++index2 < events.length)if (events[index2][1].type === "attentionSequence") events[index2][1].type = "data";
    return events;
}
function tokenizeAttention(effects, ok2) {
    const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
    const previous3 = this.previous;
    const before = classifyCharacter(previous3);
    let marker;
    return start;
    function start(code2) {
        marker = code2;
        effects.enter("attentionSequence");
        return inside(code2);
    }
    function inside(code2) {
        if (code2 === marker) {
            effects.consume(code2);
            return inside;
        }
        const token = effects.exit("attentionSequence");
        const after = classifyCharacter(code2);
        const open = !after || after === 2 && before || attentionMarkers2.includes(code2);
        const close = !before || before === 2 && after || attentionMarkers2.includes(previous3);
        token._open = Boolean(marker === 42 ? open : open && (before || !close));
        token._close = Boolean(marker === 42 ? close : close && (after || !open));
        return ok2(code2);
    }
}
function movePoint(point3, offset) {
    point3.column += offset;
    point3.offset += offset;
    point3._bufferIndex += offset;
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/autolink.js
init_react_shim();
var autolink = {
    name: "autolink",
    tokenize: tokenizeAutolink
};
function tokenizeAutolink(effects, ok2, nok) {
    let size = 0;
    return start;
    function start(code2) {
        effects.enter("autolink");
        effects.enter("autolinkMarker");
        effects.consume(code2);
        effects.exit("autolinkMarker");
        effects.enter("autolinkProtocol");
        return open;
    }
    function open(code2) {
        if (asciiAlpha(code2)) {
            effects.consume(code2);
            return schemeOrEmailAtext;
        }
        return emailAtext(code2);
    }
    function schemeOrEmailAtext(code2) {
        if (code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) {
            size = 1;
            return schemeInsideOrEmailAtext(code2);
        }
        return emailAtext(code2);
    }
    function schemeInsideOrEmailAtext(code2) {
        if (code2 === 58) {
            effects.consume(code2);
            size = 0;
            return urlInside;
        }
        if ((code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) && size++ < 32) {
            effects.consume(code2);
            return schemeInsideOrEmailAtext;
        }
        size = 0;
        return emailAtext(code2);
    }
    function urlInside(code2) {
        if (code2 === 62) {
            effects.exit("autolinkProtocol");
            effects.enter("autolinkMarker");
            effects.consume(code2);
            effects.exit("autolinkMarker");
            effects.exit("autolink");
            return ok2;
        }
        if (code2 === null || code2 === 32 || code2 === 60 || asciiControl(code2)) return nok(code2);
        effects.consume(code2);
        return urlInside;
    }
    function emailAtext(code2) {
        if (code2 === 64) {
            effects.consume(code2);
            return emailAtSignOrDot;
        }
        if (asciiAtext(code2)) {
            effects.consume(code2);
            return emailAtext;
        }
        return nok(code2);
    }
    function emailAtSignOrDot(code2) {
        return asciiAlphanumeric(code2) ? emailLabel(code2) : nok(code2);
    }
    function emailLabel(code2) {
        if (code2 === 46) {
            effects.consume(code2);
            size = 0;
            return emailAtSignOrDot;
        }
        if (code2 === 62) {
            effects.exit("autolinkProtocol").type = "autolinkEmail";
            effects.enter("autolinkMarker");
            effects.consume(code2);
            effects.exit("autolinkMarker");
            effects.exit("autolink");
            return ok2;
        }
        return emailValue(code2);
    }
    function emailValue(code2) {
        if ((code2 === 45 || asciiAlphanumeric(code2)) && size++ < 63) {
            const next = code2 === 45 ? emailValue : emailLabel;
            effects.consume(code2);
            return next;
        }
        return nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/blank-line.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-factory-space@1.1.0/node_modules/micromark-factory-space/index.js
init_react_shim();
function factorySpace(effects, ok2, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start;
    function start(code2) {
        if (markdownSpace(code2)) {
            effects.enter(type);
            return prefix(code2);
        }
        return ok2(code2);
    }
    function prefix(code2) {
        if (markdownSpace(code2) && size++ < limit) {
            effects.consume(code2);
            return prefix;
        }
        effects.exit(type);
        return ok2(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/blank-line.js
var blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
};
function tokenizeBlankLine(effects, ok2, nok) {
    return start;
    function start(code2) {
        return markdownSpace(code2) ? factorySpace(effects, after, "linePrefix")(code2) : after(code2);
    }
    function after(code2) {
        return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/block-quote.js
init_react_shim();
var blockQuote = {
    name: "blockQuote",
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
        tokenize: tokenizeBlockQuoteContinuation
    },
    exit
};
function tokenizeBlockQuoteStart(effects, ok2, nok) {
    const self = this;
    return start;
    function start(code2) {
        if (code2 === 62) {
            const state = self.containerState;
            if (!state.open) {
                effects.enter("blockQuote", {
                    _container: true
                });
                state.open = true;
            }
            effects.enter("blockQuotePrefix");
            effects.enter("blockQuoteMarker");
            effects.consume(code2);
            effects.exit("blockQuoteMarker");
            return after;
        }
        return nok(code2);
    }
    function after(code2) {
        if (markdownSpace(code2)) {
            effects.enter("blockQuotePrefixWhitespace");
            effects.consume(code2);
            effects.exit("blockQuotePrefixWhitespace");
            effects.exit("blockQuotePrefix");
            return ok2;
        }
        effects.exit("blockQuotePrefix");
        return ok2(code2);
    }
}
function tokenizeBlockQuoteContinuation(effects, ok2, nok) {
    const self = this;
    return contStart;
    function contStart(code2) {
        if (markdownSpace(code2)) return factorySpace(effects, contBefore, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2);
        return contBefore(code2);
    }
    function contBefore(code2) {
        return effects.attempt(blockQuote, ok2, nok)(code2);
    }
}
function exit(effects) {
    effects.exit("blockQuote");
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-escape.js
init_react_shim();
var characterEscape = {
    name: "characterEscape",
    tokenize: tokenizeCharacterEscape
};
function tokenizeCharacterEscape(effects, ok2, nok) {
    return start;
    function start(code2) {
        effects.enter("characterEscape");
        effects.enter("escapeMarker");
        effects.consume(code2);
        effects.exit("escapeMarker");
        return inside;
    }
    function inside(code2) {
        if (asciiPunctuation(code2)) {
            effects.enter("characterEscapeValue");
            effects.consume(code2);
            effects.exit("characterEscapeValue");
            effects.exit("characterEscape");
            return ok2;
        }
        return nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-reference.js
init_react_shim();
// ../../node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.dom.js
init_react_shim();
var element = document.createElement("i");
function decodeNamedCharacterReference(value) {
    const characterReference2 = "&" + value + ";";
    element.innerHTML = characterReference2;
    const char = element.textContent;
    if (char.charCodeAt(char.length - 1) === 59 && value !== "semi") return false;
    return char === characterReference2 ? false : char;
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-reference.js
var characterReference = {
    name: "characterReference",
    tokenize: tokenizeCharacterReference
};
function tokenizeCharacterReference(effects, ok2, nok) {
    const self = this;
    let size = 0;
    let max;
    let test;
    return start;
    function start(code2) {
        effects.enter("characterReference");
        effects.enter("characterReferenceMarker");
        effects.consume(code2);
        effects.exit("characterReferenceMarker");
        return open;
    }
    function open(code2) {
        if (code2 === 35) {
            effects.enter("characterReferenceMarkerNumeric");
            effects.consume(code2);
            effects.exit("characterReferenceMarkerNumeric");
            return numeric;
        }
        effects.enter("characterReferenceValue");
        max = 31;
        test = asciiAlphanumeric;
        return value(code2);
    }
    function numeric(code2) {
        if (code2 === 88 || code2 === 120) {
            effects.enter("characterReferenceMarkerHexadecimal");
            effects.consume(code2);
            effects.exit("characterReferenceMarkerHexadecimal");
            effects.enter("characterReferenceValue");
            max = 6;
            test = asciiHexDigit;
            return value;
        }
        effects.enter("characterReferenceValue");
        max = 7;
        test = asciiDigit;
        return value(code2);
    }
    function value(code2) {
        if (code2 === 59 && size) {
            const token = effects.exit("characterReferenceValue");
            if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) return nok(code2);
            effects.enter("characterReferenceMarker");
            effects.consume(code2);
            effects.exit("characterReferenceMarker");
            effects.exit("characterReference");
            return ok2;
        }
        if (test(code2) && size++ < max) {
            effects.consume(code2);
            return value;
        }
        return nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-fenced.js
init_react_shim();
var nonLazyContinuation = {
    tokenize: tokenizeNonLazyContinuation,
    partial: true
};
var codeFenced = {
    name: "codeFenced",
    tokenize: tokenizeCodeFenced,
    concrete: true
};
function tokenizeCodeFenced(effects, ok2, nok) {
    const self = this;
    const closeStart = {
        tokenize: tokenizeCloseStart,
        partial: true
    };
    let initialPrefix = 0;
    let sizeOpen = 0;
    let marker;
    return start;
    function start(code2) {
        return beforeSequenceOpen(code2);
    }
    function beforeSequenceOpen(code2) {
        const tail = self.events[self.events.length - 1];
        initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
        marker = code2;
        effects.enter("codeFenced");
        effects.enter("codeFencedFence");
        effects.enter("codeFencedFenceSequence");
        return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
        if (code2 === marker) {
            sizeOpen++;
            effects.consume(code2);
            return sequenceOpen;
        }
        if (sizeOpen < 3) return nok(code2);
        effects.exit("codeFencedFenceSequence");
        return markdownSpace(code2) ? factorySpace(effects, infoBefore, "whitespace")(code2) : infoBefore(code2);
    }
    function infoBefore(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("codeFencedFence");
            return self.interrupt ? ok2(code2) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
        }
        effects.enter("codeFencedFenceInfo");
        effects.enter("chunkString", {
            contentType: "string"
        });
        return info(code2);
    }
    function info(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("chunkString");
            effects.exit("codeFencedFenceInfo");
            return infoBefore(code2);
        }
        if (markdownSpace(code2)) {
            effects.exit("chunkString");
            effects.exit("codeFencedFenceInfo");
            return factorySpace(effects, metaBefore, "whitespace")(code2);
        }
        if (code2 === 96 && code2 === marker) return nok(code2);
        effects.consume(code2);
        return info;
    }
    function metaBefore(code2) {
        if (code2 === null || markdownLineEnding(code2)) return infoBefore(code2);
        effects.enter("codeFencedFenceMeta");
        effects.enter("chunkString", {
            contentType: "string"
        });
        return meta(code2);
    }
    function meta(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("chunkString");
            effects.exit("codeFencedFenceMeta");
            return infoBefore(code2);
        }
        if (code2 === 96 && code2 === marker) return nok(code2);
        effects.consume(code2);
        return meta;
    }
    function atNonLazyBreak(code2) {
        return effects.attempt(closeStart, after, contentBefore)(code2);
    }
    function contentBefore(code2) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return contentStart;
    }
    function contentStart(code2) {
        return initialPrefix > 0 && markdownSpace(code2) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code2) : beforeContentChunk(code2);
    }
    function beforeContentChunk(code2) {
        if (code2 === null || markdownLineEnding(code2)) return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
        effects.enter("codeFlowValue");
        return contentChunk(code2);
    }
    function contentChunk(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("codeFlowValue");
            return beforeContentChunk(code2);
        }
        effects.consume(code2);
        return contentChunk;
    }
    function after(code2) {
        effects.exit("codeFenced");
        return ok2(code2);
    }
    function tokenizeCloseStart(effects2, ok3, nok2) {
        let size = 0;
        return startBefore;
        function startBefore(code2) {
            effects2.enter("lineEnding");
            effects2.consume(code2);
            effects2.exit("lineEnding");
            return start2;
        }
        function start2(code2) {
            effects2.enter("codeFencedFence");
            return markdownSpace(code2) ? factorySpace(effects2, beforeSequenceClose, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2) : beforeSequenceClose(code2);
        }
        function beforeSequenceClose(code2) {
            if (code2 === marker) {
                effects2.enter("codeFencedFenceSequence");
                return sequenceClose(code2);
            }
            return nok2(code2);
        }
        function sequenceClose(code2) {
            if (code2 === marker) {
                size++;
                effects2.consume(code2);
                return sequenceClose;
            }
            if (size >= sizeOpen) {
                effects2.exit("codeFencedFenceSequence");
                return markdownSpace(code2) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code2) : sequenceCloseAfter(code2);
            }
            return nok2(code2);
        }
        function sequenceCloseAfter(code2) {
            if (code2 === null || markdownLineEnding(code2)) {
                effects2.exit("codeFencedFence");
                return ok3(code2);
            }
            return nok2(code2);
        }
    }
}
function tokenizeNonLazyContinuation(effects, ok2, nok) {
    const self = this;
    return start;
    function start(code2) {
        if (code2 === null) return nok(code2);
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return lineStart;
    }
    function lineStart(code2) {
        return self.parser.lazy[self.now().line] ? nok(code2) : ok2(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-indented.js
init_react_shim();
var codeIndented = {
    name: "codeIndented",
    tokenize: tokenizeCodeIndented
};
var furtherStart = {
    tokenize: tokenizeFurtherStart,
    partial: true
};
function tokenizeCodeIndented(effects, ok2, nok) {
    const self = this;
    return start;
    function start(code2) {
        effects.enter("codeIndented");
        return factorySpace(effects, afterPrefix, "linePrefix", 5)(code2);
    }
    function afterPrefix(code2) {
        const tail = self.events[self.events.length - 1];
        return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code2) : nok(code2);
    }
    function atBreak(code2) {
        if (code2 === null) return after(code2);
        if (markdownLineEnding(code2)) return effects.attempt(furtherStart, atBreak, after)(code2);
        effects.enter("codeFlowValue");
        return inside(code2);
    }
    function inside(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("codeFlowValue");
            return atBreak(code2);
        }
        effects.consume(code2);
        return inside;
    }
    function after(code2) {
        effects.exit("codeIndented");
        return ok2(code2);
    }
}
function tokenizeFurtherStart(effects, ok2, nok) {
    const self = this;
    return furtherStart2;
    function furtherStart2(code2) {
        if (self.parser.lazy[self.now().line]) return nok(code2);
        if (markdownLineEnding(code2)) {
            effects.enter("lineEnding");
            effects.consume(code2);
            effects.exit("lineEnding");
            return furtherStart2;
        }
        return factorySpace(effects, afterPrefix, "linePrefix", 5)(code2);
    }
    function afterPrefix(code2) {
        const tail = self.events[self.events.length - 1];
        return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok2(code2) : markdownLineEnding(code2) ? furtherStart2(code2) : nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-text.js
init_react_shim();
var codeText = {
    name: "codeText",
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous
};
function resolveCodeText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    let index2;
    let enter;
    if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
        index2 = headEnterIndex;
        while(++index2 < tailExitIndex)if (events[index2][1].type === "codeTextData") {
            events[headEnterIndex][1].type = "codeTextPadding";
            events[tailExitIndex][1].type = "codeTextPadding";
            headEnterIndex += 2;
            tailExitIndex -= 2;
            break;
        }
    }
    index2 = headEnterIndex - 1;
    tailExitIndex++;
    while(++index2 <= tailExitIndex){
        if (enter === void 0) {
            if (index2 !== tailExitIndex && events[index2][1].type !== "lineEnding") enter = index2;
        } else if (index2 === tailExitIndex || events[index2][1].type === "lineEnding") {
            events[enter][1].type = "codeTextData";
            if (index2 !== enter + 2) {
                events[enter][1].end = events[index2 - 1][1].end;
                events.splice(enter + 2, index2 - enter - 2);
                tailExitIndex -= index2 - enter - 2;
                index2 = enter + 2;
            }
            enter = void 0;
        }
    }
    return events;
}
function previous(code2) {
    return code2 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function tokenizeCodeText(effects, ok2, nok) {
    const self = this;
    let sizeOpen = 0;
    let size;
    let token;
    return start;
    function start(code2) {
        effects.enter("codeText");
        effects.enter("codeTextSequence");
        return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
        if (code2 === 96) {
            effects.consume(code2);
            sizeOpen++;
            return sequenceOpen;
        }
        effects.exit("codeTextSequence");
        return between2(code2);
    }
    function between2(code2) {
        if (code2 === null) return nok(code2);
        if (code2 === 32) {
            effects.enter("space");
            effects.consume(code2);
            effects.exit("space");
            return between2;
        }
        if (code2 === 96) {
            token = effects.enter("codeTextSequence");
            size = 0;
            return sequenceClose(code2);
        }
        if (markdownLineEnding(code2)) {
            effects.enter("lineEnding");
            effects.consume(code2);
            effects.exit("lineEnding");
            return between2;
        }
        effects.enter("codeTextData");
        return data2(code2);
    }
    function data2(code2) {
        if (code2 === null || code2 === 32 || code2 === 96 || markdownLineEnding(code2)) {
            effects.exit("codeTextData");
            return between2(code2);
        }
        effects.consume(code2);
        return data2;
    }
    function sequenceClose(code2) {
        if (code2 === 96) {
            effects.consume(code2);
            size++;
            return sequenceClose;
        }
        if (size === sizeOpen) {
            effects.exit("codeTextSequence");
            effects.exit("codeText");
            return ok2(code2);
        }
        token.type = "codeTextData";
        return data2(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/content.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-subtokenize@1.1.0/node_modules/micromark-util-subtokenize/index.js
init_react_shim();
function subtokenize(events) {
    const jumps = {};
    let index2 = -1;
    let event;
    let lineIndex;
    let otherIndex;
    let otherEvent;
    let parameters;
    let subevents;
    let more;
    while(++index2 < events.length){
        while(index2 in jumps)index2 = jumps[index2];
        event = events[index2];
        if (index2 && event[1].type === "chunkFlow" && events[index2 - 1][1].type === "listItemPrefix") {
            subevents = event[1]._tokenizer.events;
            otherIndex = 0;
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") otherIndex += 2;
            if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") while(++otherIndex < subevents.length){
                if (subevents[otherIndex][1].type === "content") break;
                if (subevents[otherIndex][1].type === "chunkText") {
                    subevents[otherIndex][1]._isInFirstContentOfListItem = true;
                    otherIndex++;
                }
            }
        }
        if (event[0] === "enter") {
            if (event[1].contentType) {
                Object.assign(jumps, subcontent(events, index2));
                index2 = jumps[index2];
                more = true;
            }
        } else if (event[1]._container) {
            otherIndex = index2;
            lineIndex = void 0;
            while(otherIndex--){
                otherEvent = events[otherIndex];
                if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
                    if (otherEvent[0] === "enter") {
                        if (lineIndex) events[lineIndex][1].type = "lineEndingBlank";
                        otherEvent[1].type = "lineEnding";
                        lineIndex = otherIndex;
                    }
                } else break;
            }
            if (lineIndex) {
                event[1].end = Object.assign({}, events[lineIndex][1].start);
                parameters = events.slice(lineIndex, index2);
                parameters.unshift(event);
                splice(events, lineIndex, index2 - lineIndex + 1, parameters);
            }
        }
    }
    return !more;
}
function subcontent(events, eventIndex) {
    const token = events[eventIndex][1];
    const context = events[eventIndex][2];
    let startPosition = eventIndex - 1;
    const startPositions = [];
    const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    const jumps = [];
    const gaps = {};
    let stream;
    let previous3;
    let index2 = -1;
    let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [
        start
    ];
    while(current){
        while(events[++startPosition][1] !== current);
        startPositions.push(startPosition);
        if (!current._tokenizer) {
            stream = context.sliceStream(current);
            if (!current.next) stream.push(null);
            if (previous3) tokenizer.defineSkip(current.start);
            if (current._isInFirstContentOfListItem) tokenizer._gfmTasklistFirstContentOfListItem = true;
            tokenizer.write(stream);
            if (current._isInFirstContentOfListItem) tokenizer._gfmTasklistFirstContentOfListItem = void 0;
        }
        previous3 = current;
        current = current.next;
    }
    current = token;
    while(++index2 < childEvents.length)if (// Find a void token that includes a break.
    childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line) {
        start = index2 + 1;
        breaks.push(start);
        current._tokenizer = void 0;
        current.previous = void 0;
        current = current.next;
    }
    tokenizer.events = [];
    if (current) {
        current._tokenizer = void 0;
        current.previous = void 0;
    } else breaks.pop();
    index2 = breaks.length;
    while(index2--){
        const slice = childEvents.slice(breaks[index2], breaks[index2 + 1]);
        const start2 = startPositions.pop();
        jumps.unshift([
            start2,
            start2 + slice.length - 1
        ]);
        splice(events, start2, 2, slice);
    }
    index2 = -1;
    while(++index2 < jumps.length){
        gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
        adjust += jumps[index2][1] - jumps[index2][0] - 1;
    }
    return gaps;
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/content.js
var content = {
    tokenize: tokenizeContent,
    resolve: resolveContent
};
var continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true
};
function resolveContent(events) {
    subtokenize(events);
    return events;
}
function tokenizeContent(effects, ok2) {
    let previous3;
    return chunkStart;
    function chunkStart(code2) {
        effects.enter("content");
        previous3 = effects.enter("chunkContent", {
            contentType: "content"
        });
        return chunkInside(code2);
    }
    function chunkInside(code2) {
        if (code2 === null) return contentEnd(code2);
        if (markdownLineEnding(code2)) return effects.check(continuationConstruct, contentContinue, contentEnd)(code2);
        effects.consume(code2);
        return chunkInside;
    }
    function contentEnd(code2) {
        effects.exit("chunkContent");
        effects.exit("content");
        return ok2(code2);
    }
    function contentContinue(code2) {
        effects.consume(code2);
        effects.exit("chunkContent");
        previous3.next = effects.enter("chunkContent", {
            contentType: "content",
            previous: previous3
        });
        previous3 = previous3.next;
        return chunkInside;
    }
}
function tokenizeContinuation(effects, ok2, nok) {
    const self = this;
    return startLookahead;
    function startLookahead(code2) {
        effects.exit("chunkContent");
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return factorySpace(effects, prefixed, "linePrefix");
    }
    function prefixed(code2) {
        if (code2 === null || markdownLineEnding(code2)) return nok(code2);
        const tail = self.events[self.events.length - 1];
        if (!self.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) return ok2(code2);
        return effects.interrupt(self.parser.constructs.flow, nok, ok2)(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/definition.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-factory-destination@1.1.0/node_modules/micromark-factory-destination/index.js
init_react_shim();
function factoryDestination(effects, ok2, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start;
    function start(code2) {
        if (code2 === 60) {
            effects.enter(type);
            effects.enter(literalType);
            effects.enter(literalMarkerType);
            effects.consume(code2);
            effects.exit(literalMarkerType);
            return enclosedBefore;
        }
        if (code2 === null || code2 === 32 || code2 === 41 || asciiControl(code2)) return nok(code2);
        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter("chunkString", {
            contentType: "string"
        });
        return raw(code2);
    }
    function enclosedBefore(code2) {
        if (code2 === 62) {
            effects.enter(literalMarkerType);
            effects.consume(code2);
            effects.exit(literalMarkerType);
            effects.exit(literalType);
            effects.exit(type);
            return ok2;
        }
        effects.enter(stringType);
        effects.enter("chunkString", {
            contentType: "string"
        });
        return enclosed(code2);
    }
    function enclosed(code2) {
        if (code2 === 62) {
            effects.exit("chunkString");
            effects.exit(stringType);
            return enclosedBefore(code2);
        }
        if (code2 === null || code2 === 60 || markdownLineEnding(code2)) return nok(code2);
        effects.consume(code2);
        return code2 === 92 ? enclosedEscape : enclosed;
    }
    function enclosedEscape(code2) {
        if (code2 === 60 || code2 === 62 || code2 === 92) {
            effects.consume(code2);
            return enclosed;
        }
        return enclosed(code2);
    }
    function raw(code2) {
        if (!balance && (code2 === null || code2 === 41 || markdownLineEndingOrSpace(code2))) {
            effects.exit("chunkString");
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok2(code2);
        }
        if (balance < limit && code2 === 40) {
            effects.consume(code2);
            balance++;
            return raw;
        }
        if (code2 === 41) {
            effects.consume(code2);
            balance--;
            return raw;
        }
        if (code2 === null || code2 === 32 || code2 === 40 || asciiControl(code2)) return nok(code2);
        effects.consume(code2);
        return code2 === 92 ? rawEscape : raw;
    }
    function rawEscape(code2) {
        if (code2 === 40 || code2 === 41 || code2 === 92) {
            effects.consume(code2);
            return raw;
        }
        return raw(code2);
    }
}
// ../../node_modules/.pnpm/micromark-factory-label@1.1.0/node_modules/micromark-factory-label/index.js
init_react_shim();
function factoryLabel(effects, ok2, nok, type, markerType, stringType) {
    const self = this;
    let size = 0;
    let seen;
    return start;
    function start(code2) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak;
    }
    function atBreak(code2) {
        if (size > 999 || code2 === null || code2 === 91 || code2 === 93 && !seen || // To do: remove in the future once we’ve switched from
        // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
        // which doesn’t need this.
        // Hidden footnotes hook.
        /* c8 ignore next 3 */ code2 === 94 && !size && "_hiddenFootnoteSupport" in self.parser.constructs) return nok(code2);
        if (code2 === 93) {
            effects.exit(stringType);
            effects.enter(markerType);
            effects.consume(code2);
            effects.exit(markerType);
            effects.exit(type);
            return ok2;
        }
        if (markdownLineEnding(code2)) {
            effects.enter("lineEnding");
            effects.consume(code2);
            effects.exit("lineEnding");
            return atBreak;
        }
        effects.enter("chunkString", {
            contentType: "string"
        });
        return labelInside(code2);
    }
    function labelInside(code2) {
        if (code2 === null || code2 === 91 || code2 === 93 || markdownLineEnding(code2) || size++ > 999) {
            effects.exit("chunkString");
            return atBreak(code2);
        }
        effects.consume(code2);
        if (!seen) seen = !markdownSpace(code2);
        return code2 === 92 ? labelEscape : labelInside;
    }
    function labelEscape(code2) {
        if (code2 === 91 || code2 === 92 || code2 === 93) {
            effects.consume(code2);
            size++;
            return labelInside;
        }
        return labelInside(code2);
    }
}
// ../../node_modules/.pnpm/micromark-factory-title@1.1.0/node_modules/micromark-factory-title/index.js
init_react_shim();
function factoryTitle(effects, ok2, nok, type, markerType, stringType) {
    let marker;
    return start;
    function start(code2) {
        if (code2 === 34 || code2 === 39 || code2 === 40) {
            effects.enter(type);
            effects.enter(markerType);
            effects.consume(code2);
            effects.exit(markerType);
            marker = code2 === 40 ? 41 : code2;
            return begin;
        }
        return nok(code2);
    }
    function begin(code2) {
        if (code2 === marker) {
            effects.enter(markerType);
            effects.consume(code2);
            effects.exit(markerType);
            effects.exit(type);
            return ok2;
        }
        effects.enter(stringType);
        return atBreak(code2);
    }
    function atBreak(code2) {
        if (code2 === marker) {
            effects.exit(stringType);
            return begin(marker);
        }
        if (code2 === null) return nok(code2);
        if (markdownLineEnding(code2)) {
            effects.enter("lineEnding");
            effects.consume(code2);
            effects.exit("lineEnding");
            return factorySpace(effects, atBreak, "linePrefix");
        }
        effects.enter("chunkString", {
            contentType: "string"
        });
        return inside(code2);
    }
    function inside(code2) {
        if (code2 === marker || code2 === null || markdownLineEnding(code2)) {
            effects.exit("chunkString");
            return atBreak(code2);
        }
        effects.consume(code2);
        return code2 === 92 ? escape : inside;
    }
    function escape(code2) {
        if (code2 === marker || code2 === 92) {
            effects.consume(code2);
            return inside;
        }
        return inside(code2);
    }
}
// ../../node_modules/.pnpm/micromark-factory-whitespace@1.1.0/node_modules/micromark-factory-whitespace/index.js
init_react_shim();
function factoryWhitespace(effects, ok2) {
    let seen;
    return start;
    function start(code2) {
        if (markdownLineEnding(code2)) {
            effects.enter("lineEnding");
            effects.consume(code2);
            effects.exit("lineEnding");
            seen = true;
            return start;
        }
        if (markdownSpace(code2)) return factorySpace(effects, start, seen ? "linePrefix" : "lineSuffix")(code2);
        return ok2(code2);
    }
}
// ../../node_modules/.pnpm/micromark-util-normalize-identifier@1.1.0/node_modules/micromark-util-normalize-identifier/index.js
init_react_shim();
function normalizeIdentifier(value) {
    return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/definition.js
var definition = {
    name: "definition",
    tokenize: tokenizeDefinition
};
var titleBefore = {
    tokenize: tokenizeTitleBefore,
    partial: true
};
function tokenizeDefinition(effects, ok2, nok) {
    const self = this;
    let identifier;
    return start;
    function start(code2) {
        effects.enter("definition");
        return before(code2);
    }
    function before(code2) {
        return factoryLabel.call(self, effects, labelAfter, // Note: we don’t need to reset the way `markdown-rs` does.
        nok, "definitionLabel", "definitionLabelMarker", "definitionLabelString")(code2);
    }
    function labelAfter(code2) {
        identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));
        if (code2 === 58) {
            effects.enter("definitionMarker");
            effects.consume(code2);
            effects.exit("definitionMarker");
            return markerAfter;
        }
        return nok(code2);
    }
    function markerAfter(code2) {
        return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, destinationBefore)(code2) : destinationBefore(code2);
    }
    function destinationBefore(code2) {
        return factoryDestination(effects, destinationAfter, // Note: we don’t need to reset the way `markdown-rs` does.
        nok, "definitionDestination", "definitionDestinationLiteral", "definitionDestinationLiteralMarker", "definitionDestinationRaw", "definitionDestinationString")(code2);
    }
    function destinationAfter(code2) {
        return effects.attempt(titleBefore, after, after)(code2);
    }
    function after(code2) {
        return markdownSpace(code2) ? factorySpace(effects, afterWhitespace, "whitespace")(code2) : afterWhitespace(code2);
    }
    function afterWhitespace(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("definition");
            self.parser.defined.push(identifier);
            return ok2(code2);
        }
        return nok(code2);
    }
}
function tokenizeTitleBefore(effects, ok2, nok) {
    return titleBefore2;
    function titleBefore2(code2) {
        return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, beforeMarker)(code2) : nok(code2);
    }
    function beforeMarker(code2) {
        return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code2);
    }
    function titleAfter(code2) {
        return markdownSpace(code2) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code2) : titleAfterOptionalWhitespace(code2);
    }
    function titleAfterOptionalWhitespace(code2) {
        return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/hard-break-escape.js
init_react_shim();
var hardBreakEscape = {
    name: "hardBreakEscape",
    tokenize: tokenizeHardBreakEscape
};
function tokenizeHardBreakEscape(effects, ok2, nok) {
    return start;
    function start(code2) {
        effects.enter("hardBreakEscape");
        effects.consume(code2);
        return after;
    }
    function after(code2) {
        if (markdownLineEnding(code2)) {
            effects.exit("hardBreakEscape");
            return ok2(code2);
        }
        return nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/heading-atx.js
init_react_shim();
var headingAtx = {
    name: "headingAtx",
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx
};
function resolveHeadingAtx(events, context) {
    let contentEnd = events.length - 2;
    let contentStart = 3;
    let content3;
    let text4;
    if (events[contentStart][1].type === "whitespace") contentStart += 2;
    if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") contentEnd -= 2;
    if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    if (contentEnd > contentStart) {
        content3 = {
            type: "atxHeadingText",
            start: events[contentStart][1].start,
            end: events[contentEnd][1].end
        };
        text4 = {
            type: "chunkText",
            start: events[contentStart][1].start,
            end: events[contentEnd][1].end,
            contentType: "text"
        };
        splice(events, contentStart, contentEnd - contentStart + 1, [
            [
                "enter",
                content3,
                context
            ],
            [
                "enter",
                text4,
                context
            ],
            [
                "exit",
                text4,
                context
            ],
            [
                "exit",
                content3,
                context
            ]
        ]);
    }
    return events;
}
function tokenizeHeadingAtx(effects, ok2, nok) {
    let size = 0;
    return start;
    function start(code2) {
        effects.enter("atxHeading");
        return before(code2);
    }
    function before(code2) {
        effects.enter("atxHeadingSequence");
        return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
        if (code2 === 35 && size++ < 6) {
            effects.consume(code2);
            return sequenceOpen;
        }
        if (code2 === null || markdownLineEndingOrSpace(code2)) {
            effects.exit("atxHeadingSequence");
            return atBreak(code2);
        }
        return nok(code2);
    }
    function atBreak(code2) {
        if (code2 === 35) {
            effects.enter("atxHeadingSequence");
            return sequenceFurther(code2);
        }
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("atxHeading");
            return ok2(code2);
        }
        if (markdownSpace(code2)) return factorySpace(effects, atBreak, "whitespace")(code2);
        effects.enter("atxHeadingText");
        return data2(code2);
    }
    function sequenceFurther(code2) {
        if (code2 === 35) {
            effects.consume(code2);
            return sequenceFurther;
        }
        effects.exit("atxHeadingSequence");
        return atBreak(code2);
    }
    function data2(code2) {
        if (code2 === null || code2 === 35 || markdownLineEndingOrSpace(code2)) {
            effects.exit("atxHeadingText");
            return atBreak(code2);
        }
        effects.consume(code2);
        return data2;
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-flow.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-html-tag-name@1.2.0/node_modules/micromark-util-html-tag-name/index.js
init_react_shim();
var htmlBlockNames = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "search",
    "section",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul"
];
var htmlRawNames = [
    "pre",
    "script",
    "style",
    "textarea"
];
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-flow.js
var htmlFlow = {
    name: "htmlFlow",
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true
};
var blankLineBefore = {
    tokenize: tokenizeBlankLineBefore,
    partial: true
};
var nonLazyContinuationStart = {
    tokenize: tokenizeNonLazyContinuationStart,
    partial: true
};
function resolveToHtmlFlow(events) {
    let index2 = events.length;
    while(index2--){
        if (events[index2][0] === "enter" && events[index2][1].type === "htmlFlow") break;
    }
    if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
        events[index2][1].start = events[index2 - 2][1].start;
        events[index2 + 1][1].start = events[index2 - 2][1].start;
        events.splice(index2 - 2, 2);
    }
    return events;
}
function tokenizeHtmlFlow(effects, ok2, nok) {
    const self = this;
    let marker;
    let closingTag;
    let buffer2;
    let index2;
    let markerB;
    return start;
    function start(code2) {
        return before(code2);
    }
    function before(code2) {
        effects.enter("htmlFlow");
        effects.enter("htmlFlowData");
        effects.consume(code2);
        return open;
    }
    function open(code2) {
        if (code2 === 33) {
            effects.consume(code2);
            return declarationOpen;
        }
        if (code2 === 47) {
            effects.consume(code2);
            closingTag = true;
            return tagCloseStart;
        }
        if (code2 === 63) {
            effects.consume(code2);
            marker = 3;
            return self.interrupt ? ok2 : continuationDeclarationInside;
        }
        if (asciiAlpha(code2)) {
            effects.consume(code2);
            buffer2 = String.fromCharCode(code2);
            return tagName;
        }
        return nok(code2);
    }
    function declarationOpen(code2) {
        if (code2 === 45) {
            effects.consume(code2);
            marker = 2;
            return commentOpenInside;
        }
        if (code2 === 91) {
            effects.consume(code2);
            marker = 5;
            index2 = 0;
            return cdataOpenInside;
        }
        if (asciiAlpha(code2)) {
            effects.consume(code2);
            marker = 4;
            return self.interrupt ? ok2 : continuationDeclarationInside;
        }
        return nok(code2);
    }
    function commentOpenInside(code2) {
        if (code2 === 45) {
            effects.consume(code2);
            return self.interrupt ? ok2 : continuationDeclarationInside;
        }
        return nok(code2);
    }
    function cdataOpenInside(code2) {
        const value = "CDATA[";
        if (code2 === value.charCodeAt(index2++)) {
            effects.consume(code2);
            if (index2 === value.length) return self.interrupt ? ok2 : continuation;
            return cdataOpenInside;
        }
        return nok(code2);
    }
    function tagCloseStart(code2) {
        if (asciiAlpha(code2)) {
            effects.consume(code2);
            buffer2 = String.fromCharCode(code2);
            return tagName;
        }
        return nok(code2);
    }
    function tagName(code2) {
        if (code2 === null || code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
            const slash = code2 === 47;
            const name = buffer2.toLowerCase();
            if (!slash && !closingTag && htmlRawNames.includes(name)) {
                marker = 1;
                return self.interrupt ? ok2(code2) : continuation(code2);
            }
            if (htmlBlockNames.includes(buffer2.toLowerCase())) {
                marker = 6;
                if (slash) {
                    effects.consume(code2);
                    return basicSelfClosing;
                }
                return self.interrupt ? ok2(code2) : continuation(code2);
            }
            marker = 7;
            return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code2) : closingTag ? completeClosingTagAfter(code2) : completeAttributeNameBefore(code2);
        }
        if (code2 === 45 || asciiAlphanumeric(code2)) {
            effects.consume(code2);
            buffer2 += String.fromCharCode(code2);
            return tagName;
        }
        return nok(code2);
    }
    function basicSelfClosing(code2) {
        if (code2 === 62) {
            effects.consume(code2);
            return self.interrupt ? ok2 : continuation;
        }
        return nok(code2);
    }
    function completeClosingTagAfter(code2) {
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return completeClosingTagAfter;
        }
        return completeEnd(code2);
    }
    function completeAttributeNameBefore(code2) {
        if (code2 === 47) {
            effects.consume(code2);
            return completeEnd;
        }
        if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
            effects.consume(code2);
            return completeAttributeName;
        }
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return completeAttributeNameBefore;
        }
        return completeEnd(code2);
    }
    function completeAttributeName(code2) {
        if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
            effects.consume(code2);
            return completeAttributeName;
        }
        return completeAttributeNameAfter(code2);
    }
    function completeAttributeNameAfter(code2) {
        if (code2 === 61) {
            effects.consume(code2);
            return completeAttributeValueBefore;
        }
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return completeAttributeNameAfter;
        }
        return completeAttributeNameBefore(code2);
    }
    function completeAttributeValueBefore(code2) {
        if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) return nok(code2);
        if (code2 === 34 || code2 === 39) {
            effects.consume(code2);
            markerB = code2;
            return completeAttributeValueQuoted;
        }
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return completeAttributeValueBefore;
        }
        return completeAttributeValueUnquoted(code2);
    }
    function completeAttributeValueQuoted(code2) {
        if (code2 === markerB) {
            effects.consume(code2);
            markerB = null;
            return completeAttributeValueQuotedAfter;
        }
        if (code2 === null || markdownLineEnding(code2)) return nok(code2);
        effects.consume(code2);
        return completeAttributeValueQuoted;
    }
    function completeAttributeValueUnquoted(code2) {
        if (code2 === null || code2 === 34 || code2 === 39 || code2 === 47 || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96 || markdownLineEndingOrSpace(code2)) return completeAttributeNameAfter(code2);
        effects.consume(code2);
        return completeAttributeValueUnquoted;
    }
    function completeAttributeValueQuotedAfter(code2) {
        if (code2 === 47 || code2 === 62 || markdownSpace(code2)) return completeAttributeNameBefore(code2);
        return nok(code2);
    }
    function completeEnd(code2) {
        if (code2 === 62) {
            effects.consume(code2);
            return completeAfter;
        }
        return nok(code2);
    }
    function completeAfter(code2) {
        if (code2 === null || markdownLineEnding(code2)) return continuation(code2);
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return completeAfter;
        }
        return nok(code2);
    }
    function continuation(code2) {
        if (code2 === 45 && marker === 2) {
            effects.consume(code2);
            return continuationCommentInside;
        }
        if (code2 === 60 && marker === 1) {
            effects.consume(code2);
            return continuationRawTagOpen;
        }
        if (code2 === 62 && marker === 4) {
            effects.consume(code2);
            return continuationClose;
        }
        if (code2 === 63 && marker === 3) {
            effects.consume(code2);
            return continuationDeclarationInside;
        }
        if (code2 === 93 && marker === 5) {
            effects.consume(code2);
            return continuationCdataInside;
        }
        if (markdownLineEnding(code2) && (marker === 6 || marker === 7)) {
            effects.exit("htmlFlowData");
            return effects.check(blankLineBefore, continuationAfter, continuationStart)(code2);
        }
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("htmlFlowData");
            return continuationStart(code2);
        }
        effects.consume(code2);
        return continuation;
    }
    function continuationStart(code2) {
        return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code2);
    }
    function continuationStartNonLazy(code2) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return continuationBefore;
    }
    function continuationBefore(code2) {
        if (code2 === null || markdownLineEnding(code2)) return continuationStart(code2);
        effects.enter("htmlFlowData");
        return continuation(code2);
    }
    function continuationCommentInside(code2) {
        if (code2 === 45) {
            effects.consume(code2);
            return continuationDeclarationInside;
        }
        return continuation(code2);
    }
    function continuationRawTagOpen(code2) {
        if (code2 === 47) {
            effects.consume(code2);
            buffer2 = "";
            return continuationRawEndTag;
        }
        return continuation(code2);
    }
    function continuationRawEndTag(code2) {
        if (code2 === 62) {
            const name = buffer2.toLowerCase();
            if (htmlRawNames.includes(name)) {
                effects.consume(code2);
                return continuationClose;
            }
            return continuation(code2);
        }
        if (asciiAlpha(code2) && buffer2.length < 8) {
            effects.consume(code2);
            buffer2 += String.fromCharCode(code2);
            return continuationRawEndTag;
        }
        return continuation(code2);
    }
    function continuationCdataInside(code2) {
        if (code2 === 93) {
            effects.consume(code2);
            return continuationDeclarationInside;
        }
        return continuation(code2);
    }
    function continuationDeclarationInside(code2) {
        if (code2 === 62) {
            effects.consume(code2);
            return continuationClose;
        }
        if (code2 === 45 && marker === 2) {
            effects.consume(code2);
            return continuationDeclarationInside;
        }
        return continuation(code2);
    }
    function continuationClose(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("htmlFlowData");
            return continuationAfter(code2);
        }
        effects.consume(code2);
        return continuationClose;
    }
    function continuationAfter(code2) {
        effects.exit("htmlFlow");
        return ok2(code2);
    }
}
function tokenizeNonLazyContinuationStart(effects, ok2, nok) {
    const self = this;
    return start;
    function start(code2) {
        if (markdownLineEnding(code2)) {
            effects.enter("lineEnding");
            effects.consume(code2);
            effects.exit("lineEnding");
            return after;
        }
        return nok(code2);
    }
    function after(code2) {
        return self.parser.lazy[self.now().line] ? nok(code2) : ok2(code2);
    }
}
function tokenizeBlankLineBefore(effects, ok2, nok) {
    return start;
    function start(code2) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return effects.attempt(blankLine, ok2, nok);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-text.js
init_react_shim();
var htmlText = {
    name: "htmlText",
    tokenize: tokenizeHtmlText
};
function tokenizeHtmlText(effects, ok2, nok) {
    const self = this;
    let marker;
    let index2;
    let returnState;
    return start;
    function start(code2) {
        effects.enter("htmlText");
        effects.enter("htmlTextData");
        effects.consume(code2);
        return open;
    }
    function open(code2) {
        if (code2 === 33) {
            effects.consume(code2);
            return declarationOpen;
        }
        if (code2 === 47) {
            effects.consume(code2);
            return tagCloseStart;
        }
        if (code2 === 63) {
            effects.consume(code2);
            return instruction;
        }
        if (asciiAlpha(code2)) {
            effects.consume(code2);
            return tagOpen;
        }
        return nok(code2);
    }
    function declarationOpen(code2) {
        if (code2 === 45) {
            effects.consume(code2);
            return commentOpenInside;
        }
        if (code2 === 91) {
            effects.consume(code2);
            index2 = 0;
            return cdataOpenInside;
        }
        if (asciiAlpha(code2)) {
            effects.consume(code2);
            return declaration;
        }
        return nok(code2);
    }
    function commentOpenInside(code2) {
        if (code2 === 45) {
            effects.consume(code2);
            return commentEnd;
        }
        return nok(code2);
    }
    function comment(code2) {
        if (code2 === null) return nok(code2);
        if (code2 === 45) {
            effects.consume(code2);
            return commentClose;
        }
        if (markdownLineEnding(code2)) {
            returnState = comment;
            return lineEndingBefore(code2);
        }
        effects.consume(code2);
        return comment;
    }
    function commentClose(code2) {
        if (code2 === 45) {
            effects.consume(code2);
            return commentEnd;
        }
        return comment(code2);
    }
    function commentEnd(code2) {
        return code2 === 62 ? end(code2) : code2 === 45 ? commentClose(code2) : comment(code2);
    }
    function cdataOpenInside(code2) {
        const value = "CDATA[";
        if (code2 === value.charCodeAt(index2++)) {
            effects.consume(code2);
            return index2 === value.length ? cdata : cdataOpenInside;
        }
        return nok(code2);
    }
    function cdata(code2) {
        if (code2 === null) return nok(code2);
        if (code2 === 93) {
            effects.consume(code2);
            return cdataClose;
        }
        if (markdownLineEnding(code2)) {
            returnState = cdata;
            return lineEndingBefore(code2);
        }
        effects.consume(code2);
        return cdata;
    }
    function cdataClose(code2) {
        if (code2 === 93) {
            effects.consume(code2);
            return cdataEnd;
        }
        return cdata(code2);
    }
    function cdataEnd(code2) {
        if (code2 === 62) return end(code2);
        if (code2 === 93) {
            effects.consume(code2);
            return cdataEnd;
        }
        return cdata(code2);
    }
    function declaration(code2) {
        if (code2 === null || code2 === 62) return end(code2);
        if (markdownLineEnding(code2)) {
            returnState = declaration;
            return lineEndingBefore(code2);
        }
        effects.consume(code2);
        return declaration;
    }
    function instruction(code2) {
        if (code2 === null) return nok(code2);
        if (code2 === 63) {
            effects.consume(code2);
            return instructionClose;
        }
        if (markdownLineEnding(code2)) {
            returnState = instruction;
            return lineEndingBefore(code2);
        }
        effects.consume(code2);
        return instruction;
    }
    function instructionClose(code2) {
        return code2 === 62 ? end(code2) : instruction(code2);
    }
    function tagCloseStart(code2) {
        if (asciiAlpha(code2)) {
            effects.consume(code2);
            return tagClose;
        }
        return nok(code2);
    }
    function tagClose(code2) {
        if (code2 === 45 || asciiAlphanumeric(code2)) {
            effects.consume(code2);
            return tagClose;
        }
        return tagCloseBetween(code2);
    }
    function tagCloseBetween(code2) {
        if (markdownLineEnding(code2)) {
            returnState = tagCloseBetween;
            return lineEndingBefore(code2);
        }
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return tagCloseBetween;
        }
        return end(code2);
    }
    function tagOpen(code2) {
        if (code2 === 45 || asciiAlphanumeric(code2)) {
            effects.consume(code2);
            return tagOpen;
        }
        if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) return tagOpenBetween(code2);
        return nok(code2);
    }
    function tagOpenBetween(code2) {
        if (code2 === 47) {
            effects.consume(code2);
            return end;
        }
        if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
            effects.consume(code2);
            return tagOpenAttributeName;
        }
        if (markdownLineEnding(code2)) {
            returnState = tagOpenBetween;
            return lineEndingBefore(code2);
        }
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return tagOpenBetween;
        }
        return end(code2);
    }
    function tagOpenAttributeName(code2) {
        if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
            effects.consume(code2);
            return tagOpenAttributeName;
        }
        return tagOpenAttributeNameAfter(code2);
    }
    function tagOpenAttributeNameAfter(code2) {
        if (code2 === 61) {
            effects.consume(code2);
            return tagOpenAttributeValueBefore;
        }
        if (markdownLineEnding(code2)) {
            returnState = tagOpenAttributeNameAfter;
            return lineEndingBefore(code2);
        }
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return tagOpenAttributeNameAfter;
        }
        return tagOpenBetween(code2);
    }
    function tagOpenAttributeValueBefore(code2) {
        if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) return nok(code2);
        if (code2 === 34 || code2 === 39) {
            effects.consume(code2);
            marker = code2;
            return tagOpenAttributeValueQuoted;
        }
        if (markdownLineEnding(code2)) {
            returnState = tagOpenAttributeValueBefore;
            return lineEndingBefore(code2);
        }
        if (markdownSpace(code2)) {
            effects.consume(code2);
            return tagOpenAttributeValueBefore;
        }
        effects.consume(code2);
        return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuoted(code2) {
        if (code2 === marker) {
            effects.consume(code2);
            marker = void 0;
            return tagOpenAttributeValueQuotedAfter;
        }
        if (code2 === null) return nok(code2);
        if (markdownLineEnding(code2)) {
            returnState = tagOpenAttributeValueQuoted;
            return lineEndingBefore(code2);
        }
        effects.consume(code2);
        return tagOpenAttributeValueQuoted;
    }
    function tagOpenAttributeValueUnquoted(code2) {
        if (code2 === null || code2 === 34 || code2 === 39 || code2 === 60 || code2 === 61 || code2 === 96) return nok(code2);
        if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) return tagOpenBetween(code2);
        effects.consume(code2);
        return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuotedAfter(code2) {
        if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) return tagOpenBetween(code2);
        return nok(code2);
    }
    function end(code2) {
        if (code2 === 62) {
            effects.consume(code2);
            effects.exit("htmlTextData");
            effects.exit("htmlText");
            return ok2;
        }
        return nok(code2);
    }
    function lineEndingBefore(code2) {
        effects.exit("htmlTextData");
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return lineEndingAfter;
    }
    function lineEndingAfter(code2) {
        return markdownSpace(code2) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2) : lineEndingAfterPrefix(code2);
    }
    function lineEndingAfterPrefix(code2) {
        effects.enter("htmlTextData");
        return returnState(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-end.js
init_react_shim();
var labelEnd = {
    name: "labelEnd",
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd
};
var resourceConstruct = {
    tokenize: tokenizeResource
};
var referenceFullConstruct = {
    tokenize: tokenizeReferenceFull
};
var referenceCollapsedConstruct = {
    tokenize: tokenizeReferenceCollapsed
};
function resolveAllLabelEnd(events) {
    let index2 = -1;
    while(++index2 < events.length){
        const token = events[index2][1];
        if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
            events.splice(index2 + 1, token.type === "labelImage" ? 4 : 2);
            token.type = "data";
            index2++;
        }
    }
    return events;
}
function resolveToLabelEnd(events, context) {
    let index2 = events.length;
    let offset = 0;
    let token;
    let open;
    let close;
    let media;
    while(index2--){
        token = events[index2][1];
        if (open) {
            if (token.type === "link" || token.type === "labelLink" && token._inactive) break;
            if (events[index2][0] === "enter" && token.type === "labelLink") token._inactive = true;
        } else if (close) {
            if (events[index2][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
                open = index2;
                if (token.type !== "labelLink") {
                    offset = 2;
                    break;
                }
            }
        } else if (token.type === "labelEnd") close = index2;
    }
    const group = {
        type: events[open][1].type === "labelLink" ? "link" : "image",
        start: Object.assign({}, events[open][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
    };
    const label = {
        type: "label",
        start: Object.assign({}, events[open][1].start),
        end: Object.assign({}, events[close][1].end)
    };
    const text4 = {
        type: "labelText",
        start: Object.assign({}, events[open + offset + 2][1].end),
        end: Object.assign({}, events[close - 2][1].start)
    };
    media = [
        [
            "enter",
            group,
            context
        ],
        [
            "enter",
            label,
            context
        ]
    ];
    media = push(media, events.slice(open + 1, open + offset + 3));
    media = push(media, [
        [
            "enter",
            text4,
            context
        ]
    ]);
    media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));
    media = push(media, [
        [
            "exit",
            text4,
            context
        ],
        events[close - 2],
        events[close - 1],
        [
            "exit",
            label,
            context
        ]
    ]);
    media = push(media, events.slice(close + 1));
    media = push(media, [
        [
            "exit",
            group,
            context
        ]
    ]);
    splice(events, open, events.length, media);
    return events;
}
function tokenizeLabelEnd(effects, ok2, nok) {
    const self = this;
    let index2 = self.events.length;
    let labelStart;
    let defined2;
    while(index2--)if ((self.events[index2][1].type === "labelImage" || self.events[index2][1].type === "labelLink") && !self.events[index2][1]._balanced) {
        labelStart = self.events[index2][1];
        break;
    }
    return start;
    function start(code2) {
        if (!labelStart) return nok(code2);
        if (labelStart._inactive) return labelEndNok(code2);
        defined2 = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({
            start: labelStart.end,
            end: self.now()
        })));
        effects.enter("labelEnd");
        effects.enter("labelMarker");
        effects.consume(code2);
        effects.exit("labelMarker");
        effects.exit("labelEnd");
        return after;
    }
    function after(code2) {
        if (code2 === 40) return effects.attempt(resourceConstruct, labelEndOk, defined2 ? labelEndOk : labelEndNok)(code2);
        if (code2 === 91) return effects.attempt(referenceFullConstruct, labelEndOk, defined2 ? referenceNotFull : labelEndNok)(code2);
        return defined2 ? labelEndOk(code2) : labelEndNok(code2);
    }
    function referenceNotFull(code2) {
        return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code2);
    }
    function labelEndOk(code2) {
        return ok2(code2);
    }
    function labelEndNok(code2) {
        labelStart._balanced = true;
        return nok(code2);
    }
}
function tokenizeResource(effects, ok2, nok) {
    return resourceStart;
    function resourceStart(code2) {
        effects.enter("resource");
        effects.enter("resourceMarker");
        effects.consume(code2);
        effects.exit("resourceMarker");
        return resourceBefore;
    }
    function resourceBefore(code2) {
        return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceOpen)(code2) : resourceOpen(code2);
    }
    function resourceOpen(code2) {
        if (code2 === 41) return resourceEnd(code2);
        return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code2);
    }
    function resourceDestinationAfter(code2) {
        return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceBetween)(code2) : resourceEnd(code2);
    }
    function resourceDestinationMissing(code2) {
        return nok(code2);
    }
    function resourceBetween(code2) {
        if (code2 === 34 || code2 === 39 || code2 === 40) return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code2);
        return resourceEnd(code2);
    }
    function resourceTitleAfter(code2) {
        return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceEnd)(code2) : resourceEnd(code2);
    }
    function resourceEnd(code2) {
        if (code2 === 41) {
            effects.enter("resourceMarker");
            effects.consume(code2);
            effects.exit("resourceMarker");
            effects.exit("resource");
            return ok2;
        }
        return nok(code2);
    }
}
function tokenizeReferenceFull(effects, ok2, nok) {
    const self = this;
    return referenceFull;
    function referenceFull(code2) {
        return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code2);
    }
    function referenceFullAfter(code2) {
        return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok2(code2) : nok(code2);
    }
    function referenceFullMissing(code2) {
        return nok(code2);
    }
}
function tokenizeReferenceCollapsed(effects, ok2, nok) {
    return referenceCollapsedStart;
    function referenceCollapsedStart(code2) {
        effects.enter("reference");
        effects.enter("referenceMarker");
        effects.consume(code2);
        effects.exit("referenceMarker");
        return referenceCollapsedOpen;
    }
    function referenceCollapsedOpen(code2) {
        if (code2 === 93) {
            effects.enter("referenceMarker");
            effects.consume(code2);
            effects.exit("referenceMarker");
            effects.exit("reference");
            return ok2;
        }
        return nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-start-image.js
init_react_shim();
var labelStartImage = {
    name: "labelStartImage",
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartImage(effects, ok2, nok) {
    const self = this;
    return start;
    function start(code2) {
        effects.enter("labelImage");
        effects.enter("labelImageMarker");
        effects.consume(code2);
        effects.exit("labelImageMarker");
        return open;
    }
    function open(code2) {
        if (code2 === 91) {
            effects.enter("labelMarker");
            effects.consume(code2);
            effects.exit("labelMarker");
            effects.exit("labelImage");
            return after;
        }
        return nok(code2);
    }
    function after(code2) {
        return code2 === 94 && "_hiddenFootnoteSupport" in self.parser.constructs ? nok(code2) : ok2(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-start-link.js
init_react_shim();
var labelStartLink = {
    name: "labelStartLink",
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartLink(effects, ok2, nok) {
    const self = this;
    return start;
    function start(code2) {
        effects.enter("labelLink");
        effects.enter("labelMarker");
        effects.consume(code2);
        effects.exit("labelMarker");
        effects.exit("labelLink");
        return after;
    }
    function after(code2) {
        return code2 === 94 && "_hiddenFootnoteSupport" in self.parser.constructs ? nok(code2) : ok2(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/line-ending.js
init_react_shim();
var lineEnding = {
    name: "lineEnding",
    tokenize: tokenizeLineEnding
};
function tokenizeLineEnding(effects, ok2) {
    return start;
    function start(code2) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return factorySpace(effects, ok2, "linePrefix");
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/list.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/thematic-break.js
init_react_shim();
var thematicBreak = {
    name: "thematicBreak",
    tokenize: tokenizeThematicBreak
};
function tokenizeThematicBreak(effects, ok2, nok) {
    let size = 0;
    let marker;
    return start;
    function start(code2) {
        effects.enter("thematicBreak");
        return before(code2);
    }
    function before(code2) {
        marker = code2;
        return atBreak(code2);
    }
    function atBreak(code2) {
        if (code2 === marker) {
            effects.enter("thematicBreakSequence");
            return sequence(code2);
        }
        if (size >= 3 && (code2 === null || markdownLineEnding(code2))) {
            effects.exit("thematicBreak");
            return ok2(code2);
        }
        return nok(code2);
    }
    function sequence(code2) {
        if (code2 === marker) {
            effects.consume(code2);
            size++;
            return sequence;
        }
        effects.exit("thematicBreakSequence");
        return markdownSpace(code2) ? factorySpace(effects, atBreak, "whitespace")(code2) : atBreak(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/list.js
var list = {
    name: "list",
    tokenize: tokenizeListStart,
    continuation: {
        tokenize: tokenizeListContinuation
    },
    exit: tokenizeListEnd
};
var listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true
};
var indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true
};
function tokenizeListStart(effects, ok2, nok) {
    const self = this;
    const tail = self.events[self.events.length - 1];
    let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    let size = 0;
    return start;
    function start(code2) {
        const kind = self.containerState.type || (code2 === 42 || code2 === 43 || code2 === 45 ? "listUnordered" : "listOrdered");
        if (kind === "listUnordered" ? !self.containerState.marker || code2 === self.containerState.marker : asciiDigit(code2)) {
            if (!self.containerState.type) {
                self.containerState.type = kind;
                effects.enter(kind, {
                    _container: true
                });
            }
            if (kind === "listUnordered") {
                effects.enter("listItemPrefix");
                return code2 === 42 || code2 === 45 ? effects.check(thematicBreak, nok, atMarker)(code2) : atMarker(code2);
            }
            if (!self.interrupt || code2 === 49) {
                effects.enter("listItemPrefix");
                effects.enter("listItemValue");
                return inside(code2);
            }
        }
        return nok(code2);
    }
    function inside(code2) {
        if (asciiDigit(code2) && ++size < 10) {
            effects.consume(code2);
            return inside;
        }
        if ((!self.interrupt || size < 2) && (self.containerState.marker ? code2 === self.containerState.marker : code2 === 41 || code2 === 46)) {
            effects.exit("listItemValue");
            return atMarker(code2);
        }
        return nok(code2);
    }
    function atMarker(code2) {
        effects.enter("listItemMarker");
        effects.consume(code2);
        effects.exit("listItemMarker");
        self.containerState.marker = self.containerState.marker || code2;
        return effects.check(blankLine, // Can’t be empty when interrupting.
        self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));
    }
    function onBlank(code2) {
        self.containerState.initialBlankLine = true;
        initialSize++;
        return endOfPrefix(code2);
    }
    function otherPrefix(code2) {
        if (markdownSpace(code2)) {
            effects.enter("listItemPrefixWhitespace");
            effects.consume(code2);
            effects.exit("listItemPrefixWhitespace");
            return endOfPrefix;
        }
        return nok(code2);
    }
    function endOfPrefix(code2) {
        self.containerState.size = initialSize + self.sliceSerialize(effects.exit("listItemPrefix"), true).length;
        return ok2(code2);
    }
}
function tokenizeListContinuation(effects, ok2, nok) {
    const self = this;
    self.containerState._closeFlow = void 0;
    return effects.check(blankLine, onBlank, notBlank);
    function onBlank(code2) {
        self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;
        return factorySpace(effects, ok2, "listItemIndent", self.containerState.size + 1)(code2);
    }
    function notBlank(code2) {
        if (self.containerState.furtherBlankLines || !markdownSpace(code2)) {
            self.containerState.furtherBlankLines = void 0;
            self.containerState.initialBlankLine = void 0;
            return notInCurrentItem(code2);
        }
        self.containerState.furtherBlankLines = void 0;
        self.containerState.initialBlankLine = void 0;
        return effects.attempt(indentConstruct, ok2, notInCurrentItem)(code2);
    }
    function notInCurrentItem(code2) {
        self.containerState._closeFlow = true;
        self.interrupt = void 0;
        return factorySpace(effects, effects.attempt(list, ok2, nok), "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2);
    }
}
function tokenizeIndent(effects, ok2, nok) {
    const self = this;
    return factorySpace(effects, afterPrefix, "listItemIndent", self.containerState.size + 1);
    function afterPrefix(code2) {
        const tail = self.events[self.events.length - 1];
        return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok2(code2) : nok(code2);
    }
}
function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok2, nok) {
    const self = this;
    return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 5);
    function afterPrefix(code2) {
        const tail = self.events[self.events.length - 1];
        return !markdownSpace(code2) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok2(code2) : nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/setext-underline.js
init_react_shim();
var setextUnderline = {
    name: "setextUnderline",
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline
};
function resolveToSetextUnderline(events, context) {
    let index2 = events.length;
    let content3;
    let text4;
    let definition2;
    while(index2--)if (events[index2][0] === "enter") {
        if (events[index2][1].type === "content") {
            content3 = index2;
            break;
        }
        if (events[index2][1].type === "paragraph") text4 = index2;
    } else {
        if (events[index2][1].type === "content") events.splice(index2, 1);
        if (!definition2 && events[index2][1].type === "definition") definition2 = index2;
    }
    const heading = {
        type: "setextHeading",
        start: Object.assign({}, events[text4][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
    };
    events[text4][1].type = "setextHeadingText";
    if (definition2) {
        events.splice(text4, 0, [
            "enter",
            heading,
            context
        ]);
        events.splice(definition2 + 1, 0, [
            "exit",
            events[content3][1],
            context
        ]);
        events[content3][1].end = Object.assign({}, events[definition2][1].end);
    } else events[content3][1] = heading;
    events.push([
        "exit",
        heading,
        context
    ]);
    return events;
}
function tokenizeSetextUnderline(effects, ok2, nok) {
    const self = this;
    let marker;
    return start;
    function start(code2) {
        let index2 = self.events.length;
        let paragraph;
        while(index2--)if (self.events[index2][1].type !== "lineEnding" && self.events[index2][1].type !== "linePrefix" && self.events[index2][1].type !== "content") {
            paragraph = self.events[index2][1].type === "paragraph";
            break;
        }
        if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
            effects.enter("setextHeadingLine");
            marker = code2;
            return before(code2);
        }
        return nok(code2);
    }
    function before(code2) {
        effects.enter("setextHeadingLineSequence");
        return inside(code2);
    }
    function inside(code2) {
        if (code2 === marker) {
            effects.consume(code2);
            return inside;
        }
        effects.exit("setextHeadingLineSequence");
        return markdownSpace(code2) ? factorySpace(effects, after, "lineSuffix")(code2) : after(code2);
    }
    function after(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("setextHeadingLine");
            return ok2(code2);
        }
        return nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-extension-gfm-footnote@1.1.2/node_modules/micromark-extension-gfm-footnote/lib/syntax.js
var indent = {
    tokenize: tokenizeIndent2,
    partial: true
};
function gfmFootnote() {
    return {
        document: {
            [91]: {
                tokenize: tokenizeDefinitionStart,
                continuation: {
                    tokenize: tokenizeDefinitionContinuation
                },
                exit: gfmFootnoteDefinitionEnd
            }
        },
        text: {
            [91]: {
                tokenize: tokenizeGfmFootnoteCall
            },
            [93]: {
                add: "after",
                tokenize: tokenizePotentialGfmFootnoteCall,
                resolveTo: resolveToPotentialGfmFootnoteCall
            }
        }
    };
}
function tokenizePotentialGfmFootnoteCall(effects, ok2, nok) {
    const self = this;
    let index2 = self.events.length;
    const defined2 = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
    let labelStart;
    while(index2--){
        const token = self.events[index2][1];
        if (token.type === "labelImage") {
            labelStart = token;
            break;
        }
        if (token.type === "gfmFootnoteCall" || token.type === "labelLink" || token.type === "label" || token.type === "image" || token.type === "link") break;
    }
    return start;
    function start(code2) {
        if (!labelStart || !labelStart._balanced) return nok(code2);
        const id = normalizeIdentifier(self.sliceSerialize({
            start: labelStart.end,
            end: self.now()
        }));
        if (id.codePointAt(0) !== 94 || !defined2.includes(id.slice(1))) return nok(code2);
        effects.enter("gfmFootnoteCallLabelMarker");
        effects.consume(code2);
        effects.exit("gfmFootnoteCallLabelMarker");
        return ok2(code2);
    }
}
function resolveToPotentialGfmFootnoteCall(events, context) {
    let index2 = events.length;
    let labelStart;
    while(index2--)if (events[index2][1].type === "labelImage" && events[index2][0] === "enter") {
        labelStart = events[index2][1];
        break;
    }
    events[index2 + 1][1].type = "data";
    events[index2 + 3][1].type = "gfmFootnoteCallLabelMarker";
    const call = {
        type: "gfmFootnoteCall",
        start: Object.assign({}, events[index2 + 3][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
    };
    const marker = {
        type: "gfmFootnoteCallMarker",
        start: Object.assign({}, events[index2 + 3][1].end),
        end: Object.assign({}, events[index2 + 3][1].end)
    };
    marker.end.column++;
    marker.end.offset++;
    marker.end._bufferIndex++;
    const string3 = {
        type: "gfmFootnoteCallString",
        start: Object.assign({}, marker.end),
        end: Object.assign({}, events[events.length - 1][1].start)
    };
    const chunk = {
        type: "chunkString",
        contentType: "string",
        start: Object.assign({}, string3.start),
        end: Object.assign({}, string3.end)
    };
    const replacement = [
        // Take the `labelImageMarker` (now `data`, the `!`)
        events[index2 + 1],
        events[index2 + 2],
        [
            "enter",
            call,
            context
        ],
        // The `[`
        events[index2 + 3],
        events[index2 + 4],
        // The `^`.
        [
            "enter",
            marker,
            context
        ],
        [
            "exit",
            marker,
            context
        ],
        // Everything in between.
        [
            "enter",
            string3,
            context
        ],
        [
            "enter",
            chunk,
            context
        ],
        [
            "exit",
            chunk,
            context
        ],
        [
            "exit",
            string3,
            context
        ],
        // The ending (`]`, properly parsed and labelled).
        events[events.length - 2],
        events[events.length - 1],
        [
            "exit",
            call,
            context
        ]
    ];
    events.splice(index2, events.length - index2 + 1, ...replacement);
    return events;
}
function tokenizeGfmFootnoteCall(effects, ok2, nok) {
    const self = this;
    const defined2 = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
    let size = 0;
    let data2;
    return start;
    function start(code2) {
        effects.enter("gfmFootnoteCall");
        effects.enter("gfmFootnoteCallLabelMarker");
        effects.consume(code2);
        effects.exit("gfmFootnoteCallLabelMarker");
        return callStart;
    }
    function callStart(code2) {
        if (code2 !== 94) return nok(code2);
        effects.enter("gfmFootnoteCallMarker");
        effects.consume(code2);
        effects.exit("gfmFootnoteCallMarker");
        effects.enter("gfmFootnoteCallString");
        effects.enter("chunkString").contentType = "string";
        return callData;
    }
    function callData(code2) {
        if (// Too long.
        size > 999 || // Closing brace with nothing.
        code2 === 93 && !data2 || // Space or tab is not supported by GFM for some reason.
        // `\n` and `[` not being supported makes sense.
        code2 === null || code2 === 91 || markdownLineEndingOrSpace(code2)) return nok(code2);
        if (code2 === 93) {
            effects.exit("chunkString");
            const token = effects.exit("gfmFootnoteCallString");
            if (!defined2.includes(normalizeIdentifier(self.sliceSerialize(token)))) return nok(code2);
            effects.enter("gfmFootnoteCallLabelMarker");
            effects.consume(code2);
            effects.exit("gfmFootnoteCallLabelMarker");
            effects.exit("gfmFootnoteCall");
            return ok2;
        }
        if (!markdownLineEndingOrSpace(code2)) data2 = true;
        size++;
        effects.consume(code2);
        return code2 === 92 ? callEscape : callData;
    }
    function callEscape(code2) {
        if (code2 === 91 || code2 === 92 || code2 === 93) {
            effects.consume(code2);
            size++;
            return callData;
        }
        return callData(code2);
    }
}
function tokenizeDefinitionStart(effects, ok2, nok) {
    const self = this;
    const defined2 = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
    let identifier;
    let size = 0;
    let data2;
    return start;
    function start(code2) {
        effects.enter("gfmFootnoteDefinition")._container = true;
        effects.enter("gfmFootnoteDefinitionLabel");
        effects.enter("gfmFootnoteDefinitionLabelMarker");
        effects.consume(code2);
        effects.exit("gfmFootnoteDefinitionLabelMarker");
        return labelAtMarker;
    }
    function labelAtMarker(code2) {
        if (code2 === 94) {
            effects.enter("gfmFootnoteDefinitionMarker");
            effects.consume(code2);
            effects.exit("gfmFootnoteDefinitionMarker");
            effects.enter("gfmFootnoteDefinitionLabelString");
            effects.enter("chunkString").contentType = "string";
            return labelInside;
        }
        return nok(code2);
    }
    function labelInside(code2) {
        if (// Too long.
        size > 999 || // Closing brace with nothing.
        code2 === 93 && !data2 || // Space or tab is not supported by GFM for some reason.
        // `\n` and `[` not being supported makes sense.
        code2 === null || code2 === 91 || markdownLineEndingOrSpace(code2)) return nok(code2);
        if (code2 === 93) {
            effects.exit("chunkString");
            const token = effects.exit("gfmFootnoteDefinitionLabelString");
            identifier = normalizeIdentifier(self.sliceSerialize(token));
            effects.enter("gfmFootnoteDefinitionLabelMarker");
            effects.consume(code2);
            effects.exit("gfmFootnoteDefinitionLabelMarker");
            effects.exit("gfmFootnoteDefinitionLabel");
            return labelAfter;
        }
        if (!markdownLineEndingOrSpace(code2)) data2 = true;
        size++;
        effects.consume(code2);
        return code2 === 92 ? labelEscape : labelInside;
    }
    function labelEscape(code2) {
        if (code2 === 91 || code2 === 92 || code2 === 93) {
            effects.consume(code2);
            size++;
            return labelInside;
        }
        return labelInside(code2);
    }
    function labelAfter(code2) {
        if (code2 === 58) {
            effects.enter("definitionMarker");
            effects.consume(code2);
            effects.exit("definitionMarker");
            if (!defined2.includes(identifier)) defined2.push(identifier);
            return factorySpace(effects, whitespaceAfter, "gfmFootnoteDefinitionWhitespace");
        }
        return nok(code2);
    }
    function whitespaceAfter(code2) {
        return ok2(code2);
    }
}
function tokenizeDefinitionContinuation(effects, ok2, nok) {
    return effects.check(blankLine, ok2, effects.attempt(indent, ok2, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
    effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent2(effects, ok2, nok) {
    const self = this;
    return factorySpace(effects, afterPrefix, "gfmFootnoteDefinitionIndent", 5);
    function afterPrefix(code2) {
        const tail = self.events[self.events.length - 1];
        return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok2(code2) : nok(code2);
    }
}
// ../../node_modules/.pnpm/micromark-extension-gfm-strikethrough@1.0.7/node_modules/micromark-extension-gfm-strikethrough/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-extension-gfm-strikethrough@1.0.7/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js
init_react_shim();
function gfmStrikethrough(options) {
    const options_ = options || {};
    let single = options_.singleTilde;
    const tokenizer = {
        tokenize: tokenizeStrikethrough,
        resolveAll: resolveAllStrikethrough
    };
    if (single === null || single === void 0) single = true;
    return {
        text: {
            [126]: tokenizer
        },
        insideSpan: {
            null: [
                tokenizer
            ]
        },
        attentionMarkers: {
            null: [
                126
            ]
        }
    };
    function resolveAllStrikethrough(events, context) {
        let index2 = -1;
        while(++index2 < events.length)if (events[index2][0] === "enter" && events[index2][1].type === "strikethroughSequenceTemporary" && events[index2][1]._close) {
            let open = index2;
            while(open--)if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && // If the sizes are the same:
            events[index2][1].end.offset - events[index2][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
                events[index2][1].type = "strikethroughSequence";
                events[open][1].type = "strikethroughSequence";
                const strikethrough = {
                    type: "strikethrough",
                    start: Object.assign({}, events[open][1].start),
                    end: Object.assign({}, events[index2][1].end)
                };
                const text4 = {
                    type: "strikethroughText",
                    start: Object.assign({}, events[open][1].end),
                    end: Object.assign({}, events[index2][1].start)
                };
                const nextEvents = [
                    [
                        "enter",
                        strikethrough,
                        context
                    ],
                    [
                        "enter",
                        events[open][1],
                        context
                    ],
                    [
                        "exit",
                        events[open][1],
                        context
                    ],
                    [
                        "enter",
                        text4,
                        context
                    ]
                ];
                const insideSpan2 = context.parser.constructs.insideSpan.null;
                if (insideSpan2) splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan2, events.slice(open + 1, index2), context));
                splice(nextEvents, nextEvents.length, 0, [
                    [
                        "exit",
                        text4,
                        context
                    ],
                    [
                        "enter",
                        events[index2][1],
                        context
                    ],
                    [
                        "exit",
                        events[index2][1],
                        context
                    ],
                    [
                        "exit",
                        strikethrough,
                        context
                    ]
                ]);
                splice(events, open - 1, index2 - open + 3, nextEvents);
                index2 = open + nextEvents.length - 2;
                break;
            }
        }
        index2 = -1;
        while(++index2 < events.length)if (events[index2][1].type === "strikethroughSequenceTemporary") events[index2][1].type = "data";
        return events;
    }
    function tokenizeStrikethrough(effects, ok2, nok) {
        const previous3 = this.previous;
        const events = this.events;
        let size = 0;
        return start;
        function start(code2) {
            if (previous3 === 126 && events[events.length - 1][1].type !== "characterEscape") return nok(code2);
            effects.enter("strikethroughSequenceTemporary");
            return more(code2);
        }
        function more(code2) {
            const before = classifyCharacter(previous3);
            if (code2 === 126) {
                if (size > 1) return nok(code2);
                effects.consume(code2);
                size++;
                return more;
            }
            if (size < 2 && !single) return nok(code2);
            const token = effects.exit("strikethroughSequenceTemporary");
            const after = classifyCharacter(code2);
            token._open = !after || after === 2 && Boolean(before);
            token._close = !before || before === 2 && Boolean(after);
            return ok2(code2);
        }
    }
}
// ../../node_modules/.pnpm/micromark-extension-gfm-table@1.0.7/node_modules/micromark-extension-gfm-table/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-extension-gfm-table@1.0.7/node_modules/micromark-extension-gfm-table/lib/syntax.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-extension-gfm-table@1.0.7/node_modules/micromark-extension-gfm-table/lib/edit-map.js
init_react_shim();
var EditMap = class {
    /**
   * Create a new edit map.
   */ constructor(){
        this.map = [];
    }
    /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {void}
   */ add(index2, remove, add) {
        addImpl(this, index2, remove, add);
    }
    // To do: not used here.
    // /**
    //  * Create an edit: but insert `add` before existing additions.
    //  *
    //  * @param {number} index
    //  * @param {number} remove
    //  * @param {Array<Event>} add
    //  * @returns {void}
    //  */
    // addBefore(index, remove, add) {
    //   addImpl(this, index, remove, add, true)
    // }
    /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {void}
   */ consume(events) {
        this.map.sort((a, b)=>a[0] - b[0]);
        if (this.map.length === 0) return;
        let index2 = this.map.length;
        const vecs = [];
        while(index2 > 0){
            index2 -= 1;
            vecs.push(events.slice(this.map[index2][0] + this.map[index2][1]));
            vecs.push(this.map[index2][2]);
            events.length = this.map[index2][0];
        }
        vecs.push([
            ...events
        ]);
        events.length = 0;
        let slice = vecs.pop();
        while(slice){
            events.push(...slice);
            slice = vecs.pop();
        }
        this.map.length = 0;
    }
};
function addImpl(editMap, at, remove, add) {
    let index2 = 0;
    if (remove === 0 && add.length === 0) return;
    while(index2 < editMap.map.length){
        if (editMap.map[index2][0] === at) {
            editMap.map[index2][1] += remove;
            editMap.map[index2][2].push(...add);
            return;
        }
        index2 += 1;
    }
    editMap.map.push([
        at,
        remove,
        add
    ]);
}
// ../../node_modules/.pnpm/micromark-extension-gfm-table@1.0.7/node_modules/micromark-extension-gfm-table/lib/infer.js
init_react_shim();
function gfmTableAlign(events, index2) {
    let inDelimiterRow = false;
    const align = [];
    while(index2 < events.length){
        const event = events[index2];
        if (inDelimiterRow) {
            if (event[0] === "enter") {
                if (event[1].type === "tableContent") align.push(events[index2 + 1][1].type === "tableDelimiterMarker" ? "left" : "none");
            } else if (event[1].type === "tableContent") {
                if (events[index2 - 1][1].type === "tableDelimiterMarker") {
                    const alignIndex = align.length - 1;
                    align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
                }
            } else if (event[1].type === "tableDelimiterRow") break;
        } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") inDelimiterRow = true;
        index2 += 1;
    }
    return align;
}
// ../../node_modules/.pnpm/micromark-extension-gfm-table@1.0.7/node_modules/micromark-extension-gfm-table/lib/syntax.js
var gfmTable = {
    flow: {
        null: {
            tokenize: tokenizeTable,
            resolveAll: resolveTable
        }
    }
};
function tokenizeTable(effects, ok2, nok) {
    const self = this;
    let size = 0;
    let sizeB = 0;
    let seen;
    return start;
    function start(code2) {
        let index2 = self.events.length - 1;
        while(index2 > -1){
            const type = self.events[index2][1].type;
            if (type === "lineEnding" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
            type === "linePrefix") index2--;
            else break;
        }
        const tail = index2 > -1 ? self.events[index2][1].type : null;
        const next = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
        if (next === bodyRowStart && self.parser.lazy[self.now().line]) return nok(code2);
        return next(code2);
    }
    function headRowBefore(code2) {
        effects.enter("tableHead");
        effects.enter("tableRow");
        return headRowStart(code2);
    }
    function headRowStart(code2) {
        if (code2 === 124) return headRowBreak(code2);
        seen = true;
        sizeB += 1;
        return headRowBreak(code2);
    }
    function headRowBreak(code2) {
        if (code2 === null) return nok(code2);
        if (markdownLineEnding(code2)) {
            if (sizeB > 1) {
                sizeB = 0;
                self.interrupt = true;
                effects.exit("tableRow");
                effects.enter("lineEnding");
                effects.consume(code2);
                effects.exit("lineEnding");
                return headDelimiterStart;
            }
            return nok(code2);
        }
        if (markdownSpace(code2)) return factorySpace(effects, headRowBreak, "whitespace")(code2);
        sizeB += 1;
        if (seen) {
            seen = false;
            size += 1;
        }
        if (code2 === 124) {
            effects.enter("tableCellDivider");
            effects.consume(code2);
            effects.exit("tableCellDivider");
            seen = true;
            return headRowBreak;
        }
        effects.enter("data");
        return headRowData(code2);
    }
    function headRowData(code2) {
        if (code2 === null || code2 === 124 || markdownLineEndingOrSpace(code2)) {
            effects.exit("data");
            return headRowBreak(code2);
        }
        effects.consume(code2);
        return code2 === 92 ? headRowEscape : headRowData;
    }
    function headRowEscape(code2) {
        if (code2 === 92 || code2 === 124) {
            effects.consume(code2);
            return headRowData;
        }
        return headRowData(code2);
    }
    function headDelimiterStart(code2) {
        self.interrupt = false;
        if (self.parser.lazy[self.now().line]) return nok(code2);
        effects.enter("tableDelimiterRow");
        seen = false;
        if (markdownSpace(code2)) return factorySpace(effects, headDelimiterBefore, "linePrefix", self.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code2);
        return headDelimiterBefore(code2);
    }
    function headDelimiterBefore(code2) {
        if (code2 === 45 || code2 === 58) return headDelimiterValueBefore(code2);
        if (code2 === 124) {
            seen = true;
            effects.enter("tableCellDivider");
            effects.consume(code2);
            effects.exit("tableCellDivider");
            return headDelimiterCellBefore;
        }
        return headDelimiterNok(code2);
    }
    function headDelimiterCellBefore(code2) {
        if (markdownSpace(code2)) return factorySpace(effects, headDelimiterValueBefore, "whitespace")(code2);
        return headDelimiterValueBefore(code2);
    }
    function headDelimiterValueBefore(code2) {
        if (code2 === 58) {
            sizeB += 1;
            seen = true;
            effects.enter("tableDelimiterMarker");
            effects.consume(code2);
            effects.exit("tableDelimiterMarker");
            return headDelimiterLeftAlignmentAfter;
        }
        if (code2 === 45) {
            sizeB += 1;
            return headDelimiterLeftAlignmentAfter(code2);
        }
        if (code2 === null || markdownLineEnding(code2)) return headDelimiterCellAfter(code2);
        return headDelimiterNok(code2);
    }
    function headDelimiterLeftAlignmentAfter(code2) {
        if (code2 === 45) {
            effects.enter("tableDelimiterFiller");
            return headDelimiterFiller(code2);
        }
        return headDelimiterNok(code2);
    }
    function headDelimiterFiller(code2) {
        if (code2 === 45) {
            effects.consume(code2);
            return headDelimiterFiller;
        }
        if (code2 === 58) {
            seen = true;
            effects.exit("tableDelimiterFiller");
            effects.enter("tableDelimiterMarker");
            effects.consume(code2);
            effects.exit("tableDelimiterMarker");
            return headDelimiterRightAlignmentAfter;
        }
        effects.exit("tableDelimiterFiller");
        return headDelimiterRightAlignmentAfter(code2);
    }
    function headDelimiterRightAlignmentAfter(code2) {
        if (markdownSpace(code2)) return factorySpace(effects, headDelimiterCellAfter, "whitespace")(code2);
        return headDelimiterCellAfter(code2);
    }
    function headDelimiterCellAfter(code2) {
        if (code2 === 124) return headDelimiterBefore(code2);
        if (code2 === null || markdownLineEnding(code2)) {
            if (!seen || size !== sizeB) return headDelimiterNok(code2);
            effects.exit("tableDelimiterRow");
            effects.exit("tableHead");
            return ok2(code2);
        }
        return headDelimiterNok(code2);
    }
    function headDelimiterNok(code2) {
        return nok(code2);
    }
    function bodyRowStart(code2) {
        effects.enter("tableRow");
        return bodyRowBreak(code2);
    }
    function bodyRowBreak(code2) {
        if (code2 === 124) {
            effects.enter("tableCellDivider");
            effects.consume(code2);
            effects.exit("tableCellDivider");
            return bodyRowBreak;
        }
        if (code2 === null || markdownLineEnding(code2)) {
            effects.exit("tableRow");
            return ok2(code2);
        }
        if (markdownSpace(code2)) return factorySpace(effects, bodyRowBreak, "whitespace")(code2);
        effects.enter("data");
        return bodyRowData(code2);
    }
    function bodyRowData(code2) {
        if (code2 === null || code2 === 124 || markdownLineEndingOrSpace(code2)) {
            effects.exit("data");
            return bodyRowBreak(code2);
        }
        effects.consume(code2);
        return code2 === 92 ? bodyRowEscape : bodyRowData;
    }
    function bodyRowEscape(code2) {
        if (code2 === 92 || code2 === 124) {
            effects.consume(code2);
            return bodyRowData;
        }
        return bodyRowData(code2);
    }
}
function resolveTable(events, context) {
    let index2 = -1;
    let inFirstCellAwaitingPipe = true;
    let rowKind = 0;
    let lastCell = [
        0,
        0,
        0,
        0
    ];
    let cell = [
        0,
        0,
        0,
        0
    ];
    let afterHeadAwaitingFirstBodyRow = false;
    let lastTableEnd = 0;
    let currentTable;
    let currentBody;
    let currentCell;
    const map2 = new EditMap();
    while(++index2 < events.length){
        const event = events[index2];
        const token = event[1];
        if (event[0] === "enter") {
            if (token.type === "tableHead") {
                afterHeadAwaitingFirstBodyRow = false;
                if (lastTableEnd !== 0) {
                    flushTableEnd(map2, context, lastTableEnd, currentTable, currentBody);
                    currentBody = void 0;
                    lastTableEnd = 0;
                }
                currentTable = {
                    type: "table",
                    start: Object.assign({}, token.start),
                    // Note: correct end is set later.
                    end: Object.assign({}, token.end)
                };
                map2.add(index2, 0, [
                    [
                        "enter",
                        currentTable,
                        context
                    ]
                ]);
            } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
                inFirstCellAwaitingPipe = true;
                currentCell = void 0;
                lastCell = [
                    0,
                    0,
                    0,
                    0
                ];
                cell = [
                    0,
                    index2 + 1,
                    0,
                    0
                ];
                if (afterHeadAwaitingFirstBodyRow) {
                    afterHeadAwaitingFirstBodyRow = false;
                    currentBody = {
                        type: "tableBody",
                        start: Object.assign({}, token.start),
                        // Note: correct end is set later.
                        end: Object.assign({}, token.end)
                    };
                    map2.add(index2, 0, [
                        [
                            "enter",
                            currentBody,
                            context
                        ]
                    ]);
                }
                rowKind = token.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
            } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
                inFirstCellAwaitingPipe = false;
                if (cell[2] === 0) {
                    if (lastCell[1] !== 0) {
                        cell[0] = cell[1];
                        currentCell = flushCell(map2, context, lastCell, rowKind, void 0, currentCell);
                        lastCell = [
                            0,
                            0,
                            0,
                            0
                        ];
                    }
                    cell[2] = index2;
                }
            } else if (token.type === "tableCellDivider") {
                if (inFirstCellAwaitingPipe) inFirstCellAwaitingPipe = false;
                else {
                    if (lastCell[1] !== 0) {
                        cell[0] = cell[1];
                        currentCell = flushCell(map2, context, lastCell, rowKind, void 0, currentCell);
                    }
                    lastCell = cell;
                    cell = [
                        lastCell[1],
                        index2,
                        0,
                        0
                    ];
                }
            }
        } else if (token.type === "tableHead") {
            afterHeadAwaitingFirstBodyRow = true;
            lastTableEnd = index2;
        } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
            lastTableEnd = index2;
            if (lastCell[1] !== 0) {
                cell[0] = cell[1];
                currentCell = flushCell(map2, context, lastCell, rowKind, index2, currentCell);
            } else if (cell[1] !== 0) currentCell = flushCell(map2, context, cell, rowKind, index2, currentCell);
            rowKind = 0;
        } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) cell[3] = index2;
    }
    if (lastTableEnd !== 0) flushTableEnd(map2, context, lastTableEnd, currentTable, currentBody);
    map2.consume(context.events);
    index2 = -1;
    while(++index2 < context.events.length){
        const event = context.events[index2];
        if (event[0] === "enter" && event[1].type === "table") event[1]._align = gfmTableAlign(context.events, index2);
    }
    return events;
}
function flushCell(map2, context, range, rowKind, rowEnd, previousCell) {
    const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
    const valueName = "tableContent";
    if (range[0] !== 0) {
        previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
        map2.add(range[0], 0, [
            [
                "exit",
                previousCell,
                context
            ]
        ]);
    }
    const now = getPoint(context.events, range[1]);
    previousCell = {
        type: groupName,
        start: Object.assign({}, now),
        // Note: correct end is set later.
        end: Object.assign({}, now)
    };
    map2.add(range[1], 0, [
        [
            "enter",
            previousCell,
            context
        ]
    ]);
    if (range[2] !== 0) {
        const relatedStart = getPoint(context.events, range[2]);
        const relatedEnd = getPoint(context.events, range[3]);
        const valueToken = {
            type: valueName,
            start: Object.assign({}, relatedStart),
            end: Object.assign({}, relatedEnd)
        };
        map2.add(range[2], 0, [
            [
                "enter",
                valueToken,
                context
            ]
        ]);
        if (rowKind !== 2) {
            const start = context.events[range[2]];
            const end = context.events[range[3]];
            start[1].end = Object.assign({}, end[1].end);
            start[1].type = "chunkText";
            start[1].contentType = "text";
            if (range[3] > range[2] + 1) {
                const a = range[2] + 1;
                const b = range[3] - range[2] - 1;
                map2.add(a, b, []);
            }
        }
        map2.add(range[3] + 1, 0, [
            [
                "exit",
                valueToken,
                context
            ]
        ]);
    }
    if (rowEnd !== void 0) {
        previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
        map2.add(rowEnd, 0, [
            [
                "exit",
                previousCell,
                context
            ]
        ]);
        previousCell = void 0;
    }
    return previousCell;
}
function flushTableEnd(map2, context, index2, table, tableBody) {
    const exits = [];
    const related = getPoint(context.events, index2);
    if (tableBody) {
        tableBody.end = Object.assign({}, related);
        exits.push([
            "exit",
            tableBody,
            context
        ]);
    }
    table.end = Object.assign({}, related);
    exits.push([
        "exit",
        table,
        context
    ]);
    map2.add(index2 + 1, 0, exits);
}
function getPoint(events, index2) {
    const event = events[index2];
    const side = event[0] === "enter" ? "start" : "end";
    return event[1][side];
}
// ../../node_modules/.pnpm/micromark-extension-gfm-task-list-item@1.0.5/node_modules/micromark-extension-gfm-task-list-item/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-extension-gfm-task-list-item@1.0.5/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js
init_react_shim();
var tasklistCheck = {
    tokenize: tokenizeTasklistCheck
};
var gfmTaskListItem = {
    text: {
        [91]: tasklistCheck
    }
};
function tokenizeTasklistCheck(effects, ok2, nok) {
    const self = this;
    return open;
    function open(code2) {
        if (// Exit if there’s stuff before.
        self.previous !== null || // Exit if not in the first content that is the first child of a list
        // item.
        !self._gfmTasklistFirstContentOfListItem) return nok(code2);
        effects.enter("taskListCheck");
        effects.enter("taskListCheckMarker");
        effects.consume(code2);
        effects.exit("taskListCheckMarker");
        return inside;
    }
    function inside(code2) {
        if (markdownLineEndingOrSpace(code2)) {
            effects.enter("taskListCheckValueUnchecked");
            effects.consume(code2);
            effects.exit("taskListCheckValueUnchecked");
            return close;
        }
        if (code2 === 88 || code2 === 120) {
            effects.enter("taskListCheckValueChecked");
            effects.consume(code2);
            effects.exit("taskListCheckValueChecked");
            return close;
        }
        return nok(code2);
    }
    function close(code2) {
        if (code2 === 93) {
            effects.enter("taskListCheckMarker");
            effects.consume(code2);
            effects.exit("taskListCheckMarker");
            effects.exit("taskListCheck");
            return after;
        }
        return nok(code2);
    }
    function after(code2) {
        if (markdownLineEnding(code2)) return ok2(code2);
        if (markdownSpace(code2)) return effects.check({
            tokenize: spaceThenNonSpace
        }, ok2, nok)(code2);
        return nok(code2);
    }
}
function spaceThenNonSpace(effects, ok2, nok) {
    return factorySpace(effects, after, "whitespace");
    function after(code2) {
        return code2 === null ? nok(code2) : ok2(code2);
    }
}
// ../../node_modules/.pnpm/micromark-extension-gfm@2.0.3/node_modules/micromark-extension-gfm/index.js
function gfm(options) {
    return combineExtensions([
        gfmAutolinkLiteral,
        gfmFootnote(),
        gfmStrikethrough(options),
        gfmTable,
        gfmTaskListItem
    ]);
}
// ../../node_modules/.pnpm/mdast-util-gfm@2.0.2/node_modules/mdast-util-gfm/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-gfm@2.0.2/node_modules/mdast-util-gfm/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-gfm-autolink-literal@1.0.3/node_modules/mdast-util-gfm-autolink-literal/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-gfm-autolink-literal@1.0.3/node_modules/mdast-util-gfm-autolink-literal/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/ccount@2.0.1/node_modules/ccount/index.js
init_react_shim();
function ccount(value, character) {
    const source = String(value);
    if (typeof character !== "string") throw new TypeError("Expected character");
    let count = 0;
    let index2 = source.indexOf(character);
    while(index2 !== -1){
        count++;
        index2 = source.indexOf(character, index2 + character.length);
    }
    return count;
}
// ../../node_modules/.pnpm/mdast-util-find-and-replace@2.2.2/node_modules/mdast-util-find-and-replace/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-find-and-replace@2.2.2/node_modules/mdast-util-find-and-replace/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/escape-string-regexp@5.0.0/node_modules/escape-string-regexp/index.js
init_react_shim();
function escapeStringRegexp(string3) {
    if (typeof string3 !== "string") throw new TypeError("Expected a string");
    return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
// ../../node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/index.js
init_react_shim();
// ../../node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/index.js
init_react_shim();
// ../../node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/lib/index.js
init_react_shim();
var convert = /**
   * @type {(
   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
   *   ((test?: Test) => AssertAnything)
   * )}
   */ /**
   * @param {Test} [test]
   * @returns {AssertAnything}
   */ function(test) {
    if (test === void 0 || test === null) return ok;
    if (typeof test === "string") return typeFactory(test);
    if (typeof test === "object") return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    if (typeof test === "function") return castFactory(test);
    throw new Error("Expected function, string, or object as test");
};
function anyFactory(tests) {
    const checks = [];
    let index2 = -1;
    while(++index2 < tests.length)checks[index2] = convert(tests[index2]);
    return castFactory(any);
    function any(...parameters) {
        let index3 = -1;
        while(++index3 < checks.length){
            if (checks[index3].call(this, ...parameters)) return true;
        }
        return false;
    }
}
function propsFactory(check) {
    return castFactory(all2);
    function all2(node2) {
        let key2;
        for(key2 in check){
            if (node2[key2] !== check[key2]) return false;
        }
        return true;
    }
}
function typeFactory(check) {
    return castFactory(type);
    function type(node2) {
        return node2 && node2.type === check;
    }
}
function castFactory(check) {
    return assertion;
    function assertion(node2, ...parameters) {
        return Boolean(node2 && typeof node2 === "object" && "type" in node2 && // @ts-expect-error: fine.
        Boolean(check.call(this, node2, ...parameters)));
    }
}
function ok() {
    return true;
}
// ../../node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/color.browser.js
init_react_shim();
function color(d) {
    return d;
}
// ../../node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/index.js
var CONTINUE = true;
var EXIT = false;
var SKIP = "skip";
var visitParents = /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */ /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor<Node>} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */ function(tree, test, visitor, reverse) {
    if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test;
        test = null;
    }
    const is2 = convert(test);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node2, index2, parents) {
        const value = node2 && typeof node2 === "object" ? node2 : {};
        if (typeof value.type === "string") {
            const name = // `hast`
            typeof value.tagName === "string" ? value.tagName : // `xast`
            typeof value.name === "string" ? value.name : void 0;
            Object.defineProperty(visit2, "name", {
                value: "node (" + color(node2.type + (name ? "<" + name + ">" : "")) + ")"
            });
        }
        return visit2;
        function visit2() {
            let result = [];
            let subresult;
            let offset;
            let grandparents;
            if (!test || is2(node2, index2, parents[parents.length - 1] || null)) {
                result = toResult(visitor(node2, parents));
                if (result[0] === EXIT) return result;
            }
            if (node2.children && result[0] !== SKIP) {
                offset = (reverse ? node2.children.length : -1) + step;
                grandparents = parents.concat(node2);
                while(offset > -1 && offset < node2.children.length){
                    subresult = factory(node2.children[offset], offset, grandparents)();
                    if (subresult[0] === EXIT) return subresult;
                    offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
                }
            }
            return result;
        }
    }
};
function toResult(value) {
    if (Array.isArray(value)) return value;
    if (typeof value === "number") return [
        CONTINUE,
        value
    ];
    return [
        value
    ];
}
// ../../node_modules/.pnpm/mdast-util-find-and-replace@2.2.2/node_modules/mdast-util-find-and-replace/lib/index.js
var own = {}.hasOwnProperty;
var findAndReplace = /**
   * @type {(
   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &
   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)
   * )}
   **/ /**
   * @template {Node} Tree
   * @param {Tree} tree
   * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find
   * @param {Replace | Options | null | undefined} [replace]
   * @param {Options | null | undefined} [options]
   * @returns {Tree}
   */ function(tree, find, replace2, options) {
    let settings;
    let schema;
    if (typeof find === "string" || find instanceof RegExp) {
        schema = [
            [
                find,
                replace2
            ]
        ];
        settings = options;
    } else {
        schema = find;
        settings = replace2;
    }
    if (!settings) settings = {};
    const ignored = convert(settings.ignore || []);
    const pairs = toPairs(schema);
    let pairIndex = -1;
    while(++pairIndex < pairs.length)visitParents(tree, "text", visitor);
    return tree;
    function visitor(node2, parents) {
        let index2 = -1;
        let grandparent;
        while(++index2 < parents.length){
            const parent = parents[index2];
            if (ignored(parent, // @ts-expect-error: TS doesn’t understand but it’s perfect.
            grandparent ? grandparent.children.indexOf(parent) : void 0, grandparent)) return;
            grandparent = parent;
        }
        if (grandparent) return handler(node2, parents);
    }
    function handler(node2, parents) {
        const parent = parents[parents.length - 1];
        const find2 = pairs[pairIndex][0];
        const replace3 = pairs[pairIndex][1];
        let start = 0;
        const index2 = parent.children.indexOf(node2);
        let change = false;
        let nodes = [];
        find2.lastIndex = 0;
        let match = find2.exec(node2.value);
        while(match){
            const position2 = match.index;
            const matchObject = {
                index: match.index,
                input: match.input,
                // @ts-expect-error: stack is fine.
                stack: [
                    ...parents,
                    node2
                ]
            };
            let value = replace3(...match, matchObject);
            if (typeof value === "string") value = value.length > 0 ? {
                type: "text",
                value
            } : void 0;
            if (value !== false) {
                if (start !== position2) nodes.push({
                    type: "text",
                    value: node2.value.slice(start, position2)
                });
                if (Array.isArray(value)) nodes.push(...value);
                else if (value) nodes.push(value);
                start = position2 + match[0].length;
                change = true;
            }
            if (!find2.global) break;
            match = find2.exec(node2.value);
        }
        if (change) {
            if (start < node2.value.length) nodes.push({
                type: "text",
                value: node2.value.slice(start)
            });
            parent.children.splice(index2, 1, ...nodes);
        } else nodes = [
            node2
        ];
        return index2 + nodes.length;
    }
};
function toPairs(schema) {
    const result = [];
    if (typeof schema !== "object") throw new TypeError("Expected array or object as schema");
    if (Array.isArray(schema)) {
        let index2 = -1;
        while(++index2 < schema.length)result.push([
            toExpression(schema[index2][0]),
            toFunction(schema[index2][1])
        ]);
    } else {
        let key2;
        for(key2 in schema)if (own.call(schema, key2)) result.push([
            toExpression(key2),
            toFunction(schema[key2])
        ]);
    }
    return result;
}
function toExpression(find) {
    return typeof find === "string" ? new RegExp(escapeStringRegexp(find), "g") : find;
}
function toFunction(replace2) {
    return typeof replace2 === "function" ? replace2 : ()=>replace2;
}
// ../../node_modules/.pnpm/mdast-util-gfm-autolink-literal@1.0.3/node_modules/mdast-util-gfm-autolink-literal/lib/index.js
var inConstruct = "phrasing";
var notInConstruct = [
    "autolink",
    "link",
    "image",
    "label"
];
var gfmAutolinkLiteralFromMarkdown = {
    transforms: [
        transformGfmAutolinkLiterals
    ],
    enter: {
        literalAutolink: enterLiteralAutolink,
        literalAutolinkEmail: enterLiteralAutolinkValue,
        literalAutolinkHttp: enterLiteralAutolinkValue,
        literalAutolinkWww: enterLiteralAutolinkValue
    },
    exit: {
        literalAutolink: exitLiteralAutolink,
        literalAutolinkEmail: exitLiteralAutolinkEmail,
        literalAutolinkHttp: exitLiteralAutolinkHttp,
        literalAutolinkWww: exitLiteralAutolinkWww
    }
};
var gfmAutolinkLiteralToMarkdown = {
    unsafe: [
        {
            character: "@",
            before: "[+\\-.\\w]",
            after: "[\\-.\\w]",
            inConstruct,
            notInConstruct
        },
        {
            character: ".",
            before: "[Ww]",
            after: "[\\-.\\w]",
            inConstruct,
            notInConstruct
        },
        {
            character: ":",
            before: "[ps]",
            after: "\\/",
            inConstruct,
            notInConstruct
        }
    ]
};
function enterLiteralAutolink(token) {
    this.enter({
        type: "link",
        title: null,
        url: "",
        children: []
    }, token);
}
function enterLiteralAutolinkValue(token) {
    this.config.enter.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkHttp(token) {
    this.config.exit.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkWww(token) {
    this.config.exit.data.call(this, token);
    const node2 = /** @type {Link} */ this.stack[this.stack.length - 1];
    node2.url = "http://" + this.sliceSerialize(token);
}
function exitLiteralAutolinkEmail(token) {
    this.config.exit.autolinkEmail.call(this, token);
}
function exitLiteralAutolink(token) {
    this.exit(token);
}
function transformGfmAutolinkLiterals(tree) {
    findAndReplace(tree, [
        [
            /(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi,
            findUrl
        ],
        [
            /([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g,
            findEmail
        ]
    ], {
        ignore: [
            "link",
            "linkReference"
        ]
    });
}
function findUrl(_, protocol, domain2, path3, match) {
    let prefix = "";
    if (!previous2(match)) return false;
    if (/^w/i.test(protocol)) {
        domain2 = protocol + domain2;
        protocol = "";
        prefix = "http://";
    }
    if (!isCorrectDomain(domain2)) return false;
    const parts = splitUrl(domain2 + path3);
    if (!parts[0]) return false;
    const result = {
        type: "link",
        title: null,
        url: prefix + protocol + parts[0],
        children: [
            {
                type: "text",
                value: protocol + parts[0]
            }
        ]
    };
    if (parts[1]) return [
        result,
        {
            type: "text",
            value: parts[1]
        }
    ];
    return result;
}
function findEmail(_, atext, label, match) {
    if (// Not an expected previous character.
    !previous2(match, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)) return false;
    return {
        type: "link",
        title: null,
        url: "mailto:" + atext + "@" + label,
        children: [
            {
                type: "text",
                value: atext + "@" + label
            }
        ]
    };
}
function isCorrectDomain(domain2) {
    const parts = domain2.split(".");
    if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) return false;
    return true;
}
function splitUrl(url) {
    const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
    if (!trailExec) return [
        url,
        void 0
    ];
    url = url.slice(0, trailExec.index);
    let trail2 = trailExec[0];
    let closingParenIndex = trail2.indexOf(")");
    const openingParens = ccount(url, "(");
    let closingParens = ccount(url, ")");
    while(closingParenIndex !== -1 && openingParens > closingParens){
        url += trail2.slice(0, closingParenIndex + 1);
        trail2 = trail2.slice(closingParenIndex + 1);
        closingParenIndex = trail2.indexOf(")");
        closingParens++;
    }
    return [
        url,
        trail2
    ];
}
function previous2(match, email) {
    const code2 = match.input.charCodeAt(match.index - 1);
    return (match.index === 0 || unicodeWhitespace(code2) || unicodePunctuation(code2)) && (!email || code2 !== 47);
}
// ../../node_modules/.pnpm/mdast-util-gfm-footnote@1.0.2/node_modules/mdast-util-gfm-footnote/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-gfm-footnote@1.0.2/node_modules/mdast-util-gfm-footnote/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/association.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-decode-string@1.1.0/node_modules/micromark-util-decode-string/index.js
init_react_shim();
// ../../node_modules/.pnpm/micromark-util-decode-numeric-character-reference@1.1.0/node_modules/micromark-util-decode-numeric-character-reference/index.js
init_react_shim();
function decodeNumericCharacterReference(value, base2) {
    const code2 = Number.parseInt(value, base2);
    if (// C0 except for HT, LF, FF, CR, space.
    code2 < 9 || code2 === 11 || code2 > 13 && code2 < 32 || // Control character (DEL) of C0, and C1 controls.
    code2 > 126 && code2 < 160 || // Lone high surrogates and low surrogates.
    code2 > 55295 && code2 < 57344 || // Noncharacters.
    code2 > 64975 && code2 < 65008 || (code2 & 65535) === 65535 || (code2 & 65535) === 65534 || // Out of range
    code2 > 1114111) return "\uFFFD";
    return String.fromCharCode(code2);
}
// ../../node_modules/.pnpm/micromark-util-decode-string@1.1.0/node_modules/micromark-util-decode-string/index.js
var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $2) {
    if ($1) return $1;
    const head = $2.charCodeAt(0);
    if (head === 35) {
        const head2 = $2.charCodeAt(1);
        const hex = head2 === 120 || head2 === 88;
        return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
    }
    return decodeNamedCharacterReference($2) || $0;
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/association.js
function association(node2) {
    if (node2.label || !node2.identifier) return node2.label || "";
    return decodeString(node2.identifier);
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/container-flow.js
init_react_shim();
function containerFlow(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    const tracker = state.createTracker(info);
    const results = [];
    let index2 = -1;
    indexStack.push(-1);
    while(++index2 < children.length){
        const child = children[index2];
        indexStack[indexStack.length - 1] = index2;
        results.push(tracker.move(state.handle(child, parent, state, {
            before: "\n",
            after: "\n",
            ...tracker.current()
        })));
        if (child.type !== "list") state.bulletLastUsed = void 0;
        if (index2 < children.length - 1) results.push(tracker.move(between(child, children[index2 + 1], parent, state)));
    }
    indexStack.pop();
    return results.join("");
}
function between(left, right, parent, state) {
    let index2 = state.join.length;
    while(index2--){
        const result = state.join[index2](left, right, parent, state);
        if (result === true || result === 1) break;
        if (typeof result === "number") return "\n".repeat(1 + result);
        if (result === false) return "\n\n<!---->\n\n";
    }
    return "\n\n";
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
init_react_shim();
var eol = /\r?\n|\r/g;
function indentLines(value, map2) {
    const result = [];
    let start = 0;
    let line = 0;
    let match;
    while(match = eol.exec(value)){
        one2(value.slice(start, match.index));
        result.push(match[0]);
        start = match.index + match[0].length;
        line++;
    }
    one2(value.slice(start));
    return result.join("");
    function one2(value2) {
        result.push(map2(value2, line, !value2));
    }
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/safe.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js
init_react_shim();
function patternCompile(pattern) {
    if (!pattern._compiled) {
        const before = (pattern.atBreak ? "[\\r\\n][\\t ]*" : "") + (pattern.before ? "(?:" + pattern.before + ")" : "");
        pattern._compiled = new RegExp((before ? "(" + before + ")" : "") + (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? "\\" : "") + pattern.character + (pattern.after ? "(?:" + pattern.after + ")" : ""), "g");
    }
    return pattern._compiled;
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
init_react_shim();
function patternInScope(stack, pattern) {
    return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
function listInScope(stack, list2, none) {
    if (typeof list2 === "string") list2 = [
        list2
    ];
    if (!list2 || list2.length === 0) return none;
    let index2 = -1;
    while(++index2 < list2.length){
        if (stack.includes(list2[index2])) return true;
    }
    return false;
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/safe.js
function safe(state, input, config) {
    const value = (config.before || "") + (input || "") + (config.after || "");
    const positions = [];
    const result = [];
    const infos = {};
    let index2 = -1;
    while(++index2 < state.unsafe.length){
        const pattern = state.unsafe[index2];
        if (!patternInScope(state.stack, pattern)) continue;
        const expression = patternCompile(pattern);
        let match;
        while(match = expression.exec(value)){
            const before = "before" in pattern || Boolean(pattern.atBreak);
            const after = "after" in pattern;
            const position2 = match.index + (before ? match[1].length : 0);
            if (positions.includes(position2)) {
                if (infos[position2].before && !before) infos[position2].before = false;
                if (infos[position2].after && !after) infos[position2].after = false;
            } else {
                positions.push(position2);
                infos[position2] = {
                    before,
                    after
                };
            }
        }
    }
    positions.sort(numerical);
    let start = config.before ? config.before.length : 0;
    const end = value.length - (config.after ? config.after.length : 0);
    index2 = -1;
    while(++index2 < positions.length){
        const position2 = positions[index2];
        if (position2 < start || position2 >= end) continue;
        if (position2 + 1 < end && positions[index2 + 1] === position2 + 1 && infos[position2].after && !infos[position2 + 1].before && !infos[position2 + 1].after || positions[index2 - 1] === position2 - 1 && infos[position2].before && !infos[position2 - 1].before && !infos[position2 - 1].after) continue;
        if (start !== position2) result.push(escapeBackslashes(value.slice(start, position2), "\\"));
        start = position2;
        if (/[!-/:-@[-`{-~]/.test(value.charAt(position2)) && (!config.encode || !config.encode.includes(value.charAt(position2)))) result.push("\\");
        else {
            result.push("&#x" + value.charCodeAt(position2).toString(16).toUpperCase() + ";");
            start++;
        }
    }
    result.push(escapeBackslashes(value.slice(start, end), config.after));
    return result.join("");
}
function numerical(a, b) {
    return a - b;
}
function escapeBackslashes(value, after) {
    const expression = /\\(?=[!-/:-@[-`{-~])/g;
    const positions = [];
    const results = [];
    const whole = value + after;
    let index2 = -1;
    let start = 0;
    let match;
    while(match = expression.exec(whole))positions.push(match.index);
    while(++index2 < positions.length){
        if (start !== positions[index2]) results.push(value.slice(start, positions[index2]));
        results.push("\\");
        start = positions[index2];
    }
    results.push(value.slice(start));
    return results.join("");
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/track.js
init_react_shim();
function track(config) {
    const options = config || {};
    const now = options.now || {};
    let lineShift = options.lineShift || 0;
    let line = now.line || 1;
    let column = now.column || 1;
    return {
        move,
        current,
        shift
    };
    function current() {
        return {
            now: {
                line,
                column
            },
            lineShift
        };
    }
    function shift(value) {
        lineShift += value;
    }
    function move(input) {
        const value = input || "";
        const chunks = value.split(/\r?\n|\r/g);
        const tail = chunks[chunks.length - 1];
        line += chunks.length - 1;
        column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
        return value;
    }
}
// ../../node_modules/.pnpm/mdast-util-gfm-footnote@1.0.2/node_modules/mdast-util-gfm-footnote/lib/index.js
footnoteReference.peek = footnoteReferencePeek;
function gfmFootnoteFromMarkdown() {
    return {
        enter: {
            gfmFootnoteDefinition: enterFootnoteDefinition,
            gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
            gfmFootnoteCall: enterFootnoteCall,
            gfmFootnoteCallString: enterFootnoteCallString
        },
        exit: {
            gfmFootnoteDefinition: exitFootnoteDefinition,
            gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
            gfmFootnoteCall: exitFootnoteCall,
            gfmFootnoteCallString: exitFootnoteCallString
        }
    };
}
function gfmFootnoteToMarkdown() {
    return {
        // This is on by default already.
        unsafe: [
            {
                character: "[",
                inConstruct: [
                    "phrasing",
                    "label",
                    "reference"
                ]
            }
        ],
        handlers: {
            footnoteDefinition,
            footnoteReference
        }
    };
}
function enterFootnoteDefinition(token) {
    this.enter({
        type: "footnoteDefinition",
        identifier: "",
        label: "",
        children: []
    }, token);
}
function enterFootnoteDefinitionLabelString() {
    this.buffer();
}
function exitFootnoteDefinitionLabelString(token) {
    const label = this.resume();
    const node2 = /** @type {FootnoteDefinition} */ this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
}
function exitFootnoteDefinition(token) {
    this.exit(token);
}
function enterFootnoteCall(token) {
    this.enter({
        type: "footnoteReference",
        identifier: "",
        label: ""
    }, token);
}
function enterFootnoteCallString() {
    this.buffer();
}
function exitFootnoteCallString(token) {
    const label = this.resume();
    const node2 = /** @type {FootnoteDefinition} */ this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
}
function exitFootnoteCall(token) {
    this.exit(token);
}
function footnoteReference(node2, _, context, safeOptions) {
    const tracker = track(safeOptions);
    let value = tracker.move("[^");
    const exit3 = context.enter("footnoteReference");
    const subexit = context.enter("reference");
    value += tracker.move(safe(context, association(node2), {
        ...tracker.current(),
        before: value,
        after: "]"
    }));
    subexit();
    exit3();
    value += tracker.move("]");
    return value;
}
function footnoteReferencePeek() {
    return "[";
}
function footnoteDefinition(node2, _, context, safeOptions) {
    const tracker = track(safeOptions);
    let value = tracker.move("[^");
    const exit3 = context.enter("footnoteDefinition");
    const subexit = context.enter("label");
    value += tracker.move(safe(context, association(node2), {
        ...tracker.current(),
        before: value,
        after: "]"
    }));
    subexit();
    value += tracker.move("]:" + (node2.children && node2.children.length > 0 ? " " : ""));
    tracker.shift(4);
    value += tracker.move(indentLines(containerFlow(node2, context, tracker.current()), map));
    exit3();
    return value;
}
function map(line, index2, blank) {
    if (index2 === 0) return line;
    return (blank ? "" : "    ") + line;
}
// ../../node_modules/.pnpm/mdast-util-gfm-strikethrough@1.0.3/node_modules/mdast-util-gfm-strikethrough/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-gfm-strikethrough@1.0.3/node_modules/mdast-util-gfm-strikethrough/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
init_react_shim();
function containerPhrasing(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    const results = [];
    let index2 = -1;
    let before = info.before;
    indexStack.push(-1);
    let tracker = state.createTracker(info);
    while(++index2 < children.length){
        const child = children[index2];
        let after;
        indexStack[indexStack.length - 1] = index2;
        if (index2 + 1 < children.length) {
            let handle = state.handle.handlers[children[index2 + 1].type];
            if (handle && handle.peek) handle = handle.peek;
            after = handle ? handle(children[index2 + 1], parent, state, {
                before: "",
                after: "",
                ...tracker.current()
            }).charAt(0) : "";
        } else after = info.after;
        if (results.length > 0 && (before === "\r" || before === "\n") && child.type === "html") {
            results[results.length - 1] = results[results.length - 1].replace(/(\r?\n|\r)$/, " ");
            before = " ";
            tracker = state.createTracker(info);
            tracker.move(results.join(""));
        }
        results.push(tracker.move(state.handle(child, parent, state, {
            ...tracker.current(),
            before,
            after
        })));
        before = results[results.length - 1].slice(-1);
    }
    indexStack.pop();
    return results.join("");
}
// ../../node_modules/.pnpm/mdast-util-gfm-strikethrough@1.0.3/node_modules/mdast-util-gfm-strikethrough/lib/index.js
var constructsWithoutStrikethrough = [
    "autolink",
    "destinationLiteral",
    "destinationRaw",
    "reference",
    "titleQuote",
    "titleApostrophe"
];
handleDelete.peek = peekDelete;
var gfmStrikethroughFromMarkdown = {
    canContainEols: [
        "delete"
    ],
    enter: {
        strikethrough: enterStrikethrough
    },
    exit: {
        strikethrough: exitStrikethrough
    }
};
var gfmStrikethroughToMarkdown = {
    unsafe: [
        {
            character: "~",
            inConstruct: "phrasing",
            notInConstruct: constructsWithoutStrikethrough
        }
    ],
    handlers: {
        delete: handleDelete
    }
};
function enterStrikethrough(token) {
    this.enter({
        type: "delete",
        children: []
    }, token);
}
function exitStrikethrough(token) {
    this.exit(token);
}
function handleDelete(node2, _, context, safeOptions) {
    const tracker = track(safeOptions);
    const exit3 = context.enter("strikethrough");
    let value = tracker.move("~~");
    value += containerPhrasing(node2, context, {
        ...tracker.current(),
        before: value,
        after: "~"
    });
    value += tracker.move("~~");
    exit3();
    return value;
}
function peekDelete() {
    return "~";
}
// ../../node_modules/.pnpm/mdast-util-gfm-table@1.0.7/node_modules/mdast-util-gfm-table/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-gfm-table@1.0.7/node_modules/mdast-util-gfm-table/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
init_react_shim();
inlineCode.peek = inlineCodePeek;
function inlineCode(node2, _, state) {
    let value = node2.value || "";
    let sequence = "`";
    let index2 = -1;
    while(new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value))sequence += "`";
    if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) value = " " + value + " ";
    while(++index2 < state.unsafe.length){
        const pattern = state.unsafe[index2];
        const expression = patternCompile(pattern);
        let match;
        if (!pattern.atBreak) continue;
        while(match = expression.exec(value)){
            let position2 = match.index;
            if (value.charCodeAt(position2) === 10 && value.charCodeAt(position2 - 1) === 13) position2--;
            value = value.slice(0, position2) + " " + value.slice(match.index + 1);
        }
    }
    return sequence + value + sequence;
}
function inlineCodePeek() {
    return "`";
}
// ../../node_modules/.pnpm/markdown-table@3.0.3/node_modules/markdown-table/index.js
init_react_shim();
function markdownTable(table, options = {}) {
    const align = (options.align || []).concat();
    const stringLength = options.stringLength || defaultStringLength;
    const alignments = [];
    const cellMatrix = [];
    const sizeMatrix = [];
    const longestCellByColumn = [];
    let mostCellsPerRow = 0;
    let rowIndex = -1;
    while(++rowIndex < table.length){
        const row2 = [];
        const sizes2 = [];
        let columnIndex2 = -1;
        if (table[rowIndex].length > mostCellsPerRow) mostCellsPerRow = table[rowIndex].length;
        while(++columnIndex2 < table[rowIndex].length){
            const cell = serialize(table[rowIndex][columnIndex2]);
            if (options.alignDelimiters !== false) {
                const size = stringLength(cell);
                sizes2[columnIndex2] = size;
                if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) longestCellByColumn[columnIndex2] = size;
            }
            row2.push(cell);
        }
        cellMatrix[rowIndex] = row2;
        sizeMatrix[rowIndex] = sizes2;
    }
    let columnIndex = -1;
    if (typeof align === "object" && "length" in align) while(++columnIndex < mostCellsPerRow)alignments[columnIndex] = toAlignment(align[columnIndex]);
    else {
        const code2 = toAlignment(align);
        while(++columnIndex < mostCellsPerRow)alignments[columnIndex] = code2;
    }
    columnIndex = -1;
    const row = [];
    const sizes = [];
    while(++columnIndex < mostCellsPerRow){
        const code2 = alignments[columnIndex];
        let before = "";
        let after = "";
        if (code2 === 99) {
            before = ":";
            after = ":";
        } else if (code2 === 108) before = ":";
        else if (code2 === 114) after = ":";
        let size = options.alignDelimiters === false ? 1 : Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length);
        const cell = before + "-".repeat(size) + after;
        if (options.alignDelimiters !== false) {
            size = before.length + size + after.length;
            if (size > longestCellByColumn[columnIndex]) longestCellByColumn[columnIndex] = size;
            sizes[columnIndex] = size;
        }
        row[columnIndex] = cell;
    }
    cellMatrix.splice(1, 0, row);
    sizeMatrix.splice(1, 0, sizes);
    rowIndex = -1;
    const lines = [];
    while(++rowIndex < cellMatrix.length){
        const row2 = cellMatrix[rowIndex];
        const sizes2 = sizeMatrix[rowIndex];
        columnIndex = -1;
        const line = [];
        while(++columnIndex < mostCellsPerRow){
            const cell = row2[columnIndex] || "";
            let before = "";
            let after = "";
            if (options.alignDelimiters !== false) {
                const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);
                const code2 = alignments[columnIndex];
                if (code2 === 114) before = " ".repeat(size);
                else if (code2 === 99) {
                    if (size % 2) {
                        before = " ".repeat(size / 2 + 0.5);
                        after = " ".repeat(size / 2 - 0.5);
                    } else {
                        before = " ".repeat(size / 2);
                        after = before;
                    }
                } else after = " ".repeat(size);
            }
            if (options.delimiterStart !== false && !columnIndex) line.push("|");
            if (options.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
            // empty: there will be a closing space.
            !(options.alignDelimiters === false && cell === "") && (options.delimiterStart !== false || columnIndex)) line.push(" ");
            if (options.alignDelimiters !== false) line.push(before);
            line.push(cell);
            if (options.alignDelimiters !== false) line.push(after);
            if (options.padding !== false) line.push(" ");
            if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) line.push("|");
        }
        lines.push(options.delimiterEnd === false ? line.join("").replace(/ +$/, "") : line.join(""));
    }
    return lines.join("\n");
}
function serialize(value) {
    return value === null || value === void 0 ? "" : String(value);
}
function defaultStringLength(value) {
    return value.length;
}
function toAlignment(value) {
    const code2 = typeof value === "string" ? value.codePointAt(0) : 0;
    return code2 === 67 || code2 === 99 ? 99 : code2 === 76 || code2 === 108 ? 108 : code2 === 82 || code2 === 114 ? 114 : 0;
}
// ../../node_modules/.pnpm/mdast-util-gfm-table@1.0.7/node_modules/mdast-util-gfm-table/lib/index.js
var gfmTableFromMarkdown = {
    enter: {
        table: enterTable,
        tableData: enterCell,
        tableHeader: enterCell,
        tableRow: enterRow
    },
    exit: {
        codeText: exitCodeText,
        table: exitTable,
        tableData: exit2,
        tableHeader: exit2,
        tableRow: exit2
    }
};
function enterTable(token) {
    const align = token._align;
    this.enter({
        type: "table",
        align: align.map((d)=>d === "none" ? null : d),
        children: []
    }, token);
    this.setData("inTable", true);
}
function exitTable(token) {
    this.exit(token);
    this.setData("inTable");
}
function enterRow(token) {
    this.enter({
        type: "tableRow",
        children: []
    }, token);
}
function exit2(token) {
    this.exit(token);
}
function enterCell(token) {
    this.enter({
        type: "tableCell",
        children: []
    }, token);
}
function exitCodeText(token) {
    let value = this.resume();
    if (this.getData("inTable")) value = value.replace(/\\([\\|])/g, replace);
    const node2 = /** @type {InlineCode} */ this.stack[this.stack.length - 1];
    node2.value = value;
    this.exit(token);
}
function replace($0, $1) {
    return $1 === "|" ? $1 : $0;
}
function gfmTableToMarkdown(options) {
    const settings = options || {};
    const padding = settings.tableCellPadding;
    const alignDelimiters = settings.tablePipeAlign;
    const stringLength = settings.stringLength;
    const around = padding ? " " : "|";
    return {
        unsafe: [
            {
                character: "\r",
                inConstruct: "tableCell"
            },
            {
                character: "\n",
                inConstruct: "tableCell"
            },
            // A pipe, when followed by a tab or space (padding), or a dash or colon
            // (unpadded delimiter row), could result in a table.
            {
                atBreak: true,
                character: "|",
                after: "[	 :-]"
            },
            // A pipe in a cell must be encoded.
            {
                character: "|",
                inConstruct: "tableCell"
            },
            // A colon must be followed by a dash, in which case it could start a
            // delimiter row.
            {
                atBreak: true,
                character: ":",
                after: "-"
            },
            // A delimiter row can also start with a dash, when followed by more
            // dashes, a colon, or a pipe.
            // This is a stricter version than the built in check for lists, thematic
            // breaks, and setex heading underlines though:
            // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
            {
                atBreak: true,
                character: "-",
                after: "[:|-]"
            }
        ],
        handlers: {
            table: handleTable,
            tableRow: handleTableRow,
            tableCell: handleTableCell,
            inlineCode: inlineCodeWithTable
        }
    };
    function handleTable(node2, _, context, safeOptions) {
        return serializeData(handleTableAsData(node2, context, safeOptions), node2.align);
    }
    function handleTableRow(node2, _, context, safeOptions) {
        const row = handleTableRowAsData(node2, context, safeOptions);
        const value = serializeData([
            row
        ]);
        return value.slice(0, value.indexOf("\n"));
    }
    function handleTableCell(node2, _, context, safeOptions) {
        const exit3 = context.enter("tableCell");
        const subexit = context.enter("phrasing");
        const value = containerPhrasing(node2, context, {
            ...safeOptions,
            before: around,
            after: around
        });
        subexit();
        exit3();
        return value;
    }
    function serializeData(matrix, align) {
        return markdownTable(matrix, {
            align,
            // @ts-expect-error: `markdown-table` types should support `null`.
            alignDelimiters,
            // @ts-expect-error: `markdown-table` types should support `null`.
            padding,
            // @ts-expect-error: `markdown-table` types should support `null`.
            stringLength
        });
    }
    function handleTableAsData(node2, context, safeOptions) {
        const children = node2.children;
        let index2 = -1;
        const result = [];
        const subexit = context.enter("table");
        while(++index2 < children.length)result[index2] = handleTableRowAsData(children[index2], context, safeOptions);
        subexit();
        return result;
    }
    function handleTableRowAsData(node2, context, safeOptions) {
        const children = node2.children;
        let index2 = -1;
        const result = [];
        const subexit = context.enter("tableRow");
        while(++index2 < children.length)result[index2] = handleTableCell(children[index2], node2, context, safeOptions);
        subexit();
        return result;
    }
    function inlineCodeWithTable(node2, parent, context) {
        let value = inlineCode(node2, parent, context);
        if (context.stack.includes("tableCell")) value = value.replace(/\|/g, "\\$&");
        return value;
    }
}
// ../../node_modules/.pnpm/mdast-util-gfm-task-list-item@1.0.2/node_modules/mdast-util-gfm-task-list-item/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-gfm-task-list-item@1.0.2/node_modules/mdast-util-gfm-task-list-item/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/handle/list-item.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
init_react_shim();
function checkBullet(state) {
    const marker = state.options.bullet || "*";
    if (marker !== "*" && marker !== "+" && marker !== "-") throw new Error("Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`");
    return marker;
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
init_react_shim();
function checkListItemIndent(state) {
    const style = state.options.listItemIndent || "tab";
    if (style === 1 || style === "1") return "one";
    if (style !== "tab" && style !== "one" && style !== "mixed") throw new Error("Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`");
    return style;
}
// ../../node_modules/.pnpm/mdast-util-to-markdown@1.5.0/node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem(node2, parent, state, info) {
    const listItemIndent = checkListItemIndent(state);
    let bullet = state.bulletCurrent || checkBullet(state);
    if (parent && parent.type === "list" && parent.ordered) bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;
    let size = bullet.length + 1;
    if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node2.spread)) size = Math.ceil(size / 4) * 4;
    const tracker = state.createTracker(info);
    tracker.move(bullet + " ".repeat(size - bullet.length));
    tracker.shift(size);
    const exit3 = state.enter("listItem");
    const value = state.indentLines(state.containerFlow(node2, tracker.current()), map2);
    exit3();
    return value;
    function map2(line, index2, blank) {
        if (index2) return (blank ? "" : " ".repeat(size)) + line;
        return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
    }
}
// ../../node_modules/.pnpm/mdast-util-gfm-task-list-item@1.0.2/node_modules/mdast-util-gfm-task-list-item/lib/index.js
var gfmTaskListItemFromMarkdown = {
    exit: {
        taskListCheckValueChecked: exitCheck,
        taskListCheckValueUnchecked: exitCheck,
        paragraph: exitParagraphWithTaskListItem
    }
};
var gfmTaskListItemToMarkdown = {
    unsafe: [
        {
            atBreak: true,
            character: "-",
            after: "[:|-]"
        }
    ],
    handlers: {
        listItem: listItemWithTaskListItem
    }
};
function exitCheck(token) {
    const node2 = /** @type {ListItem} */ this.stack[this.stack.length - 2];
    node2.checked = token.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token) {
    const parent = /** @type {Parents} */ this.stack[this.stack.length - 2];
    if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
        const node2 = /** @type {Paragraph} */ this.stack[this.stack.length - 1];
        const head = node2.children[0];
        if (head && head.type === "text") {
            const siblings = parent.children;
            let index2 = -1;
            let firstParaghraph;
            while(++index2 < siblings.length){
                const sibling = siblings[index2];
                if (sibling.type === "paragraph") {
                    firstParaghraph = sibling;
                    break;
                }
            }
            if (firstParaghraph === node2) {
                head.value = head.value.slice(1);
                if (head.value.length === 0) node2.children.shift();
                else if (node2.position && head.position && typeof head.position.start.offset === "number") {
                    head.position.start.column++;
                    head.position.start.offset++;
                    node2.position.start = Object.assign({}, head.position.start);
                }
            }
        }
    }
    this.exit(token);
}
function listItemWithTaskListItem(node2, parent, context, safeOptions) {
    const head = node2.children[0];
    const checkable = typeof node2.checked === "boolean" && head && head.type === "paragraph";
    const checkbox = "[" + (node2.checked ? "x" : " ") + "] ";
    const tracker = track(safeOptions);
    if (checkable) tracker.move(checkbox);
    let value = listItem(node2, parent, context, {
        ...safeOptions,
        ...tracker.current()
    });
    if (checkable) value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
    return value;
    function check($0) {
        return $0 + checkbox;
    }
}
// ../../node_modules/.pnpm/mdast-util-gfm@2.0.2/node_modules/mdast-util-gfm/lib/index.js
function gfmFromMarkdown() {
    return [
        gfmAutolinkLiteralFromMarkdown,
        gfmFootnoteFromMarkdown(),
        gfmStrikethroughFromMarkdown,
        gfmTableFromMarkdown,
        gfmTaskListItemFromMarkdown
    ];
}
function gfmToMarkdown(options) {
    return {
        extensions: [
            gfmAutolinkLiteralToMarkdown,
            gfmFootnoteToMarkdown(),
            gfmStrikethroughToMarkdown,
            gfmTableToMarkdown(options),
            gfmTaskListItemToMarkdown
        ]
    };
}
// ../../node_modules/.pnpm/remark-gfm@3.0.1/node_modules/remark-gfm/index.js
function remarkGfm(options = {}) {
    const data2 = this.data();
    add("micromarkExtensions", gfm(options));
    add("fromMarkdownExtensions", gfmFromMarkdown());
    add("toMarkdownExtensions", gfmToMarkdown(options));
    function add(field, value) {
        const list2 = /** @type {unknown[]} */ // Other extensions
        /* c8 ignore next 2 */ data2[field] ? data2[field] : data2[field] = [];
        list2.push(value);
    }
}
// ../../node_modules/.pnpm/remark-parse@10.0.1/node_modules/remark-parse/index.js
init_react_shim();
// ../../node_modules/.pnpm/remark-parse@10.0.1/node_modules/remark-parse/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-from-markdown@1.3.1/node_modules/mdast-util-from-markdown/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-from-markdown@1.3.1/node_modules/mdast-util-from-markdown/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-to-string@3.2.0/node_modules/mdast-util-to-string/index.js
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-to-string@3.2.0/node_modules/mdast-util-to-string/lib/index.js
init_react_shim();
var emptyOptions = {};
function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
}
function one(value, includeImageAlt, includeHtml) {
    if (node(value)) {
        if ("value" in value) return value.type === "html" && !includeHtml ? "" : value.value;
        if (includeImageAlt && "alt" in value && value.alt) return value.alt;
        if ("children" in value) return all(value.children, includeImageAlt, includeHtml);
    }
    if (Array.isArray(value)) return all(value, includeImageAlt, includeHtml);
    return "";
}
function all(values, includeImageAlt, includeHtml) {
    const result = [];
    let index2 = -1;
    while(++index2 < values.length)result[index2] = one(values[index2], includeImageAlt, includeHtml);
    return result.join("");
}
function node(value) {
    return Boolean(value && typeof value === "object");
}
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/parse.js
init_react_shim();
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/content.js
init_react_shim();
var content2 = {
    tokenize: initializeContent
};
function initializeContent(effects) {
    const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
    let previous3;
    return contentStart;
    function afterContentStartConstruct(code2) {
        if (code2 === null) {
            effects.consume(code2);
            return;
        }
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return factorySpace(effects, contentStart, "linePrefix");
    }
    function paragraphInitial(code2) {
        effects.enter("paragraph");
        return lineStart(code2);
    }
    function lineStart(code2) {
        const token = effects.enter("chunkText", {
            contentType: "text",
            previous: previous3
        });
        if (previous3) previous3.next = token;
        previous3 = token;
        return data2(code2);
    }
    function data2(code2) {
        if (code2 === null) {
            effects.exit("chunkText");
            effects.exit("paragraph");
            effects.consume(code2);
            return;
        }
        if (markdownLineEnding(code2)) {
            effects.consume(code2);
            effects.exit("chunkText");
            return lineStart;
        }
        effects.consume(code2);
        return data2;
    }
}
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/document.js
init_react_shim();
var document2 = {
    tokenize: initializeDocument
};
var containerConstruct = {
    tokenize: tokenizeContainer
};
function initializeDocument(effects) {
    const self = this;
    const stack = [];
    let continued = 0;
    let childFlow;
    let childToken;
    let lineStartOffset;
    return start;
    function start(code2) {
        if (continued < stack.length) {
            const item = stack[continued];
            self.containerState = item[1];
            return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code2);
        }
        return checkNewContainers(code2);
    }
    function documentContinue(code2) {
        continued++;
        if (self.containerState._closeFlow) {
            self.containerState._closeFlow = void 0;
            if (childFlow) closeFlow();
            const indexBeforeExits = self.events.length;
            let indexBeforeFlow = indexBeforeExits;
            let point3;
            while(indexBeforeFlow--)if (self.events[indexBeforeFlow][0] === "exit" && self.events[indexBeforeFlow][1].type === "chunkFlow") {
                point3 = self.events[indexBeforeFlow][1].end;
                break;
            }
            exitContainers(continued);
            let index2 = indexBeforeExits;
            while(index2 < self.events.length){
                self.events[index2][1].end = Object.assign({}, point3);
                index2++;
            }
            splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));
            self.events.length = index2;
            return checkNewContainers(code2);
        }
        return start(code2);
    }
    function checkNewContainers(code2) {
        if (continued === stack.length) {
            if (!childFlow) return documentContinued(code2);
            if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) return flowStart(code2);
            self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
        }
        self.containerState = {};
        return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code2);
    }
    function thereIsANewContainer(code2) {
        if (childFlow) closeFlow();
        exitContainers(continued);
        return documentContinued(code2);
    }
    function thereIsNoNewContainer(code2) {
        self.parser.lazy[self.now().line] = continued !== stack.length;
        lineStartOffset = self.now().offset;
        return flowStart(code2);
    }
    function documentContinued(code2) {
        self.containerState = {};
        return effects.attempt(containerConstruct, containerContinue, flowStart)(code2);
    }
    function containerContinue(code2) {
        continued++;
        stack.push([
            self.currentConstruct,
            self.containerState
        ]);
        return documentContinued(code2);
    }
    function flowStart(code2) {
        if (code2 === null) {
            if (childFlow) closeFlow();
            exitContainers(0);
            effects.consume(code2);
            return;
        }
        childFlow = childFlow || self.parser.flow(self.now());
        effects.enter("chunkFlow", {
            contentType: "flow",
            previous: childToken,
            _tokenizer: childFlow
        });
        return flowContinue(code2);
    }
    function flowContinue(code2) {
        if (code2 === null) {
            writeToChild(effects.exit("chunkFlow"), true);
            exitContainers(0);
            effects.consume(code2);
            return;
        }
        if (markdownLineEnding(code2)) {
            effects.consume(code2);
            writeToChild(effects.exit("chunkFlow"));
            continued = 0;
            self.interrupt = void 0;
            return start;
        }
        effects.consume(code2);
        return flowContinue;
    }
    function writeToChild(token, eof) {
        const stream = self.sliceStream(token);
        if (eof) stream.push(null);
        token.previous = childToken;
        if (childToken) childToken.next = token;
        childToken = token;
        childFlow.defineSkip(token.start);
        childFlow.write(stream);
        if (self.parser.lazy[token.start.line]) {
            let index2 = childFlow.events.length;
            while(index2--){
                if (// The token starts before the line ending…
                childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
                (!childFlow.events[index2][1].end || // …or ends after it.
                childFlow.events[index2][1].end.offset > lineStartOffset)) return;
            }
            const indexBeforeExits = self.events.length;
            let indexBeforeFlow = indexBeforeExits;
            let seen;
            let point3;
            while(indexBeforeFlow--)if (self.events[indexBeforeFlow][0] === "exit" && self.events[indexBeforeFlow][1].type === "chunkFlow") {
                if (seen) {
                    point3 = self.events[indexBeforeFlow][1].end;
                    break;
                }
                seen = true;
            }
            exitContainers(continued);
            index2 = indexBeforeExits;
            while(index2 < self.events.length){
                self.events[index2][1].end = Object.assign({}, point3);
                index2++;
            }
            splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));
            self.events.length = index2;
        }
    }
    function exitContainers(size) {
        let index2 = stack.length;
        while(index2-- > size){
            const entry = stack[index2];
            self.containerState = entry[1];
            entry[0].exit.call(self, effects);
        }
        stack.length = size;
    }
    function closeFlow() {
        childFlow.write([
            null
        ]);
        childToken = void 0;
        childFlow = void 0;
        self.containerState._closeFlow = void 0;
    }
}
function tokenizeContainer(effects, ok2, nok) {
    return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok2, nok), "linePrefix", this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4);
}
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/flow.js
init_react_shim();
var flow = {
    tokenize: initializeFlow
};
function initializeFlow(effects) {
    const self = this;
    const initial = effects.attempt(// Try to parse a blank line.
    blankLine, atBlankEnding, // Try to parse initial flow (essentially, only code).
    effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), "linePrefix")));
    return initial;
    function atBlankEnding(code2) {
        if (code2 === null) {
            effects.consume(code2);
            return;
        }
        effects.enter("lineEndingBlank");
        effects.consume(code2);
        effects.exit("lineEndingBlank");
        self.currentConstruct = void 0;
        return initial;
    }
    function afterConstruct(code2) {
        if (code2 === null) {
            effects.consume(code2);
            return;
        }
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        self.currentConstruct = void 0;
        return initial;
    }
}
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/text.js
init_react_shim();
var resolver = {
    resolveAll: createResolver()
};
var string = initializeFactory("string");
var text2 = initializeFactory("text");
function initializeFactory(field) {
    return {
        tokenize: initializeText,
        resolveAll: createResolver(field === "text" ? resolveAllLineSuffixes : void 0)
    };
    function initializeText(effects) {
        const self = this;
        const constructs2 = this.parser.constructs[field];
        const text4 = effects.attempt(constructs2, start, notText);
        return start;
        function start(code2) {
            return atBreak(code2) ? text4(code2) : notText(code2);
        }
        function notText(code2) {
            if (code2 === null) {
                effects.consume(code2);
                return;
            }
            effects.enter("data");
            effects.consume(code2);
            return data2;
        }
        function data2(code2) {
            if (atBreak(code2)) {
                effects.exit("data");
                return text4(code2);
            }
            effects.consume(code2);
            return data2;
        }
        function atBreak(code2) {
            if (code2 === null) return true;
            const list2 = constructs2[code2];
            let index2 = -1;
            if (list2) while(++index2 < list2.length){
                const item = list2[index2];
                if (!item.previous || item.previous.call(self, self.previous)) return true;
            }
            return false;
        }
    }
}
function createResolver(extraResolver) {
    return resolveAllText;
    function resolveAllText(events, context) {
        let index2 = -1;
        let enter;
        while(++index2 <= events.length){
            if (enter === void 0) {
                if (events[index2] && events[index2][1].type === "data") {
                    enter = index2;
                    index2++;
                }
            } else if (!events[index2] || events[index2][1].type !== "data") {
                if (index2 !== enter + 2) {
                    events[enter][1].end = events[index2 - 1][1].end;
                    events.splice(enter + 2, index2 - enter - 2);
                    index2 = enter + 2;
                }
                enter = void 0;
            }
        }
        return extraResolver ? extraResolver(events, context) : events;
    }
}
function resolveAllLineSuffixes(events, context) {
    let eventIndex = 0;
    while(++eventIndex <= events.length)if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
        const data2 = events[eventIndex - 1][1];
        const chunks = context.sliceStream(data2);
        let index2 = chunks.length;
        let bufferIndex = -1;
        let size = 0;
        let tabs;
        while(index2--){
            const chunk = chunks[index2];
            if (typeof chunk === "string") {
                bufferIndex = chunk.length;
                while(chunk.charCodeAt(bufferIndex - 1) === 32){
                    size++;
                    bufferIndex--;
                }
                if (bufferIndex) break;
                bufferIndex = -1;
            } else if (chunk === -2) {
                tabs = true;
                size++;
            } else if (chunk === -1) ;
            else {
                index2++;
                break;
            }
        }
        if (size) {
            const token = {
                type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
                start: {
                    line: data2.end.line,
                    column: data2.end.column - size,
                    offset: data2.end.offset - size,
                    _index: data2.start._index + index2,
                    _bufferIndex: index2 ? bufferIndex : data2.start._bufferIndex + bufferIndex
                },
                end: Object.assign({}, data2.end)
            };
            data2.end = Object.assign({}, token.start);
            if (data2.start.offset === data2.end.offset) Object.assign(data2, token);
            else {
                events.splice(eventIndex, 0, [
                    "enter",
                    token,
                    context
                ], [
                    "exit",
                    token,
                    context
                ]);
                eventIndex += 2;
            }
        }
        eventIndex++;
    }
    return events;
}
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/create-tokenizer.js
init_react_shim();
function createTokenizer(parser2, initialize, from) {
    let point3 = Object.assign(from ? Object.assign({}, from) : {
        line: 1,
        column: 1,
        offset: 0
    }, {
        _index: 0,
        _bufferIndex: -1
    });
    const columnStart = {};
    const resolveAllConstructs = [];
    let chunks = [];
    let stack = [];
    let consumed = true;
    const effects = {
        consume,
        enter,
        exit: exit3,
        attempt: constructFactory(onsuccessfulconstruct),
        check: constructFactory(onsuccessfulcheck),
        interrupt: constructFactory(onsuccessfulcheck, {
            interrupt: true
        })
    };
    const context = {
        previous: null,
        code: null,
        containerState: {},
        events: [],
        parser: parser2,
        sliceStream,
        sliceSerialize,
        now,
        defineSkip,
        write
    };
    let state = initialize.tokenize.call(context, effects);
    let expectedCode;
    if (initialize.resolveAll) resolveAllConstructs.push(initialize);
    return context;
    function write(slice) {
        chunks = push(chunks, slice);
        main();
        if (chunks[chunks.length - 1] !== null) return [];
        addResult(initialize, 0);
        context.events = resolveAll(resolveAllConstructs, context.events, context);
        return context.events;
    }
    function sliceSerialize(token, expandTabs) {
        return serializeChunks(sliceStream(token), expandTabs);
    }
    function sliceStream(token) {
        return sliceChunks(chunks, token);
    }
    function now() {
        const { line, column, offset, _index, _bufferIndex } = point3;
        return {
            line,
            column,
            offset,
            _index,
            _bufferIndex
        };
    }
    function defineSkip(value) {
        columnStart[value.line] = value.column;
        accountForPotentialSkip();
    }
    function main() {
        let chunkIndex;
        while(point3._index < chunks.length){
            const chunk = chunks[point3._index];
            if (typeof chunk === "string") {
                chunkIndex = point3._index;
                if (point3._bufferIndex < 0) point3._bufferIndex = 0;
                while(point3._index === chunkIndex && point3._bufferIndex < chunk.length)go(chunk.charCodeAt(point3._bufferIndex));
            } else go(chunk);
        }
    }
    function go(code2) {
        consumed = void 0;
        expectedCode = code2;
        state = state(code2);
    }
    function consume(code2) {
        if (markdownLineEnding(code2)) {
            point3.line++;
            point3.column = 1;
            point3.offset += code2 === -3 ? 2 : 1;
            accountForPotentialSkip();
        } else if (code2 !== -1) {
            point3.column++;
            point3.offset++;
        }
        if (point3._bufferIndex < 0) point3._index++;
        else {
            point3._bufferIndex++;
            if (point3._bufferIndex === chunks[point3._index].length) {
                point3._bufferIndex = -1;
                point3._index++;
            }
        }
        context.previous = code2;
        consumed = true;
    }
    function enter(type, fields) {
        const token = fields || {};
        token.type = type;
        token.start = now();
        context.events.push([
            "enter",
            token,
            context
        ]);
        stack.push(token);
        return token;
    }
    function exit3(type) {
        const token = stack.pop();
        token.end = now();
        context.events.push([
            "exit",
            token,
            context
        ]);
        return token;
    }
    function onsuccessfulconstruct(construct, info) {
        addResult(construct, info.from);
    }
    function onsuccessfulcheck(_, info) {
        info.restore();
    }
    function constructFactory(onreturn, fields) {
        return hook;
        function hook(constructs2, returnState, bogusState) {
            let listOfConstructs;
            let constructIndex;
            let currentConstruct;
            let info;
            return Array.isArray(constructs2) ? handleListOfConstructs(constructs2) : "tokenize" in constructs2 ? // @ts-expect-error Looks like a construct.
            handleListOfConstructs([
                constructs2
            ]) : handleMapOfConstructs(constructs2);
            function handleMapOfConstructs(map2) {
                return start;
                function start(code2) {
                    const def = code2 !== null && map2[code2];
                    const all2 = code2 !== null && map2.null;
                    const list2 = [
                        // To do: add more extension tests.
                        /* c8 ignore next 2 */ ...Array.isArray(def) ? def : def ? [
                            def
                        ] : [],
                        ...Array.isArray(all2) ? all2 : all2 ? [
                            all2
                        ] : []
                    ];
                    return handleListOfConstructs(list2)(code2);
                }
            }
            function handleListOfConstructs(list2) {
                listOfConstructs = list2;
                constructIndex = 0;
                if (list2.length === 0) return bogusState;
                return handleConstruct(list2[constructIndex]);
            }
            function handleConstruct(construct) {
                return start;
                function start(code2) {
                    info = store();
                    currentConstruct = construct;
                    if (!construct.partial) context.currentConstruct = construct;
                    if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) return nok(code2);
                    return construct.tokenize.call(// If we do have fields, create an object w/ `context` as its
                    // prototype.
                    // This allows a “live binding”, which is needed for `interrupt`.
                    fields ? Object.assign(Object.create(context), fields) : context, effects, ok2, nok)(code2);
                }
            }
            function ok2(code2) {
                consumed = true;
                onreturn(currentConstruct, info);
                return returnState;
            }
            function nok(code2) {
                consumed = true;
                info.restore();
                if (++constructIndex < listOfConstructs.length) return handleConstruct(listOfConstructs[constructIndex]);
                return bogusState;
            }
        }
    }
    function addResult(construct, from2) {
        if (construct.resolveAll && !resolveAllConstructs.includes(construct)) resolveAllConstructs.push(construct);
        if (construct.resolve) splice(context.events, from2, context.events.length - from2, construct.resolve(context.events.slice(from2), context));
        if (construct.resolveTo) context.events = construct.resolveTo(context.events, context);
    }
    function store() {
        const startPoint = now();
        const startPrevious = context.previous;
        const startCurrentConstruct = context.currentConstruct;
        const startEventsIndex = context.events.length;
        const startStack = Array.from(stack);
        return {
            restore,
            from: startEventsIndex
        };
        function restore() {
            point3 = startPoint;
            context.previous = startPrevious;
            context.currentConstruct = startCurrentConstruct;
            context.events.length = startEventsIndex;
            stack = startStack;
            accountForPotentialSkip();
        }
    }
    function accountForPotentialSkip() {
        if (point3.line in columnStart && point3.column < 2) {
            point3.column = columnStart[point3.line];
            point3.offset += columnStart[point3.line] - 1;
        }
    }
}
function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    let view;
    if (startIndex === endIndex) view = [
        chunks[startIndex].slice(startBufferIndex, endBufferIndex)
    ];
    else {
        view = chunks.slice(startIndex, endIndex);
        if (startBufferIndex > -1) {
            const head = view[0];
            if (typeof head === "string") view[0] = head.slice(startBufferIndex);
            else view.shift();
        }
        if (endBufferIndex > 0) view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
    return view;
}
function serializeChunks(chunks, expandTabs) {
    let index2 = -1;
    const result = [];
    let atTab;
    while(++index2 < chunks.length){
        const chunk = chunks[index2];
        let value;
        if (typeof chunk === "string") value = chunk;
        else switch(chunk){
            case -5:
                value = "\r";
                break;
            case -4:
                value = "\n";
                break;
            case -3:
                value = "\r\n";
                break;
            case -2:
                value = expandTabs ? " " : "	";
                break;
            case -1:
                if (!expandTabs && atTab) continue;
                value = " ";
                break;
            default:
                value = String.fromCharCode(chunk);
        }
        atTab = chunk === -2;
        result.push(value);
    }
    return result.join("");
}
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
    attentionMarkers: ()=>attentionMarkers,
    contentInitial: ()=>contentInitial,
    disable: ()=>disable,
    document: ()=>document3,
    flow: ()=>flow2,
    flowInitial: ()=>flowInitial,
    insideSpan: ()=>insideSpan,
    string: ()=>string2,
    text: ()=>text3
});
init_react_shim();
var document3 = {
    [42]: list,
    [43]: list,
    [45]: list,
    [48]: list,
    [49]: list,
    [50]: list,
    [51]: list,
    [52]: list,
    [53]: list,
    [54]: list,
    [55]: list,
    [56]: list,
    [57]: list,
    [62]: blockQuote
};
var contentInitial = {
    [91]: definition
};
var flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented
};
var flow2 = {
    [35]: headingAtx,
    [42]: thematicBreak,
    [45]: [
        setextUnderline,
        thematicBreak
    ],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak,
    [96]: codeFenced,
    [126]: codeFenced
};
var string2 = {
    [38]: characterReference,
    [92]: characterEscape
};
var text3 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [
        autolink,
        htmlText
    ],
    [91]: labelStartLink,
    [92]: [
        hardBreakEscape,
        characterEscape
    ],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText
};
var insideSpan = {
    null: [
        attention,
        resolver
    ]
};
var attentionMarkers = {
    null: [
        42,
        95
    ]
};
var disable = {
    null: []
};
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/parse.js
function parse(options) {
    const settings = options || {};
    const constructs2 = /** @type {FullNormalizedExtension} */ combineExtensions([
        constructs_exports,
        ...settings.extensions || []
    ]);
    const parser2 = {
        defined: [],
        lazy: {},
        constructs: constructs2,
        content: create2(content2),
        document: create2(document2),
        flow: create2(flow),
        string: create2(string),
        text: create2(text2)
    };
    return parser2;
    function create2(initial) {
        return creator;
        function creator(from) {
            return createTokenizer(parser2, initial, from);
        }
    }
}
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/preprocess.js
init_react_shim();
var search = /[\0\t\n\r]/g;
function preprocess() {
    let column = 1;
    let buffer2 = "";
    let start = true;
    let atCarriageReturn;
    return preprocessor;
    function preprocessor(value, encoding, end) {
        const chunks = [];
        let match;
        let next;
        let startPosition;
        let endPosition;
        let code2;
        value = buffer2 + value.toString(encoding);
        startPosition = 0;
        buffer2 = "";
        if (start) {
            if (value.charCodeAt(0) === 65279) startPosition++;
            start = void 0;
        }
        while(startPosition < value.length){
            search.lastIndex = startPosition;
            match = search.exec(value);
            endPosition = match && match.index !== void 0 ? match.index : value.length;
            code2 = value.charCodeAt(endPosition);
            if (!match) {
                buffer2 = value.slice(startPosition);
                break;
            }
            if (code2 === 10 && startPosition === endPosition && atCarriageReturn) {
                chunks.push(-3);
                atCarriageReturn = void 0;
            } else {
                if (atCarriageReturn) {
                    chunks.push(-5);
                    atCarriageReturn = void 0;
                }
                if (startPosition < endPosition) {
                    chunks.push(value.slice(startPosition, endPosition));
                    column += endPosition - startPosition;
                }
                switch(code2){
                    case 0:
                        chunks.push(65533);
                        column++;
                        break;
                    case 9:
                        next = Math.ceil(column / 4) * 4;
                        chunks.push(-2);
                        while(column++ < next)chunks.push(-1);
                        break;
                    case 10:
                        chunks.push(-4);
                        column = 1;
                        break;
                    default:
                        atCarriageReturn = true;
                        column = 1;
                }
            }
            startPosition = endPosition + 1;
        }
        if (end) {
            if (atCarriageReturn) chunks.push(-5);
            if (buffer2) chunks.push(buffer2);
            chunks.push(null);
        }
        return chunks;
    }
}
// ../../node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/postprocess.js
init_react_shim();
function postprocess(events) {
    while(!subtokenize(events));
    return events;
}
// ../../node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/index.js
init_react_shim();
// ../../node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/lib/index.js
init_react_shim();
function stringifyPosition(value) {
    if (!value || typeof value !== "object") return "";
    if ("position" in value || "type" in value) return position(value.position);
    if ("start" in value || "end" in value) return position(value);
    if ("line" in value || "column" in value) return point(value);
    return "";
}
function point(point3) {
    return index(point3 && point3.line) + ":" + index(point3 && point3.column);
}
function position(pos) {
    return point(pos && pos.start) + "-" + point(pos && pos.end);
}
function index(value) {
    return value && typeof value === "number" ? value : 1;
}
// ../../node_modules/.pnpm/mdast-util-from-markdown@1.3.1/node_modules/mdast-util-from-markdown/lib/index.js
var own2 = {}.hasOwnProperty;
var fromMarkdown = /**
   * @type {(
   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
   *   ((value: Value, options?: Options | null | undefined) => Root)
   * )}
   */ /**
   * @param {Value} value
   * @param {Encoding | Options | null | undefined} [encoding]
   * @param {Options | null | undefined} [options]
   * @returns {Root}
   */ function(value, encoding, options) {
    if (typeof encoding !== "string") {
        options = encoding;
        encoding = void 0;
    }
    return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));
};
function compiler(options) {
    const config = {
        transforms: [],
        canContainEols: [
            "emphasis",
            "fragment",
            "heading",
            "paragraph",
            "strong"
        ],
        enter: {
            autolink: opener(link),
            autolinkProtocol: onenterdata,
            autolinkEmail: onenterdata,
            atxHeading: opener(heading),
            blockQuote: opener(blockQuote2),
            characterEscape: onenterdata,
            characterReference: onenterdata,
            codeFenced: opener(codeFlow),
            codeFencedFenceInfo: buffer2,
            codeFencedFenceMeta: buffer2,
            codeIndented: opener(codeFlow, buffer2),
            codeText: opener(codeText2, buffer2),
            codeTextData: onenterdata,
            data: onenterdata,
            codeFlowValue: onenterdata,
            definition: opener(definition2),
            definitionDestinationString: buffer2,
            definitionLabelString: buffer2,
            definitionTitleString: buffer2,
            emphasis: opener(emphasis),
            hardBreakEscape: opener(hardBreak),
            hardBreakTrailing: opener(hardBreak),
            htmlFlow: opener(html, buffer2),
            htmlFlowData: onenterdata,
            htmlText: opener(html, buffer2),
            htmlTextData: onenterdata,
            image: opener(image),
            label: buffer2,
            link: opener(link),
            listItem: opener(listItem2),
            listItemValue: onenterlistitemvalue,
            listOrdered: opener(list2, onenterlistordered),
            listUnordered: opener(list2),
            paragraph: opener(paragraph),
            reference: onenterreference,
            referenceString: buffer2,
            resourceDestinationString: buffer2,
            resourceTitleString: buffer2,
            setextHeading: opener(heading),
            strong: opener(strong),
            thematicBreak: opener(thematicBreak2)
        },
        exit: {
            atxHeading: closer(),
            atxHeadingSequence: onexitatxheadingsequence,
            autolink: closer(),
            autolinkEmail: onexitautolinkemail,
            autolinkProtocol: onexitautolinkprotocol,
            blockQuote: closer(),
            characterEscapeValue: onexitdata,
            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
            characterReferenceValue: onexitcharacterreferencevalue,
            codeFenced: closer(onexitcodefenced),
            codeFencedFence: onexitcodefencedfence,
            codeFencedFenceInfo: onexitcodefencedfenceinfo,
            codeFencedFenceMeta: onexitcodefencedfencemeta,
            codeFlowValue: onexitdata,
            codeIndented: closer(onexitcodeindented),
            codeText: closer(onexitcodetext),
            codeTextData: onexitdata,
            data: onexitdata,
            definition: closer(),
            definitionDestinationString: onexitdefinitiondestinationstring,
            definitionLabelString: onexitdefinitionlabelstring,
            definitionTitleString: onexitdefinitiontitlestring,
            emphasis: closer(),
            hardBreakEscape: closer(onexithardbreak),
            hardBreakTrailing: closer(onexithardbreak),
            htmlFlow: closer(onexithtmlflow),
            htmlFlowData: onexitdata,
            htmlText: closer(onexithtmltext),
            htmlTextData: onexitdata,
            image: closer(onexitimage),
            label: onexitlabel,
            labelText: onexitlabeltext,
            lineEnding: onexitlineending,
            link: closer(onexitlink),
            listItem: closer(),
            listOrdered: closer(),
            listUnordered: closer(),
            paragraph: closer(),
            referenceString: onexitreferencestring,
            resourceDestinationString: onexitresourcedestinationstring,
            resourceTitleString: onexitresourcetitlestring,
            resource: onexitresource,
            setextHeading: closer(onexitsetextheading),
            setextHeadingLineSequence: onexitsetextheadinglinesequence,
            setextHeadingText: onexitsetextheadingtext,
            strong: closer(),
            thematicBreak: closer()
        }
    };
    configure(config, (options || {}).mdastExtensions || []);
    const data2 = {};
    return compile;
    function compile(events) {
        let tree = {
            type: "root",
            children: []
        };
        const context = {
            stack: [
                tree
            ],
            tokenStack: [],
            config,
            enter,
            exit: exit3,
            buffer: buffer2,
            resume,
            setData,
            getData
        };
        const listStack = [];
        let index2 = -1;
        while(++index2 < events.length)if (events[index2][1].type === "listOrdered" || events[index2][1].type === "listUnordered") {
            if (events[index2][0] === "enter") listStack.push(index2);
            else {
                const tail = listStack.pop();
                index2 = prepareList(events, tail, index2);
            }
        }
        index2 = -1;
        while(++index2 < events.length){
            const handler = config[events[index2][0]];
            if (own2.call(handler, events[index2][1].type)) handler[events[index2][1].type].call(Object.assign({
                sliceSerialize: events[index2][2].sliceSerialize
            }, context), events[index2][1]);
        }
        if (context.tokenStack.length > 0) {
            const tail = context.tokenStack[context.tokenStack.length - 1];
            const handler = tail[1] || defaultOnError;
            handler.call(context, void 0, tail[0]);
        }
        tree.position = {
            start: point2(events.length > 0 ? events[0][1].start : {
                line: 1,
                column: 1,
                offset: 0
            }),
            end: point2(events.length > 0 ? events[events.length - 2][1].end : {
                line: 1,
                column: 1,
                offset: 0
            })
        };
        index2 = -1;
        while(++index2 < config.transforms.length)tree = config.transforms[index2](tree) || tree;
        return tree;
    }
    function prepareList(events, start, length) {
        let index2 = start - 1;
        let containerBalance = -1;
        let listSpread = false;
        let listItem3;
        let lineIndex;
        let firstBlankLineIndex;
        let atMarker;
        while(++index2 <= length){
            const event = events[index2];
            if (event[1].type === "listUnordered" || event[1].type === "listOrdered" || event[1].type === "blockQuote") {
                if (event[0] === "enter") containerBalance++;
                else containerBalance--;
                atMarker = void 0;
            } else if (event[1].type === "lineEndingBlank") {
                if (event[0] === "enter") {
                    if (listItem3 && !atMarker && !containerBalance && !firstBlankLineIndex) firstBlankLineIndex = index2;
                    atMarker = void 0;
                }
            } else if (event[1].type === "linePrefix" || event[1].type === "listItemValue" || event[1].type === "listItemMarker" || event[1].type === "listItemPrefix" || event[1].type === "listItemPrefixWhitespace") ;
            else atMarker = void 0;
            if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
                if (listItem3) {
                    let tailIndex = index2;
                    lineIndex = void 0;
                    while(tailIndex--){
                        const tailEvent = events[tailIndex];
                        if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
                            if (tailEvent[0] === "exit") continue;
                            if (lineIndex) {
                                events[lineIndex][1].type = "lineEndingBlank";
                                listSpread = true;
                            }
                            tailEvent[1].type = "lineEnding";
                            lineIndex = tailIndex;
                        } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") ;
                        else break;
                    }
                    if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) listItem3._spread = true;
                    listItem3.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
                    events.splice(lineIndex || index2, 0, [
                        "exit",
                        listItem3,
                        event[2]
                    ]);
                    index2++;
                    length++;
                }
                if (event[1].type === "listItemPrefix") {
                    listItem3 = {
                        type: "listItem",
                        _spread: false,
                        start: Object.assign({}, event[1].start),
                        // @ts-expect-error: we’ll add `end` in a second.
                        end: void 0
                    };
                    events.splice(index2, 0, [
                        "enter",
                        listItem3,
                        event[2]
                    ]);
                    index2++;
                    length++;
                    firstBlankLineIndex = void 0;
                    atMarker = true;
                }
            }
        }
        events[start][1]._spread = listSpread;
        return length;
    }
    function setData(key2, value) {
        data2[key2] = value;
    }
    function getData(key2) {
        return data2[key2];
    }
    function opener(create2, and) {
        return open;
        function open(token) {
            enter.call(this, create2(token), token);
            if (and) and.call(this, token);
        }
    }
    function buffer2() {
        this.stack.push({
            type: "fragment",
            children: []
        });
    }
    function enter(node2, token, errorHandler) {
        const parent = this.stack[this.stack.length - 1];
        parent.children.push(node2);
        this.stack.push(node2);
        this.tokenStack.push([
            token,
            errorHandler
        ]);
        node2.position = {
            start: point2(token.start)
        };
        return node2;
    }
    function closer(and) {
        return close;
        function close(token) {
            if (and) and.call(this, token);
            exit3.call(this, token);
        }
    }
    function exit3(token, onExitError) {
        const node2 = this.stack.pop();
        const open = this.tokenStack.pop();
        if (!open) throw new Error("Cannot close `" + token.type + "` (" + stringifyPosition({
            start: token.start,
            end: token.end
        }) + "): it\u2019s not open");
        else if (open[0].type !== token.type) {
            if (onExitError) onExitError.call(this, token, open[0]);
            else {
                const handler = open[1] || defaultOnError;
                handler.call(this, token, open[0]);
            }
        }
        node2.position.end = point2(token.end);
        return node2;
    }
    function resume() {
        return toString(this.stack.pop());
    }
    function onenterlistordered() {
        setData("expectingFirstListItemValue", true);
    }
    function onenterlistitemvalue(token) {
        if (getData("expectingFirstListItemValue")) {
            const ancestor = this.stack[this.stack.length - 2];
            ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
            setData("expectingFirstListItemValue");
        }
    }
    function onexitcodefencedfenceinfo() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.lang = data3;
    }
    function onexitcodefencedfencemeta() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.meta = data3;
    }
    function onexitcodefencedfence() {
        if (getData("flowCodeInside")) return;
        this.buffer();
        setData("flowCodeInside", true);
    }
    function onexitcodefenced() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.value = data3.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
        setData("flowCodeInside");
    }
    function onexitcodeindented() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.value = data3.replace(/(\r?\n|\r)$/g, "");
    }
    function onexitdefinitionlabelstring(token) {
        const label = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.label = label;
        node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
    }
    function onexitdefinitiontitlestring() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.title = data3;
    }
    function onexitdefinitiondestinationstring() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.url = data3;
    }
    function onexitatxheadingsequence(token) {
        const node2 = this.stack[this.stack.length - 1];
        if (!node2.depth) {
            const depth = this.sliceSerialize(token).length;
            node2.depth = depth;
        }
    }
    function onexitsetextheadingtext() {
        setData("setextHeadingSlurpLineEnding", true);
    }
    function onexitsetextheadinglinesequence(token) {
        const node2 = this.stack[this.stack.length - 1];
        node2.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
    }
    function onexitsetextheading() {
        setData("setextHeadingSlurpLineEnding");
    }
    function onenterdata(token) {
        const node2 = this.stack[this.stack.length - 1];
        let tail = node2.children[node2.children.length - 1];
        if (!tail || tail.type !== "text") {
            tail = text4();
            tail.position = {
                start: point2(token.start)
            };
            node2.children.push(tail);
        }
        this.stack.push(tail);
    }
    function onexitdata(token) {
        const tail = this.stack.pop();
        tail.value += this.sliceSerialize(token);
        tail.position.end = point2(token.end);
    }
    function onexitlineending(token) {
        const context = this.stack[this.stack.length - 1];
        if (getData("atHardBreak")) {
            const tail = context.children[context.children.length - 1];
            tail.position.end = point2(token.end);
            setData("atHardBreak");
            return;
        }
        if (!getData("setextHeadingSlurpLineEnding") && config.canContainEols.includes(context.type)) {
            onenterdata.call(this, token);
            onexitdata.call(this, token);
        }
    }
    function onexithardbreak() {
        setData("atHardBreak", true);
    }
    function onexithtmlflow() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.value = data3;
    }
    function onexithtmltext() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.value = data3;
    }
    function onexitcodetext() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.value = data3;
    }
    function onexitlink() {
        const node2 = this.stack[this.stack.length - 1];
        if (getData("inReference")) {
            const referenceType = getData("referenceType") || "shortcut";
            node2.type += "Reference";
            node2.referenceType = referenceType;
            delete node2.url;
            delete node2.title;
        } else {
            delete node2.identifier;
            delete node2.label;
        }
        setData("referenceType");
    }
    function onexitimage() {
        const node2 = this.stack[this.stack.length - 1];
        if (getData("inReference")) {
            const referenceType = getData("referenceType") || "shortcut";
            node2.type += "Reference";
            node2.referenceType = referenceType;
            delete node2.url;
            delete node2.title;
        } else {
            delete node2.identifier;
            delete node2.label;
        }
        setData("referenceType");
    }
    function onexitlabeltext(token) {
        const string3 = this.sliceSerialize(token);
        const ancestor = this.stack[this.stack.length - 2];
        ancestor.label = decodeString(string3);
        ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
    }
    function onexitlabel() {
        const fragment = this.stack[this.stack.length - 1];
        const value = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        setData("inReference", true);
        if (node2.type === "link") {
            const children = fragment.children;
            node2.children = children;
        } else node2.alt = value;
    }
    function onexitresourcedestinationstring() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.url = data3;
    }
    function onexitresourcetitlestring() {
        const data3 = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.title = data3;
    }
    function onexitresource() {
        setData("inReference");
    }
    function onenterreference() {
        setData("referenceType", "collapsed");
    }
    function onexitreferencestring(token) {
        const label = this.resume();
        const node2 = this.stack[this.stack.length - 1];
        node2.label = label;
        node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
        setData("referenceType", "full");
    }
    function onexitcharacterreferencemarker(token) {
        setData("characterReferenceType", token.type);
    }
    function onexitcharacterreferencevalue(token) {
        const data3 = this.sliceSerialize(token);
        const type = getData("characterReferenceType");
        let value;
        if (type) {
            value = decodeNumericCharacterReference(data3, type === "characterReferenceMarkerNumeric" ? 10 : 16);
            setData("characterReferenceType");
        } else {
            const result = decodeNamedCharacterReference(data3);
            value = result;
        }
        const tail = this.stack.pop();
        tail.value += value;
        tail.position.end = point2(token.end);
    }
    function onexitautolinkprotocol(token) {
        onexitdata.call(this, token);
        const node2 = this.stack[this.stack.length - 1];
        node2.url = this.sliceSerialize(token);
    }
    function onexitautolinkemail(token) {
        onexitdata.call(this, token);
        const node2 = this.stack[this.stack.length - 1];
        node2.url = "mailto:" + this.sliceSerialize(token);
    }
    function blockQuote2() {
        return {
            type: "blockquote",
            children: []
        };
    }
    function codeFlow() {
        return {
            type: "code",
            lang: null,
            meta: null,
            value: ""
        };
    }
    function codeText2() {
        return {
            type: "inlineCode",
            value: ""
        };
    }
    function definition2() {
        return {
            type: "definition",
            identifier: "",
            label: null,
            title: null,
            url: ""
        };
    }
    function emphasis() {
        return {
            type: "emphasis",
            children: []
        };
    }
    function heading() {
        return {
            type: "heading",
            depth: void 0,
            children: []
        };
    }
    function hardBreak() {
        return {
            type: "break"
        };
    }
    function html() {
        return {
            type: "html",
            value: ""
        };
    }
    function image() {
        return {
            type: "image",
            title: null,
            url: "",
            alt: null
        };
    }
    function link() {
        return {
            type: "link",
            title: null,
            url: "",
            children: []
        };
    }
    function list2(token) {
        return {
            type: "list",
            ordered: token.type === "listOrdered",
            start: null,
            spread: token._spread,
            children: []
        };
    }
    function listItem2(token) {
        return {
            type: "listItem",
            spread: token._spread,
            checked: null,
            children: []
        };
    }
    function paragraph() {
        return {
            type: "paragraph",
            children: []
        };
    }
    function strong() {
        return {
            type: "strong",
            children: []
        };
    }
    function text4() {
        return {
            type: "text",
            value: ""
        };
    }
    function thematicBreak2() {
        return {
            type: "thematicBreak"
        };
    }
}
function point2(d) {
    return {
        line: d.line,
        column: d.column,
        offset: d.offset
    };
}
function configure(combined, extensions) {
    let index2 = -1;
    while(++index2 < extensions.length){
        const value = extensions[index2];
        if (Array.isArray(value)) configure(combined, value);
        else extension(combined, value);
    }
}
function extension(combined, extension2) {
    let key2;
    for(key2 in extension2)if (own2.call(extension2, key2)) {
        if (key2 === "canContainEols") {
            const right = extension2[key2];
            if (right) combined[key2].push(...right);
        } else if (key2 === "transforms") {
            const right = extension2[key2];
            if (right) combined[key2].push(...right);
        } else if (key2 === "enter" || key2 === "exit") {
            const right = extension2[key2];
            if (right) Object.assign(combined[key2], right);
        }
    }
}
function defaultOnError(left, right) {
    if (left) throw new Error("Cannot close `" + left.type + "` (" + stringifyPosition({
        start: left.start,
        end: left.end
    }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
        start: right.start,
        end: right.end
    }) + ") is open");
    else throw new Error("Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
        start: right.start,
        end: right.end
    }) + ") is still open");
}
// ../../node_modules/.pnpm/remark-parse@10.0.1/node_modules/remark-parse/lib/index.js
function remarkParse(options) {
    const parser2 = (doc)=>{
        const settings = /** @type {Options} */ this.data("settings");
        return fromMarkdown(doc, Object.assign({}, settings, options, {
            // Note: these options are not in the readme.
            // The goal is for them to be set by plugins on `data` instead of being
            // passed by users.
            extensions: this.data("micromarkExtensions") || [],
            mdastExtensions: this.data("fromMarkdownExtensions") || []
        }));
    };
    Object.assign(this, {
        Parser: parser2
    });
}
// ../../node_modules/.pnpm/remark-parse@10.0.1/node_modules/remark-parse/index.js
var remark_parse_default = remarkParse;
// ../../node_modules/.pnpm/unified@10.1.2/node_modules/unified/index.js
init_react_shim();
// ../../node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js
init_react_shim();
// ../../node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js
init_react_shim();
function bail(error) {
    if (error) throw error;
}
// ../../node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js
var import_is_buffer2 = __toESM(require_is_buffer(), 1);
var import_extend = __toESM(require_extend(), 1);
// ../../node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js
init_react_shim();
function isPlainObject(value) {
    if (typeof value !== "object" || value === null) return false;
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}
// ../../node_modules/.pnpm/trough@2.1.0/node_modules/trough/index.js
init_react_shim();
function trough() {
    const fns = [];
    const pipeline = {
        run,
        use
    };
    return pipeline;
    function run(...values) {
        let middlewareIndex = -1;
        const callback = values.pop();
        if (typeof callback !== "function") throw new TypeError("Expected function as last argument, not " + callback);
        next(null, ...values);
        function next(error, ...output) {
            const fn = fns[++middlewareIndex];
            let index2 = -1;
            if (error) {
                callback(error);
                return;
            }
            while(++index2 < values.length)if (output[index2] === null || output[index2] === void 0) output[index2] = values[index2];
            values = output;
            if (fn) wrap(fn, next)(...output);
            else callback(null, ...output);
        }
    }
    function use(middelware) {
        if (typeof middelware !== "function") throw new TypeError("Expected `middelware` to be a function, not " + middelware);
        fns.push(middelware);
        return pipeline;
    }
}
function wrap(middleware, callback) {
    let called;
    return wrapped;
    function wrapped(...parameters) {
        const fnExpectsCallback = middleware.length > parameters.length;
        let result;
        if (fnExpectsCallback) parameters.push(done);
        try {
            result = middleware.apply(this, parameters);
        } catch (error) {
            const exception = /** @type {Error} */ error;
            if (fnExpectsCallback && called) throw exception;
            return done(exception);
        }
        if (!fnExpectsCallback) {
            if (result instanceof Promise) result.then(then, done);
            else if (result instanceof Error) done(result);
            else then(result);
        }
    }
    function done(error, ...output) {
        if (!called) {
            called = true;
            callback(error, ...output);
        }
    }
    function then(value) {
        done(null, value);
    }
}
// ../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/index.js
init_react_shim();
// ../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/index.js
init_react_shim();
var import_is_buffer = __toESM(require_is_buffer(), 1);
// ../../node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/index.js
init_react_shim();
// ../../node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/lib/index.js
init_react_shim();
var VFileMessage = class extends Error {
    /**
   * Create a message for `reason` at `place` from `origin`.
   *
   * When an error is passed in as `reason`, the `stack` is copied.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   *
   *   > 👉 **Note**: you should use markdown.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */ // To do: next major: expose `undefined` everywhere instead of `null`.
    constructor(reason, place, origin){
        const parts = [
            null,
            null
        ];
        let position2 = {
            // @ts-expect-error: we always follows the structure of `position`.
            start: {
                line: null,
                column: null
            },
            // @ts-expect-error: "
            end: {
                line: null,
                column: null
            }
        };
        super();
        if (typeof place === "string") {
            origin = place;
            place = void 0;
        }
        if (typeof origin === "string") {
            const index2 = origin.indexOf(":");
            if (index2 === -1) parts[1] = origin;
            else {
                parts[0] = origin.slice(0, index2);
                parts[1] = origin.slice(index2 + 1);
            }
        }
        if (place) {
            if ("type" in place || "position" in place) {
                if (place.position) position2 = place.position;
            } else if ("start" in place || "end" in place) position2 = place;
            else if ("line" in place || "column" in place) position2.start = place;
        }
        this.name = stringifyPosition(place) || "1:1";
        this.message = typeof reason === "object" ? reason.message : reason;
        this.stack = "";
        if (typeof reason === "object" && reason.stack) this.stack = reason.stack;
        this.reason = this.message;
        this.fatal;
        this.line = position2.start.line;
        this.column = position2.start.column;
        this.position = position2;
        this.source = parts[0];
        this.ruleId = parts[1];
        this.file;
        this.actual;
        this.expected;
        this.url;
        this.note;
    }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;
// ../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minpath.browser.js
init_react_shim();
var path2 = {
    basename,
    dirname,
    extname,
    join,
    sep: "/"
};
function basename(path3, ext) {
    if (ext !== void 0 && typeof ext !== "string") throw new TypeError('"ext" argument must be a string');
    assertPath(path3);
    let start = 0;
    let end = -1;
    let index2 = path3.length;
    let seenNonSlash;
    if (ext === void 0 || ext.length === 0 || ext.length > path3.length) {
        while(index2--){
            if (path3.charCodeAt(index2) === 47) {
                if (seenNonSlash) {
                    start = index2 + 1;
                    break;
                }
            } else if (end < 0) {
                seenNonSlash = true;
                end = index2 + 1;
            }
        }
        return end < 0 ? "" : path3.slice(start, end);
    }
    if (ext === path3) return "";
    let firstNonSlashEnd = -1;
    let extIndex = ext.length - 1;
    while(index2--){
        if (path3.charCodeAt(index2) === 47) {
            if (seenNonSlash) {
                start = index2 + 1;
                break;
            }
        } else {
            if (firstNonSlashEnd < 0) {
                seenNonSlash = true;
                firstNonSlashEnd = index2 + 1;
            }
            if (extIndex > -1) {
                if (path3.charCodeAt(index2) === ext.charCodeAt(extIndex--)) {
                    if (extIndex < 0) end = index2;
                } else {
                    extIndex = -1;
                    end = firstNonSlashEnd;
                }
            }
        }
    }
    if (start === end) end = firstNonSlashEnd;
    else if (end < 0) end = path3.length;
    return path3.slice(start, end);
}
function dirname(path3) {
    assertPath(path3);
    if (path3.length === 0) return ".";
    let end = -1;
    let index2 = path3.length;
    let unmatchedSlash;
    while(--index2){
        if (path3.charCodeAt(index2) === 47) {
            if (unmatchedSlash) {
                end = index2;
                break;
            }
        } else if (!unmatchedSlash) unmatchedSlash = true;
    }
    return end < 0 ? path3.charCodeAt(0) === 47 ? "/" : "." : end === 1 && path3.charCodeAt(0) === 47 ? "//" : path3.slice(0, end);
}
function extname(path3) {
    assertPath(path3);
    let index2 = path3.length;
    let end = -1;
    let startPart = 0;
    let startDot = -1;
    let preDotState = 0;
    let unmatchedSlash;
    while(index2--){
        const code2 = path3.charCodeAt(index2);
        if (code2 === 47) {
            if (unmatchedSlash) {
                startPart = index2 + 1;
                break;
            }
            continue;
        }
        if (end < 0) {
            unmatchedSlash = true;
            end = index2 + 1;
        }
        if (code2 === 46) {
            if (startDot < 0) startDot = index2;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot > -1) preDotState = -1;
    }
    if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.
    preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) return "";
    return path3.slice(startDot, end);
}
function join(...segments) {
    let index2 = -1;
    let joined;
    while(++index2 < segments.length){
        assertPath(segments[index2]);
        if (segments[index2]) joined = joined === void 0 ? segments[index2] : joined + "/" + segments[index2];
    }
    return joined === void 0 ? "." : normalize(joined);
}
function normalize(path3) {
    assertPath(path3);
    const absolute = path3.charCodeAt(0) === 47;
    let value = normalizeString(path3, !absolute);
    if (value.length === 0 && !absolute) value = ".";
    if (value.length > 0 && path3.charCodeAt(path3.length - 1) === 47) value += "/";
    return absolute ? "/" + value : value;
}
function normalizeString(path3, allowAboveRoot) {
    let result = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let index2 = -1;
    let code2;
    let lastSlashIndex;
    while(++index2 <= path3.length){
        if (index2 < path3.length) code2 = path3.charCodeAt(index2);
        else if (code2 === 47) break;
        else code2 = 47;
        if (code2 === 47) {
            if (lastSlash === index2 - 1 || dots === 1) ;
            else if (lastSlash !== index2 - 1 && dots === 2) {
                if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
                    if (result.length > 2) {
                        lastSlashIndex = result.lastIndexOf("/");
                        if (lastSlashIndex !== result.length - 1) {
                            if (lastSlashIndex < 0) {
                                result = "";
                                lastSegmentLength = 0;
                            } else {
                                result = result.slice(0, lastSlashIndex);
                                lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
                            }
                            lastSlash = index2;
                            dots = 0;
                            continue;
                        }
                    } else if (result.length > 0) {
                        result = "";
                        lastSegmentLength = 0;
                        lastSlash = index2;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    result = result.length > 0 ? result + "/.." : "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (result.length > 0) result += "/" + path3.slice(lastSlash + 1, index2);
                else result = path3.slice(lastSlash + 1, index2);
                lastSegmentLength = index2 - lastSlash - 1;
            }
            lastSlash = index2;
            dots = 0;
        } else if (code2 === 46 && dots > -1) dots++;
        else dots = -1;
    }
    return result;
}
function assertPath(path3) {
    if (typeof path3 !== "string") throw new TypeError("Path must be a string. Received " + JSON.stringify(path3));
}
// ../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minproc.browser.js
init_react_shim();
var proc = {
    cwd
};
function cwd() {
    return "/";
}
// ../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.browser.js
init_react_shim();
// ../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.shared.js
init_react_shim();
function isUrl(fileUrlOrPath) {
    return fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && // @ts-expect-error: indexable.
    fileUrlOrPath.href && // @ts-expect-error: indexable.
    fileUrlOrPath.origin;
}
// ../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.browser.js
function urlToPath(path3) {
    if (typeof path3 === "string") path3 = new URL(path3);
    else if (!isUrl(path3)) {
        const error = new TypeError('The "path" argument must be of type string or an instance of URL. Received `' + path3 + "`");
        error.code = "ERR_INVALID_ARG_TYPE";
        throw error;
    }
    if (path3.protocol !== "file:") {
        const error = new TypeError("The URL must be of scheme file");
        error.code = "ERR_INVALID_URL_SCHEME";
        throw error;
    }
    return getPathFromURLPosix(path3);
}
function getPathFromURLPosix(url) {
    if (url.hostname !== "") {
        const error = new TypeError('File URL host must be "localhost" or empty on darwin');
        error.code = "ERR_INVALID_FILE_URL_HOST";
        throw error;
    }
    const pathname = url.pathname;
    let index2 = -1;
    while(++index2 < pathname.length)if (pathname.charCodeAt(index2) === 37 && pathname.charCodeAt(index2 + 1) === 50) {
        const third = pathname.charCodeAt(index2 + 2);
        if (third === 70 || third === 102) {
            const error = new TypeError("File URL path must not include encoded / characters");
            error.code = "ERR_INVALID_FILE_URL_PATH";
            throw error;
        }
    }
    return decodeURIComponent(pathname);
}
// ../../node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/index.js
var order = [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
];
var VFile = class {
    /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Buffer` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */ constructor(value){
        let options;
        if (!value) options = {};
        else if (typeof value === "string" || buffer(value)) options = {
            value
        };
        else if (isUrl(value)) options = {
            path: value
        };
        else options = value;
        this.data = {};
        this.messages = [];
        this.history = [];
        this.cwd = proc.cwd();
        this.value;
        this.stored;
        this.result;
        this.map;
        let index2 = -1;
        while(++index2 < order.length){
            const prop2 = order[index2];
            if (prop2 in options && options[prop2] !== void 0 && options[prop2] !== null) this[prop2] = prop2 === "history" ? [
                ...options[prop2]
            ] : options[prop2];
        }
        let prop;
        for(prop in options)if (!order.includes(prop)) this[prop] = options[prop];
    }
    /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   */ get path() {
        return this.history[this.history.length - 1];
    }
    /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {string | URL} path
   */ set path(path3) {
        if (isUrl(path3)) path3 = urlToPath(path3);
        assertNonEmpty(path3, "path");
        if (this.path !== path3) this.history.push(path3);
    }
    /**
   * Get the parent path (example: `'~'`).
   */ get dirname() {
        return typeof this.path === "string" ? path2.dirname(this.path) : void 0;
    }
    /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   */ set dirname(dirname2) {
        assertPath2(this.basename, "dirname");
        this.path = path2.join(dirname2 || "", this.basename);
    }
    /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   */ get basename() {
        return typeof this.path === "string" ? path2.basename(this.path) : void 0;
    }
    /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */ set basename(basename2) {
        assertNonEmpty(basename2, "basename");
        assertPart(basename2, "basename");
        this.path = path2.join(this.dirname || "", basename2);
    }
    /**
   * Get the extname (including dot) (example: `'.js'`).
   */ get extname() {
        return typeof this.path === "string" ? path2.extname(this.path) : void 0;
    }
    /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   */ set extname(extname2) {
        assertPart(extname2, "extname");
        assertPath2(this.dirname, "extname");
        if (extname2) {
            if (extname2.charCodeAt(0) !== 46) throw new Error("`extname` must start with `.`");
            if (extname2.includes(".", 1)) throw new Error("`extname` cannot contain multiple dots");
        }
        this.path = path2.join(this.dirname, this.stem + (extname2 || ""));
    }
    /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   */ get stem() {
        return typeof this.path === "string" ? path2.basename(this.path, this.extname) : void 0;
    }
    /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */ set stem(stem) {
        assertNonEmpty(stem, "stem");
        assertPart(stem, "stem");
        this.path = path2.join(this.dirname || "", stem + (this.extname || ""));
    }
    /**
   * Serialize the file.
   *
   * @param {BufferEncoding | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Buffer`
   *   (default: `'utf8'`).
   * @returns {string}
   *   Serialized file.
   */ toString(encoding) {
        return (this.value || "").toString(encoding || void 0);
    }
    /**
   * Create a warning message associated with the file.
   *
   * Its `fatal` is set to `false` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ message(reason, place, origin) {
        const message = new VFileMessage(reason, place, origin);
        if (this.path) {
            message.name = this.path + ":" + message.name;
            message.file = this.path;
        }
        message.fatal = false;
        this.messages.push(message);
        return message;
    }
    /**
   * Create an info message associated with the file.
   *
   * Its `fatal` is set to `null` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */ info(reason, place, origin) {
        const message = this.message(reason, place, origin);
        message.fatal = null;
        return message;
    }
    /**
   * Create a fatal error associated with the file.
   *
   * Its `fatal` is set to `true` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * > 👉 **Note**: a fatal error means that a file is no longer processable.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Message.
   * @throws {VFileMessage}
   *   Message.
   */ fail(reason, place, origin) {
        const message = this.message(reason, place, origin);
        message.fatal = true;
        throw message;
    }
};
function assertPart(part, name) {
    if (part && part.includes(path2.sep)) throw new Error("`" + name + "` cannot be a path: did not expect `" + path2.sep + "`");
}
function assertNonEmpty(part, name) {
    if (!part) throw new Error("`" + name + "` cannot be empty");
}
function assertPath2(path3, name) {
    if (!path3) throw new Error("Setting `" + name + "` requires `path` to be set too");
}
function buffer(value) {
    return (0, import_is_buffer.default)(value);
}
// ../../node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js
var unified = base().freeze();
var own3 = {}.hasOwnProperty;
function base() {
    const transformers = trough();
    const attachers = [];
    let namespace = {};
    let frozen;
    let freezeIndex = -1;
    processor.data = data2;
    processor.Parser = void 0;
    processor.Compiler = void 0;
    processor.freeze = freeze;
    processor.attachers = attachers;
    processor.use = use;
    processor.parse = parse3;
    processor.stringify = stringify;
    processor.run = run;
    processor.runSync = runSync;
    processor.process = process;
    processor.processSync = processSync;
    return processor;
    function processor() {
        const destination = base();
        let index2 = -1;
        while(++index2 < attachers.length)destination.use(...attachers[index2]);
        destination.data((0, import_extend.default)(true, {}, namespace));
        return destination;
    }
    function data2(key2, value) {
        if (typeof key2 === "string") {
            if (arguments.length === 2) {
                assertUnfrozen("data", frozen);
                namespace[key2] = value;
                return processor;
            }
            return own3.call(namespace, key2) && namespace[key2] || null;
        }
        if (key2) {
            assertUnfrozen("data", frozen);
            namespace = key2;
            return processor;
        }
        return namespace;
    }
    function freeze() {
        if (frozen) return processor;
        while(++freezeIndex < attachers.length){
            const [attacher, ...options] = attachers[freezeIndex];
            if (options[0] === false) continue;
            if (options[0] === true) options[0] = void 0;
            const transformer = attacher.call(processor, ...options);
            if (typeof transformer === "function") transformers.use(transformer);
        }
        frozen = true;
        freezeIndex = Number.POSITIVE_INFINITY;
        return processor;
    }
    function use(value, ...options) {
        let settings;
        assertUnfrozen("use", frozen);
        if (value === null || value === void 0) ;
        else if (typeof value === "function") addPlugin(value, ...options);
        else if (typeof value === "object") {
            if (Array.isArray(value)) addList(value);
            else addPreset(value);
        } else throw new TypeError("Expected usable value, not `" + value + "`");
        if (settings) namespace.settings = Object.assign(namespace.settings || {}, settings);
        return processor;
        function add(value2) {
            if (typeof value2 === "function") addPlugin(value2);
            else if (typeof value2 === "object") {
                if (Array.isArray(value2)) {
                    const [plugin, ...options2] = value2;
                    addPlugin(plugin, ...options2);
                } else addPreset(value2);
            } else throw new TypeError("Expected usable value, not `" + value2 + "`");
        }
        function addPreset(result) {
            addList(result.plugins);
            if (result.settings) settings = Object.assign(settings || {}, result.settings);
        }
        function addList(plugins2) {
            let index2 = -1;
            if (plugins2 === null || plugins2 === void 0) ;
            else if (Array.isArray(plugins2)) while(++index2 < plugins2.length){
                const thing = plugins2[index2];
                add(thing);
            }
            else throw new TypeError("Expected a list of plugins, not `" + plugins2 + "`");
        }
        function addPlugin(plugin, value2) {
            let index2 = -1;
            let entry;
            while(++index2 < attachers.length)if (attachers[index2][0] === plugin) {
                entry = attachers[index2];
                break;
            }
            if (entry) {
                if (isPlainObject(entry[1]) && isPlainObject(value2)) value2 = (0, import_extend.default)(true, entry[1], value2);
                entry[1] = value2;
            } else attachers.push([
                ...arguments
            ]);
        }
    }
    function parse3(doc) {
        processor.freeze();
        const file = vfile(doc);
        const Parser = processor.Parser;
        assertParser("parse", Parser);
        if (newable(Parser, "parse")) return new Parser(String(file), file).parse();
        return Parser(String(file), file);
    }
    function stringify(node2, doc) {
        processor.freeze();
        const file = vfile(doc);
        const Compiler = processor.Compiler;
        assertCompiler("stringify", Compiler);
        assertNode(node2);
        if (newable(Compiler, "compile")) return new Compiler(node2, file).compile();
        return Compiler(node2, file);
    }
    function run(node2, doc, callback) {
        assertNode(node2);
        processor.freeze();
        if (!callback && typeof doc === "function") {
            callback = doc;
            doc = void 0;
        }
        if (!callback) return new Promise(executor);
        executor(null, callback);
        function executor(resolve, reject) {
            transformers.run(node2, vfile(doc), done);
            function done(error, tree, file) {
                tree = tree || node2;
                if (error) reject(error);
                else if (resolve) resolve(tree);
                else callback(null, tree, file);
            }
        }
    }
    function runSync(node2, file) {
        let result;
        let complete;
        processor.run(node2, file, done);
        assertDone("runSync", "run", complete);
        return result;
        function done(error, tree) {
            bail(error);
            result = tree;
            complete = true;
        }
    }
    function process(doc, callback) {
        processor.freeze();
        assertParser("process", processor.Parser);
        assertCompiler("process", processor.Compiler);
        if (!callback) return new Promise(executor);
        executor(null, callback);
        function executor(resolve, reject) {
            const file = vfile(doc);
            processor.run(processor.parse(file), file, (error, tree, file2)=>{
                if (error || !tree || !file2) done(error);
                else {
                    const result = processor.stringify(tree, file2);
                    if (result === void 0 || result === null) ;
                    else if (looksLikeAVFileValue(result)) file2.value = result;
                    else file2.result = result;
                    done(error, file2);
                }
            });
            function done(error, file2) {
                if (error || !file2) reject(error);
                else if (resolve) resolve(file2);
                else callback(null, file2);
            }
        }
    }
    function processSync(doc) {
        let complete;
        processor.freeze();
        assertParser("processSync", processor.Parser);
        assertCompiler("processSync", processor.Compiler);
        const file = vfile(doc);
        processor.process(file, done);
        assertDone("processSync", "process", complete);
        return file;
        function done(error) {
            complete = true;
            bail(error);
        }
    }
}
function newable(value, name) {
    return typeof value === "function" && // Prototypes do exist.
    // type-coverage:ignore-next-line
    value.prototype && // A function with keys in its prototype is probably a constructor.
    // Classes’ prototype methods are not enumerable, so we check if some value
    // exists in the prototype.
    // type-coverage:ignore-next-line
    (keys(value.prototype) || name in value.prototype);
}
function keys(value) {
    let key2;
    for(key2 in value){
        if (own3.call(value, key2)) return true;
    }
    return false;
}
function assertParser(name, value) {
    if (typeof value !== "function") throw new TypeError("Cannot `" + name + "` without `Parser`");
}
function assertCompiler(name, value) {
    if (typeof value !== "function") throw new TypeError("Cannot `" + name + "` without `Compiler`");
}
function assertUnfrozen(name, frozen) {
    if (frozen) throw new Error("Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.");
}
function assertNode(node2) {
    if (!isPlainObject(node2) || typeof node2.type !== "string") throw new TypeError("Expected node, got `" + node2 + "`");
}
function assertDone(name, asyncName, complete) {
    if (!complete) throw new Error("`" + name + "` finished async. Use `" + asyncName + "` instead");
}
function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value);
}
function looksLikeAVFile(value) {
    return Boolean(value && typeof value === "object" && "message" in value && "messages" in value);
}
function looksLikeAVFileValue(value) {
    return typeof value === "string" || (0, import_is_buffer2.default)(value);
}
// ../react/src/convert/parse/parse-content.ts
init_react_shim();
// ../react/src/convert/utils.ts
init_react_shim();
function assert(pass, message) {
    if (!pass) throw new Error(`${message}`);
}
function assertElementType(element2, type) {
    if (element2.type !== type) throw new Error(`Expected element to be of type ${JSON.stringify(element2)} but is ${JSON.stringify(element2, null, 2)}`);
}
function assertUnreachable(x) {
    throw new Error(`Didn't expect to get here with value ${JSON.stringify(x, null, 2)}`);
}
// ../react/src/convert/parse/parse-blockquote.ts
init_react_shim();
function parseBlockquote(content3) {
    return [
        {
            type: "block-quote",
            children: parseContents(content3.children)
        }
    ];
}
// ../react/src/convert/parse/parse-code-block.ts
init_react_shim();
function parseCodeBlock(content3) {
    const codeLines = content3.value.split("\n");
    return [
        {
            type: "code-block",
            language: content3.lang || "text",
            children: codeLines.map((codeLine)=>({
                    type: "code-block-line",
                    children: [
                        {
                            text: codeLine
                        }
                    ]
                }))
        }
    ];
}
// ../react/src/convert/parse/parse-footnote-definition.ts
init_react_shim();
function parseFootnoteDefinition(footnote) {
    return [
        {
            type: "block-quote",
            children: [
                /**
         * Insert an initial paragraph with the footnote identifier in square
         * brackets.
         */ {
                    type: "paragraph",
                    children: [
                        {
                            text: `[${footnote.identifier}]`
                        }
                    ]
                },
                /**
         * The rest of the children are parsed as is and supports the full range
         * of element types like headings, lists and nested block quotes.
         */ ...parseContents(footnote.children)
            ]
        }
    ];
}
// ../react/src/convert/parse/parse-heading.ts
init_react_shim();
// ../react/src/convert/parse/parse-phrasing-content/parse-phrasing-content.ts
init_react_shim();
// ../react/src/convert/parse/parse-phrasing-content/normalize-segments.ts
init_react_shim();
// ../react/src/convert/parse/parse-phrasing-content/normalize-segment.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/utils/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/utils/is-utils.ts
init_react_shim();
function isText(segment) {
    return Slate.Text.isText(segment);
}
function isElement(segment) {
    return Slate.Element.isElement(segment);
}
function isPlainSpace(segment) {
    return Slate.Text.isText(segment) && !!segment.text.match(/^\s+$/) && !segment.code;
}
// ../react/src/convert/serialize/serialize-line/utils/mark-utils/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/utils/mark-utils/mark-convert-utils.ts
init_react_shim();
var MARK_KEY_TO_TOKEN = {
    bold: "**",
    italic: "_",
    // ins: "++",
    strike: "~~",
    sup: "^",
    sub: "~",
    /**
   * IMPORTANT!
   *
   * We noop `code` here.
   *
   * We accept the `code` mark so as not to throw an error if it is found. We do
   * this because we handle `code` text specially because of the way it needs to
   * be escaped.
   *
   * This is handled in the `serializeLine` code.
   */ code: ""
};
function convertMarkToSymbol(mark) {
    if (mark in MARK_KEY_TO_TOKEN) return MARK_KEY_TO_TOKEN[mark];
    throw new Error(`Could not find mark ${JSON.stringify(mark)} in MARK_KEY_TO_TOKEN lookup`);
}
function convertMarksToSymbolsExceptCode(marks) {
    return marks.map(convertMarkToSymbol).join("");
}
// ../react/src/convert/serialize/serialize-line/utils/mark-utils/mark-get-utils.ts
init_react_shim();
function getMarksFromText(text4) {
    const { text: _, ...marks } = text4;
    return Object.keys(marks);
}
function getMarksFromSegment(segment) {
    if (_slate.Text.isText(segment)) {
        if (isPlainSpace(segment)) throw new Error(`You probably didn't mean to do this. We should only be getting marks from segments that are not plain space segments.`);
        return getMarksFromText(segment);
    } else if (segment.type === "anchor") return getCommonAnchorMarks(segment.children);
    else throw new Error(`Unhandled type ${segment.type}`);
}
function getCommonAnchorMarks(segments) {
    let commonMarks;
    for (const segment of segments){
        if (!isText(segment)) {
            if (segment.type === "image-inline") continue;
            throw new Error(`Expected every segment in an anchor to be a Text segment`);
        }
        if (isPlainSpace(segment)) continue;
        const currentMarks = getMarksFromText(segment);
        if (commonMarks === void 0) {
            commonMarks = currentMarks;
            continue;
        }
        commonMarks = commonMarks.filter((commonMark)=>currentMarks.includes(commonMark));
    }
    if (commonMarks === void 0) throw new Error(`No text segments were found as children in this anchor which should not be possible`);
    return commonMarks;
}
// ../react/src/convert/serialize/serialize-line/utils/mark-utils/mark-order-utils.ts
init_react_shim();
var ORDERED_MARK_KEYS = [
    "bold",
    "italic",
    "underline",
    "strike",
    "sup",
    "sub",
    "code"
];
function sortMarks(marks) {
    return marks.slice().sort((a, b)=>ORDERED_MARK_KEYS.indexOf(a) - ORDERED_MARK_KEYS.indexOf(b));
}
// ../react/src/convert/serialize/serialize-line/utils/text-utils.ts
init_react_shim();
var ESCAPES = [
    "\\",
    // escape
    "`",
    // code
    "*",
    // bold/italic/hr
    "_",
    // bold/italic/hr
    "[",
    // link/list
    "]",
    // link/list
    "(",
    // link
    ")",
    // link
    "#",
    // headings
    "+",
    // list
    "-",
    // hr/list
    ".",
    // numbered list
    "!",
    // image
    "|",
    // table
    "^",
    // sup
    "~",
    // sub/strikethrough
    "<",
    // link/html
    ">",
    // link/html
    /**
   * Includes all the characters in the list of Backslash escapes in the example
   * for GitHub Flavored Markdown.
   *
   * https://github.github.com/gfm/#backslash-escapes
   */ "{",
    "}",
    "=",
    ":",
    ";",
    "$",
    "%",
    "&",
    "?",
    '"',
    "'",
    ",",
    "\\",
    "/",
    "@"
];
var ESCAPES_REGEXP = new RegExp(`(${ESCAPES.map((symbol)=>`\\${symbol}`).join("|")})`, "g");
function escapeText(s) {
    return s.replace(ESCAPES_REGEXP, (s2)=>`\\${s2}`);
}
// ../react/src/convert/parse/parse-phrasing-content/normalize-segment.ts
function areMarksEqual(a, b) {
    const marksA = getMarksFromText(a);
    const marksB = getMarksFromText(b);
    return marksA.length == marksB.length && marksA.every((v)=>marksB.includes(v));
}
function normalizeSegment(segment, mutablePrevSegment) {
    const segmentIsText = _slate.Text.isText(segment);
    const prevSegmentIsText = _slate.Text.isText(mutablePrevSegment);
    if (mutablePrevSegment && !prevSegmentIsText && !segmentIsText) return [
        {
            text: ""
        },
        segment
    ];
    if (!segmentIsText) return [
        segment
    ];
    if (mutablePrevSegment === void 0 || !prevSegmentIsText) return [
        segment
    ];
    const marksEqual = areMarksEqual(mutablePrevSegment, segment);
    if (marksEqual) {
        mutablePrevSegment.text = [
            mutablePrevSegment.text,
            segment.text
        ].join("");
        return [];
    }
    return [
        segment
    ];
}
// ../react/src/convert/parse/parse-phrasing-content/normalize-segments.ts
function normalizeSegments(segments) {
    const nextSegments = [];
    for(let i = 0; i < segments.length; i++){
        const mutablePrevSegment = nextSegments[nextSegments.length - 1];
        nextSegments.push(...normalizeSegment(segments[i], mutablePrevSegment));
    }
    if (nextSegments.length === 0) nextSegments.push({
        text: ""
    });
    if (!_slate.Text.isText(nextSegments[0])) nextSegments.unshift({
        text: ""
    });
    if (!_slate.Text.isText(nextSegments[nextSegments.length - 1])) nextSegments.push({
        text: ""
    });
    return nextSegments;
}
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/index.ts
init_react_shim();
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/image-parsers.ts
init_react_shim();
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/parse-generic-image.ts
init_react_shim();
function parseGenericImage(image) {
    return {
        url: image.url,
        title: image.title || void 0,
        alt: image.alt || void 0
    };
}
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/parse-portive-image.ts
init_react_shim();
// ../react/src/convert/parseUrl.ts
init_react_shim();
var URL_REGEX = /^(\/[^?#]*)(?:\?([^#]*))?(#.*)?$/;
function parseUrl(url) {
    try {
        const urlData = new URL(url);
        return {
            origin: urlData.origin,
            hostname: urlData.hostname,
            pathname: urlData.pathname,
            searchParams: urlData.searchParams,
            hash: urlData.hash
        };
    } catch (error) {
        const matchdata = url.match(URL_REGEX);
        if (matchdata === null) throw new Error(`Invalid format should not happen: ${url}`);
        const [_, pathname, searchParams, hash] = [
            ...matchdata
        ];
        return {
            origin: "",
            hostname: "",
            pathname: pathname || "",
            searchParams: new URLSearchParams(searchParams),
            hash: hash || ""
        };
    }
}
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/parse-utils.ts
init_react_shim();
function parseSize(s) {
    if (typeof s !== "string") return null;
    const sizeMatch = s.match(/^(\d+)x(\d+)$/);
    if (sizeMatch === null) return null;
    return {
        width: parseInt(sizeMatch[1]),
        height: parseInt(sizeMatch[2])
    };
}
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/parse-portive-image.ts
function parsePortiveImage(image) {
    const url = parseUrl(image.url);
    if (!url.hostname.match(/[.]portive[.]com$/i)) return;
    const sizeParam = url.searchParams.get("size");
    if (sizeParam === null) return;
    const size = parseSize(sizeParam);
    if (size === null) return;
    const srcSizeMatch = url.pathname.match(/[-][-](\d+)x(\d+)[.][a-zA-Z]+$/);
    if (srcSizeMatch === null) return;
    return {
        url: `${url.origin}${url.pathname}`,
        title: image.title || void 0,
        alt: image.alt || void 0,
        width: size.width,
        height: size.height,
        srcWidth: parseInt(srcSizeMatch[1]),
        srcHeight: parseInt(srcSizeMatch[2])
    };
}
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/parse-uncommon-mark-image.ts
init_react_shim();
function parseUncommonMarkImage(image) {
    const url = parseUrl(image.url);
    if (url.hash.length === 0) return;
    const params = new URLSearchParams(url.hash.slice(1));
    const size = parseSize(params.get("size"));
    const srcSize = parseSize(params.get("srcSize"));
    if (!size || !srcSize) return;
    return {
        url: `${url.origin}${url.pathname}`,
        title: image.title || void 0,
        alt: image.alt || void 0,
        width: size.width,
        height: size.height,
        srcWidth: srcSize.width,
        srcHeight: srcSize.height
    };
}
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/image-parsers.ts
var imageParsers = [
    parsePortiveImage,
    parseUncommonMarkImage,
    parseGenericImage
];
// ../react/src/convert/parse/parse-phrasing-content/parse-inline-image/index.ts
function parseInlineImage(image) {
    for (const imageParser of imageParsers){
        const imageData = imageParser(image);
        if (!imageData) continue;
        return [
            {
                type: "image-inline",
                ...imageData,
                children: [
                    {
                        text: ""
                    }
                ]
            }
        ];
    }
    throw new Error(`Shouldn't get here because last parser always returns data`);
}
// ../react/src/convert/parse/parse-phrasing-content/parse-phrasing-content.ts
function parsePhrasingContents(phrasingContents, marks = {}) {
    const segments = [];
    for (const phrasingContent of phrasingContents)segments.push(...parsePhrasingContent(phrasingContent, marks));
    const nextInlines = normalizeSegments(segments);
    return nextInlines;
}
function parsePhrasingContent(phrasingContent, marks = {}) {
    switch(phrasingContent.type){
        case "delete":
            return parsePhrasingContents(phrasingContent.children, {
                ...marks,
                strike: true
            });
        case "emphasis":
            return parsePhrasingContents(phrasingContent.children, {
                ...marks,
                italic: true
            });
        case "footnoteReference":
            return [
                {
                    text: `[${phrasingContent.identifier}]`
                }
            ];
        case "html":
            return [
                {
                    text: phrasingContent.value,
                    code: true
                }
            ];
        case "image":
            return parseInlineImage(phrasingContent);
        case "inlineCode":
            return [
                {
                    text: phrasingContent.value,
                    ...marks,
                    code: true
                }
            ];
        case "link":
            return [
                {
                    type: "anchor",
                    href: phrasingContent.url,
                    title: /**
             * Ensure that `title` is undefined if it's null.
             */ phrasingContent.title == null ? void 0 : phrasingContent.title,
                    children: parsePhrasingContents(phrasingContent.children, marks)
                }
            ];
        case "strong":
            return parsePhrasingContents(phrasingContent.children, {
                ...marks,
                bold: true
            });
        case "text":
            return [
                {
                    text: phrasingContent.value,
                    ...marks
                }
            ];
        case "linkReference":
        case "imageReference":
            throw new Error(`linkReference and imageReference should be converted to link and image through our transformInlineLinks function`);
        case "break":
            return [
                {
                    text: "\n"
                }
            ];
        case "footnote":
            throw new Error("footnote is not supported yet");
    }
    assertUnreachable(phrasingContent);
}
// ../react/src/convert/parse/parse-heading.ts
function parseHeading(content3) {
    return [
        {
            type: "heading",
            level: content3.depth,
            children: parsePhrasingContents(content3.children)
        }
    ];
}
// ../react/src/convert/parse/parse-html.ts
init_react_shim();
function parseHTML(content3) {
    return [
        {
            type: "code-block",
            language: "html",
            children: content3.value.split("\n").map((line)=>({
                    type: "code-block-line",
                    children: [
                        {
                            text: line
                        }
                    ]
                }))
        }
    ];
}
// ../react/src/convert/parse/parse-list/index.ts
init_react_shim();
// ../react/src/convert/parse/parse-list/parse-list.ts
init_react_shim();
// ../react/src/convert/parse/parse-list/parse-list-item.ts
init_react_shim();
// ../react/src/convert/parse/parse-list/parse-list-item-child.ts
init_react_shim();
function parseListItemChild(child, { depth, ordered, checked }) {
    switch(child.type){
        case "paragraph":
            if (checked === true || checked === false) return [
                {
                    type: "task-list-item",
                    depth,
                    checked,
                    children: parsePhrasingContents(child.children)
                }
            ];
            else if (ordered) return [
                {
                    type: "ordered-list-item",
                    depth,
                    children: parsePhrasingContents(child.children)
                }
            ];
            else return [
                {
                    type: "unordered-list-item",
                    depth,
                    children: parsePhrasingContents(child.children)
                }
            ];
        case "list":
            return parseList(child, depth + 1);
        default:
            return parseContent(child);
    }
}
// ../react/src/convert/parse/parse-list/parse-list-item.ts
function parseListItem(listItem2, options) {
    const elements = [];
    for (const child of listItem2.children)elements.push(...parseListItemChild(child, {
        ...options,
        checked: listItem2.checked
    }));
    return elements;
}
// ../react/src/convert/parse/parse-list/parse-list.ts
function parseList(list2, depth = 0) {
    const elements = [];
    for (const listItem2 of list2.children)elements.push(...parseListItem(listItem2, {
        depth,
        ordered: !!list2.ordered
    }));
    return elements;
}
// ../react/src/convert/parse/parse-paragraph.ts
init_react_shim();
function isImageBlock(segments) {
    if (segments.length !== 3) return false;
    if (!("text" in segments[0]) || segments[0].text !== "") return false;
    if (!("text" in segments[2]) || segments[2].text !== "") return false;
    if (!("type" in segments[1]) || segments[1].type !== "image-inline") return false;
    return true;
}
var NBSP = "\xa0";
function isSingleNBSP(segments) {
    if (segments.length !== 1) return false;
    if (!("text" in segments[0]) || segments[0].text !== NBSP) return false;
    return true;
}
function parseParagraph(content3) {
    const segments = parsePhrasingContents(content3.children);
    if (isImageBlock(segments)) {
        const imageSegment = segments[1];
        const imageBlockElement = {
            ...imageSegment,
            type: "image-block"
        };
        return [
            imageBlockElement
        ];
    }
    if (isSingleNBSP(segments)) return [
        {
            type: "paragraph",
            children: [
                {
                    text: ""
                }
            ]
        }
    ];
    return [
        {
            type: "paragraph",
            children: segments
        }
    ];
}
// ../react/src/convert/parse/parse-table.ts
init_react_shim();
function parseTable(table) {
    if (table.align == null) throw new Error(`Expected an array of AlignType for table.align`);
    return [
        {
            type: "table",
            columns: table.align.map((align)=>({
                    align: align || "left"
                })),
            children: table.children.map(parseTableRow)
        }
    ];
}
function parseTableRow(row) {
    if (row.type !== "tableRow") throw new Error(`Expected a tableRow`);
    return {
        type: "table-row",
        children: row.children.map(parseTableCell)
    };
}
function parseTableCell(cell) {
    if (cell.type !== "tableCell") throw new Error(`Expected a tableCell`);
    return {
        type: "table-cell",
        children: [
            {
                type: "table-content",
                children: parsePhrasingContents(cell.children)
            }
        ]
    };
}
// ../react/src/convert/parse/parse-thematic-break.ts
init_react_shim();
function parseThematicBreak() {
    return [
        {
            type: "horizontal-rule",
            children: [
                {
                    text: ""
                }
            ]
        }
    ];
}
// ../react/src/convert/parse/parse-content.ts
function parseContents(contents) {
    const elements = [];
    for (const content3 of contents)elements.push(...parseContent(content3));
    return elements;
}
function parseContent(content3) {
    switch(content3.type){
        case "blockquote":
            return parseBlockquote(content3);
        case "code":
            return parseCodeBlock(content3);
        case "definition":
            throw new Error(`The type "definition" should not exist. See comments`);
        case "footnoteDefinition":
            return parseFootnoteDefinition(content3);
        case "heading":
            return parseHeading(content3);
        case "html":
            return parseHTML(content3);
        case "list":
            return parseList(content3);
        case "paragraph":
            return parseParagraph(content3);
        case "table":
            return parseTable(content3);
        case "thematicBreak":
            return parseThematicBreak();
        case "yaml":
            return [];
    }
    assertUnreachable(content3);
}
// ../react/src/convert/parse/transform-inline-links.ts
init_react_shim();
// ../../node_modules/.pnpm/mdast-util-definitions@5.1.1/node_modules/mdast-util-definitions/index.js
init_react_shim();
// ../../node_modules/.pnpm/unist-util-visit@4.1.2/node_modules/unist-util-visit/index.js
init_react_shim();
// ../../node_modules/.pnpm/unist-util-visit@4.1.2/node_modules/unist-util-visit/lib/index.js
init_react_shim();
var visit = /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */ /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */ function(tree, test, visitor, reverse) {
    if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test;
        test = null;
    }
    visitParents(tree, test, overload, reverse);
    function overload(node2, parents) {
        const parent = parents[parents.length - 1];
        return visitor(node2, parent ? parent.children.indexOf(node2) : null, parent);
    }
};
// ../../node_modules/.pnpm/mdast-util-definitions@5.1.1/node_modules/mdast-util-definitions/index.js
var own4 = {}.hasOwnProperty;
function definitions(node2) {
    const cache = /* @__PURE__ */ Object.create(null);
    if (!node2 || !node2.type) throw new Error("mdast-util-definitions expected node");
    visit(node2, "definition", (definition3)=>{
        const id = clean(definition3.identifier);
        if (id && !own4.call(cache, id)) cache[id] = definition3;
    });
    return definition2;
    function definition2(identifier) {
        const id = clean(identifier);
        return id && own4.call(cache, id) ? cache[id] : null;
    }
}
function clean(value) {
    return String(value || "").toUpperCase();
}
// ../react/src/convert/parse/transform-inline-links.ts
function transformInlineLinks(tree) {
    const definition2 = definitions(tree);
    visit(tree, (n, index2, p)=>{
        const node2 = n;
        const parent = p;
        if (node2.type === "definition" && parent !== null && typeof index2 === "number") {
            parent.children.splice(index2, 1);
            return [
                SKIP,
                index2
            ];
        }
        if (node2.type === "imageReference" || node2.type === "linkReference") {
            const identifier = "identifier" in node2 && typeof node2.identifier === "string" ? node2.identifier : "";
            const def = definition2(identifier);
            if (def && parent !== null && typeof index2 === "number") {
                const replacement = node2.type === "imageReference" ? {
                    type: "image",
                    url: def.url,
                    title: def.title,
                    alt: node2.alt
                } : {
                    type: "link",
                    url: def.url,
                    title: def.title,
                    children: node2.children
                };
                parent.children[index2] = replacement;
                return [
                    SKIP,
                    index2
                ];
            }
        }
    });
}
// ../react/src/convert/parse/index.ts
var parser = unified().use(remark_parse_default).use(remarkGfm);
function parseToAst(markdown) {
    const ast = parser.parse(markdown);
    transformInlineLinks(ast);
    return ast;
}
function parse2(markdown) {
    const ast = parseToAst(markdown);
    if (ast.children.length === 0) return [
        {
            type: "paragraph",
            children: [
                {
                    text: ""
                }
            ]
        }
    ];
    return parseContents(ast.children);
}
// ../react/src/convert/serialize/index.ts
init_react_shim();
// ../react/src/convert/serialize/normalize/normalizeElementListDepths.ts
init_react_shim();
function isListItemElement(element2) {
    return element2.type === "ordered-list-item" || element2.type === "unordered-list-item" || element2.type === "task-list-item";
}
function normalizeElementListDepths(elements) {
    const normalizedElements = [];
    let previousDepth = -1;
    for (const element2 of elements){
        if (!isListItemElement(element2)) {
            normalizedElements.push(element2);
            previousDepth = -1;
            continue;
        }
        const nextDepth = element2.depth > previousDepth + 1 ? previousDepth + 1 : element2.depth;
        normalizedElements.push({
            ...element2,
            depth: nextDepth
        });
        previousDepth = nextDepth;
    }
    return normalizedElements;
}
// ../react/src/convert/serialize/serialize-elements.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-element.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-code-block/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-code-block/serialize-code-line.ts
init_react_shim();
function serializeCodeLine(codeLine) {
    if (codeLine.type !== "code-block-line") throw new Error(`Expected all children of code-block to be a codeline but is ${JSON.stringify(codeLine, null, 2)}`);
    return codeLine.children.map((segment)=>segment.text).join("");
}
// ../react/src/convert/serialize/serialize-code-block/index.ts
function serializeCodeBlock(codeBlock) {
    const lines = [];
    let backticks = 3;
    for (const codeLine of codeBlock.children){
        const lineOfCode = serializeCodeLine(codeLine);
        const match = lineOfCode.match(/^([`]+)/);
        if (match) backticks = Math.max(backticks, match[1].length + 1);
        lines.push(lineOfCode);
    }
    lines.unshift(`${"`".repeat(backticks)}${codeBlock.language}`);
    lines.push(`${"`".repeat(backticks)}`);
    return `${lines.join("\n")}

`;
}
// ../react/src/convert/serialize/serialize-image-block/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-image-shared/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-image-shared/serialize-generic-image-url.ts
init_react_shim();
function serializeGenericImageUrl(image) {
    return image.url;
}
// ../react/src/convert/serialize/serialize-image-shared/serialize-portive-image-url.ts
init_react_shim();
function serializePortiveImageUrl(image) {
    if (image.url.startsWith("$")) return "";
    const { hostname } = parseUrl(image.url);
    if (hostname.match(/[.]portive[.]com$/i) && image.width && image.height) return `${image.url}?size=${image.width}x${image.height}`;
}
// ../react/src/convert/serialize/serialize-image-shared/serialize-uncommonmark-image-url.ts
init_react_shim();
function serializeUncommonmarkImageUrl(image) {
    if (image.width && image.height && image.srcWidth && image.srcHeight) return `${image.url}#srcSize=${image.srcWidth}x${image.srcHeight}&size=${image.width}x${image.height}`;
}
// ../react/src/convert/serialize/serialize-image-shared/index.ts
var urlSerializers = [
    serializePortiveImageUrl,
    serializeUncommonmarkImageUrl,
    serializeGenericImageUrl
];
function serializeImageShared(image) {
    for (const urlSerializer of urlSerializers){
        const url = urlSerializer(image);
        if (typeof url === "string") {
            if (url === "") return "";
            return `![${image.alt}](${url}${typeof image.title === "string" ? ` "${image.title}"` : ""})`;
        }
    }
    throw new Error(`Shouldn't get here`);
}
// ../react/src/convert/serialize/serialize-image-block/index.ts
function serializeImageBlock(element2) {
    return serializeImageShared(element2);
}
// ../react/src/convert/serialize/serialize-line/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/serialize-line.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/diff-marks/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/diff-marks/find-marks-to-add.ts
init_react_shim();
function findMarksToAdd(orderedMarks, targetMarks) {
    const marksWeNeedToAdd = targetMarks.filter((mark)=>!orderedMarks.includes(mark));
    const orderedMarksToAdd = sortMarks(marksWeNeedToAdd);
    return {
        orderedMarksToAdd
    };
}
// ../react/src/convert/serialize/serialize-line/diff-marks/find-marks-to-remove.ts
init_react_shim();
function findMarksToRemove(orderedMarks, targetMarks) {
    const nextOrderedMarks = [
        ...orderedMarks
    ];
    const marksWeNeedToRemove = orderedMarks.filter((mark)=>!targetMarks.includes(mark));
    const orderedMarksToRemove = [];
    for(let i = 0; i < orderedMarks.length; i++){
        if (marksWeNeedToRemove.length === 0) break;
        const markToRemove = nextOrderedMarks.pop();
        if (markToRemove === void 0) throw new Error(`This shouldn't happen unless we made a mistake in the algorithm`);
        orderedMarksToRemove.push(markToRemove);
        const index2 = marksWeNeedToRemove.indexOf(markToRemove);
        if (index2 !== -1) marksWeNeedToRemove.splice(index2, 1);
    }
    return {
        orderedMarksToRemove,
        nextOrderedMarks
    };
}
// ../react/src/convert/serialize/serialize-line/diff-marks/index.ts
function diffMarks(orderedMarks, targetMarks) {
    const { orderedMarksToRemove, nextOrderedMarks } = findMarksToRemove(orderedMarks, targetMarks);
    const { orderedMarksToAdd } = findMarksToAdd(nextOrderedMarks, targetMarks);
    return {
        remove: orderedMarksToRemove,
        add: orderedMarksToAdd,
        nextOrderedMarks: [
            ...nextOrderedMarks,
            ...orderedMarksToAdd
        ]
    };
}
// ../react/src/convert/serialize/serialize-line/normalize-line/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/normalize-line/normalize-nodes.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/normalize-line/run-normalizers-on-node.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/normalize-line/normalizers/index.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/normalize-line/normalizers/merge-adjacent-spaces.ts
init_react_shim();
function mergeAdjacentSpaces({ node: node2, nextNode, nodes, index: index2 }) {
    if (!isText(node2) || !isPlainSpace(node2) || node2.code) return false;
    if (!isText(nextNode) || !isPlainSpace(nextNode) || node2.code) return false;
    nodes.splice(index2, 2, {
        text: `${node2.text}${nextNode.text}`
    });
    return true;
}
// ../react/src/convert/serialize/serialize-line/normalize-line/normalizers/move-spaces-out-of-anchors.ts
init_react_shim();
function moveSpacesAtStartOfAnchor({ node: node2, nodes, prevNode, index: index2 }) {
    if (!isElement(node2)) return false;
    if (node2.type !== "anchor") return false;
    node2;
    const firstChild = node2.children[0];
    if (isText(firstChild) && isPlainSpace(firstChild)) {
        node2.children.splice(0, 1);
        if (isText(prevNode) && isPlainSpace(prevNode)) prevNode.text = `${prevNode.text}${firstChild.text}`;
        else nodes.splice(index2, 0, {
            text: firstChild.text
        });
        return true;
    }
    return false;
}
function moveSpacesAtEndOfAnchor({ node: node2, nodes, nextNode, index: index2 }) {
    if (!isElement(node2)) return false;
    if (node2.type !== "anchor") return false;
    node2;
    const lastChild = node2.children[node2.children.length - 1];
    if (isText(lastChild) && isPlainSpace(lastChild)) {
        node2.children.splice(node2.children.length - 1, 1);
        if (isText(nextNode) && isPlainSpace(nextNode)) nextNode.text = `${lastChild.text}${nextNode.text}`;
        else nodes.splice(index2 + 1, 0, {
            text: lastChild.text
        });
        return true;
    }
    return false;
}
// ../react/src/convert/serialize/serialize-line/normalize-line/normalizers/must-have-one-text-child.ts
init_react_shim();
function mustHaveOneTextChild({ node: node2 }) {
    if (!isElement(node2)) return false;
    if (node2.type !== "line") return false;
    if (node2.children.length > 0) return false;
    node2.children.push({
        text: ""
    });
    return true;
}
// ../react/src/convert/serialize/serialize-line/normalize-line/normalizers/slice-spaces-at-node-boundaries.ts
init_react_shim();
function sliceSpacesAtNodeBoundaries({ node: node2, nodes, index: index2 }) {
    if (!isText(node2)) return false;
    if (isPlainSpace(node2)) return false;
    if (node2.code) return false;
    const match = node2.text.match(/^(\s*)(.*?)(\s*)$/);
    if (!match) return false;
    if (match[1].length === 0 && match[3].length === 0) return false;
    const nextSegments = [
        {
            text: match[1]
        },
        {
            ...node2,
            text: match[2]
        },
        {
            text: match[3]
        }
    ].filter((text4)=>text4.text !== "");
    nodes.splice(index2, 1, ...nextSegments);
    return true;
}
// ../react/src/convert/serialize/serialize-line/normalize-line/normalizers/trim-spaces-at-end-of-line.ts
init_react_shim();
function trimSpaceAtEndOfLine({ index: index2, nodes, node: node2, parent }) {
    if (index2 !== nodes.length - 1) return false;
    if (nodes.length <= 1) return false;
    if (!isText(node2)) return false;
    if (!isPlainSpace(node2)) return false;
    if (parent && isElement(parent) && parent.type === "line") {
        nodes.splice(nodes.length - 1, 1);
        return true;
    }
    return false;
}
// ../react/src/convert/serialize/serialize-line/normalize-line/normalizers/trim-spaces-at-start-of-line.ts
init_react_shim();
function trimSpaceAtStartOfLine({ index: index2, nodes, node: node2, parent }) {
    if (index2 !== 0) return false;
    if (nodes.length === 0) return false;
    if (!isText(node2)) return false;
    if (!isPlainSpace(node2)) return false;
    if (parent && isElement(parent) && parent.type === "line") {
        nodes.splice(0, 1);
        return true;
    }
    return false;
}
// ../react/src/convert/serialize/serialize-line/normalize-line/normalizers/index.ts
var normalizers = [
    sliceSpacesAtNodeBoundaries,
    moveSpacesAtStartOfAnchor,
    moveSpacesAtEndOfAnchor,
    mergeAdjacentSpaces,
    trimSpaceAtStartOfLine,
    trimSpaceAtEndOfLine,
    mustHaveOneTextChild
];
// ../react/src/convert/serialize/serialize-line/normalize-line/run-normalizers-on-node.ts
function runNormalizersOnNode(normalizeOptions) {
    for (const normalizer of normalizers){
        const isHandled = normalizer(normalizeOptions);
        if (isHandled) return true;
    }
    return false;
}
// ../react/src/convert/serialize/serialize-line/normalize-line/normalize-nodes.ts
var MAX_RERUNS = 72;
function normalizeNodes(nodes, parent) {
    let isAnyUpdated = false;
    let isUpdated;
    let runs = 0;
    const maxReruns = (nodes.length + 1) * MAX_RERUNS;
    do {
        isUpdated = false;
        runs = runs + 1;
        if (runs > maxReruns) throw new Error(`There have been ${runs} normalization passes (72x the number of nodes at this level). This likely indicates a bug in the code.`);
        segmentLoop: for(let i = 0; i < nodes.length; i++){
            const node2 = nodes[i];
            if (isElement(node2)) {
                const isChildrenUpdated = normalizeNodes(node2.children, node2);
                if (isChildrenUpdated) {
                    isUpdated = true;
                    isAnyUpdated = true;
                    break segmentLoop;
                }
            }
            const prevNode = nodes[i - 1];
            const nextNode = nodes[i + 1];
            const options = {
                parent,
                node: node2,
                prevNode,
                nextNode,
                index: i,
                nodes
            };
            if (runNormalizersOnNode(options)) {
                isUpdated = true;
                isAnyUpdated = true;
                break segmentLoop;
            }
        }
    }while (isUpdated);
    return isAnyUpdated;
}
// ../react/src/convert/serialize/serialize-line/normalize-line/index.ts
var duplicateSegments = (segments)=>{
    return segments.map((segment)=>{
        if (_slate.Element.isElement(segment) && segment.type === "anchor") return {
            ...segment,
            children: duplicateSegments(segment.children)
        };
        else return segment;
    });
};
function normalizeLine(segments) {
    const line = {
        type: "line",
        children: duplicateSegments(segments)
    };
    normalizeNodes([
        line
    ], void 0);
    return line.children;
}
// ../react/src/convert/serialize/serialize-line/segment/serialize-segment.ts
init_react_shim();
// ../react/src/convert/serialize/serialize-line/segment/serialize-code-text.ts
init_react_shim();
function serializeCodeText(text4) {
    let max = 0;
    for (const match of text4.text.matchAll(/[`]+/g))max = Math.max(max, match[0].length);
    if (max === 0) return `\`${text4.text.replace(/[`]/g, "\\`")}\``;
    return `${"`".repeat(max + 1)} ${text4.text} ${"`".repeat(max + 1)}`;
}
// ../react/src/convert/serialize/serialize-line/segment/serialize-anchor.ts
init_react_shim();
function escapeTitle(title) {
    return title.replace(/"/g, '\\"');
}
function serializeAnchor(anchor) {
    const commonAnchorMarks = getCommonAnchorMarks(anchor.children);
    if (anchor.href.startsWith("$")) return serializeLine(anchor.children, commonAnchorMarks, commonAnchorMarks);
    if (typeof anchor.title === "string" && anchor.title.length > 0) return(/**
       * TODO: Handle anchor children more elegantly in serializeAnchor.
       *
       * We type cast `children` as `Segment` here because the children of an
       * `anchor` is limited to be Inline types. There are two things to do
       * related to this though:
       *
       * - [ ] consider fixing the `anchor` type to actually limit the
       *   children as expected.
       * - [ ] consider expanding the definition of `Segment` to include
       *   inline images as that is an acceptable inline value which is
       *   currently not defined as part of Segment.
       */ `[${serializeLine(anchor.children, commonAnchorMarks, commonAnchorMarks)}](${anchor.href} "${escapeTitle(anchor.title)}")`);
    else return(/**
       * TODO: Handle anchor children more elegantly in serializeAnchor.
       *
       * We type cast `children` as `Segment` here because the children of an
       * `anchor` is limited to be Inline types. There are two things to do
       * related to this though:
       *
       * - [ ] consider fixing the `anchor` type to actually limit the
       *   children as expected.
       * - [ ] consider expanding the definition of `Segment` to include
       *   inline images as that is an acceptable inline value which is
       *   currently not defined as part of Segment.
       */ `[${serializeLine(anchor.children, commonAnchorMarks, commonAnchorMarks)}](${anchor.href})`);
}
// ../react/src/convert/serialize/serialize-line/segment/serialize-non-code-text.ts
init_react_shim();
function serializeNonCodeText(text4) {
    return escapeText(text4.text);
}
// ../react/src/convert/serialize/serialize-line/segment/serialize-segment.ts
function serializeSegment(segment) {
    if (_slate.Text.isText(segment)) {
        if (segment.code) return serializeCodeText(segment);
        return serializeNonCodeText(segment);
    }
    switch(segment.type){
        case "anchor":
            return serializeAnchor(segment);
        case "image-inline":
            return serializeImageShared(segment);
        default:
            assertUnreachable(segment);
    }
}
// ../react/src/convert/serialize/serialize-line/serialize-line.ts
function serializeLine(inputSegments, leadingMarks = [], trailingMarks = []) {
    const segments = normalizeLine(inputSegments);
    const substrings = [];
    let leadingDiff = diffMarks(leadingMarks, getMarksFromSegment(segments[0]));
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        if (_slate.Text.isText(segment) && isPlainSpace(segment)) {
            substrings.push(segment.text);
            continue;
        }
        substrings.push(convertMarksToSymbolsExceptCode(leadingDiff.add));
        substrings.push(serializeSegment(segment));
        const nextMarks = getNextMarks(segments, i, trailingMarks);
        const trailingDiff = diffMarks(leadingDiff.nextOrderedMarks, nextMarks);
        substrings.push(convertMarksToSymbolsExceptCode(trailingDiff.remove));
        leadingDiff = trailingDiff;
    }
    return substrings.join("");
}
function getNextMarks(segments, index2, trailingMarks) {
    for(let i = index2 + 1; i < segments.length; i++){
        const segment = segments[i];
        if (isPlainSpace(segment)) continue;
        if (_slate.Element.isElement(segment) && segment.type === "image-inline") continue;
        return getMarksFromSegment(segment);
    }
    return trailingMarks;
}
// ../react/src/convert/serialize/serialize-table/index.ts
init_react_shim();
function serializeTable(element2) {
    const lines = [];
    lines.push(serializeTableRow(element2.children[0]));
    lines.push(serializeColumns(element2.columns));
    element2.children.slice(1).forEach((row)=>{
        lines.push(serializeTableRow(row));
    });
    return `${lines.join("\n")}

`;
}
function serializeColumns(columns) {
    const isAllLeft = columns.every((column)=>column.align === "left");
    if (isAllLeft) return `|${columns.map(()=>"---").join("|")}|`;
    return `|${columns.map((column)=>serializeAlign(column.align)).join("|")}|`;
}
function serializeAlign(align) {
    switch(align){
        case "left":
            return ":---";
        case "center":
            return ":---:";
        case "right":
            return "---:";
    }
}
function serializeTableRow(element2) {
    assertElementType(element2, "table-row");
    return `|${element2.children.map(serializeTableCell).join("|")}|`;
}
function serializeTableCell(element2) {
    assertElementType(element2, "table-cell");
    assert(element2.children.length === 1, `Expected table-cell to have one child but is ${JSON.stringify(element2.children)}`);
    return element2.children.map(serializeTableContent).join();
}
function serializeTableContent(element2) {
    assertElementType(element2, "table-content");
    return serializeLine(element2.children);
}
// ../react/src/convert/serialize/serialize-element.ts
var LIST_INDENT_SIZE = 4;
function serializeElement(element2, orders) {
    switch(element2.type){
        case "anchor":
            return `[${serializeLine(element2.children)}](${element2.href})`;
        case "block-quote":
            {
                const lines = serializeElements(element2.children);
                return `${lines.split("\n").map((line)=>`> ${line}`.trim()).join("\n")}

`;
            }
        case "code-block":
            return serializeCodeBlock(element2);
        case "code-block-line":
            throw new Error(`code-block-line should only be present as child of code-block`);
        case "heading":
            return `${"#".repeat(element2.level)} ${serializeLine(element2.children)}

`;
        case "horizontal-rule":
            return "---\n\n";
        case "paragraph":
            return `${serializeLine(element2.children)}

`;
        case "table":
            return serializeTable(element2);
        case "table-row":
        case "table-cell":
        case "table-content":
            throw new Error(`Table elements should only be present as children of table which should be handled by serializeTable. Got ${element2.type} may indicate an error in normalization.`);
        case "unordered-list-item":
            {
                const indent3 = " ".repeat(element2.depth * LIST_INDENT_SIZE);
                return `${indent3}- ${serializeLine(element2.children)}

`;
            }
        case "ordered-list-item":
            {
                const indent3 = " ".repeat(element2.depth * LIST_INDENT_SIZE);
                return `${indent3}${orders[element2.depth]}. ${serializeLine(element2.children)}

`;
            }
        case "task-list-item":
            {
                const indent3 = " ".repeat(element2.depth * LIST_INDENT_SIZE);
                let line = serializeLine(element2.children);
                if (line.trim() === "") line = "&#32;";
                return `${indent3}- [${element2.checked ? "x" : " "}] ${line}

`;
            }
        case "image-block":
            return serializeImageBlock(element2);
        case "image-inline":
            throw new Error(`This shouldn't happen because inlines are handled in serializeSegment`);
    }
    assertUnreachable(element2);
}
// ../react/src/convert/serialize/serialize-elements.ts
function serializeElements(elements) {
    const segments = [];
    let orders = [];
    for (const element2 of elements){
        if (element2.type === "ordered-list-item") {
            orders[element2.depth] = (orders[element2.depth] || 0) + 1;
            orders = orders.slice(0, element2.depth + 1);
        } else if (element2.type === "unordered-list-item" || element2.type === "task-list-item") orders = orders.slice(0, element2.depth);
        else orders = [];
        segments.push(serializeElement(element2, orders));
    }
    const joined = segments.join("");
    if (joined.trim() === "") return "";
    return replaceConsecutiveNewlines(replaceLeadingNewlines(joined)).trim();
}
function replaceLeadingNewlines(input) {
    return input.replace(/^\n\n/g, "&nbsp;\n\n");
}
function replaceConsecutiveNewlines(input) {
    return input.replace(/(\n{4,})/g, (match)=>{
        const newlineCount = match.length;
        const count = Math.floor((newlineCount - 2) / 2);
        return "\n\n" + Array(count).fill("&nbsp;").join("\n\n") + "\n\n";
    });
}
// ../react/src/convert/serialize/index.ts
function serialize2(elements) {
    const normalizedElements = normalizeElementListDepths(elements);
    return serializeElements(normalizedElements);
}
// ../react/src/entry/SinkEditable.tsx
init_react_shim();
// ../react/src/sink/index.ts
init_react_shim();
// ../react/src/sink/create-plugin/index.ts
init_react_shim();
var createPlugin = (fn)=>{
    return {
        fn
    };
};
// ../react/src/sink/create-sink/index.tsx
init_react_shim();
// ../react/src/sink/editable/index.tsx
init_react_shim();
// ../react/src/sink/editable/create-decorate.ts
init_react_shim();
// ../react/src/sink/editable/utils.ts
init_react_shim();
function defined(value) {
    return !!value;
}
// ../react/src/sink/editable/create-decorate.ts
function createDecorate(originalFn, plugins2) {
    const fns = plugins2.map((plugin)=>_optionalChain([
            plugin,
            "access",
            (_2)=>_2.editableProps,
            "optionalAccess",
            (_3)=>_3.decorate
        ])).filter(defined);
    return function(entry) {
        const ranges = [];
        for (const fn of fns){
            const resultRanges = fn(entry);
            ranges.push(...resultRanges);
        }
        if (originalFn) ranges.push(...originalFn(entry));
        return ranges;
    };
}
// ../react/src/sink/editable/create-editable.tsx
init_react_shim();
var _jsxruntime = require("301311932d6208d7");
function createEditable(plugins2) {
    const fns = plugins2.map((plugin)=>plugin.renderEditable).filter(defined);
    let CurrentRenderEditable = (props)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, _slatereact.Editable, {
            ...props
        });
    for (const fn of fns){
        const PrevRenderEditable = CurrentRenderEditable;
        CurrentRenderEditable = (props)=>{
            return fn({
                attributes: props,
                Editable: PrevRenderEditable
            });
        };
    }
    return CurrentRenderEditable;
}
// ../react/src/sink/editable/create-handler.ts
init_react_shim();
function extractEditableFns(plugins2, key2) {
    const fns = [];
    for (const plugin of plugins2){
        const maybeFn = _optionalChain([
            plugin,
            "access",
            (_4)=>_4.editableProps,
            "optionalAccess",
            (_5)=>_5[key2]
        ]);
        if (maybeFn) fns.push(maybeFn);
    }
    return fns;
}
function createHandlerFn(fns, originalFn) {
    return function(event) {
        for (const fn of fns){
            if (fn(event)) return;
        }
        _optionalChain([
            originalFn,
            "optionalCall",
            (_6)=>_6(event)
        ]);
    };
}
var createOnKeyDown = (originalFn, plugins2)=>{
    const fns = extractEditableFns(plugins2, "onKeyDown");
    return createHandlerFn(fns, originalFn);
};
var createOnKeyUp = (originalFn, plugins2)=>{
    const fns = extractEditableFns(plugins2, "onKeyUp");
    return createHandlerFn(fns, originalFn);
};
var createOnPaste = (originalFn, plugins2)=>{
    const fns = extractEditableFns(plugins2, "onPaste");
    return createHandlerFn(fns, originalFn);
};
var createOnDrop = (originalFn, plugins2)=>{
    const fns = extractEditableFns(plugins2, "onDrop");
    return createHandlerFn(fns, originalFn);
};
// ../react/src/sink/editable/create-render-element.ts
init_react_shim();
function createRenderElement(originalFn, plugins2) {
    const fns = plugins2.map((plugin)=>_optionalChain([
            plugin,
            "access",
            (_7)=>_7.editableProps,
            "optionalAccess",
            (_8)=>_8.renderElement
        ])).filter(defined);
    return function renderElement5(renderElementProps) {
        for (const fn of fns){
            const result = fn(renderElementProps);
            if (result) return result;
        }
        if (originalFn === void 0) throw new Error(`Element with type ${renderElementProps.element.type} not handled. Note that renderElement is not defined on SinkEditable so this is only the result of checking the Sink Plugins.`);
        return originalFn(renderElementProps);
    };
}
// ../react/src/sink/editable/create-render-leaf.ts
init_react_shim();
function createRenderLeaf(originalFn, plugins2) {
    if (originalFn === void 0) throw new Error(`renderLeaf was not defined on SinkEditable`);
    const fns = plugins2.map((plugin)=>_optionalChain([
            plugin,
            "access",
            (_9)=>_9.editableProps,
            "optionalAccess",
            (_10)=>_10.renderLeaf
        ])).filter(defined).reverse();
    return function(renderLeafProps) {
        let value = originalFn({
            ...renderLeafProps,
            /**
       * We override this because `attributes` should only appear on the
       * uppermost leaf element if there are several nested ones and it's
       * possible that this won't be the uppermost leaf.
       *
       * We add attributes back on at the very end so no need to worry if
       * we omit it here.
       */ attributes: {}
        });
        for (const fn of fns){
            const possibleValue = fn({
                ...renderLeafProps,
                children: value
            });
            if (possibleValue) value = possibleValue;
        }
        value = _react.cloneElement.call(void 0, value, renderLeafProps.attributes);
        return value;
    };
}
// ../react/src/sink/editable/create-render-placeholder.tsx
init_react_shim();
function createRenderPlaceholder(originalFn, plugins2) {
    if (originalFn) return originalFn;
    const fns = plugins2.map((plugin)=>_optionalChain([
            plugin,
            "access",
            (_11)=>_11.editableProps,
            "optionalAccess",
            (_12)=>_12.renderPlaceholder
        ])).filter(defined);
    if (fns.length === 0) return void 0;
    return function(renderPlaceholderProps) {
        if (fns.length > 1) throw new Error(`Only one plugin can define renderPlaceholder but there are ${fns.length}`);
        const fn = fns[0];
        if (fn == null) throw new Error(`Expected fn to be defined`);
        return fn(renderPlaceholderProps);
    };
}
// ../react/src/sink/editable/styles.tsx
init_react_shim();
var _styled = require("28432296ea6ddc1");
var _styled2 = _interopRequireDefault(_styled);
var SinkReset = _styled2.default.call(void 0, "div")`
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 16px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
  box-sizing: border-box;
`;
// ../react/src/sink/editable/index.tsx
function SinkEditable(originalProps) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    _react.useEffect.call(void 0, ()=>{
        _slate.Editor.normalize(editor, {
            force: true
        });
    }, []);
    const { plugins: plugins2 } = editor.sink;
    const nextProps = _react.useMemo.call(void 0, ()=>({
            ...originalProps,
            decorate: createDecorate(originalProps.decorate, plugins2),
            renderElement: createRenderElement(originalProps.renderElement, plugins2),
            renderLeaf: createRenderLeaf(originalProps.renderLeaf, plugins2),
            renderPlaceholder: createRenderPlaceholder(originalProps.renderPlaceholder, plugins2),
            /**
       * NOTE: We skip `onKeyUp` as it is deprecated. If somebody needs it in new
       * code, we can add it back in.
       *
       * https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event
       */ onKeyDown: createOnKeyDown(originalProps.onKeyDown, plugins2),
            onKeyUp: createOnKeyUp(originalProps.onKeyUp, plugins2),
            onPaste: createOnPaste(originalProps.onPaste, plugins2),
            onDrop: createOnDrop(originalProps.onDrop, plugins2)
        }), Object.values(originalProps));
    const NextEditable = _react.useMemo.call(void 0, ()=>createEditable(plugins2), [
        plugins2
    ]);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, NextEditable, {
        ...nextProps
    });
}
// ../react/src/sink/editor/index.ts
init_react_shim();
// ../react/src/sink/editor/create-boolean-action.ts
init_react_shim();
function createBooleanAction(editor, actionKey, plugins2) {
    const originalAction = editor[actionKey];
    const actionPlugins = plugins2.filter((plugin)=>_optionalChain([
            plugin,
            "access",
            (_13)=>_13.editor,
            "optionalAccess",
            (_14)=>_14[actionKey]
        ]));
    return function nextBooleanAction(node2) {
        for (const plugin of actionPlugins){
            const result = _optionalChain([
                plugin,
                "access",
                (_15)=>_15.editor,
                "optionalAccess",
                (_16)=>_16[actionKey],
                "optionalCall",
                (_17)=>_17(node2)
            ]);
            if (typeof result === "boolean") return result;
        }
        return originalAction(node2);
    };
}
// ../react/src/sink/editor/create-void-action.ts
init_react_shim();
function createVoidAction(editor, actionKey, plugins2) {
    const originalAction = editor[actionKey];
    const actionPlugins = plugins2.filter((plugin)=>_optionalChain([
            plugin,
            "access",
            (_18)=>_18.editor,
            "optionalAccess",
            (_19)=>_19[actionKey]
        ]));
    return function nextVoidAction(...args) {
        let isHandled = false;
        const afterHandledCallbacks = [];
        for (const plugin of actionPlugins){
            const response = _optionalChain([
                plugin,
                "access",
                (_20)=>_20.editor,
                "optionalAccess",
                (_21)=>_21[actionKey],
                "optionalCall",
                (_22)=>_22(...args)
            ]);
            if (typeof response === "function") afterHandledCallbacks.push(response);
            else if (response === true) {
                isHandled = true;
                break;
            }
        }
        if (!isHandled) originalAction(...args);
        afterHandledCallbacks.forEach((callback)=>callback());
    };
}
// ../react/src/sink/editor/index.ts
function createWithSink(pluginFns) {
    return (originalEditor, options)=>{
        const editor = originalEditor;
        const plugins2 = pluginFns.map((plugin)=>plugin(editor, options, {
                createPolicy: (x)=>x
            }));
        editor.sink = {
            plugins: plugins2
        };
        editor.isMaster = "isMaster" in editor ? editor.isMaster : ()=>false;
        editor.isSlave = "isSlave" in editor ? editor.isSlave : ()=>false;
        editor.isStandalone = "isStandalone" in editor ? editor.isStandalone : ()=>false;
        Object.assign(editor, {
            /**
       * void
       */ normalizeNode: createVoidAction(editor, "normalizeNode", plugins2),
            deleteBackward: createVoidAction(editor, "deleteBackward", plugins2),
            deleteForward: createVoidAction(editor, "deleteForward", plugins2),
            deleteFragment: createVoidAction(editor, "deleteFragment", plugins2),
            insertBreak: createVoidAction(editor, "insertBreak", plugins2),
            insertFragment: createVoidAction(editor, "insertFragment", plugins2),
            insertNode: createVoidAction(editor, "insertNode", plugins2),
            insertText: createVoidAction(editor, "insertText", plugins2),
            /**
       * boolean
       */ isInline: createBooleanAction(editor, "isInline", plugins2),
            isVoid: createBooleanAction(editor, "isVoid", plugins2),
            isMaster: createBooleanAction(editor, "isMaster", plugins2),
            isSlave: createBooleanAction(editor, "isSlave", plugins2),
            isStandalone: createBooleanAction(editor, "isStandalone", plugins2)
        });
        return editor;
    };
}
// ../react/src/sink/create-sink/index.tsx
var createSink = (pluginFunctions)=>{
    const fns = pluginFunctions.map((plugin)=>plugin.fn);
    const withSink2 = createWithSink(fns);
    const returnValue = {
        withSink: withSink2,
        SinkEditable
    };
    return returnValue;
};
// ../react/src/sink/is-debug.ts
init_react_shim();
var isDebug = false;
// ../react/src/sink/types/index.ts
init_react_shim();
// ../react/src/sink/types/constrained/constrained-render-element-props.ts
init_react_shim();
// ../react/src/sink/types/constrained/constrained-render-leaf-props.ts
init_react_shim();
// ../react/src/sink/types/plugin/index.ts
init_react_shim();
// ../react/src/sink/types/plugin/ExtractCustomTypes.ts
init_react_shim();
// ../react/src/sink/types/plugin/merge-plugin-custom-types.ts
init_react_shim();
// ../react/src/sink/types/plugin/plugin.ts
init_react_shim();
// ../react/src/sink/types/plugin/plugin-custom-types.ts
init_react_shim();
// ../react/src/sink/types/plugin/plugin-custom-types-for-create.ts
init_react_shim();
// ../react/src/sink/types/plugin/plugin-function.ts
init_react_shim();
// ../react/src/sink/types/plugin/plugin-policy.ts
init_react_shim();
// ../react/src/sink/types/plugin/schema-types.ts
init_react_shim();
// ../react/src/sink/types/plugin/VoidActionReturn.ts
init_react_shim();
// ../react/src/sink/types/sink/sink-editor.ts
init_react_shim();
// ../react/src/sink/utils/index.ts
init_react_shim();
// ../react/src/sink/utils/core-utils/index.ts
init_react_shim();
// ../react/src/sink/utils/core-utils/better-at.ts
init_react_shim();
function betterAt(editor, at) {
    if (!_slate.Element.isElement(at)) return at;
    return _slatereact.ReactEditor.findPath(editor, at);
}
// ../react/src/sink/utils/core-utils/curry.ts
init_react_shim();
function curryOne(fn, curriedArg) {
    return fn.bind(null, curriedArg);
}
function curryTwo(fn, arg1, arg2) {
    return fn.bind(null, arg1, arg2);
}
// ../react/src/sink/utils/core-utils/is-mac.ts
init_react_shim();
var IS_MAC_REGEX = /mac os x/i;
var isMacValue = void 0;
function isMac() {
    if (isMacValue !== void 0) return isMacValue;
    const { userAgent } = window.navigator;
    isMacValue = IS_MAC_REGEX.test(userAgent);
    return isMacValue;
}
// ../react/src/sink/utils/core-utils/stop-event.ts
init_react_shim();
function stopEvent(e) {
    e.preventDefault();
    e.stopPropagation();
}
// ../react/src/sink/utils/find-utils/find-element-up.ts
init_react_shim();
// ../react/src/sink/utils/standardize-utils/standardize-node-matcher.ts
init_react_shim();
function standardizeNodeMatcher(matchNode) {
    if (typeof matchNode === "function") return matchNode;
    if (typeof matchNode === "string") return (node2)=>_slate.Element.isElement(node2) && node2.type === matchNode;
    if (Array.isArray(matchNode)) return (node2)=>_slate.Element.isElement(node2) && matchNode.includes(node2.type);
    throw new Error(`Expected matchNode to be a function, string or array but is ${matchNode}`);
}
// ../react/src/sink/utils/find-utils/find-element-up.ts
function findElementUp(editor, matchNode, { at = editor.selection } = {}) {
    if (at === null) return;
    const nextAt = betterAt(editor, at);
    const match = standardizeNodeMatcher(matchNode);
    if (_slate.Path.isPath(nextAt)) {
        const nodeEntryExactlyAt = _slate.Editor.node(editor, nextAt);
        if (nodeEntryExactlyAt && match(nodeEntryExactlyAt[0])) return nodeEntryExactlyAt;
    }
    return _slate.Editor.above(editor, {
        at: nextAt,
        match
    });
}
function findElementUpPath(...args) {
    const entry = findElementUp(...args);
    return _optionalChain([
        entry,
        "optionalAccess",
        (_23)=>_23[1]
    ]);
}
// ../react/src/sink/utils/icon-utils/tabler-icon.tsx
init_react_shim();
var TablerIcon = ({ strokeWidth = 1.5, ...props })=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, "svg", {
        xmlns: "http://www.w3.org/2000/svg",
        width: "1em",
        height: "1em",
        strokeWidth,
        stroke: "currentColor",
        fill: "none",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        viewBox: "0 0 24 24",
        ...props
    });
// ../react/src/sink/utils/is-utils/index.ts
init_react_shim();
// ../react/src/sink/utils/is-utils/is-collapsed.ts
init_react_shim();
function isCollapsed(selection) {
    if (selection == null) return false;
    return _slate.Range.isCollapsed(selection);
}
// ../react/src/sink/utils/is-utils/is-element-type.ts
init_react_shim();
function createIsElementType(type) {
    if (Array.isArray(type)) return (node2)=>_slate.Element.isElement(node2) && type.includes(node2.type);
    else return (node2)=>_slate.Element.isElement(node2) && type == node2.type;
}
// ../react/src/sink/utils/is-utils/is-end-of-element.ts
init_react_shim();
function isEndOfElement(editor, matchNode) {
    const { selection } = editor;
    if (!isCollapsed(selection)) return false;
    const entry = findElementUp(editor, matchNode, {
        at: selection
    });
    return !!entry && _slate.Editor.isEnd(editor, selection.anchor, entry[1]);
}
// ../react/src/sink/utils/is-utils/is-in-empty-element.ts
init_react_shim();
// ../react/src/sink/utils/is-utils/is-start-of-element.ts
init_react_shim();
function isStartOfElement(editor, matchNode) {
    const { selection } = editor;
    if (!isCollapsed(selection)) return false;
    const entry = findElementUp(editor, matchNode, {
        at: selection
    });
    return !!entry && _slate.Editor.isStart(editor, selection.anchor, entry[1]);
}
// ../react/src/sink/utils/key-utils/index.ts
init_react_shim();
// ../react/src/sink/utils/key-utils/create-autocomplete-space-handler.tsx
init_react_shim();
var _ishotkey = require("8d41387af59919b0");
var isSpace = _ishotkey.isHotkey.call(void 0, " ");
var isShiftSpace = _ishotkey.isHotkey.call(void 0, "SHIFT+SPACE");
function createAutocompleteSpaceHandler(editor, methods) {
    return (e)=>{
        if (!isSpace(e.nativeEvent) && !isShiftSpace(e.nativeEvent)) return false;
        const { selection } = editor;
        if (selection === null) return false;
        if (_slate.Range.isExpanded(selection)) return false;
        const convertibleBlockEntry = findElementUp(editor, (node2)=>/**
         * NOTE: We alias to SlateElement because this page needs acces to both
         * the global Eleent and the Slate Element.
         */ _slate.Element.isElement(node2) && editor.convertElement.isConvertibleElement(node2));
        if (!convertibleBlockEntry) return false;
        const range = {
            anchor: _slate.Editor.start(editor, convertibleBlockEntry[1]),
            focus: selection.focus
        };
        const text4 = _slate.Editor.string(editor, range);
        const method = methods[text4];
        if (!method) return false;
        stopEvent(e);
        const deleteRange = {
            anchor: _slate.Editor.start(editor, convertibleBlockEntry[1]),
            focus: selection.focus
        };
        _slate.Transforms.delete(editor, {
            at: deleteRange
        });
        method();
        return true;
    };
}
// ../react/src/sink/utils/key-utils/create-hotkey-handler.ts
init_react_shim();
// ../react/src/sink/utils/key-utils/is-better-hotkey.ts
init_react_shim();
function isBetterHotkey(hotkey) {
    const modifiedHotkey = hotkey.replace(/\bsuper\b/g, isMac() ? "cmd+alt" : "ctrl+shift");
    return _ishotkey.isHotkey.call(void 0, modifiedHotkey);
}
// ../react/src/sink/utils/key-utils/create-hotkey-handler.ts
function createHotkeyHandler(shortcutsObject) {
    let shortcuts = null;
    return function handleShortcuts(event) {
        if (shortcuts == null) shortcuts = Object.entries(shortcutsObject).map(([shortcut, fn])=>[
                isBetterHotkey(shortcut),
                fn
            ]);
        for (const [isShortcut, action] of shortcuts)if (isShortcut(event.nativeEvent)) {
            const response = action();
            if (response === true || response === void 0) {
                event.preventDefault();
                event.stopPropagation();
                return true;
            }
        }
        return false;
    };
}
// ../react/src/sink/utils/normalize-utils/force-normalize-path.ts
init_react_shim();
function forceNormalizePath(editor, path3) {
    _slate.Editor.withoutNormalizing(editor, ()=>{
        _slate.Transforms.setNodes(editor, // @ts-ignore
        {
            __DOESNT_MATTER_JUST_TO_START_NORMALIZING__: "123"
        }, {
            at: path3
        });
        _slate.Transforms.setNodes(editor, // @ts-ignore
        {
            __DOESNT_MATTER_JUST_TO_START_NORMALIZING__: null
        }, {
            at: path3
        });
    });
}
// ../react/src/sink/utils/normalize-utils/normalize-siblings.ts
init_react_shim();
function normalizeSiblings(editor, entry, transform) {
    const [, path3] = entry;
    const prevEntry = _slate.Editor.previous(editor, {
        at: path3
    });
    if (prevEntry && transform(prevEntry, entry)) return true;
    const nextEntry = _slate.Editor.next(editor, {
        at: path3
    });
    if (nextEntry && transform(entry, nextEntry)) return true;
    return false;
}
// ../react/src/sink/utils/select-utils/index.ts
init_react_shim();
function selectStartOfElement(editor, path3) {
    _slate.Transforms.select(editor, _slate.Editor.start(editor, path3));
}
function selectEndOfElement(editor, path3) {
    _slate.Transforms.select(editor, _slate.Editor.end(editor, path3));
}
// ../react/src/sink/utils/standardize-utils/index.ts
init_react_shim();
// ../react/src/sink/utils/standardize-utils/target-element.ts
init_react_shim();
function createTargetElement(srcElement, targetElement) {
    if (typeof targetElement !== "function") return targetElement;
    return targetElement(srcElement);
}
// ../react/src/sink/utils/transform-utils/index.ts
init_react_shim();
// ../react/src/sink/utils/transform-utils/insert-root-element.ts
init_react_shim();
function insertRootElement(editor, element2, { at = editor.selection } = {}) {
    if (at == null) return false;
    const entry = findElementUp(editor, (node2)=>_slate.Element.isElement(node2) && editor.isMaster(node2));
    if (entry == null) {
        const selection = editor.selection;
        _slate.Editor.withoutNormalizing(editor, ()=>{
            _slate.Transforms.insertNodes(editor, element2, {
                at
            });
            if (selection) {
                _slate.Transforms.select(editor, selection);
                _slate.Transforms.move(editor);
            }
        });
    } else {
        const nextPath = _slate.Path.next(entry[1]);
        _slate.Editor.withoutNormalizing(editor, ()=>{
            _slate.Transforms.insertNodes(editor, element2, {
                at: nextPath
            });
            _slate.Transforms.select(editor, _slate.Editor.start(editor, nextPath));
        });
    }
    return true;
}
// ../react/src/sink/utils/transform-utils/rewrap-element.ts
init_react_shim();
function rewrapElement(editor, targetElement, at) {
    _slate.Editor.withoutNormalizing(editor, ()=>{
        const originalEntry = _slate.Editor.node(editor, at);
        const nextElement = createTargetElement(originalEntry[0], targetElement);
        _slate.Transforms.wrapNodes(editor, nextElement, {
            at
        });
        _slate.Transforms.unwrapNodes(editor, {
            at: [
                ...at,
                0
            ]
        });
    });
}
// ../react/src/sink/utils/transform-utils/set-nodes-dynamic.ts
init_react_shim();
function setNodesDynamic(editor, convert2, options) {
    const entries = Array.from(_slate.Editor.nodes(editor, options));
    if (entries.length === 0) return false;
    for (const entry of entries){
        const [node2] = entry;
        _slate.Transforms.setNodes(editor, convert2(node2), {
            at: entry[1]
        });
    }
    return true;
}
// ../react/src/entry/plugins.ts
init_react_shim();
// ../react/src/anchor-plugin/index.tsx
init_react_shim();
// ../react/src/anchor-plugin/editable/on-paste.tsx
init_react_shim();
function onPaste(editor, e) {
    const clipboardData = e.clipboardData;
    const { types } = clipboardData;
    console.log(clipboardData.getData("text/html"));
    if (types.length > 1) return false;
    if (types[0] !== "text/plain") return false;
    const text4 = clipboardData.getData("text/plain");
    if (!isUrl2(text4)) return false;
    e.preventDefault();
    e.stopPropagation();
    editor.anchor.insertLink(text4);
    return true;
}
function isUrl2(s) {
    let url;
    try {
        url = new URL(s);
    } catch (_) {
        return false;
    }
    return url.protocol === "http:" || url.protocol === "https:" || url.protocol === "mailto:";
}
// ../react/src/anchor-plugin/methods/index.ts
init_react_shim();
// ../react/src/anchor-plugin/methods/editLink.ts
init_react_shim();
function editLink(editor, { href, title }, { at }) {
    const link = findElementUp(editor, "anchor", {
        at
    });
    if (!link) return false;
    _slate.Transforms.setNodes(editor, {
        href,
        title
    }, {
        at: link[1]
    });
    return true;
}
// ../react/src/anchor-plugin/methods/insertLink.ts
init_react_shim();
function insertLink(editor, href, text4 = href, { select = true } = {}) {
    const selection = editor.selection || {
        anchor: _slate.Editor.start(editor, [
            0
        ]),
        focus: _slate.Editor.start(editor, [
            0
        ])
    };
    if (_slate.Range.isCollapsed(selection)) {
        _slate.Transforms.insertNodes(editor, {
            type: "anchor",
            href,
            children: [
                {
                    text: text4
                }
            ]
        }, {
            select,
            at: selection
        });
        if (select && editor.selection) {
            const entry = _slate.Editor.node(editor, editor.selection);
            _slate.Transforms.select(editor, entry[1]);
        }
    } else _slate.Transforms.wrapNodes(editor, {
        type: "anchor",
        href,
        children: []
    }, {
        split: true,
        match: (node2)=>_slate.Text.isText(node2) || _slate.Editor.isInline(editor, node2)
    });
}
// ../react/src/anchor-plugin/methods/removeLink.ts
init_react_shim();
function removeLink(editor, { at }) {
    const link = findElementUp(editor, "anchor", {
        at
    });
    if (!link) return false;
    _slate.Transforms.unwrapNodes(editor, {
        at: link[1]
    });
    return true;
}
// ../react/src/anchor-plugin/methods/index.ts
function createAnchorMethods(editor) {
    return {
        insertLink: curryOne(insertLink, editor),
        removeLink: curryOne(removeLink, editor),
        editLink: curryOne(editLink, editor)
    };
}
// ../react/src/anchor-plugin/normalize-node/index.ts
init_react_shim();
function normalizeNode(editor, entry) {
    if (!_slate.Element.isElement(entry[0])) return false;
    if (entry[0].type !== "anchor") return false;
    const children = entry[0].children;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        if (!_slate.Element.isElement(child) || child.type !== "anchor") continue;
        _slate.Transforms.unwrapNodes(editor, {
            at: [
                ...entry[1],
                i
            ]
        });
        return true;
    }
    return false;
}
// ../react/src/anchor-plugin/render-element/anchor.tsx
init_react_shim();
var _clsx = require("c6e5990497749bc8");
// ../react/src/upload-plugin/store/index.ts
init_react_shim();
// ../react/src/upload-plugin/store/create-upload-store.ts
init_react_shim();
var _zustand = require("ecc9b2f4818ce8f3");
var _zustand2 = _interopRequireDefault(_zustand);
var createUploadStore = ({ uploads = {} } = {
    uploads: {}
})=>{
    return _zustand2.default.call(void 0, (set, get)=>({
            uploads,
            setUpload (id, origin) {
                set((state)=>({
                        uploads: {
                            ...state.uploads,
                            [id]: origin
                        }
                    }));
            },
            getUpload (id) {
                const origin = get().uploads[id];
                if (origin === void 0) throw new Error(`Expected origin with id "${id}" but could not find it`);
                return origin;
            }
        }));
};
// ../react/src/upload-plugin/store/use-upload.ts
init_react_shim();
function useUpload(url) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const upload2 = editor.upload.useUploadStore((state)=>state.uploads[url]);
    if (url.includes("/")) return {
        status: "success",
        url
    };
    else return upload2;
}
// ../react/src/upload-plugin/store/index.ts
function setUpload(editor, id, upload2) {
    const store = editor.upload.useUploadStore.getState();
    store.setUpload(id, upload2);
}
// ../react/src/use-layer/index.tsx
init_react_shim();
// ../react/src/use-layer/layers.tsx
init_react_shim();
// ../react/src/use-layer/portal.tsx
init_react_shim();
var _reactdom = require("6df23693577508f6");
function Portal({ children }) {
    return _reactdom.createPortal.call(void 0, children, document.body);
}
// ../react/src/use-layer/layers.tsx
var LayersContext = _react.createContext.call(void 0, /**
   * This is set to an invalid value and then typecast as the correct type.
   *
   * This is okay though because in `LayersProvider` we set the value to the
   * proper type before they are used for the first time.
   */ {});
var LayerContext = _react.createContext.call(void 0, {});
function Layers({ children }) {
    const [layers, setLayers] = _react.useState.call(void 0, {});
    function openLayer(layer) {
        setLayers((layers2)=>{
            return {
                ...layers2,
                [layer.type]: layer
            };
        });
    }
    function closeLayer(layerType) {
        setLayers((layers2)=>{
            const nextLayers = {
                ...layers2
            };
            delete nextLayers[layerType];
            return nextLayers;
        });
    }
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, LayersContext.Provider, {
        value: {
            layers,
            setLayers,
            openLayer,
            closeLayer
        },
        children: [
            children,
            Object.entries(layers).map(([, layer])=>{
                return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Portal, {
                    children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, LayerContext.Provider, {
                        value: layer,
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, layer.Component, {})
                    })
                }, layer.type);
            })
        ]
    });
}
// ../react/src/use-layer/use-layer.tsx
init_react_shim();
function useLayer(type) {
    const { openLayer, closeLayer, layers } = _react.useContext.call(void 0, LayersContext);
    function open(Component) {
        const layer = {
            type,
            Component
        };
        openLayer(layer);
    }
    function close() {
        closeLayer(type);
    }
    return {
        open,
        close,
        layer: layers[type],
        type
    };
}
// ../react/src/anchor-plugin/styles.tsx
init_react_shim();
var $Anchor = _styled2.default.call(void 0, "a")`
  /**
   * Link colors
   */
  color: var(--link-color, blue);
  &:hover {
    color: var(--link-hover-color, blue);
  }
  /**
   * When the cursor is in the anchor and not outside the anchor, we style the
   * anchor with a very light shade. This is enough to subtly intuit to the user
   * that when they type, it will appear inside the link. When the shade is
   * not present, they intuit they are just outside the link.
   */
  border-radius: 0.125em;
  transition: background-color 250ms;
  &.--selected {
    background: var(--blue-50);
  }
`;
var $Edge = _styled2.default.call(void 0, "span")`
  display: inline;
  padding: 0 1px 0 0;
`;
var $ProgressBar = _styled2.default.call(void 0, "span")`
  position: fixed;
  width: 100px;
  background: var(--shade-50);
  height: 8px;
  border-radius: 7px;
  border: 1px solid var(--shade-400);
  overflow: hidden;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
`;
var $ProgressBarFill = _styled2.default.call(void 0, "span")`
  position: absolute;
  left: 0;
  top: 0;
  height: 14px;
  background: var(--blue-400);
  transition: width 100ms linear;
`;
// ../react/src/anchor-plugin/render-element/AnchorDialog.tsx
init_react_shim();
// ../react/src/shared-overlays/index.ts
init_react_shim();
// ../react/src/shared-overlays/components/index.ts
init_react_shim();
// ../react/src/shared-overlays/components/CloseMask/index.tsx
init_react_shim();
// ../react/src/shared-overlays/styles/$CloseMask.tsx
init_react_shim();
var $CloseMask = _styled2.default.call(void 0, "div")`
  position: fixed;
  user-select: none;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  overflow-y: auto;
  background: rgba(0, 0, 0, 0.01);
`;
// ../react/src/shared-overlays/components/CloseMask/index.tsx
function CloseMask({ close }) {
    const ref = _react.useRef.call(void 0, null);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $CloseMask, {
        ref,
        onClick: close
    });
}
// ../react/src/shared-overlays/components/Menu/index.tsx
init_react_shim();
// ../react/src/shared-overlays/components/Menu/formatHotkey.ts
init_react_shim();
var key = {
    cmd: "\u2318",
    ctrl: "\u2303",
    shift: "\u21E7",
    opt: "\u2325",
    enter: "\u23CE"
};
var MAC_KEYS = {
    shift: key.shift,
    opt: key.opt,
    alt: key.opt,
    ctrl: key.ctrl,
    mod: key.cmd,
    cmd: key.cmd,
    enter: key.enter,
    super: `${key.opt}${key.cmd}`
};
var PC_KEYS = {
    alt: "ALT",
    ctrl: "CTRL",
    opt: "ALT",
    shift: "SHIFT",
    mod: "CTRL",
    cmd: "CTRL",
    enter: key.enter,
    super: "CTRL+SHIFT"
};
function pull(arr, value) {
    const index2 = arr.findIndex((el)=>el === value);
    if (index2 !== -1) arr.splice(index2, 1);
}
function formatMac(segments) {
    const result = [];
    Object.entries(MAC_KEYS).forEach(([key2, symbol])=>{
        if (segments.includes(key2)) {
            result.push(symbol);
            pull(segments, key2);
        }
    });
    result.push(...segments.map((s)=>s.toUpperCase()));
    return result.join("");
}
function formatPC(segments) {
    const result = [];
    Object.entries(PC_KEYS).forEach(([key2, symbol])=>{
        if (segments.includes(key2)) {
            result.push(symbol);
            pull(segments, key2);
        }
    });
    result.push(...segments.map((s)=>s.toUpperCase()));
    return result.join("+");
}
function formatHotkey(shortcut) {
    const segments = shortcut.toLowerCase().split("+");
    if (isMac()) return formatMac(segments);
    else return formatPC(segments);
}
// ../react/src/shared-overlays/components/Menu/Menu.tsx
init_react_shim();
// ../react/src/use-reposition/index.tsx
init_react_shim();
// ../react/src/use-reposition/hooks/use-absolute-reposition.tsx
init_react_shim();
// ../react/src/use-reposition/get-methods/get-absolute-rect.ts
init_react_shim();
// ../react/src/use-reposition/get-methods/get-fixed-rect.ts
init_react_shim();
function getFixedRect(domElement) {
    const bounds = domElement.getBoundingClientRect();
    return {
        top: bounds.top,
        right: bounds.right,
        bottom: bounds.bottom,
        left: bounds.left,
        width: bounds.width,
        height: bounds.height
    };
}
// ../react/src/use-reposition/get-methods/get-absolute-rect.ts
function getAbsoluteRect(domElement) {
    const rect = getFixedRect(domElement);
    const { scrollY } = window;
    return Object.assign(rect, {
        top: rect.top + scrollY,
        bottom: rect.bottom + scrollY
    });
}
// ../react/src/use-reposition/get-methods/get-absolute-viewport.ts
init_react_shim();
// ../react/src/use-reposition/get-methods/get-fixed-viewport.ts
init_react_shim();
function getFixedViewport() {
    const width = document.documentElement.clientWidth || document.body.clientWidth;
    return {
        top: 0,
        right: width,
        bottom: window.innerHeight,
        left: 0,
        width,
        height: window.innerHeight
    };
}
// ../react/src/use-reposition/get-methods/get-absolute-viewport.ts
function getAbsoluteViewport() {
    const rect = getFixedViewport();
    return Object.assign(rect, {
        top: window.scrollY,
        bottom: window.scrollY + rect.height
    });
}
// ../react/src/use-reposition/utils.ts
init_react_shim();
var _justmapvalues = require("9f881907f53c2762");
var _justmapvalues2 = _interopRequireDefault(_justmapvalues);
function mapHTMLElementLikeRecordToRectRecord(elementLikeRecord, converElementToRect) {
    const rectRecord = _justmapvalues2.default.call(void 0, elementLikeRecord, (value)=>{
        const maybeHTMLElement = value instanceof HTMLElement ? value : value.current;
        const nextValue = maybeHTMLElement ? converElementToRect(maybeHTMLElement) : null;
        return nextValue;
    });
    return rectRecord;
}
// ../react/src/use-reposition/hooks/use-reposition.tsx
init_react_shim();
// ../react/src/use-reposition/hooks/use-throttled-refresh.ts
init_react_shim();
function useThrottledRefresh(intervalInMs = 100) {
    const [counter, setState] = _react.useState.call(void 0, 0);
    const refresh = _lodashthrottle2.default.call(void 0, ()=>{
        setState((counter2)=>counter2 + 1);
    }, intervalInMs, {
        trailing: true
    });
    return Object.assign(refresh, {
        counter
    });
}
// ../react/src/use-reposition/hooks/use-reposition.tsx
function useReposition() {
    const refresh = useThrottledRefresh();
    _react.useEffect.call(void 0, ()=>{
        refresh();
        window.addEventListener("resize", refresh);
        window.addEventListener("scroll", refresh);
        return ()=>{
            window.removeEventListener("resize", refresh);
            window.removeEventListener("scroll", refresh);
        };
    }, []);
    return refresh;
}
// ../react/src/use-reposition/hooks/use-absolute-reposition.tsx
function useAbsoluteReposition(elementLikeRecord, fn) {
    const refresh = useReposition();
    const rectRecord = mapHTMLElementLikeRecordToRectRecord(elementLikeRecord, (element2)=>getAbsoluteRect(element2));
    return fn(rectRecord, getAbsoluteViewport(), refresh);
}
// ../react/src/use-reposition/hooks/use-fixed-reposition.tsx
init_react_shim();
function useFixedReposition(elementLikeRecord, fn) {
    const refresh = useReposition();
    const rectRecord = mapHTMLElementLikeRecordToRectRecord(elementLikeRecord, (element2)=>getFixedRect(element2));
    return fn(rectRecord, getFixedViewport(), refresh);
}
// ../react/src/use-reposition/position-methods/index.ts
init_react_shim();
function positionInside(src, container, pos, { margin = 0 } = {}) {
    if (src == null) return {
        ...pos,
        left: -1024
    };
    const right = pos.left + src.width;
    if (right <= container.right - margin) return pos;
    return {
        ...pos,
        left: container.right - src.width - margin
    };
}
// ../react/src/toolbar-plugin/styles/index.ts
init_react_shim();
// ../react/src/toolbar-plugin/styles/anchor-dialog-styles.ts
init_react_shim();
// ../react/src/shared-overlays/styles/$Panel.ts
init_react_shim();
var $Panel = _styled2.default.call(void 0, SinkReset)`
  position: absolute;
  z-index: 1000;
  border: 1px solid var(--table-border-color);
  border-radius: 0.5em;
  overflow: clip;
  filter: drop-shadow(0 4px 3px rgb(0 0 0 / 0.07))
    drop-shadow(0 2px 2px rgb(0 0 0 / 0.06));
  background: white;
  /**
   * If you are tempted to add the transitions back in, here's why we left
   * them off:
   *
   * - When we initially unhide the panel (by setting a negative 'left' pos)
   *   the panel slides in very quickly. So we'd need to fix this first which
   *   adds complexity.
   *
   * - Even if we fixed it, the browser window updates the scrolls and resizes
   *   in a stepped manner (i.e. like frames in an animation). Keeping the
   *   smooth animations makes the panel step in sync with the page refreshes
   *   and so actually looks better.
   *
   * In other words, there's a technical issue we'd still need to solve but
   * even if we did, it looks better this way.
   */
  /* transition: left 100ms, top 100ms; */
`;
// ../react/src/toolbar-plugin/styles/anchor-dialog-styles.ts
var $AnchorDialog = _styled2.default.call(void 0, $Panel)`
  padding: 1em;
  width: 24em;
`;
var $AnchorDialogInputLine = _styled2.default.call(void 0, "div")`
  display: flex;
  gap: 0.5em;
`;
var $AnchorDialogInput = _styled2.default.call(void 0, "input")`
  flex: 1 1 auto;
  padding: 0.5em 0.75em;
  border-radius: 0.25em;
  color: var(--shade-700);
  border: 1px solid var(--shade-300);
  font-size: 0.9375em;
  &:focus {
    outline: 2px solid var(--blue-200);
  }
`;
// ../react/src/toolbar-plugin/styles/layout-styles.ts
init_react_shim();
// ../react/src/shared-layout/index.ts
init_react_shim();
var $Container = _styled2.default.call(void 0, SinkReset)`
  border: 1px solid var(--shade-300); /* shade-300 */
  border-radius: 0.5em;
  color: rgb(39 39 42); /* shade-800 */
  line-height: 1.5;
  /**
   * !important is required because of role="textbox" I think
   */
  outline: 2px solid transparent !important;
  transition: all 250ms;
  &.--focused {
    /**
     * !important is required because of role="textbox" I think
     */
    outline: 2px solid var(--select-editor-color) !important;
  }
`;
// ../react/src/toolbar-plugin/styles/layout-styles.ts
var $Editable = _styled2.default.call(void 0, "div")`
  padding: 2em;
`;
var $OuterContainer = _styled2.default.call(void 0, $Container)`
  /**
   * We use this to make sure the top of the container is rounded even though
   * the toolbar inside is square. We keep the toolbar square so that as the
   * toolbar hits the top when scrolling, it can become sticky. We can try to
   * round the toolbar, but it causes an issue where the part under the
   * rounded part is still visible (i.e. the edge of the container). We can
   * then try to put an absolutely positioned background on it with an opaque
   * color, but that doesn't work unless we know the color of the background
   * so... ultimately, it's not a good solution.
   *
   * NOTE:
   *
   * Using "overflow: hidden;" will break the "position: sticky;" and it will
   * not work. "overflow: clip;" does work though.
   *
   * https://stackoverflow.com/a/73051006
   */
  overflow-y: clip;
  display: flex;
  flex-direction: column;
`;
// ../react/src/toolbar-plugin/styles/menu-styles.ts
init_react_shim();
var $Menu = _styled2.default.call(void 0, $Panel)`
  position: absolute;
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  transition: all 200ms;
  /**
   * Prevent clicks from stealing focus from the editor
   */
  user-select: none;
`;
var $MenuItem = _styled2.default.call(void 0, "div")`
  display: flex;
  z-index: 10;
  padding: 0 1em 0 1.5em;
  height: 2em;
  align-items: center;
  /**
   * Normally we don't do it this way but since each part of the MenuItem
   * is tightly related to the display: flex, this seemed the easiest way
   * to set this up.
   */
  .--icon {
    flex: 0 0;
    display: block;
    font-size: 1.25em;
    height: 1em;
    padding-right: 0.75em;
    color: var(--shade-400);
    svg {
      position: relative;
      stroke-width: 1.5px;
    }
  }
  .--title {
    flex: 1 0;
    font-size: 0.875em;
    color: var(--shade-800);
  }
  .--hotkey {
    flex: 0 0;
    font-size: 0.75em;
    padding-left: 1.5em;
    color: var(--shade-500);
  }
  background: white;
  cursor: pointer;
  &:hover {
    background: var(--blue-50);
  }
`;
var $MenuDivider = _styled2.default.call(void 0, "div")`
  height: 1px;
  background: var(--shade-200);
  margin-top: 0.25em;
  margin-bottom: 0.25em;
`;
// ../react/src/toolbar-plugin/styles/toolbar-styles.ts
init_react_shim();
var $ToolbarContainer = _styled2.default.call(void 0, "div")`
  /**
   * This flex rule applies to the "display: flex;" of the parent container.
   * Ensures the toolbar does not shrink or grow vertically.
   */
  flex: 0 0 auto;
  /**
   * If "position: sticky;" is not working, check the ancestor for "overflow:
   * hidden;" of any kind. This will stop sticky from working. A good workaround
   * is to use "overflow: clip;" instead.
   *
   * https://stackoverflow.com/a/73051006
   */
  position: sticky;
  top: 0;
  z-index: 2;
  background: var(--shade-50);
  /* font-size: 0.875em; */
  font-size: 0.9375em;
  padding: 0 0.5em;
  border-bottom: 1px solid var(--shade-300);
  /**
   * Prevent clicks from stealing focus from the editor
   */
  user-select: none;
  /**
   * Extreme attention to detail. When the sticky is ending and the toolbar
   * is stuck to the bottom of the editor, setting margin-bottom to -1px will
   * fix the 2px bottom border and make it the proper 1px.
   */
  margin-bottom: -1px;

  /**
   * NOTE: The space in the equation is significant
   */
  height: calc(
    3em + 1px
  ); // $ToolbarDivider height + border-bottom of 1px above
  overflow: hidden;
`;
var $Toolbar = _styled2.default.call(void 0, "div")`
  display: inline-block;
  height: calc(
    3em + 1px
  ); // $ToolbarDivider height + border-bottom of 1px above
`;
var $ToolbarDividerContainer = _styled2.default.call(void 0, "div")`
  display: inline-block;
  height: 3em;
  padding: 0 0.375em;
`;
var $ToolbarDivider = _styled2.default.call(void 0, "div")`
  display: inline-block;
  background: var(--shade-300);
  opacity: 50%;
  width: 1px;
  height: 3em;
`;
var $ToolbarButton = _styled2.default.call(void 0, "div")`
  box-sizing: border-box;
  position: relative;
  display: inline-block;
  vertical-align: top;
  font-size: 1.25em;
  margin-top: 0.25em;
  height: 2em;
  padding: 0.375em 0.375em;
  border-radius: 0.25em;
  text-align: center;
  color: var(--shade-500);
  transition: all 100ms;
  cursor: pointer;
  border: 1px solid rgba(0, 0, 0, 0);
  &.--active {
    color: var(--shade-700);
    background: rgba(0, 0, 0, 0.05);
    svg {
      /* stroke-width: 2px; */
    }
  }
  svg {
    stroke-width: 1.5px;
  }
  &:hover {
    color: var(--shade-700);
    background: var(--blue-100);
    svg {
      /* stroke-width: 2px; */
    }
  }

  &.--more {
    padding: 0.375em 0.5em;
  }
  .--more-icon {
    position: absolute;
    bottom: -0.2em;
    left: 50%;
    margin-left: -0.25em;
    opacity: 0.375;
  }
`;
// ../react/src/shared-overlays/components/Menu/MenuItem.tsx
init_react_shim();
function MenuItem({ editor, item, close, dest }) {
    const menuLayer = useLayer("menu");
    const onClick = _react.useCallback.call(void 0, ()=>{
        if (item.Component) {
            const Component = item.Component;
            menuLayer.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, Component, {
                    dest,
                    close: menuLayer.close
                }));
        } else if (item.action) {
            item.action(editor);
            _slatereact.ReactEditor.focus(editor);
            close();
        }
    }, [
        editor,
        item
    ]);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _jsxruntime.Fragment, {
        children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $MenuItem, {
            onClick,
            children: [
                /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                    className: "--icon",
                    children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, item.icon, {})
                }),
                /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                    className: "--title",
                    children: item.title
                }),
                /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                    className: "--hotkey",
                    children: item.hotkey ? formatHotkey(item.hotkey) : void 0
                })
            ]
        })
    });
}
// ../react/src/shared-overlays/components/Menu/Menu.tsx
function Menu({ dest, items, close }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const ref = _react.useRef.call(void 0, null);
    const style = useAbsoluteReposition({
        src: ref,
        dest
    }, ({ dest: dest2 })=>{
        return {
            left: dest2.left - 8,
            top: dest2.top + dest2.height
        };
    });
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CloseMask, {
                close
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Menu, {
                ref,
                style,
                children: items.map((item, index2)=>{
                    if (item === "divider") return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $MenuDivider, {}, index2);
                    else return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, MenuItem, {
                        editor,
                        item,
                        close,
                        dest
                    }, index2);
                })
            })
        ]
    });
}
// ../react/src/shared-overlays/styles/index.ts
init_react_shim();
// ../react/src/shared-overlays/types.ts
init_react_shim();
// ../react/src/use-tooltip/index.tsx
init_react_shim();
// ../react/src/use-tooltip/tooltip.tsx
init_react_shim();
function useRect(dest) {
    return dest.getBoundingClientRect();
}
var $Tooltip = _styled2.default.call(void 0, "div")`
  position: fixed;
  z-index: 10;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 16px;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
  color: white;
  font-size: 0.875em;
  line-height: 1.5em;
  padding: 0 0.5em;
  color: var(--shade-300);
  background: var(--shade-700);
  border-radius: 0.25em;
  white-space: nowrap;
`;
var $Hotkey = _styled2.default.call(void 0, "span")`
  margin-left: 0.75em;
  font-size: 0.875em;
  font-weight: 500;
  color: var(--shade-400);
`;
function Tooltip({ title, hotkey, dest }) {
    const rect = useRect(dest);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $Tooltip, {
        style: {
            left: rect.left,
            top: `calc(${rect.top}px - 2em)`
        },
        children: [
            title,
            hotkey ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Hotkey, {
                children: hotkey
            }) : null
        ]
    });
}
// ../react/src/use-tooltip/triangle.tsx
init_react_shim();
var $Triangle = _styled2.default.call(void 0, "span")`
  position: fixed;
  z-index: 10;
  width: 0;
  height: 0;
  border-left: 0.375em solid transparent;
  border-right: 0.375em solid transparent;
  border-top: 0.375em solid var(--shade-700);
`;
function Triangle({ dest }) {
    const rect = useRect(dest);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Triangle, {
        style: {
            left: `calc(${rect.left + rect.width / 2}px - 0.375em)`,
            top: `calc(${rect.top}px - 0.5em)`
        }
    });
}
// ../react/src/use-tooltip/index.tsx
function useTooltip({ title, hotkey }, deps = []) {
    const label = useLayer("tooltip-label");
    const triangle = useLayer("tooltip-triangle");
    const onMouseEnter = _react.useCallback.call(void 0, (e)=>{
        const dest = e.currentTarget;
        if (title !== void 0) {
            label.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, Tooltip, {
                    title,
                    hotkey: typeof hotkey === "function" ? hotkey() : hotkey,
                    dest
                }));
            triangle.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, Triangle, {
                    dest
                }));
        }
    }, deps);
    const onMouseLeave = _react.useCallback.call(void 0, ()=>{
        label.close();
        triangle.close();
    }, deps);
    return {
        onMouseEnter,
        onMouseLeave
    };
}
// ../react/src/anchor-plugin/render-element/AnchorEditDialog.tsx
init_react_shim();
// ../react/src/shared-styles/index.ts
init_react_shim();
var $FormGroup = _styled2.default.call(void 0, "div")`
  margin: 0.5em 0;
  &:first-of-type {
    margin-top: 0;
  }
  &:last-of-type {
    margin-bottom: 0;
  }
`;
var $FormCaption = _styled2.default.call(void 0, "div")`
  font-size: 0.9375em;
  margin-bottom: 0.25em;
  color: var(--shade-700);
`;
var $FormHint = _styled2.default.call(void 0, "div")`
  font-size: 0.875em;
  margin-top: 0.25em;
  color: var(--shade-500);
`;
var $Textarea = _styled2.default.call(void 0, "input")`
  box-sizing: border-box;
  width: 100%;
  height: 6em;
  padding: 0.5em 0.75em;
  border-radius: 0.25em;
  color: var(--shade-700);
  font-family: inherit;
  border: 1px solid var(--shade-300);
  font-size: 0.9375em;
  &:focus {
    outline: 2px solid var(--blue-200);
  }
`;
var $Input = _styled2.default.call(void 0, "input")`
  box-sizing: border-box;
  width: 100%;
  padding: 0.5em 0.75em;
  border-radius: 0.25em;
  color: var(--shade-700);
  border: 1px solid var(--shade-300);
  font-size: 0.9375em;
  &:focus {
    outline: 2px solid var(--blue-200);
  }
`;
var $BaseButton = _styled2.default.call(void 0, "div")`
  /* Center vertically and horizontally */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  padding: 0.25em 0.75em;
  text-align: center;
  transition: all 100ms;
  border-radius: 0.25em;
  svg {
    font-size: 1.25em;
    stroke-width: 2px;
  }
`;
var $PrimaryButton = _styled2.default.call(void 0, $BaseButton)`
  color: var(--blue-50);
  background: var(--blue-500);
  outline: 0px solid white;
  &:hover {
    color: white;
    background: var(--blue-600);
    outline: 2px solid var(--blue-200);
  }
  svg {
    color: var(--blue-200);
  }
`;
var $CancelButton = _styled2.default.call(void 0, $BaseButton)`
  color: var(--shade-500);
  background: var(--shade-200);
  outline: 0px solid white;
  &:hover {
    color: var(--shade-600);
    background: var(--shade-300);
    outline: 2px solid var(--shade-200);
  }
  svg {
    color: var(--shade-400);
  }
`;
// ../react/src/anchor-plugin/render-element/AnchorEditDialog.tsx
var $AnchorEditDialog = _styled2.default.call(void 0, $Panel)`
  position: absolute;
  width: 20em;
  padding: 1em;
`;
function AnchorEditDialog({ destAnchor, destStartEdge, element: element2 }) {
    const dialog = useLayer("dialog");
    const style = useAbsoluteReposition({
        destAnchor,
        destStartEdge
    }, ({ destAnchor: destAnchor2, destStartEdge: destStartEdge2 })=>{
        return {
            left: destStartEdge2.left,
            top: destAnchor2.top + destAnchor2.height
        };
    });
    const editor = _slatereact.useSlateStatic.call(void 0);
    const [href, setHref] = _react.useState.call(void 0, element2.href);
    const [title, setTitle] = _react.useState.call(void 0, element2.title || "");
    const formRef = _react.useRef.call(void 0, {
        href,
        title
    });
    formRef.current = {
        href,
        title
    };
    const handleHrefChange = _react.useCallback.call(void 0, (e)=>{
        setHref(e.target.value);
    }, []);
    const handleTitleChange = _react.useCallback.call(void 0, (e)=>{
        setTitle(e.target.value);
    }, []);
    const openAnchorDialog = _react.useCallback.call(void 0, ()=>{
        dialog.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, AnchorDialog, {
                destAnchor,
                destStartEdge,
                element: element2
            }));
    }, [
        destAnchor,
        destStartEdge,
        element2
    ]);
    const handleSubmit = _react.useCallback.call(void 0, ()=>{
        const { href: href2, title: title2 } = formRef.current;
        editor.anchor.editLink({
            href: href2,
            title: title2
        }, {
            at: element2
        });
        openAnchorDialog();
    }, [
        openAnchorDialog
    ]);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $AnchorEditDialog, {
        contentEditable: false,
        style,
        children: [
            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $FormGroup, {
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $FormCaption, {
                        children: "URL of link"
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Textarea, {
                        as: "textarea",
                        value: href,
                        onChange: handleHrefChange
                    })
                ]
            }),
            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $FormGroup, {
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $FormCaption, {
                        children: "Tooltip text"
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Input, {
                        type: "text",
                        value: title,
                        onChange: handleTitleChange
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $FormHint, {
                        children: "Tooltip to display on mouse hover"
                    })
                ]
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $FormGroup, {
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $PrimaryButton, {
                    onClick: handleSubmit,
                    children: "Apply Edit"
                })
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $FormGroup, {
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $CancelButton, {
                    onClick: openAnchorDialog,
                    children: "Cancel"
                })
            })
        ]
    });
}
// ../react/src/anchor-plugin/render-element/icons.tsx
init_react_shim();
var ExternalLinkIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        ...props,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M12 6H6a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-6M11 13l9-9M15 4h5v5"
        })
    });
var LinkOffIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        ...props,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "m9 15 3-3m2-2 1-1M11 6l.463-.536a5 5 0 0 1 7.071 7.072L18 13M3 3l18 18M13 18l-.397.534a5.068 5.068 0 0 1-7.127 0 4.972 4.972 0 0 1 0-7.071L6 11"
        })
    });
var PencilIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        ...props,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M4 20h4L18.5 9.5a1.5 1.5 0 0 0-4-4L4 16v4M13.5 6.5l4 4"
        })
    });
// ../react/src/anchor-plugin/render-element/AnchorDialog.tsx
var $AnchorDialog2 = _styled2.default.call(void 0, $Panel)`
  position: absolute;
  display: flex;
  width: 20em;
  z-index: 10;
  padding: 1em;
  color: var(--shade-400);

  .--icons {
    display: flex;
    overflow: hidden;
    flex: 0 0 6em;
  }

  .--link {
    text-decoration: none;
    display: flex;
    flex: 0 0 14em;
    overflow: hidden;
    color: var(--shade-400);
    &:hover {
      color: var(--blue-600);
    }
    transition: all 200ms;
  }

  .--url {
    margin-left: 0.5em;
    .--hostname {
      font-size: 0.875em;
      width: 14em;
      line-height: 1.5em;
      color: var(--blue-600);
      overflow-wrap: break-word;
      /* width: 13.5em;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis; */
    }
    .--pathname {
      margin-top: 0.125em;
      font-size: 0.75em;
      width: 16.25em;
      line-height: 1.5em;
      overflow-wrap: break-word;
    }
    .--tooltip {
      box-sizing: border-box;
      position: relative;
      margin-top: 1em;
      font-size: 0.875em;
      width: 14em;
      line-height: 1.5em;
      background: var(--shade-200);
      border-radius: 0.5em;
      padding: 0.5em 0.75em;
      color: var(--shade-600);
      overflow-wrap: break-word;
    }
    .--tooltip::before {
      content: "";
      position: absolute;
      top: -0.5em; /* Height of the triangle */
      left: 0.5em; /* Position it on the left side */
      border-left: 0.5em solid transparent; /* Half the width of the triangle */
      border-right: 0.5em solid transparent; /* Half the width of the triangle */
      border-bottom: 0.5em solid var(--shade-200); /* Height and color of the triangle */
    }
  }

  .--icon {
    cursor: pointer;
    margin-left: 0.5em;
    &:hover {
      color: var(--blue-600);
    }
  }

  svg {
    flex: 0 0 auto;
    width: 1.25em;
    height: 1.25em;
    stroke-width: 1.5;
  }
`;
function parseUrl2(s) {
    try {
        const url = new URL(s);
        return {
            hostname: url.hostname,
            pathname: url.pathname
        };
    } catch (e) {
        return {
            hostname: "",
            pathname: ""
        };
    }
}
function AnchorDialog({ destAnchor, destStartEdge, element: element2 }) {
    const dialog = useLayer("dialog");
    const editor = _slatereact.useSlateStatic.call(void 0);
    const url = parseUrl2(element2.href);
    const style = useAbsoluteReposition({
        destAnchor,
        destStartEdge
    }, ({ destAnchor: destAnchor2, destStartEdge: destStartEdge2 })=>{
        return {
            left: destStartEdge2.left,
            top: destAnchor2.top + destAnchor2.height
        };
    });
    const removeTooltip = useTooltip({
        title: "Remove link"
    });
    const editTooltip = useTooltip({
        title: "Edit link"
    });
    const removeLink2 = _react.useCallback.call(void 0, ()=>{
        editor.anchor.removeLink({
            at: element2
        });
    }, [
        editor
    ]);
    const openEditDialog = _react.useCallback.call(void 0, ()=>{
        editTooltip.onMouseLeave();
        dialog.open(()=>{
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, AnchorEditDialog, {
                destAnchor,
                destStartEdge,
                element: element2
            });
        });
    }, [
        destAnchor,
        destStartEdge,
        element2
    ]);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $AnchorDialog2, {
        contentEditable: false,
        style,
        children: [
            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "a", {
                className: "--link",
                href: element2.href,
                target: "_blank",
                rel: "noreferrer",
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ExternalLinkIcon, {}),
                    /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", {
                        className: "--url",
                        children: [
                            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                                className: "--hostname",
                                children: url.hostname
                            }),
                            url.pathname === "" || url.pathname === "/" ? null : /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                                className: "--pathname",
                                children: url.pathname
                            }),
                            element2.title == null || element2.title === "" ? null : /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                                className: "--tooltip",
                                children: element2.title
                            })
                        ]
                    })
                ]
            }),
            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "span", {
                className: "--icons",
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                        className: "--icon",
                        onClick: removeLink2,
                        onMouseEnter: removeTooltip.onMouseEnter,
                        onMouseLeave: removeTooltip.onMouseLeave,
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, LinkOffIcon, {})
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                        className: "--icon",
                        onMouseEnter: editTooltip.onMouseEnter,
                        onMouseLeave: editTooltip.onMouseLeave,
                        onClick: openEditDialog,
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, PencilIcon, {})
                    })
                ]
            })
        ]
    });
}
// ../react/src/anchor-plugin/render-element/ProgressBar.tsx
init_react_shim();
function ProgressBar({ anchorRef, progress }) {
    const progressRef = _react.useRef.call(void 0, null);
    const rect = useFixedReposition({
        anchor: anchorRef,
        progress: progressRef
    }, (rects, viewport)=>{
        if (rects.anchor == null || rects.progress == null) return {
            left: -1000
        };
        return positionInside(rects.progress, viewport, {
            left: rects.anchor.left,
            top: rects.anchor.top + rects.anchor.height + 4
        });
    });
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ProgressBar, {
        ref: progressRef,
        style: rect,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ProgressBarFill, {
            style: {
                width: progress * 100
            }
        })
    });
}
// ../react/src/anchor-plugin/render-element/anchor.tsx
function Anchor({ element: element2, attributes, children }) {
    const startEdgeRef = _react.useRef.call(void 0, null);
    const anchorRef = _react.useRef.call(void 0, null);
    const selected = _slatereact.useSelected.call(void 0);
    const upload2 = useUpload(element2.href);
    const dialog = useLayer("dialog");
    _react.useEffect.call(void 0, ()=>{
        const anchor = anchorRef.current;
        const startEdge = startEdgeRef.current;
        if (!anchor || !startEdge) return;
        if (selected) setTimeout(()=>{
            dialog.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, AnchorDialog, {
                    destAnchor: anchor,
                    destStartEdge: startEdge,
                    element: element2
                }));
        });
        else dialog.close();
    }, [
        selected,
        element2
    ]);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $Anchor, {
        className: _clsx.clsx.call(void 0, {
            "--selected": selected
        }),
        href: element2.href,
        target: element2.target,
        ...attributes,
        ref: anchorRef,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Edge, {
                ref: startEdgeRef,
                contentEditable: false
            }),
            _optionalChain([
                upload2,
                "optionalAccess",
                (_24)=>_24.status
            ]) === "progress" ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ProgressBar, {
                anchorRef,
                progress: upload2.sentBytes / upload2.totalBytes
            }) : null,
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                children
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Edge, {
                contentEditable: false
            })
        ]
    });
}
// ../react/src/anchor-plugin/index.tsx
var AnchorPlugin = createPlugin((editor, options, { createPolicy })=>{
    editor.anchor = createAnchorMethods(editor);
    return createPolicy({
        name: "anchor",
        editor: {
            isInline (element2) {
                if (element2.type === "anchor") return true;
            },
            normalizeNode: curryOne(normalizeNode, editor)
        },
        editableProps: {
            onPaste: curryOne(onPaste, editor),
            renderElement: ({ element: element2, attributes, children })=>{
                if (element2.type === "anchor") return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Anchor, {
                    element: element2,
                    attributes,
                    children
                });
            }
        }
    });
});
// ../react/src/atomic-delete-plugin/index.ts
init_react_shim();
// ../react/src/atomic-delete-plugin/is-safe-delete.ts
init_react_shim();
function isSafeDelete(editor, a, b) {
    if (!a || !b) return true;
    if (_slate.Path.equals(a[1], b[1])) return true;
    const masterEntryA = findElementUp(editor, (el)=>_slate.Element.isElement(el) && editor.isMaster(el), {
        at: a[1]
    });
    const masterEntryB = findElementUp(editor, (el)=>{
        return _slate.Element.isElement(el) && editor.isMaster(el);
    }, {
        at: b[1]
    });
    if (!masterEntryA && !masterEntryB) return true;
    if (masterEntryA && masterEntryB && _slate.Path.equals(masterEntryA[1], masterEntryB[1])) return true;
    return false;
}
// ../react/src/atomic-delete-plugin/index.ts
var AtomicDeletePlugin = createPlugin((editor)=>{
    editor.atomicDelete = true;
    return {
        name: "atomic-delete",
        editor: {
            deleteBackward () {
                if (editor.selection == null) return false;
                const entry = _slate.Editor.node(editor, editor.selection);
                const prevEntry = _slate.Editor.previous(editor, {
                    mode: "lowest"
                });
                if (isSafeDelete(editor, entry, prevEntry)) return false;
                _slate.Transforms.move(editor, {
                    unit: "character",
                    reverse: true
                });
                return true;
            },
            deleteForward () {
                if (editor.selection == null) return false;
                const entry = _slate.Editor.node(editor, editor.selection);
                const nextEntry = _slate.Editor.next(editor, {
                    mode: "lowest"
                });
                if (isSafeDelete(editor, entry, nextEntry)) return false;
                _slate.Transforms.move(editor, {
                    unit: "character"
                });
                return true;
            }
        }
    };
});
// ../react/src/block-quote-plugin/index.tsx
init_react_shim();
// ../react/src/block-quote-plugin/styles.tsx
init_react_shim();
var $BlockQuote = _styled2.default.call(void 0, "blockquote")`
  position: relative;
  margin-top: 1em;
  margin-bottom: 1em;
  margin-left: 0;
  border-left: 0.25em solid rgba(0, 0, 0, 0.075);
  padding-left: 1.5em;
`;
// ../react/src/block-quote-plugin/index.tsx
function matchBlockQuoteSafe(node2) {
    return _slate.Element.isElement(node2) && /**
   * TODO:
   *
   * This is probably:
   * Element.isElement(node) && !Element.isInline(node) &&
   * !Element.isDependant(node)
   */ (node2.type === "paragraph" || node2.type === "code-block" || node2.type === "table" || node2.type === "horizontal-rule" || node2.type === "task-list-item" || node2.type === "unordered-list-item" || node2.type === "ordered-list-item" || node2.type === "heading");
}
var BlockQuotePlugin = createPlugin((editor)=>{
    editor.supportsBlockQuote = true;
    editor.blockQuotePlugin = {
        indent: ()=>{
            _slate.Transforms.wrapNodes(editor, {
                type: "block-quote",
                children: []
            }, {
                match: matchBlockQuoteSafe
            });
        },
        outdent: ()=>{
            _slate.Transforms.liftNodes(editor, {
                match: (node2, path3)=>matchBlockQuoteSafe(node2) && path3.length > 1
            });
        }
    };
    return {
        name: "block-quote",
        editor: {
            normalizeNode (entry) {
                const [node2, path3] = entry;
                if (!_slate.Element.isElement(node2)) return false;
                if (node2.type !== "block-quote") return false;
                return normalizeSiblings(editor, [
                    node2,
                    path3
                ], (a, b)=>{
                    if (_slate.Element.isElement(a[0]) && _slate.Element.isElement(b[0]) && a[0].type === "block-quote" && b[0].type === "block-quote") _slate.Transforms.mergeNodes(editor, {
                        at: b[1]
                    });
                    return true;
                });
            }
        },
        editableProps: {
            renderElement: ({ element: element2, attributes, children })=>{
                if (element2.type === "block-quote") return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $BlockQuote, {
                    ...attributes,
                    children
                });
            },
            onKeyDown: createHotkeyHandler({
                "super+.": editor.blockQuotePlugin.indent,
                "super+,": editor.blockQuotePlugin.outdent
            })
        }
    };
});
// ../react/src/code-block-plugin/index.tsx
init_react_shim();
// ../react/src/code-block-plugin/decorate.tsx
init_react_shim();
var _prismjs = require("c1726e0c075867dc");
function getLineOffsets(lines) {
    let offset = 0;
    const lineOffsets = [];
    for (const line of lines){
        lineOffsets.push(offset);
        offset = offset + line.length;
    }
    return lineOffsets;
}
function decorate(nodeEntry) {
    const [node2, path3] = nodeEntry;
    if (!_slate.Element.isElement(node2)) return [];
    if (node2.type !== "code-block") return [];
    const lang = _prismjs.languages[node2.language];
    if (lang === void 0) return [];
    const codeLineElements = node2.children;
    const textLines = codeLineElements.map((node3)=>`${_slate.Node.string(node3)}
`);
    const text4 = textLines.join("");
    const lineOffsets = getLineOffsets(textLines);
    function getPointFromOffset(offset2) {
        for(let i = lineOffsets.length; i >= 0; i--){
            const lineOffset = lineOffsets[i];
            if (lineOffset <= offset2) return {
                path: [
                    ...path3,
                    i
                ],
                offset: offset2 - lineOffset
            };
        }
        throw new Error("This shouldn't happen and indicates a bug in the logic");
    }
    const ranges = [];
    const tokens = _prismjs.tokenize.call(void 0, text4, lang);
    let offset = 0;
    for (const token of tokens)if (typeof token === "string") offset += token.length;
    else {
        const anchor = getPointFromOffset(offset);
        const focus = getPointFromOffset(offset + token.length);
        ranges.push({
            anchor,
            focus,
            prismToken: token.type
        });
        offset += token.length;
    }
    return ranges;
}
// ../react/src/code-block-plugin/methods/index.ts
init_react_shim();
// ../react/src/code-block-plugin/methods/createCodeBlock.ts
init_react_shim();
function createCodeBlock(editor, { language }) {
    insertRootElement(editor, {
        type: "code-block",
        language,
        children: [
            {
                type: "code-block-line",
                children: [
                    {
                        text: ""
                    }
                ]
            }
        ]
    });
}
// ../react/src/code-block-plugin/methods/setCodeBlockLanguage.ts
init_react_shim();
function setCodeBlockLanguage(editor, language, options = {}) {
    const entry = findElementUp(editor, (el)=>_slate.Element.isElement(el) && el.type === "code-block", {
        at: options.at
    });
    if (!entry) return false;
    _slate.Transforms.setNodes(editor, {
        language
    }, {
        at: entry[1]
    });
    return true;
}
// ../react/src/code-block-plugin/methods/index.ts
function createCodeBlockMethods(editor) {
    return {
        createCodeBlock: curryOne(createCodeBlock, editor),
        setCodeBlockLanguage: curryOne(setCodeBlockLanguage, editor)
    };
}
// ../react/src/code-block-plugin/prism-theme.ts
init_react_shim();
var commentStyle = {
    color: "#999988",
    fontStyle: "italic"
};
var dimStyle = {
    opacity: "0.7"
};
var stringStyle = {
    color: "#e3116c"
};
var operatorStyle = {
    color: "#393a34"
};
var valueStyle = {
    color: "#36acaa"
};
var keywordStyle = {
    color: "#00a4db"
};
var functionStyle = {
    color: "#9a050f"
};
var tagStyle = {
    color: "#00009f"
};
var boldStyle = {
    fontWeight: "bold"
};
var italicStyle = {
    fontStyle: "italic"
};
var tokenStyles = {
    comment: commentStyle,
    prolog: commentStyle,
    doctype: commentStyle,
    cdata: commentStyle,
    namespace: dimStyle,
    string: stringStyle,
    "attr-value": stringStyle,
    puncutation: operatorStyle,
    operator: operatorStyle,
    entity: valueStyle,
    url: valueStyle,
    symbol: valueStyle,
    number: valueStyle,
    boolean: valueStyle,
    variable: valueStyle,
    constant: valueStyle,
    property: valueStyle,
    regex: valueStyle,
    insert: valueStyle,
    atrule: keywordStyle,
    keyword: keywordStyle,
    "attr-name": keywordStyle,
    function: {
        ...functionStyle,
        ...boldStyle
    },
    delete: functionStyle,
    tag: tagStyle,
    selector: tagStyle,
    important: boldStyle,
    bold: boldStyle,
    italic: italicStyle
};
// ../react/src/code-block-plugin/types.tsx
init_react_shim();
var LanguageList = [
    "text",
    "html",
    "css",
    "svg",
    "javascript",
    "java",
    "c"
];
// ../react/src/code-block-plugin/normalizeNode.tsx
init_react_shim();
function normalizeNode2(editor, entry) {
    if (!_slate.Element.isElement(entry[0])) return false;
    if (entry[0].type === "code-block-line") for (const [child, path3] of _slate.Node.children(editor, entry[1])){
        if (!_slate.Element.isElement(child)) continue;
        if (editor.isVoid(child)) {
            _slate.Transforms.removeNodes(editor, {
                at: path3
            });
            return true;
        } else {
            _slate.Transforms.unwrapNodes(editor, {
                at: path3
            });
            return true;
        }
    }
    if (entry[0].type === "code-block") for (const [child, path3] of _slate.Node.children(editor, entry[1])){
        if (!_slate.Element.isElement(child)) continue;
        if (child.type === "code-block-line") continue;
        if (child.type === "code-block") {
            _slate.Transforms.unwrapNodes(editor, {
                at: path3
            });
            return true;
        } else if (editor.isVoid(child)) {
            _slate.Transforms.removeNodes(editor, {
                at: path3
            });
            return true;
        } else {
            _slate.Transforms.removeNodes(editor, {
                at: path3
            });
            _slate.Transforms.insertNodes(editor, {
                type: "code-block-line",
                children: [
                    {
                        text: _slate.Node.string(child)
                    }
                ]
            });
            return true;
        }
    }
    return false;
}
// ../react/src/code-block-plugin/render-element/index.tsx
init_react_shim();
// ../react/src/code-block-plugin/render-element/CodeBlock.tsx
init_react_shim();
// ../react/src/code-block-plugin/icons/ChevronDownIcon.tsx
init_react_shim();
var ChevronDownIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        ...props,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "m6 9 6 6 6-6"
        })
    });
// ../react/src/code-block-plugin/styles.ts
init_react_shim();
var $CodeBlock = _styled2.default.call(void 0, "div")`
  position: relative;
  background: var(--code-block-bgcolor);
  margin: 1em 0;
  border-radius: 0.5em;
  border: 1px solid var(--code-block-border-color);
  /**
   * DO NOT REMOVE: Code for adding line numbering if enabled. See $CodeBlockLine
  * for more details.
   * counter-reset: line;
   */
  &.--selected {
    outline: 2px solid var(--select-color);
  }
  /**
   * NOTE: Required to make the border radius work on the first and last lines.
   * Otherwise they will be square.
   */
  overflow-x: hidden;
`;
var $CodeBlockScroller = _styled2.default.call(void 0, "div")`
  padding: 2.25em 1em 1.5em 1em;
  border-radius: 0.5em;
  overflow-x: auto;
`;
var $CodeBlockLanguage = _styled2.default.call(void 0, "span")`
  cursor: pointer;
  position: absolute;
  top: 0.25em;
  right: 0.25em;
  width: 8em;
  display: flex;
  font-size: 0.75em;
  color: var(--shade-700);
  background: var(--shade-200);
  padding: 0.25em 0.5em;
  border-radius: 0.5em;
  align-items: center;
  gap: 0.25em;
  span {
    text-align: right;
    flex: 1 1 auto;
  }
  svg {
    flex: 0 0 auto;
    position: relative;
  }
  &:hover {
    color: var(--shade-800);
    background: var(--shade-300);
  }
`;
var $CodeBlockLine = _styled2.default.call(void 0, "div")`
  white-space: pre;
  line-height: 1.5em;
  counter-increment: line;
  font-family: "andale mono", AndaleMono, monospace;
  font-size: 0.875em;
  &.--selected {
    background-color: var(--shade-100);
  }
  /*
    DO NOT REMOVE: Code for adding line numbering.
    TODO: Make optional in future.
    */
  /* &:before {
    content: counter(line);
    color: rgba(0, 0, 0, 0.25);
    border-right: 1px solid rgba(0, 0, 0, 0.05);
    margin-right: 1em;
    padding: 0em 1em 0 0;
    text-align: right;
    display: inline-block;
    width: 2em;
  } */
`;
// ../react/src/code-block-plugin/render-element/CodeBlock.tsx
function CodeBlock({ element: element2, attributes, children }) {
    const ref = _react.useRef.call(void 0, null);
    const selected = _slatereact.useSelected.call(void 0);
    const dropdown = useLayer("code-block-dropdown");
    const onClick = _react.useCallback.call(void 0, ()=>{
        if (dropdown.layer) dropdown.close();
        const dest = ref.current;
        if (dest === null) return;
        const items = LanguageList.map((language)=>{
            return {
                icon: ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {}),
                title: language,
                action: (editor)=>{
                    editor.codeBlock.setCodeBlockLanguage(language, {
                        at: element2
                    });
                }
            };
        });
        dropdown.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, Menu, {
                dest,
                items,
                close: dropdown.close
            }));
    }, [
        element2
    ]);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $CodeBlock, {
        className: selected ? "--selected" : "",
        ...attributes,
        children: [
            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $CodeBlockLanguage, {
                contentEditable: false,
                onClick,
                ref,
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                        children: element2.language
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ChevronDownIcon, {})
                ]
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $CodeBlockScroller, {
                children
            })
        ]
    });
}
// ../react/src/code-block-plugin/render-element/CodeBlockLine.tsx
init_react_shim();
function CodeBlockLine({ attributes, children }) {
    const selected = _slatereact.useSelected.call(void 0);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $CodeBlockLine, {
        className: selected ? "--selected" : "",
        ...attributes,
        spellCheck: "false",
        children
    });
}
// ../react/src/code-block-plugin/render-element/index.tsx
function renderElement({ element: element2, attributes, children }) {
    if (element2.type === "code-block") return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CodeBlock, {
        element: element2,
        attributes,
        children
    });
    else if (element2.type === "code-block-line") return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CodeBlockLine, {
        element: element2,
        attributes,
        children
    });
}
// ../react/src/code-block-plugin/index.tsx
var CodeBlockPlugin = createPlugin((editor, options, { createPolicy })=>{
    editor.codeBlock = createCodeBlockMethods(editor);
    function onDelete() {
        const { selection } = editor;
        if (!isCollapsed(selection)) return false;
        const codeBlockEntry = findElementUp(editor, "code-block");
        if (codeBlockEntry == null) return false;
        const codeBlockText = _slate.Editor.string(editor, codeBlockEntry[1]);
        if (codeBlockText === "") {
            _slate.Transforms.removeNodes(editor, {
                at: codeBlockEntry[1]
            });
            return true;
        }
        return false;
    }
    return createPolicy({
        name: "code-block",
        editor: {
            deleteBackward: onDelete,
            deleteForward: onDelete,
            isInline (element2) {
                if (element2.type === "code-block" || element2.type === "code-block-line") return false;
            },
            isVoid (element2) {
                if (element2.type === "code-block" || element2.type == "code-block-line") return false;
            },
            isMaster (element2) {
                if (element2.type === "code-block") return true;
            },
            normalizeNode: curryOne(normalizeNode2, editor)
        },
        editableProps: {
            decorate,
            onKeyDown: createHotkeyHandler({
                "super+`": ()=>editor.codeBlock.createCodeBlock({
                        language: "text"
                    }),
                "mod+a": ()=>{
                    const entry = findElementUp(editor, (el)=>_slate.Element.isElement(el) && el.type === "code-block");
                    if (!entry) return false;
                    _slate.Transforms.select(editor, entry[1]);
                    return true;
                }
            }),
            renderElement,
            renderLeaf: ({ leaf, children })=>{
                const style = leaf.prismToken ? tokenStyles[leaf.prismToken] || null : null;
                if (style === null) return children;
                else return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                    style,
                    children
                });
            }
        }
    });
});
// ../react/src/collapsible-paragraph-plugin/index.tsx
init_react_shim();
// ../react/src/collapsible-paragraph-plugin/normalize-node/index.ts
init_react_shim();
// ../react/src/collapsible-paragraph-plugin/normalize-node/normalize-sibling-paragraphs.ts
init_react_shim();
function isParagraph(node2) {
    return _slate.Element.isElement(node2) && node2.type === "paragraph";
}
function normalizeSiblingParagraphs(editor, entry) {
    return normalizeSiblings(editor, entry, (a, b)=>{
        if (!isParagraph(a[0]) || !isParagraph(b[0])) return false;
        if (a[0].__collapsible && b[0].__collapsible) {
            _slate.Transforms.removeNodes(editor, {
                at: a[1]
            });
            return true;
        }
        return false;
    });
}
// ../react/src/collapsible-paragraph-plugin/normalize-node/normalize-sibling-walls.ts
init_react_shim();
function isWall(editor, node2) {
    if (!_slate.Element.isElement(node2)) return false;
    return editor.isVoid(node2) || editor.isMaster(node2);
}
function normalizeSiblingWalls(editor, entry) {
    if (!isWall(editor, entry[0])) return false;
    return normalizeSiblings(editor, entry, (a, b)=>{
        if (!isWall(editor, a[0]) || !isWall(editor, b[0])) return false;
        _slate.Transforms.insertNodes(editor, {
            type: "paragraph",
            __collapsible: true,
            children: [
                {
                    text: ""
                }
            ]
        }, {
            at: b[1]
        });
        return true;
    });
}
// ../react/src/collapsible-paragraph-plugin/normalize-node/index.ts
function normalizeNode3(editor, entry) {
    const [node2, path3] = entry;
    if (!_slate.Element.isElement(node2)) return false;
    if (normalizeSiblingWalls(editor, [
        node2,
        path3
    ])) return true;
    if (normalizeSiblingParagraphs(editor, [
        node2,
        path3
    ])) return true;
    return false;
}
// ../react/src/collapsible-paragraph-plugin/render-element/paragraph.tsx
init_react_shim();
// ../react/src/collapsible-paragraph-plugin/render-element/styles.ts
init_react_shim();
var $Paragraph = _styled2.default.call(void 0, "p")`
  padding: 0;
  margin: 1em 0;
  &:first-child {
    margin-top: 0;
  }

  transition: background-color 200ms, margin-top 200ms, padding-top 200ms,
    margin-bottom 200ms, padding-bottom 200ms, font-size 200ms;

  &.--collapsible&.--empty {
    font-size: 0.25em; /* font-size is collapsed to 1/4 of regular em */
    margin: -4em 0; /* margin grows to 3/4 of regular em leaving space */
    padding: 1em 0; /* this is kind of eye-balling it */
    border-radius: 1em;
    &:hover {
      background: rgba(0, 127, 255, 0.1);
      cursor: pointer;
    }
  }
  &.--collapsible&.--empty&.--selected {
    font-size: 1em;
    padding: 0;
    margin: 1em 0;
    &:hover {
      background: none;
      cursor: default;
    }
    border-radius: 8px;
  }
`;
// ../react/src/collapsible-paragraph-plugin/render-element/utils.ts
init_react_shim();
function getIsEmpty(element2) {
    return element2.children.length === 1 && _slate.Node.string(element2.children[0]).length === 0;
}
// ../react/src/collapsible-paragraph-plugin/render-element/paragraph.tsx
function Paragraph({ element: element2, attributes, children }) {
    const selected = _slatereact.useSelected.call(void 0);
    const isEmpty = getIsEmpty(element2);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Paragraph, {
        ...attributes,
        className: _clsx.clsx.call(void 0, {
            "--selected": selected,
            "--empty": isEmpty,
            "--collapsible": !!element2.__collapsible
        }),
        children
    });
}
// ../react/src/collapsible-paragraph-plugin/index.tsx
var CollapsibleParagraphPlugin = createPlugin((editor)=>{
    editor.convertElement.addConvertElementType("paragraph");
    editor.collapsibleParagraph = {
        convertParagraph: ()=>{
            editor.convertElement.convertElements(()=>false, {
                type: "paragraph"
            }, false);
        }
    };
    if (!editor.normalizeAfterDelete) throw new Error(`The collapsible-paragraph-plugin has a dependency on the normalize-after-delete plugin. Please add that plugin before this one.`);
    return {
        name: "collapsible-paragraph",
        editor: {
            normalizeNode: curryOne(normalizeNode3, editor)
        },
        editableProps: {
            renderElement: ({ element: element2, attributes, children })=>{
                switch(element2.type){
                    case "paragraph":
                        return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Paragraph, {
                            element: element2,
                            attributes,
                            children
                        });
                }
            },
            onKeyDown: createHotkeyHandler({
                "super+0": editor.collapsibleParagraph.convertParagraph
            })
        }
    };
});
// ../react/src/convert-element-plugin/index.tsx
init_react_shim();
// ../react/src/convert-element-plugin/methods/index.ts
init_react_shim();
// ../react/src/convert-element-plugin/methods/add-convert-element-type.ts
init_react_shim();
function addConvertElementType(editor, type) {
    if (Array.isArray(type)) editor.convertElement.convertElementTypes.push(...type);
    else editor.convertElement.convertElementTypes.push(type);
}
// ../react/src/convert-element-plugin/methods/convert-elements.ts
init_react_shim();
function convertElements(editor, matchForToggle, targetElement, allowToggle) {
    const entries = Array.from(_slate.Editor.nodes(editor, {
        match: (node2)=>_slate.Element.isElement(node2) && editor.convertElement.isConvertibleElement(node2)
    }));
    if (entries.length === 0) return false;
    const shouldToggle = allowToggle && entries.every((entry)=>matchForToggle(entry[0]));
    if (shouldToggle) _slate.Editor.withoutNormalizing(editor, ()=>{
        for (const entry of entries)rewrapElement(editor, {
            type: "paragraph"
        }, entry[1]);
    });
    else _slate.Editor.withoutNormalizing(editor, ()=>{
        for (const entry of entries)rewrapElement(editor, targetElement, entry[1]);
    });
    return true;
}
// ../react/src/convert-element-plugin/methods/is-convert-element.ts
init_react_shim();
function isConvertElement(editor, element2) {
    return editor.convertElement.convertElementTypes.includes(element2.type);
}
// ../react/src/convert-element-plugin/methods/index.ts
function createConvertElementMethods(editor) {
    return {
        convertElementTypes: [],
        addConvertElementType: curryOne(addConvertElementType, editor),
        isConvertibleElement: curryOne(isConvertElement, editor),
        convertElements: curryOne(convertElements, editor)
    };
}
// ../react/src/convert-element-plugin/index.tsx
var ConvertElementPlugin = createPlugin((editor)=>{
    editor.convertElement = createConvertElementMethods(editor);
    return {
        name: "convert-element"
    };
});
// ../react/src/heading-plugin/index.tsx
init_react_shim();
// ../react/src/heading-plugin/types.ts
init_react_shim();
// ../react/src/heading-plugin/insert-break.ts
init_react_shim();
function insertBreak(editor) {
    const entry = findElementUp(editor, "heading");
    if (!entry) return false;
    if (!editor.selection) return false;
    if (_slate.Range.isExpanded(editor.selection)) return false;
    if (!_slate.Editor.isEnd(editor, editor.selection.anchor, entry[1])) return false;
    const nextPath = _slate.Path.next(entry[1]);
    _slate.Transforms.insertNodes(editor, {
        type: "paragraph",
        children: [
            {
                text: ""
            }
        ]
    }, {
        at: nextPath
    });
    _slate.Transforms.select(editor, {
        anchor: _slate.Editor.start(editor, nextPath),
        focus: _slate.Editor.start(editor, nextPath)
    });
    return true;
}
// ../react/src/heading-plugin/methods/index.ts
init_react_shim();
function convertHeading(editor, level, allowToggle) {
    editor.convertElement.convertElements((element2)=>element2.type === "heading" && element2.level == level, {
        type: "heading",
        level
    }, allowToggle);
}
function createHeadingMethods(editor) {
    return {
        convertHeading: curryOne(convertHeading, editor)
    };
}
// ../react/src/heading-plugin/styles.ts
init_react_shim();
var _react3 = require("aa85594e93d90be8");
var headingStyles = _react3.css`
  margin-top: 1em;
  &:first-child {
    margin-top: 0;
  }
  font-weight: bold;
`;
var $H1 = _styled2.default.call(void 0, "h1")`
  ${headingStyles}
  font-size: 2.25em;
  letter-spacing: -0.01em;
`;
var $H2 = _styled2.default.call(void 0, "h2")`
  ${headingStyles}
  font-size: 1.5em;
`;
var $H3 = _styled2.default.call(void 0, "h3")`
  ${headingStyles}
  font-size: 1.25em;
`;
var $H4 = _styled2.default.call(void 0, "h4")`
  ${headingStyles}
  font-size: 1em;
`;
var $H5 = _styled2.default.call(void 0, "h5")`
  ${headingStyles}
  font-size: 1em;
`;
var $H6 = _styled2.default.call(void 0, "h6")`
  ${headingStyles}
  font-size: 1em;
`;
// ../react/src/heading-plugin/index.tsx
var HeadingPlugin = createPlugin((editor)=>{
    editor.convertElement.addConvertElementType("heading");
    editor.heading = createHeadingMethods(editor);
    const hotkeyHandler = createHotkeyHandler({
        "super+1": curryTwo(editor.heading.convertHeading, 1, true),
        "super+2": curryTwo(editor.heading.convertHeading, 2, true),
        "super+3": curryTwo(editor.heading.convertHeading, 3, true),
        "super+4": curryTwo(editor.heading.convertHeading, 4, true),
        "super+5": curryTwo(editor.heading.convertHeading, 5, true),
        "super+6": curryTwo(editor.heading.convertHeading, 6, true)
    });
    const autocompleteHandler = createAutocompleteSpaceHandler(editor, {
        "#": curryTwo(editor.heading.convertHeading, 1, false),
        "##": curryTwo(editor.heading.convertHeading, 2, false),
        "###": curryTwo(editor.heading.convertHeading, 3, false),
        "####": curryTwo(editor.heading.convertHeading, 4, false),
        "#####": curryTwo(editor.heading.convertHeading, 5, false),
        "######": curryTwo(editor.heading.convertHeading, 6, false)
    });
    return {
        name: "heading",
        editor: {
            insertBreak: curryOne(insertBreak, editor)
        },
        editableProps: {
            renderElement: ({ element: element2, attributes, children })=>{
                if (element2.type === "heading") switch(element2.level){
                    case 1:
                        return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $H1, {
                            ...attributes,
                            children
                        });
                    case 2:
                        return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $H2, {
                            ...attributes,
                            children
                        });
                    case 3:
                        return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $H3, {
                            ...attributes,
                            children
                        });
                    case 4:
                        return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $H4, {
                            ...attributes,
                            children
                        });
                    case 5:
                        return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $H5, {
                            ...attributes,
                            children
                        });
                    case 6:
                        return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $H6, {
                            ...attributes,
                            children
                        });
                    default:
                        throw new Error(`Expected element.level to be 1-6 but got ${element2.level}`);
                }
            },
            onKeyDown: (e)=>{
                if (hotkeyHandler(e)) return true;
                if (autocompleteHandler(e)) return true;
                return false;
            }
        }
    };
});
// ../react/src/horizontal-rule-plugin/index.tsx
init_react_shim();
// ../react/src/horizontal-rule-plugin/horizontal-rule.tsx
init_react_shim();
// ../react/src/horizontal-rule-plugin/styles.tsx
init_react_shim();
var $HorizontalRule = _styled2.default.call(void 0, "hr")`
  position: relative;
  height: 1em;
  /* background-color: var(--hr-color); */
  margin: 1em 0;
  &::before {
    position: absolute;
    content: "";
    left: 0.125em;
    right: 0.125em;
    top: 50%;
    height: 1px;
    background-color: var(--hr-color);
    border-radius: 1px;
  }
  border-radius: 0.25em;
  cursor: pointer;
  border: none;
  &:hover {
    background-color: rgba(0, 127, 255, 0.1);
    /* &::before {
      outline: 2px solid var(--hover-color);
    } */
  }
  &.--selected {
    background: none;
    &::before {
      outline: 2px solid var(--select-color, blue);
    }
  }
`;
// ../react/src/horizontal-rule-plugin/horizontal-rule.tsx
function HorizontalRule({ attributes, children }) {
    const selected = _slatereact.useSelected.call(void 0);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", {
        ...attributes,
        draggable: true,
        children: [
            children,
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                contentEditable: false,
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $HorizontalRule, {
                    className: selected ? "--selected" : ""
                })
            })
        ]
    });
}
// ../react/src/horizontal-rule-plugin/methods/index.ts
init_react_shim();
function insertHorizontalRule(editor) {
    return insertRootElement(editor, {
        type: "horizontal-rule",
        children: [
            {
                text: ""
            }
        ]
    });
}
function createHorizontalRuleMethods(editor) {
    return {
        insertHorizontalRule: curryOne(insertHorizontalRule, editor)
    };
}
// ../react/src/horizontal-rule-plugin/types.ts
init_react_shim();
// ../react/src/horizontal-rule-plugin/index.tsx
var HorizontalRulePlugin = createPlugin((editor, options, { createPolicy })=>{
    editor.horizontalRule = createHorizontalRuleMethods(editor);
    return createPolicy({
        name: "horizontal-rule",
        editor: {
            isVoid (element2) {
                if (element2.type === "horizontal-rule") return true;
            }
        },
        editableProps: {
            renderElement: (props)=>{
                if (props.element.type === "horizontal-rule") return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, HorizontalRule, {
                    ...props
                });
            },
            onKeyDown: createHotkeyHandler({
                "super+-": editor.horizontalRule.insertHorizontalRule
            })
        }
    });
});
// ../react/src/image-plugin/index.tsx
init_react_shim();
// ../react/src/image-plugin/methods/index.ts
init_react_shim();
function noop(editor) {
    editor;
}
function createImageMethods(editor) {
    return {
        noop: curryOne(noop, editor)
    };
}
// ../react/src/image-plugin/normalize-node/index.ts
init_react_shim();
function normalizeNode4(editor, entry) {
    editor;
    entry;
    return false;
}
// ../react/src/image-plugin/render-element/index.tsx
init_react_shim();
// ../react/src/image-plugin/render-element/image-block.tsx
init_react_shim();
// ../react/src/image-plugin/styles/image-block-styles.tsx
init_react_shim();
var $ImageBlock = _styled2.default.call(void 0, "div")`
  display: block;
  margin: 1em 0;
`;
// ../react/src/image-plugin/render-element/image-with-controls/index.tsx
init_react_shim();
// ../react/src/image-plugin/styles/image-with-controls-styles/image-with-controls-styles.tsx
init_react_shim();
var $ImageContainer = _styled2.default.call(void 0, "span")`
  /**
   * In order for this container to wrap tightly (without space), it needs to be
   * an "inline-block". If it's just an "inline" we end up with spacing
   * artificats related to how spacing is placed around text.
   */
  display: inline-block;
  /**
   * This wrapper's primary purpose (why we don't use the image by itself) is
   * so that we can place UI controls for the image in and around the image.
   */
  position: relative;
`;
var $Image = _styled2.default.call(void 0, "img")`
  /**
   * TODO:
   *
   * This is a bit of a hack but is a better experience than not anything.
   *
   * Constrains the maximum resize width of an image to 100% of the space
   * available. This prevents the image from stepping outside its boundaries.
   *
   * Problem:
   *
   * - The "height" is set to "auto" which likely conflicts with the height
   *   provided as an image attribute of "height" set by the application.
   *   Effectively, this means that the "height" is ignored which is fine
   *   except when the image hasn't been loaded yet, I think it's possible
   *   and perhaps likely that there may be a reflow that happens before/after
   *   the image is loaded.
   */
  max-width: 100%;
  height: auto;

  /**
   * Rounded borders are pretty and also help the selection outline look
   * pretty.
   */
  transition: border-radius 250ms;
  border-radius: 0.5em;
  .--small > & {
    border-radius: 1px;
  }
  display: block;

  /**
   * Selection border. We leave a space between the outline and the image so
   * that an image that is the same color as the selection border will still
   * look selected.
   */
  .--selected > & {
    outline: 2px solid var(--select-color);
    outline-offset: 1px;
  }
  /**
   * If the image isn't loaded yet, we want to have some color filling the space
   * that the image will eventually load into. This helps indicates to the user
   * the space that the image will fill into.
   *
   * Once the image is finished loading, we want to respect transparency so at
   * that point we hide the background shading.
   */
  .--loading > & {
    background: var(--shade-100);
  }

  /**
   * When we change the image via a preset, we want to animate the change;
   * however, when we are dragging to resize, a transition adds a janky delay
   * to the resize so we remove the transition during drag resizing.
   */
  transition: width 100ms, height 100ms;
  .--dragging > & {
    transition: border-radius 250ms;
  }
`;
// ../react/src/image-plugin/render-element/image-with-controls/image-resize-controls/image-resize-control.tsx
init_react_shim();
// ../react/src/use-reposition/hooks/index.ts
init_react_shim();
// ../react/src/use-reposition/hooks/use-resize-browser.tsx
init_react_shim();
function useResizeBrowser() {
    const refresh = useThrottledRefresh();
    _react.useEffect.call(void 0, ()=>{
        refresh();
        window.addEventListener("resize", refresh);
        return ()=>{
            window.removeEventListener("resize", refresh);
        };
    }, []);
    return refresh;
}
// ../react/src/image-plugin/styles/image-with-controls-styles/image-resize-handle-styles.tsx
init_react_shim();
var $ImageResizeInvisibleHandle = _styled2.default.call(void 0, "span")`
  position: absolute;
  display: block;
  /**
   * Prevent touch dragging from exhibiting a kind of scroll bounce behavior
   * when we just want the image to resize.
   */
  touch-action: none;
  background: rgba(127, 127, 127, 0.001);
  top: 0;
  right: calc(-1em - 2px);
  width: 2em;
  bottom: 0;
  &.--left {
    cursor: w-resize;
  }
  &.--center {
    cursor: ew-resize;
  }
  &.--right {
    cursor: e-resize;
  }
  &.--small {
    right: calc(-1.25em);
    /* background: green; */
    width: 1.25em;
  }
`;
var $ImageResizeHandle = _styled2.default.call(void 0, "span")`
  position: absolute;
  display: block;
  background: var(--select-color);
  top: 50%;
  margin-top: -1em;
  width: 1em;
  height: 2em;
  outline: 1px solid white;
  transition: all 250ms;
  /**
   * The handle is 3 visible states depending on whether the image is at
   * maximum size or minimum size.
   *
   * There are three indicators that let the user know which directions are
   * available (left, right or both) that the user can drag:
   *
   * - rounded corners on the side that are available to drag towards
   * - on larger size image, the handle is on the inside, middle or outside
   *   of the outline
   * - the cursor pointer indicates the direction available for resizing.
   */
  .--center > & {
    left: 0.5em;
    border-radius: 0.375em;
  }
  .--left > & {
    border-radius: 0.5em 0 0 0.5em;
    left: 1px;
  }
  .--right > & {
    border-radius: 0 0.5em 0.5em 0;
    left: calc(50% - 1px);
  }
  .--bar {
    position: absolute;
    background: var(--blue-200);
    width: 1px;
    top: 0.5em;
    bottom: 0.5em;
  }
  /**
   * Each of 3 bars is 1px wide and 3px apart
   */
  .--bar-left {
    left: calc(50% - 3.5px);
  }
  .--bar-center {
    left: calc(50% - 0.5px);
  }
  .--bar-right {
    left: calc(50% + 2.5px);
  }
  /**
   * When the image is small, we reduce the size of the handler and place it
   * outside the image. The reasons we do this:
   * 
   * - If the handle is not outside the image at small sizes, the handle
   *   obscures the image too much. At larger sizes, it works okay and the
   *   inside handle placement makes the available direction of the drags more
   *   intuitive.
   *
   * - Also, at small sizes, a large handle can overwhelm the image. That is,
   *   the handle can be twice as tall as the image itself which looks poor.
   *   It's still possible for the handle to be larger than the image at small
   *   sizes, but this is okay in that we don't want the handle to become so
   *   small that it is hard to see and hard to click.
   */
  .--small > & {
    /**
     * We opt to mainly adjust the size of the handle at smaller sizes by
     * adjusting the font-size. This is more efficient than changing all the
     * border-sizes because changing the font-size automatically changes the
     * size of the border, but we don't have to redo the different combinations
     * border-size and the corner that they need to display on.
     */
    font-size: 0.5em;
    width: 1.5em;
    left: 0.5em;
    margin-top: -1em;
  }
  /**
   * Each of 2 bars is 1px wide and 3px apart
   */
  .--small > & > .--bar-left {
    left: calc(50% - 2px);
  }
  .--small > & > .--bar-center {
    display: none;
  }
  .--small > & > .--bar-right {
    left: calc(50% + 1px);
  }
`;
// ../react/src/image-plugin/utils/index.ts
init_react_shim();
// ../react/src/image-plugin/utils/min-max.ts
init_react_shim();
function minMax({ value, min, max }) {
    if (!(max >= min)) throw new Error(`Expected max >= min but is not`);
    return Math.max(min, Math.min(max, value));
}
// ../react/src/image-plugin/utils/resize-utils.ts
init_react_shim();
function resizeToWidth(width, srcSize) {
    width = Math.round(width);
    const aspect = srcSize.width / srcSize.height;
    return {
        width,
        height: Math.round(width / aspect)
    };
}
function resizeToHeight(height, srcSize) {
    height = Math.round(height);
    const aspect = srcSize.width / srcSize.height;
    return {
        width: Math.round(height * aspect),
        height
    };
}
function resizeInBounds(size, bounds) {
    const aspect = size.width / size.height;
    const boundsAspect = bounds.width / bounds.height;
    if (aspect >= boundsAspect) {
        if (size.width > bounds.width) return resizeToWidth(bounds.width, size);
    } else {
        if (size.height > bounds.width) return resizeToHeight(bounds.height, size);
    }
    return size;
}
function resizeInPreset(size, srcSize, preset) {
    switch(preset.type){
        case "bounds":
            return resizeInBounds(srcSize, preset);
        case "scale":
            return {
                width: Math.round(srcSize.width * preset.scale),
                height: Math.round(srcSize.height * preset.scale)
            };
    }
}
function getEditorWidth(editor) {
    const element2 = _slatereact.ReactEditor.toDOMNode(editor, editor);
    const computed = getComputedStyle(element2);
    const padding = parseInt(computed.paddingLeft) + parseInt(computed.paddingRight);
    return element2.clientWidth - padding;
}
// ../react/src/image-plugin/render-element/image-with-controls/image-resize-controls/image-resize-control.tsx
function getImageBoundsFromSlateElement(editor, element2) {
    const imageContainerDOMNode = _slatereact.ReactEditor.toDOMNode(editor, element2);
    const imgDOMNode = imageContainerDOMNode.querySelector("img");
    if (!imgDOMNode) throw new Error(`Image Element could not be found but should exist`);
    return imgDOMNode.getBoundingClientRect();
}
function ImageResizeControl({ element: element2, srcSize, size, setSize, isDragging, setIsDragging }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    useResizeBrowser();
    const editorWidth = getEditorWidth(editor);
    const width = size.width;
    const maxWidth = Math.min(srcSize.width, editorWidth);
    const minWidth = Math.min(12, srcSize.width);
    const onMouseDown = _react.useCallback.call(void 0, (e)=>{
        stopEvent(e);
        setIsDragging(true);
        const startX = e.clientX;
        const bounds = getImageBoundsFromSlateElement(editor, element2);
        const startWidth = bounds.width;
        let nextSize = {
            ...size
        };
        const onDocumentMouseMove = (e2)=>{
            const nextWidth = minMax({
                value: startWidth + e2.clientX - startX,
                min: minWidth,
                max: maxWidth
            });
            nextSize = resizeToWidth(nextWidth, srcSize);
            setSize(nextSize);
        };
        const onDocumentMouseUp = ()=>{
            document.removeEventListener("mousemove", onDocumentMouseMove);
            document.removeEventListener("mouseup", onDocumentMouseUp);
            const path3 = _slatereact.ReactEditor.findPath(editor, element2);
            const size2 = {
                width: nextSize.width,
                height: nextSize.height
            };
            setSize(size2);
            _slate.Transforms.setNodes(editor, size2, {
                at: path3
            });
            setIsDragging(false);
        };
        document.addEventListener("mousemove", onDocumentMouseMove);
        document.addEventListener("mouseup", onDocumentMouseUp);
    }, [
        srcSize.width,
        srcSize.height,
        size.width,
        element2
    ]);
    const onTouchStart = _react.useCallback.call(void 0, (e)=>{
        stopEvent(e);
        setIsDragging(true);
        const startX = e.changedTouches[0].clientX;
        const startWidth = size.width;
        let nextSize = {
            ...size
        };
        const onDocumentTouchMove = (te)=>{
            const e2 = te.changedTouches[0];
            const nextWidth = minMax({
                value: startWidth + e2.clientX - startX,
                min: minWidth,
                max: maxWidth
            });
            nextSize = resizeToWidth(nextWidth, srcSize);
            setSize(nextSize);
        };
        const onDocumentTouchEnd = ()=>{
            document.removeEventListener("touchmove", onDocumentTouchMove);
            document.removeEventListener("touchend", onDocumentTouchEnd);
            const path3 = _slatereact.ReactEditor.findPath(editor, element2);
            _slate.Transforms.setNodes(editor, {
                width: nextSize.width,
                height: nextSize.height
            }, {
                at: path3
            });
            setIsDragging(false);
        };
        document.addEventListener("touchmove", onDocumentTouchMove);
        document.addEventListener("touchend", onDocumentTouchEnd);
    }, [
        srcSize.width,
        srcSize.height,
        size.width,
        element2
    ]);
    const className = _clsx.clsx.call(void 0, {
        "--center": width < maxWidth && width > minWidth,
        "--left": width >= maxWidth && width > minWidth,
        "--right": width <= minWidth && width < maxWidth,
        "--dragging": isDragging,
        "--small": width <= 64 || size.height <= 64
    });
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _jsxruntime.Fragment, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ImageResizeInvisibleHandle, {
            className,
            onMouseDown,
            onTouchStart,
            children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $ImageResizeHandle, {
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                        className: "--bar --bar-left"
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                        className: "--bar --bar-center"
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                        className: "--bar --bar-right"
                    })
                ]
            })
        })
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-size-status/image-size-status.tsx
init_react_shim();
// ../react/src/image-plugin/styles/image-with-controls-styles/image-size-status-styles.tsx
init_react_shim();
var $ImageSizeStatus = _styled2.default.call(void 0, "span")`
  position: absolute;
  /**
   * The status appears with a 1px gap from the outline.
   *
   * - 1px for gap from image to outline
   * - 2px for outline width
   * - 1px more for the space to the status
   */
  bottom: calc(-2em - 4px);
  left: 0;
  font-size: 0.625em; /* 10px tiny */
  line-height: 2em;
  padding: 0 0.5em;
  color: var(--shade-100);
  background: var(--shade-600);
  outline: 1px solid rgba(255, 255, 255, 0.5);
  border-radius: 0.5em;
  white-space: nowrap;

  /* force numbers to be monospaced for better alignment */
  font-variant-numeric: tabular-nums;
`;
// ../react/src/image-plugin/render-element/image-with-controls/image-size-status/image-size-status.tsx
function ImageSizeStatus({ size }) {
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $ImageSizeStatus, {
        children: [
            size.width,
            " \xd7 ",
            size.height
        ]
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-toolbar.tsx
init_react_shim();
// ../react/src/image-plugin/styles/image-with-controls-styles/image-toolbar-styles.tsx
init_react_shim();
var $ImageToolbar = _styled2.default.call(void 0, "span")`
  position: absolute;
  /**
   * On top of the image +1 for space inside outline, +2 for outline,
   * +2 for space outside outline.
   *
   * DO NOT MOVE TO BOTTOM:
   *
   * This is a reminder not to move the preset to the bottom. Visually, it is
   * less obtrusive at the bottom; however, an issue is that when switching
   * between different presets, the preset UI moves up/down making it difficult
   * to switch between different presets. When kept at the top, the preset
   * UI doesn't move.
   */
  top: calc(-1.5em - 5px);
  /**
   * Align left to the outline: +1 for space inside outline, +2 for outline
   * width
   */
  left: -3px;
  /**
   * When we're resizing, the controls aren't usable and just add to visual
   * clutter so we hide it. The transition lets us do it smoothly and less
   * obtrusively.
   */
  transition: opacity 200ms;
  .--dragging & {
    opacity: 0;
  }
  display: flex;
  gap: 0.25em;
`;
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-preset-buttons/image-preset-button-group.tsx
init_react_shim();
// ../react/src/image-plugin/styles/image-with-controls-styles/image-buttons-styles.tsx
init_react_shim();
var $ImageButtonGroup = _styled2.default.call(void 0, "span")`
  /* font-size: 0.75em; */
  border-radius: 0.5em;
  display: flex;
  /**
   * So that inner Preset design shows within the rounded corners.
   */
  overflow: clip;
  /**
   * Let's the menu pop a little over other content. Without it, may be able to
   * see the border of the buttons.
   */
  outline: 1px solid white;
`;
var $ImageButton = _styled2.default.call(void 0, "span")`
  font-size: 0.75em;
  line-height: 2em;
  padding: 0 0.625em;
  &:last-child {
    border-right: none;
  }
  cursor: pointer;

  /**
   * We don't want it to wrap
   */
  white-space: nowrap;

  /**
   * Preset default colors
   */
  color: var(--shade-600);
  background: var(--shade-200);
  border-right: 1px solid var(--shade-100);
  /**
   * When preset is disabled, it is lighter in color and with elss contrast.
   */
  &.--disabled {
    cursor: default;
    color: var(--shade-300);
    background: var(--shade-100);
    &:hover {
      color: var(--shade-300);
      background: var(--shade-100);
    }
  }
  &.--selected {
    cursor: default;
    color: var(--blue-700);
    background: var(--blue-200);
    &:hover {
      color: var(--blue-700);
      background: var(--blue-200);
    }
  }
  /**
   * On hover, it is dark, and with higher contrast.
   */
  &:hover {
    color: var(--shade-700);
    background: var(--shade-300);
  }
  svg {
    position: relative;
    top: 0.25em;
    font-size: 1.33em;
    line-height: 1em;
  }
`;
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-preset-buttons/image-preset-button.tsx
init_react_shim();
function ImagePresetButton({ element: element2, preset, size, setSize, srcSize }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const presetSize = resizeInPreset(size, srcSize, preset);
    const tooltip = useTooltip({
        title: preset.title,
        hotkey: `${presetSize.width}x${presetSize.height}`
    });
    const onClick = _react.useCallback.call(void 0, ()=>{
        const path3 = _slatereact.ReactEditor.findPath(editor, element2);
        const nextSize = resizeInPreset(size, srcSize, preset);
        setSize(nextSize);
        _slate.Transforms.setNodes(editor, nextSize, {
            at: path3
        });
    }, [
        element2,
        preset,
        size,
        srcSize
    ]);
    const isEnabled = preset.type === "scale" ? true : preset.width <= srcSize.width || preset.height <= srcSize.height;
    const isDisabled = !isEnabled;
    const isSelected = size.width === presetSize.width && size.height === presetSize.height;
    const className = _clsx.clsx.call(void 0, {
        "--disabled": isDisabled,
        "--selected": !isDisabled && isSelected
    });
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ImageButton, {
        className,
        onClick: isDisabled ? void 0 : onClick,
        onMouseEnter: tooltip.onMouseEnter,
        onMouseLeave: tooltip.onMouseLeave,
        children: preset.name
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-preset-buttons/image-preset-button-group.tsx
function ImagePresetButtonGroup({ element: element2, size, setSize, srcSize, presets }) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ImageButtonGroup, {
        children: presets.map((preset, i)=>{
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImagePresetButton, {
                element: element2,
                preset,
                size,
                setSize,
                srcSize
            }, i);
        })
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-type-buttons/image-type-button-group.tsx
init_react_shim();
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-type-buttons/block-image-type-button.tsx
init_react_shim();
// ../react/src/image-plugin/render-element/icons.tsx
init_react_shim();
var BlockIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        ...props,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "rect", {
                width: 6,
                height: 6,
                x: 4,
                y: 5,
                rx: 1
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M4 15h16M4 19h16"
            })
        ]
    });
var InlineIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        ...props,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "rect", {
                width: 6,
                height: 6,
                x: 9,
                y: 5,
                rx: 1
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M4 7h1M4 11h1M19 7h1M19 11h1M4 15h16M4 19h16"
            })
        ]
    });
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-type-buttons/convert-to-inline-image.tsx
init_react_shim();
function convertToInlineImage(editor, element2) {
    if (!element2.width || !element2.height || !element2.srcWidth || !element2.srcHeight) return;
    const size = {
        width: element2.width,
        height: element2.height
    };
    const srcSize = {
        width: element2.srcWidth,
        height: element2.srcHeight
    };
    const path3 = _slatereact.ReactEditor.findPath(editor, element2);
    _slate.Editor.withoutNormalizing(editor, ()=>{
        const nextSize = resizeInPreset(size, srcSize, {
            name: "initial-inline-image",
            title: "",
            type: "bounds",
            width: 24,
            height: 24
        });
        _slate.Transforms.setNodes(editor, {
            type: "image-inline",
            ...nextSize
        }, {
            at: path3
        });
        _slate.Transforms.wrapNodes(editor, {
            type: "paragraph",
            children: []
        }, {
            at: path3
        });
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-type-buttons/block-image-type-button.tsx
function BlockImageTypeButton({ element: element2 }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const tooltip = useTooltip({
        title: "Inline Image",
        hotkey: "In a line with text"
    });
    const onClickInline = _react.useCallback.call(void 0, ()=>{
        if (element2.type !== "image-block") return;
        convertToInlineImage(editor, element2);
    }, [
        editor,
        element2
    ]);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ImageButton, {
        className: element2.type === "image-inline" ? "--selected" : "",
        onClick: element2.type === "image-inline" ? void 0 : onClickInline,
        onMouseEnter: tooltip.onMouseEnter,
        onMouseLeave: tooltip.onMouseLeave,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, InlineIcon, {})
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-type-buttons/inline-image-type-button.tsx
init_react_shim();
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-type-buttons/convert-to-block-image.tsx
init_react_shim();
function convertToBlockImage(editor, element2) {
    if (!element2.width || !element2.height || !element2.srcWidth || !element2.srcHeight) return;
    const size = {
        width: element2.width,
        height: element2.height
    };
    const srcSize = {
        width: element2.srcWidth,
        height: element2.srcHeight
    };
    const path3 = _slatereact.ReactEditor.findPath(editor, element2);
    _slate.Editor.withoutNormalizing(editor, ()=>{
        const nextSize = resizeInPreset(size, srcSize, {
            name: "initial-block-image",
            title: "",
            type: "bounds",
            width: 320,
            height: 320
        });
        _slate.Transforms.setNodes(editor, {
            type: "image-block",
            ...nextSize
        }, {
            at: path3
        });
        const parentEntry = findElementUp(editor, (node2)=>_slate.Editor.isBlock(editor, node2) && node2.type !== "image-block");
        if (!parentEntry) throw new Error("This shouldn't happen");
        const [parentElement, parentPath] = parentEntry;
        const siblings = parentElement.children;
        const siblingCount = parentElement.children.length;
        const index2 = path3.slice(-1)[0];
        const lastSibling = siblings[siblingCount - 1];
        if (index2 === siblingCount - 2 && _slate.Text.isText(lastSibling) && lastSibling.text === "") _slate.Transforms.removeNodes(editor, {
            at: [
                ...parentPath,
                siblingCount - 1
            ]
        });
        const firstSibling = siblings[0];
        const removeFirstSibling = index2 === 1 && _slate.Text.isText(firstSibling) && firstSibling.text === "";
        if (removeFirstSibling) _slate.Transforms.removeNodes(editor, {
            at: [
                ...parentPath,
                0
            ]
        });
        _slate.Transforms.liftNodes(editor, {
            at: [
                ...parentPath,
                removeFirstSibling ? index2 - 1 : index2
            ]
        });
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-type-buttons/inline-image-type-button.tsx
function InlineImageTypeButton({ element: element2 }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const tooltip = useTooltip({
        title: "Block Image",
        hotkey: "On a line by itself"
    });
    const onClickBlock = _react.useCallback.call(void 0, ()=>{
        if (element2.type !== "image-inline") return;
        convertToBlockImage(editor, element2);
    }, [
        editor,
        element2
    ]);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ImageButton, {
        className: element2.type === "image-block" ? "--selected" : "",
        onClick: element2.type === "image-block" ? void 0 : onClickBlock,
        onMouseEnter: tooltip.onMouseEnter,
        onMouseLeave: tooltip.onMouseLeave,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, BlockIcon, {})
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-type-buttons/image-type-button-group.tsx
function ImageTypeButtonGroup({ element: element2 }) {
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $ImageButtonGroup, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, InlineImageTypeButton, {
                element: element2
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, BlockImageTypeButton, {
                element: element2
            })
        ]
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/image-toolbar/image-toolbar.tsx
function ImageToolbar({ element: element2, size, setSize, srcSize, presets }) {
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $ImageToolbar, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImageTypeButtonGroup, {
                element: element2
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImagePresetButtonGroup, {
                element: element2,
                size,
                setSize,
                srcSize,
                presets
            })
        ]
    });
}
// ../react/src/image-plugin/render-element/image-with-controls/index.tsx
function ImageWithControls({ element: element2, presets }) {
    const upload2 = useUpload(element2.url);
    const selected = _slatereact.useSelected.call(void 0);
    const [isDragging, setIsDragging] = _react.useState.call(void 0, false);
    const [size, setSize] = _react.useState.call(void 0, element2.srcWidth && element2.srcHeight && element2.width && element2.height ? {
        width: element2.width,
        height: element2.height
    } : null);
    const srcSize = element2.srcWidth && element2.srcHeight ? {
        width: element2.srcWidth,
        height: element2.srcHeight
    } : null;
    const showControls = selected && size && srcSize;
    const className = _clsx.clsx.call(void 0, {
        "--selected": selected,
        "--dragging": isDragging,
        "--small": size && (size.width <= 64 || size.height <= 64),
        "--loaded": upload2.status === "success"
    });
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $ImageContainer, {
        className,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Image, {
                src: upload2.url,
                width: _optionalChain([
                    size,
                    "optionalAccess",
                    (_25)=>_25.width
                ]),
                height: _optionalChain([
                    size,
                    "optionalAccess",
                    (_26)=>_26.height
                ])
            }),
            showControls ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImageToolbar, {
                element: element2,
                size,
                setSize,
                srcSize,
                presets
            }) : null,
            isDragging && size ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImageSizeStatus, {
                size
            }) : null,
            showControls ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImageResizeControl, {
                element: element2,
                srcSize,
                isDragging,
                setIsDragging,
                size,
                setSize
            }) : null
        ]
    });
}
// ../react/src/image-plugin/render-element/image-block.tsx
function ImageBlock({ element: element2, attributes, children }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "div", {
        ...attributes,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ImageBlock, {
                contentEditable: false,
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImageWithControls, {
                    element: element2,
                    presets: editor.image.imageBlockPresets
                })
            }),
            children
        ]
    });
}
// ../react/src/image-plugin/render-element/image-inline.tsx
init_react_shim();
// ../react/src/image-plugin/styles/image-inline-styles.tsx
init_react_shim();
var $ImageInline = _styled2.default.call(void 0, "span")`
  display: inline;
`;
// ../react/src/image-plugin/render-element/image-inline.tsx
function ImageInline({ element: element2, attributes, children }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "span", {
        ...attributes,
        style: {
            display: "inline-block"
        },
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ImageInline, {
                contentEditable: false,
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImageWithControls, {
                    element: element2,
                    presets: editor.image.imageInlinePresets
                })
            }),
            children
        ]
    });
}
// ../react/src/image-plugin/render-element/index.tsx
function renderElement2({ element: element2, attributes, children }) {
    switch(element2.type){
        case "image-block":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImageBlock, {
                element: element2,
                attributes,
                children
            });
        case "image-inline":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ImageInline, {
                element: element2,
                attributes,
                children
            });
    }
}
// ../react/src/image-plugin/index.tsx
var DEFAULT_OPTIONS = {
    maxInitialInlineImageSize: {
        width: 64,
        height: 64
    },
    maxInitialImageSize: {
        width: 320,
        height: 320
    },
    maxImageSize: {
        width: 1024,
        height: 1024
    },
    imageBlockPresets: [
        /**
     * Pixel Presets
     */ {
            name: "S",
            title: "Small",
            type: "bounds",
            width: 160,
            height: 160
        },
        {
            name: "M",
            title: "Medium",
            type: "bounds",
            width: 320,
            height: 320
        },
        {
            name: "L",
            title: "Large",
            type: "bounds",
            width: 640,
            height: 640
        },
        /**
     * Scale Presets
     */ {
            name: "\u2153",
            title: "1/3 scale",
            type: "scale",
            scale: 1 / 3
        },
        {
            name: "\xbd",
            title: "1/2 scale",
            type: "scale",
            scale: 0.5
        },
        {
            name: "Full",
            title: "Full size",
            type: "scale",
            scale: 1
        }
    ],
    imageInlinePresets: [
        /**
     * Pixel Presets
     */ {
            name: "16",
            title: "16 pixels",
            type: "bounds",
            width: 16,
            height: 16
        },
        {
            name: "24",
            title: "24 pixels",
            type: "bounds",
            width: 24,
            height: 24
        },
        {
            name: "32",
            title: "32 pixels",
            type: "bounds",
            width: 32,
            height: 32
        },
        /**
     * Scale Presets
     */ {
            name: "\u2153",
            title: "1/3 scale",
            type: "scale",
            scale: 1 / 3
        },
        {
            name: "\xbd",
            title: "1/2 scale",
            type: "scale",
            scale: 0.5
        },
        {
            name: "Full",
            title: "Full size",
            type: "scale",
            scale: 1
        }
    ]
};
var ImagePlugin = //({
createPlugin((editor, sinkOptions, { createPolicy })=>{
    const options = {
        ...DEFAULT_OPTIONS,
        ...sinkOptions.image
    };
    editor.image = {
        ...createImageMethods(editor),
        maxInitialInlineImageSize: options.maxInitialInlineImageSize,
        maxInitialImageSize: options.maxInitialImageSize,
        maxImageSize: options.maxImageSize,
        imageBlockPresets: options.imageBlockPresets,
        imageInlinePresets: options.imageInlinePresets
    };
    editor.upload.onUploadImageFile = (e)=>{
        const { selection } = editor;
        if (e.width <= 64 && e.height <= 64) _slate.Transforms.insertNodes(editor, {
            type: "image-inline",
            url: e.hashUrl,
            alt: e.file.name,
            title: e.file.name,
            bytes: e.file.size,
            width: e.width,
            height: e.height,
            srcWidth: e.width,
            srcHeight: e.height,
            children: [
                {
                    text: ""
                }
            ]
        });
        else {
            const initialSize = resizeInBounds({
                width: e.width,
                height: e.height
            }, options.maxInitialImageSize || options.maxImageSize);
            _slate.Transforms.insertNodes(editor, {
                type: "image-block",
                url: e.hashUrl,
                alt: e.file.name,
                title: e.file.name,
                bytes: e.file.size,
                width: initialSize.width,
                height: initialSize.height,
                srcWidth: e.width,
                srcHeight: e.height,
                children: [
                    {
                        text: ""
                    }
                ]
            });
        }
        if (!selection) {
            const lastPos = _slate.Editor.end(editor, []);
            _slate.Transforms.select(editor, lastPos);
            _slatereact.ReactEditor.focus(editor);
        }
        return true;
    };
    editor.upload.onUploadImageFileSuccess = (e)=>{
        editor.upload.setElementTimeTraveling({
            url: e.hashUrl
        }, {
            url: e.url
        });
        return true;
    };
    return createPolicy({
        name: "image",
        editor: {
            isVoid: (element2)=>{
                if ([
                    "image-block",
                    "image-inline"
                ].includes(element2.type)) return true;
            },
            isInline: (element2)=>{
                if (element2.type === "image-inline") return true;
            },
            normalizeNode: curryOne(normalizeNode4, editor)
        },
        editableProps: {
            renderElement: renderElement2
        }
    });
});
// ../react/src/inline-code-plugin/index.tsx
init_react_shim();
// ../react/src/inline-code-plugin/styles.ts
init_react_shim();
var $InlineCode = _styled2.default.call(void 0, "code")`
  color: var(--shade-600);
  background-color: var(--inline-code-bgcolor);
  border: 1px solid var(--inline-code-border-color);
  border-radius: 0.25em;
  padding: 0.1375em 0.125em;
  /**
   * Font Stack from
   * https://qwtel.com/posts/software/the-monospaced-system-ui-css-font-stack/
   */
  font-family: ui-monospace, Menlo, Monaco, "Cascadia Mono", "Segoe UI Mono",
    "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace", "Source Code Pro",
    "Fira Mono", "Droid Sans Mono", "Courier New", monospace;
  /**
   * This font size may seem smaller but any larger (including 0.875) means that
   * it messes up the line height of the normal text. Not sure why this happens
   * with the monospace font but seems to happen on both the default 'monospace'
   * font as well as the font stack above.
   */
  font-size: 0.75em;
  vertical-align: baseline;
`;
var $InvisibleSpan = _styled2.default.call(void 0, "span")`
  display: inline-block;
  opacity: 0;
  width: 1px;
  overflow: hidden;
`;
// ../react/src/inline-code-plugin/types.ts
init_react_shim();
// ../react/src/inline-code-plugin/index.tsx
var InlineCodePlugin = createPlugin((editor)=>{
    if (!editor.marksPlugin) throw new Error("InlineCodePlugin has a dependency on the MarksPlugin but the MarksPlugin has not been added or is added after the InlineCodePlugin");
    editor.inlineCode = {
        toggleInlineCode: ()=>editor.marksPlugin.toggleMark("code")
    };
    return {
        name: "inline-code",
        editableProps: {
            renderLeaf: ({ leaf, children })=>{
                if (leaf.code) return(/**
               * Disable spellCheck because it's computer code usually.
               */ /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $InlineCode, {
                    spellCheck: false,
                    children: [
                        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $InvisibleSpan, {
                            contentEditable: false,
                            children: "|"
                        }),
                        children,
                        /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $InvisibleSpan, {
                            contentEditable: false,
                            children: "|"
                        })
                    ]
                }));
                else return children;
            },
            onKeyDown: createHotkeyHandler({
                "mod+j": ()=>editor.inlineCode.toggleInlineCode()
            })
        }
    };
});
// ../react/src/list-plugin/index.tsx
init_react_shim();
// ../react/src/list-plugin/methods/index.ts
init_react_shim();
// ../react/src/list-plugin/methods/convert-list-item.ts
init_react_shim();
function convertOrderedList(editor, allowToggle) {
    return editor.convertElement.convertElements((element2)=>element2.type === "ordered-list-item", (element2)=>{
        return {
            type: "ordered-list-item",
            depth: "depth" in element2 ? element2.depth : 0
        };
    }, allowToggle);
}
function convertTaskList(editor, allowToggle) {
    return editor.convertElement.convertElements((element2)=>element2.type === "task-list-item", (element2)=>{
        return {
            type: "task-list-item",
            checked: "checked" in element2 ? element2.checked : false,
            depth: "depth" in element2 ? element2.depth : 0
        };
    }, allowToggle);
}
function convertUnorderedList(editor, allowToggle) {
    return editor.convertElement.convertElements((element2)=>element2.type === "unordered-list-item", (element2)=>{
        return {
            type: "unordered-list-item",
            depth: "depth" in element2 ? element2.depth : 0
        };
    }, allowToggle);
}
// ../react/src/list-plugin/methods/indent.ts
init_react_shim();
function indent2(editor) {
    return setNodesDynamic(editor, (node2)=>({
            depth: node2.depth + 1
        }), {
        match: isListItem
    });
}
// ../react/src/list-plugin/methods/insert-break.ts
init_react_shim();
function insertBreak2(editor) {
    const entry = findElementUp(editor, isListItem);
    if (!entry) return false;
    const [element2, path3] = entry;
    if (_slate.Editor.isEmpty(editor, element2)) {
        if (element2.depth > 0) {
            _slate.Transforms.setNodes(editor, {
                depth: element2.depth - 1
            }, {
                at: path3
            });
            return true;
        } else {
            rewrapElement(editor, {
                type: "paragraph"
            }, path3);
            return true;
        }
    }
    _slate.Transforms.splitNodes(editor, {
        always: true
    });
    const nextEntry = findElementUp(editor, isListItem);
    if (!nextEntry) return true;
    if (nextEntry[0].type === "task-list-item" && nextEntry[0].checked === true) _slate.Transforms.setNodes(editor, {
        checked: false
    }, {
        at: nextEntry[1]
    });
    return true;
}
// ../react/src/list-plugin/methods/outdent.ts
init_react_shim();
function outdent(editor) {
    const entries = Array.from(_slate.Editor.nodes(editor, {
        match: isListItem
    }));
    for (const entry of entries){
        if (entry[0].depth === 0) return true;
    }
    return setNodesDynamic(editor, (node2)=>({
            depth: Math.max(0, node2.depth - 1)
        }), {
        match: isListItem
    });
}
// ../react/src/list-plugin/methods/toggleTaskListItem.ts
init_react_shim();
function toggleTaskListItem(editor, { at = editor.selection } = {}) {
    const taskListItem = findElementUp(editor, "task-list-item", {
        at
    });
    if (!taskListItem) return false;
    const nextChecked = !taskListItem[0].checked;
    _slate.Transforms.setNodes(editor, {
        checked: nextChecked
    }, {
        at: taskListItem[1]
    });
}
// ../react/src/list-plugin/methods/index.ts
function createListMethods(editor) {
    return {
        indent: curryOne(indent2, editor),
        outdent: curryOne(outdent, editor),
        convertUnorderedList: curryOne(convertUnorderedList, editor),
        convertOrderedList: curryOne(convertOrderedList, editor),
        convertTaskList: curryOne(convertTaskList, editor),
        insertBreak: curryOne(insertBreak2, editor),
        toggleTaskListItem: curryOne(toggleTaskListItem, editor)
    };
}
// ../react/src/list-plugin/normalize-node/index.ts
init_react_shim();
// ../react/src/list-plugin/normalize-node/normalize-ordered-first-at-depth.ts
init_react_shim();
var isOrderedListItem = createIsElementType([
    "ordered-list-item"
]);
function normalizeOrderedFirstAtDepth(editor, entry) {
    const [node2, path3] = entry;
    if (!_slate.Element.isElement(node2)) return false;
    return normalizeSiblings(editor, [
        node2,
        path3
    ], (a, b)=>{
        if (!isOrderedListItem(b[0])) return false;
        const __firstAtDepth = !isOrderedListItem(a[0]) || b[0].depth > a[0].depth;
        if (b[0].__firstAtDepth !== __firstAtDepth) {
            _slate.Transforms.setNodes(editor, {
                __firstAtDepth
            }, {
                at: b[1]
            });
            return true;
        }
        return false;
    });
}
// ../react/src/list-plugin/normalize-node/index.ts
function normalizeNode5(editor, entry) {
    const [node2] = entry;
    if (!isListItem(node2)) return false;
    return normalizeOrderedFirstAtDepth(editor, entry);
}
// ../react/src/list-plugin/render-element/index.tsx
init_react_shim();
// ../react/src/list-plugin/render-element/ordered-list-item.tsx
init_react_shim();
// ../react/src/list-plugin/render-element/styles.ts
init_react_shim();
var $ListItem = _styled2.default.call(void 0, "li")`
  margin-top: 0.5em;
  margin-bottom: 0.5em;
  list-style-position: outside;
  margin-left: calc(2em + var(--list-item-depth) * 2em);
`;
var $UnorderedListItem = _styled2.default.call(void 0, $ListItem)`
  position: relative;
  list-style-type: none;
  .--list-item-icon {
    position: absolute;
    top: 0.25em;
    left: -1.375em;
    line-height: 1.5em;
    color: var(--shade-600);
  }
`;
var $OrderedListItem = _styled2.default.call(void 0, $ListItem)`
  position: relative;
  list-style-type: none;
  counter-increment: var(--list-item-var);

  &.--first-at-depth {
    counter-reset: var(--list-item-var);
    /**
     * if isDebug is true, then show a highlight on list items that are marked
     * as the first at a given depth.
     */
    background: ${isDebug ? "rgba(0, 255, 0, 0.2)" : "inherit"};
  }

  &:before {
    position: absolute;
    content: counter(var(--list-item-var)) ".";
    top: 0;
    left: -2em;
    width: 1.5em;
    text-align: right;
    color: var(--shade-500);
    /* force numbers to be monospaced for better alignment */
    font-variant-numeric: tabular-nums;
  }
`;
var $TaskListItem = _styled2.default.call(void 0, $ListItem)`
  position: relative;
  list-style-type: none;
  .--list-item-icon {
    position: absolute;
    top: 0.25em;
    left: -1.5em;
    line-height: 1.5em;
    color: var(--shade-300);
    .--checkmark {
      color: green;
      stroke-width: 3px;
    }
  }
`;
// ../react/src/list-plugin/render-element/ordered-list-item.tsx
function OrderedListItem({ element: element2, attributes, children }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    _react.useEffect.call(void 0, ()=>{
        const path3 = _slatereact.ReactEditor.findPath(editor, element2);
        normalizeOrderedFirstAtDepth(editor, [
            element2,
            path3
        ]);
    }, []);
    const style = {
        "--list-item-depth": element2.depth,
        "--list-item-var": `list-item-depth-${element2.depth}`
    };
    const className = _clsx.clsx.call(void 0, {
        "--first-at-depth": element2.__firstAtDepth
    });
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $OrderedListItem, {
        ...attributes,
        className,
        style,
        children
    });
}
// ../react/src/list-plugin/render-element/task-list-item.tsx
init_react_shim();
// ../react/src/list-plugin/render-element/list-icons.tsx
init_react_shim();
var UncheckedIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "svg", {
        xmlns: "http://www.w3.org/2000/svg",
        width: "1em",
        height: "1em",
        strokeWidth: 2,
        stroke: "currentColor",
        fill: "none",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        viewBox: "0 0 24 24",
        ...props,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M0 0h24v24H0z",
                stroke: "none"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "rect", {
                x: 4,
                y: 4,
                width: 16,
                height: 16,
                rx: 2
            })
        ]
    });
var CheckedIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "svg", {
        xmlns: "http://www.w3.org/2000/svg",
        className: "icon icon-tabler icon-tabler-checkbox",
        width: "1em",
        height: "1em",
        strokeWidth: 2,
        stroke: "currentColor",
        fill: "none",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        viewBox: "0 0 24 24",
        ...props,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M0 0h24v24H0z",
                stroke: "none"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "m9 11 3 3 8-8",
                className: "--checkmark"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M20 12v6a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h9"
            })
        ]
    });
var BulletIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, "svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        width: "1em",
        height: "1em",
        ...props,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M12 8.25a3.75 3.75 0 1 0 0 7.5 3.75 3.75 0 0 0 0-7.5z"
        })
    });
// ../react/src/list-plugin/render-element/task-list-item.tsx
function TaskListItem({ element: element2, attributes, children }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const toggle = _react.useCallback.call(void 0, ()=>{
        editor.list.toggleTaskListItem({
            at: element2
        });
    }, [
        editor,
        element2
    ]);
    const style = {
        "--list-item-depth": element2.depth
    };
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $TaskListItem, {
        ...attributes,
        style,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                className: "--list-item-icon",
                contentEditable: false,
                children: element2.checked ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CheckedIcon, {
                    onClick: toggle,
                    style: {
                        cursor: "pointer"
                    }
                }) : /* @__PURE__ */ _jsxruntime.jsx.call(void 0, UncheckedIcon, {
                    onClick: toggle,
                    style: {
                        cursor: "pointer"
                    }
                })
            }),
            children
        ]
    });
}
// ../react/src/list-plugin/render-element/unordered-list-item.tsx
init_react_shim();
function UnorderedListItem({ element: element2, attributes, children }) {
    const style = {
        "--list-item-depth": element2.depth
    };
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $UnorderedListItem, {
        ...attributes,
        style,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "div", {
                className: "--list-item-icon",
                contentEditable: false,
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, BulletIcon, {})
            }),
            children
        ]
    });
}
// ../react/src/list-plugin/render-element/index.tsx
function renderElement3({ element: element2, attributes, children }) {
    switch(element2.type){
        case "ordered-list-item":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, OrderedListItem, {
                element: element2,
                attributes,
                children
            });
        case "unordered-list-item":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, UnorderedListItem, {
                element: element2,
                attributes,
                children
            });
        case "task-list-item":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, TaskListItem, {
                element: element2,
                attributes,
                children
            });
    }
}
// ../react/src/list-plugin/types.ts
init_react_shim();
// ../react/src/list-plugin/index.tsx
var LIST_ITEM_TYPES = [
    "unordered-list-item",
    "ordered-list-item",
    "task-list-item"
];
var isListItem = createIsElementType(LIST_ITEM_TYPES);
var ListPlugin = createPlugin((editor, options, { createPolicy })=>{
    editor.convertElement.addConvertElementType(LIST_ITEM_TYPES);
    const list2 = editor.list = createListMethods(editor);
    const hotkeyHandler = createHotkeyHandler({
        tab: list2.indent,
        "shift+tab": list2.outdent,
        "super+7": curryOne(list2.convertOrderedList, true),
        "super+8": curryOne(list2.convertUnorderedList, true),
        "super+9": curryOne(list2.convertTaskList, true)
    });
    return createPolicy({
        name: "list",
        editor: {
            normalizeNode: (entry)=>normalizeNode5(editor, entry),
            insertBreak: list2.insertBreak,
            deleteBackward: (unit)=>{
                if (unit !== "character") return false;
                if (!isStartOfElement(editor, isListItem)) return false;
                const listItem2 = findElementUp(editor, isListItem);
                if (!listItem2) return false;
                const listItemPath = listItem2[1];
                if (!_slate.Path.hasPrevious(listItemPath)) {
                    editor.collapsibleParagraph.convertParagraph();
                    return true;
                }
                const prevElementPath = _slate.Path.previous(listItemPath);
                const prevElementEntry = _slate.Editor.node(editor, prevElementPath);
                if (isListItem(prevElementEntry[0])) return false;
                editor.collapsibleParagraph.convertParagraph();
                return true;
            }
        },
        editableProps: {
            renderElement: renderElement3,
            onKeyDown (e) {
                if (!_slate.Editor.nodes(editor, {
                    match: isListItem
                })) return false;
                return hotkeyHandler(e);
            }
        }
    });
});
// ../react/src/marks-plugin/index.tsx
init_react_shim();
// ../react/src/marks-plugin/editor/insert-text/index.ts
init_react_shim();
// ../react/src/marks-plugin/editor/insert-text/autocomplete-mark.ts
init_react_shim();
// ../react/src/marks-plugin/editor/insert-text/get-range-backwards.ts
init_react_shim();
function getRangeBackwards(editor, point3, startDistance, endDistance) {
    const startPoint = _slate.Editor.before(editor, point3, {
        unit: "character",
        distance: startDistance
    });
    const endPoint = endDistance === void 0 ? point3 : _slate.Editor.before(editor, point3, {
        unit: "character",
        distance: endDistance
    });
    if (!startPoint) throw new Error(`startPoint not found. The distance backward from the point may be invalid.`);
    if (!endPoint) throw new Error(`endPoint not found. The distance backward from the point may be invalid.`);
    return {
        anchor: startPoint,
        focus: endPoint
    };
}
// ../react/src/marks-plugin/editor/insert-text/get-text-before-point-in-block.ts
init_react_shim();
function getTextBeforePointInBlock(editor, point3) {
    const blockEntry = findElementUp(editor, (node2)=>_slate.Element.isElement(node2) && !_slate.Editor.isVoid(editor, node2) && _slate.Editor.isBlock(editor, node2));
    if (blockEntry == null) return null;
    const range = {
        anchor: _slate.Editor.start(editor, blockEntry[1]),
        focus: point3
    };
    return _slate.Editor.string(editor, range);
}
// ../react/src/marks-plugin/editor/insert-text/autocomplete-mark.ts
function autocompleteMark(editor, text4, { triggerMarker, regexp, mark }) {
    if (editor.selection === null) return false;
    if (_slate.Range.isExpanded(editor.selection)) return false;
    if (text4 !== triggerMarker) return false;
    const beforeInsertText = getTextBeforePointInBlock(editor, editor.selection.focus);
    const beforeText = `${beforeInsertText}${text4}`;
    const match = beforeText.match(regexp);
    if (match == null) return false;
    if (match.length !== 4) throw new Error(`Expected the RegExp to have 3 grouped subexpressions but returned ${match.length - 1}`);
    return ()=>{
        if (editor.selection === null) return false;
        if (_slate.Range.isExpanded(editor.selection)) return false;
        const closingMarkersRange = getRangeBackwards(editor, editor.selection.focus, /**
       * TODO:
       *
       * We should be using Slate's internal `getCharacterDistance` to generate
       * a length but it is not exposed.
       **/ match[3].length);
        _slate.Transforms.delete(editor, {
            at: closingMarkersRange
        });
        const openingMarkersRange = getRangeBackwards(editor, editor.selection.focus, /**
       * TODO:
       *
       * We should be using Slate's internal `getCharacterDistance` to generate
       * a length but it is not exposed.
       **/ match[2].length + match[3].length, match[2].length);
        _slate.Transforms.delete(editor, {
            at: openingMarkersRange
        });
        const matchRange = getRangeBackwards(editor, editor.selection.focus, /**
       * TODO:
       *
       * We should be using Slate's internal `getCharacterDistance` to generate
       * a length but it is not exposed.
       **/ match[2].length);
        editor.marksPlugin.toggleMark(mark, void 0, {
            at: matchRange
        });
        _slate.Editor.removeMark(editor, mark);
    };
}
// ../react/src/marks-plugin/editor/insert-text/index.ts
function insertText(editor, text4) {
    return autocompleteMark(editor, text4, {
        triggerMarker: "`",
        regexp: /([`])([^`]+)([`])$/,
        mark: "code"
    }) || autocompleteMark(editor, text4, {
        triggerMarker: "*",
        regexp: /([*][*])([^*]+)([*][*])$/,
        mark: "bold"
    }) || autocompleteMark(editor, text4, {
        triggerMarker: "~",
        regexp: /(~~)([^~]+)(~~)$/,
        mark: "bold"
    }) || autocompleteMark(editor, text4, {
        triggerMarker: "*",
        regexp: /(?:[^*]|^)([*])([^*]+)([*])$/,
        mark: "italic"
    }) || autocompleteMark(editor, text4, {
        triggerMarker: "~",
        regexp: /(?:[^~]|^)(~)([^~]+)(~)$/,
        mark: "italic"
    });
}
// ../react/src/marks-plugin/methods/index.ts
init_react_shim();
// ../react/src/marks-plugin/methods/removeMarks.ts
init_react_shim();
function removeMarks(editor, { at = editor.selection } = {}) {
    if (at == null) return;
    const nodeEntries = [
        ..._slate.Editor.nodes(editor, {
            match: (n)=>_slate.Text.isText(n),
            at
        })
    ];
    const setter = {};
    for (const [node2] of nodeEntries)for (const key2 of Object.keys(node2)){
        if (key2 === "text") continue;
        setter[key2] = null;
    }
    _slate.Transforms.setNodes(editor, setter, {
        match: (n)=>_slate.Text.isText(n),
        split: true,
        at
    });
}
// ../react/src/marks-plugin/methods/toggle-mark.ts
init_react_shim();
function toggleMark(editor, markKey, unsetKey, { at = editor.selection } = {}) {
    if (at == null) return;
    const [match] = _slate.Editor.nodes(editor, {
        match: (n)=>_slate.Text.isText(n) && !!n[markKey],
        at
    });
    _slate.Transforms.setNodes(editor, {
        [markKey]: !match || null
    }, {
        match: (n)=>_slate.Text.isText(n),
        split: true,
        at
    });
    if (typeof unsetKey === "string") _slate.Transforms.unsetNodes(editor, unsetKey, {
        match: (n)=>_slate.Text.isText(n),
        split: true,
        at
    });
}
// ../react/src/marks-plugin/methods/index.ts
function createMarksMethods(editor) {
    return {
        removeMarks: curryOne(removeMarks, editor),
        toggleMark: curryOne(toggleMark, editor),
        toggleBold: ()=>toggleMark(editor, "bold"),
        toggleItalic: ()=>toggleMark(editor, "italic"),
        toggleUnderline: ()=>toggleMark(editor, "underline"),
        toggleSup: ()=>toggleMark(editor, "sup", "sub"),
        toggleSub: ()=>toggleMark(editor, "sub", "sup"),
        toggleStrike: ()=>toggleMark(editor, "strike")
    };
}
// ../react/src/marks-plugin/styles.tsx
init_react_shim();
var $MarksSpan = _styled2.default.call(void 0, "span")`
  &.--bold {
    font-weight: bold;
  }
  &.--italic {
    font-style: italic;
  }
  &.--underline {
    text-decoration: underline;
  }
  &.--sup {
    vertical-align: super;
    font-size: 0.75em;
  }
  &.--sub {
    vertical-align: sub;
    font-size: 0.75em;
  }
  &.--strike {
    text-decoration: line-through;
  }
  /**
   * Text decorations don't merge automatically so we make a special one
   * when there is both an underline and a strike through.
   */
  &.--underline.--strike {
    text-decoration: underline line-through;
  }
`;
// ../react/src/marks-plugin/index.tsx
var MarksPlugin = createPlugin((editor)=>{
    editor.marksPlugin = createMarksMethods(editor);
    const hotkeyHandler = createHotkeyHandler({
        "mod+b": editor.marksPlugin.toggleBold,
        "mod+i": editor.marksPlugin.toggleItalic,
        "mod+u": editor.marksPlugin.toggleUnderline,
        "super+0": editor.marksPlugin.removeMarks,
        "super+b": editor.marksPlugin.toggleSub,
        "super+k": editor.marksPlugin.toggleStrike,
        "super+p": editor.marksPlugin.toggleSup
    });
    return {
        name: "marks",
        editor: {
            insertText: curryOne(insertText, editor)
        },
        editableProps: {
            renderLeaf: ({ leaf, children })=>{
                return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $MarksSpan, {
                    className: _clsx.clsx.call(void 0, {
                        "--bold": leaf.bold,
                        "--italic": leaf.italic,
                        "--underline": leaf.underline,
                        "--sup": leaf.sup,
                        "--sub": leaf.sub,
                        "--strike": leaf.strike
                    }),
                    children
                });
            },
            onKeyDown: (e)=>{
                if (hotkeyHandler(e)) return true;
                return false;
            }
        }
    };
});
// ../react/src/normalize-after-delete-plugin/index.tsx
init_react_shim();
function forceNormalizeNearestElement(editor) {
    if (!editor.selection) return;
    const entry = _slate.Editor.parent(editor, editor.selection);
    forceNormalizePath(editor, entry[1]);
}
var NormalizeAfterDeletePlugin = createPlugin((editor)=>{
    editor.normalizeAfterDelete = true;
    return {
        name: "normalize-after-delete",
        editor: {
            deleteBackward () {
                if (!editor.selection) return false;
                const entry = _slate.Editor.parent(editor, editor.selection);
                const isStart = _slate.Point.equals(_slate.Editor.start(editor, entry[1]), editor.selection.anchor);
                if (!isStart) return false;
                return function() {
                    forceNormalizeNearestElement(editor);
                };
            },
            deleteForward () {
                if (!editor.selection) return false;
                const entry = _slate.Editor.parent(editor, editor.selection);
                const isEnd = _slate.Point.equals(_slate.Editor.end(editor, entry[1]), editor.selection.anchor);
                if (!isEnd) return false;
                return function() {
                    forceNormalizeNearestElement(editor);
                };
            }
        },
        editableProps: {}
    };
});
// ../react/src/table-plugin/index.tsx
init_react_shim();
// ../react/src/table-plugin/delete-fragment/index.ts
init_react_shim();
// ../react/src/table-plugin/delete-fragment/get-reversed-delete-safe-ranges.ts
init_react_shim();
function getReversedDeleteSafeRanges(editor, deleteRange, protectedTypes) {
    const positions = [
        ..._slate.Editor.positions(editor, {
            at: deleteRange
        })
    ];
    const deleteSafeRanges = [];
    let startPos, prevPos, startTdPath;
    startPos = prevPos = positions[0];
    startTdPath = findElementUpPath(editor, protectedTypes, {
        at: startPos
    });
    for (const pos of positions){
        const tdPath = findElementUpPath(editor, protectedTypes, {
            at: pos
        });
        if (startTdPath && tdPath && _slate.Path.equals(startTdPath, tdPath) || startTdPath == void 0 && tdPath == void 0) prevPos = pos;
        else {
            const range2 = {
                anchor: startPos,
                focus: prevPos
            };
            deleteSafeRanges.push(range2);
            startPos = prevPos = pos;
            startTdPath = tdPath;
        }
    }
    const range = {
        anchor: startPos,
        focus: prevPos
    };
    deleteSafeRanges.push(range);
    deleteSafeRanges.reverse();
    return deleteSafeRanges;
}
// ../react/src/table-plugin/delete-fragment/index.ts
function deleteFragmentWithProtectedTypes(editor, protectedTypes) {
    if (editor.selection == null) return false;
    const [start, end] = _slate.Editor.edges(editor, editor.selection);
    const startProtectedPath = findElementUpPath(editor, protectedTypes, {
        at: start
    });
    const endProtectedPath = findElementUpPath(editor, protectedTypes, {
        at: end
    });
    if (!startProtectedPath && !endProtectedPath) return false;
    if (startProtectedPath && endProtectedPath && _slate.Path.equals(startProtectedPath, endProtectedPath)) return false;
    const reversedRanges = getReversedDeleteSafeRanges(editor, editor.selection, protectedTypes);
    _slate.Editor.withoutNormalizing(editor, ()=>{
        for (const range of reversedRanges)_slate.Transforms.delete(editor, {
            at: range
        });
        _slate.Transforms.collapse(editor, {
            edge: "start"
        });
    });
    return true;
}
// ../react/src/table-plugin/methods/index.ts
init_react_shim();
// ../react/src/table-plugin/methods/get-table-info.ts
init_react_shim();
function getTableInfo(editor, { at = editor.selection } = {}) {
    if (at == null) return void 0;
    const cellMatch = findElementUp(editor, "table-cell", {
        at
    });
    if (!cellMatch) return void 0;
    const rowMatch = findElementUp(editor, "table-row", {
        at
    });
    if (!rowMatch) return void 0;
    const tableMatch = findElementUp(editor, "table", {
        at
    });
    if (!tableMatch) return void 0;
    const [tableElement, tablePath] = tableMatch;
    const [rowElement, rowPath] = rowMatch;
    const [cellElement, cellPath] = cellMatch;
    return {
        tableElement,
        tablePath,
        tableColumns: tableElement.columns,
        rowElement,
        rowPath,
        rowIndex: rowPath.slice(-1)[0],
        rowCount: tableElement.children.length,
        cellElement,
        cellPath,
        cellIndex: cellPath.slice(-1)[0],
        cellCount: rowElement.children.length
    };
}
// ../react/src/table-plugin/methods/insert-column.ts
init_react_shim();
// ../react/src/table-plugin/methods/utils.ts
init_react_shim();
function createCell(index2, children = [
    {
        type: "table-content",
        children: [
            {
                text: ""
            }
        ]
    }
]) {
    return {
        type: "table-cell",
        children
    };
}
// ../react/src/table-plugin/methods/insert-column.ts
function insertColumn(editor, { offset = 0, at = editor.selection } = {}) {
    const t = getTableInfo(editor, {
        at
    });
    if (t === void 0) return false;
    const { tableElement, tablePath, cellIndex } = t;
    const nextCellIndex = cellIndex + offset;
    _slate.Editor.withoutNormalizing(editor, ()=>{
        const { columns } = tableElement;
        const nextColumns = [
            ...columns
        ];
        nextColumns.splice(nextCellIndex, 0, columns[nextCellIndex]);
        _slate.Transforms.setNodes(editor, {
            columns: nextColumns
        }, {
            at: tablePath
        });
        tableElement.children.forEach((rowElement, i)=>{
            _slate.Transforms.insertNodes(editor, createCell(nextCellIndex), {
                at: [
                    ...tablePath,
                    i,
                    nextCellIndex
                ]
            });
        });
    });
    return true;
}
// ../react/src/table-plugin/methods/insert-row.ts
init_react_shim();
function createRow(columnCount) {
    return {
        type: "table-row",
        children: [
            ...Array(columnCount).keys()
        ].map((index2)=>createCell(index2))
    };
}
function insertRow(editor, { at = editor.selection, offset = 0 } = {}) {
    const t = getTableInfo(editor, {
        at
    });
    if (!t) return false;
    const nextRowElement = createRow(t.tableElement.columns.length);
    _slate.Transforms.insertNodes(editor, nextRowElement, {
        at: [
            ...t.tablePath,
            t.rowIndex + offset
        ]
    });
    return true;
}
function insertRowBelow(editor, { at } = {}) {
    return insertRow(editor, {
        at,
        offset: 1
    });
}
// ../react/src/table-plugin/methods/insert-table.ts
init_react_shim();
function createRange(size) {
    return [
        ...Array(size).keys()
    ];
}
function createColumns(columnCount) {
    return createRange(columnCount).map(()=>({
            align: "left"
        }));
}
function createTable(columnCount, rowCount) {
    return {
        type: "table",
        columns: createColumns(columnCount),
        children: createRange(rowCount).map(()=>createRow2(columnCount))
    };
}
function createRow2(columnCount) {
    return {
        type: "table-row",
        children: [
            ...Array(columnCount).keys()
        ].map((index2)=>createCell(index2))
    };
}
function insertTable(editor, columnCount, rowCount, { at = editor.selection } = {}) {
    const table = createTable(columnCount, rowCount);
    return insertRootElement2(editor, table, {
        at
    });
}
function insertRootElement2(editor, element2, { at = editor.selection } = {}) {
    if (at == null) return false;
    const entry = findElementUp(editor, (node2)=>_slate.Element.isElement(node2) && editor.isMaster(node2));
    if (entry == null) {
        const selection = editor.selection;
        _slate.Editor.withoutNormalizing(editor, ()=>{
            _slate.Transforms.insertNodes(editor, element2, {
                at
            });
            if (selection) {
                _slate.Transforms.select(editor, selection);
                _slate.Transforms.move(editor);
            }
        });
    } else {
        const nextPath = _slate.Path.next(entry[1]);
        _slate.Editor.withoutNormalizing(editor, ()=>{
            _slate.Transforms.insertNodes(editor, element2, {
                at: nextPath
            });
            _slate.Transforms.select(editor, _slate.Editor.start(editor, nextPath));
        });
    }
    return true;
}
// ../react/src/table-plugin/methods/navigation/index.ts
init_react_shim();
// ../react/src/table-plugin/methods/navigation/select-element.ts
init_react_shim();
function selectElementBelow(editor, t) {
    const { cellIndex, rowIndex, rowCount, tablePath } = t;
    if (rowIndex < rowCount - 1) {
        selectStartOfElement(editor, [
            ...tablePath,
            rowIndex + 1,
            cellIndex
        ]);
        return true;
    }
    try {
        selectStartOfElement(editor, _slate.Path.next(tablePath));
        return true;
    } catch (e) {
        return false;
    }
}
function selectElementAbove(editor, t) {
    const { cellIndex, rowIndex, tablePath } = t;
    if (rowIndex > 0) {
        selectStartOfElement(editor, [
            ...tablePath,
            rowIndex - 1,
            cellIndex
        ]);
        return true;
    }
    try {
        selectEndOfElement(editor, _slate.Path.previous(tablePath));
        return true;
    } catch (e) {
        return false;
    }
}
// ../react/src/table-plugin/methods/navigation/utils.ts
init_react_shim();
function getUnreliableSelectionRect() {
    const s = window.getSelection();
    if (!s) return null;
    const range = s.getRangeAt(0);
    return range.getBoundingClientRect();
}
function getElementRect(editor, element2) {
    return _slatereact.ReactEditor.toDOMNode(editor, element2).getBoundingClientRect();
}
function checkIsInElement(editor, element2) {
    const selectionRect = getUnreliableSelectionRect();
    if (!selectionRect) return false;
    const elementRect = getElementRect(editor, element2);
    return selectionRect.right < elementRect.right && selectionRect.left > elementRect.left && selectionRect.bottom < elementRect.bottom && selectionRect.top > elementRect.top;
}
// ../react/src/table-plugin/methods/navigation/index.ts
function down(editor) {
    const t = getTableInfo(editor);
    if (!t) return false;
    setTimeout(()=>{
        if (!checkIsInElement(editor, t.cellElement)) selectElementBelow(editor, t);
    });
    return false;
}
function up(editor) {
    const t = getTableInfo(editor);
    if (!t) return false;
    setTimeout(()=>{
        if (!checkIsInElement(editor, t.cellElement)) selectElementAbove(editor, t);
    });
    return false;
}
// ../react/src/table-plugin/methods/remove-column.ts
init_react_shim();
// ../react/src/table-plugin/methods/remove-table.ts
init_react_shim();
function removeTable(editor) {
    const t = editor.tablePlugin.getTableInfo();
    if (t === void 0) return false;
    _slate.Transforms.removeNodes(editor, {
        at: t.tablePath
    });
    return true;
}
// ../react/src/table-plugin/methods/remove-column.ts
function removeColumn(editor, { at = editor.selection } = {}) {
    const t = getTableInfo(editor, {
        at
    });
    if (!t) return false;
    const { tableElement, tablePath, rowIndex, cellIndex, cellCount } = t;
    if (cellCount === 1) return removeTable(editor);
    _slate.Editor.withoutNormalizing(editor, ()=>{
        const columns = [
            ...tableElement.columns
        ];
        columns.splice(cellIndex, 1);
        _slate.Transforms.setNodes(editor, {
            columns
        }, {
            at: tablePath
        });
        tableElement.children.forEach((rowElement, rowIndex2)=>{
            _slate.Transforms.removeNodes(editor, {
                at: [
                    ...tablePath,
                    rowIndex2,
                    cellIndex
                ]
            });
        });
        const selection = _slate.Editor.start(editor, [
            ...tablePath,
            rowIndex,
            Math.min(cellIndex, cellCount - 2)
        ]);
        _slate.Transforms.select(editor, selection);
    });
}
// ../react/src/table-plugin/methods/remove-row.ts
init_react_shim();
function removeRow(editor, { at = editor.selection } = {}) {
    const t = getTableInfo(editor, {
        at
    });
    if (t === void 0) return false;
    if (t.rowCount === 1) {
        removeTable(editor);
        return true;
    }
    _slate.Editor.withoutNormalizing(editor, ()=>{
        _slate.Transforms.removeNodes(editor, {
            at: t.rowPath
        });
        _slate.Transforms.select(editor, _slate.Editor.start(editor, [
            ...t.tablePath,
            Math.min(t.rowIndex, t.rowCount - 2),
            t.cellIndex
        ]));
    });
    return true;
}
// ../react/src/table-plugin/methods/setTableColumnAlign.ts
init_react_shim();
function setTableColumnAlign(editor, options) {
    const t = getTableInfo(editor);
    if (t === void 0) return false;
    const { tableElement, tablePath, cellIndex } = t;
    const nextColumns = tableElement.columns.slice();
    nextColumns.splice(cellIndex, 1, {
        align: options.align
    });
    _slate.Transforms.setNodes(editor, {
        columns: nextColumns
    }, {
        at: tablePath
    });
    return true;
}
// ../react/src/table-plugin/methods/tab.ts
init_react_shim();
function tabForward(editor) {
    const t = getTableInfo(editor);
    if (!t) return false;
    const { cellIndex, cellCount, rowIndex, rowCount, tablePath } = t;
    if (cellIndex < cellCount - 1) {
        selectStartOfElement(editor, [
            ...tablePath,
            rowIndex,
            cellIndex + 1
        ]);
        return true;
    }
    if (rowIndex < rowCount - 1) {
        selectStartOfElement(editor, [
            ...tablePath,
            rowIndex + 1,
            0
        ]);
        return true;
    }
    insertRowBelow(editor);
    selectStartOfElement(editor, [
        ...tablePath,
        rowIndex + 1,
        0
    ]);
    return true;
}
function tabBackward(editor) {
    const t = getTableInfo(editor);
    if (!t) return false;
    const { cellIndex, cellCount, rowIndex, tablePath } = t;
    if (cellIndex > 0) {
        selectStartOfElement(editor, [
            ...tablePath,
            rowIndex,
            cellIndex - 1
        ]);
        return true;
    }
    if (rowIndex > 0) {
        selectStartOfElement(editor, [
            ...tablePath,
            rowIndex - 1,
            cellCount - 1
        ]);
        return true;
    }
}
// ../react/src/table-plugin/methods/index.ts
function createTableMethods(editor) {
    return {
        getTableInfo: curryOne(getTableInfo, editor),
        insertTable: curryOne(insertTable, editor),
        insertColumn: curryOne(insertColumn, editor),
        insertRow: curryOne(insertRow, editor),
        removeTable: curryOne(removeTable, editor),
        removeColumn: curryOne(removeColumn, editor),
        removeRow: curryOne(removeRow, editor),
        tabForward: curryOne(tabForward, editor),
        tabBackward: curryOne(tabBackward, editor),
        selectCell: curryOne(selectCell, editor),
        down: curryOne(down, editor),
        up: curryOne(up, editor),
        setTableColumnAlign: curryOne(setTableColumnAlign, editor)
    };
}
function selectCell(editor, { at = editor.selection } = {}) {
    const t = getTableInfo(editor, {
        at
    });
    if (t === void 0) return false;
    const { cellPath } = t;
    _slate.Transforms.select(editor, cellPath);
    return true;
}
// ../react/src/table-plugin/normalize/normalize-table.ts
init_react_shim();
function normalizeTableIndexes(editor, entry) {
    let isTransformed = false;
    const rowElements = entry[0].children;
    rowElements.forEach((rowElement, y)=>{
        const cellElements = rowElement.children;
        cellElements.forEach((cellElement, x)=>{
            if (cellElement.x !== x || cellElement.y !== y) {
                _slate.Transforms.setNodes(editor, {
                    x,
                    y
                }, {
                    at: [
                        ...entry[1],
                        y,
                        x
                    ]
                });
                isTransformed = true;
            }
        });
    });
    return isTransformed;
}
// ../react/src/table-plugin/normalize/normalize-table-cell.ts
init_react_shim();
function normalizeTableCell(editor, entry) {
    const [node2, path3] = entry;
    if (node2.children.length === 1 && node2.children[0].type === "table-content") return false;
    _slate.Editor.withoutNormalizing(editor, ()=>{
        _slate.Transforms.insertNodes(editor, {
            type: "table-content",
            children: [
                {
                    text: "X"
                }
            ]
        }, {
            at: [
                ...entry[1],
                0
            ]
        });
        for(let i = node2.children.length; i >= 0; i--)_slate.Transforms.mergeNodes(editor, {
            at: [
                ...path3,
                i
            ]
        });
        _slate.Transforms.delete(editor, {
            at: {
                path: [
                    ...path3,
                    0,
                    0
                ],
                offset: 0
            },
            unit: "character"
        });
    });
    return true;
}
// ../react/src/table-plugin/render-element/index.tsx
init_react_shim();
// ../react/src/table-plugin/render-element/table.tsx
init_react_shim();
// ../react/src/table-plugin/render-element/styles/index.ts
init_react_shim();
// ../react/src/table-plugin/render-element/styles/table-menu-styles.ts
init_react_shim();
var $BaseMenu = _styled2.default.call(void 0, "div")`
  position: absolute;
  /**
   * very slightly shaded
   */
  background: rgba(0, 0, 0, 0.001);

  /**
   * hover 
   */
  &:hover {
    /**
     * needs to pop up so that it doesn't jump back and forth with neighbor
     * below
     */
    z-index: 1000;
    /**
     * Makes the visible tile get darker on hover over any part of the
     * menu including the invisible part
     */
    .--tile {
      background: rgba(0, 0, 0, 0.15);
    }
  }
`;
var $ColumnMenu = _styled2.default.call(void 0, $BaseMenu)`
  cursor: pointer;
  /**
   * hangs out on top
   */
  left: -1px;
  right: -1px;
  right: 0;
  height: 3em;
  top: -3em;
`;
var $RowMenu = _styled2.default.call(void 0, $BaseMenu)`
  /**
   * hangs out on left
   */
  top: -1px;
  bottom: -1px;
  width: 3em;
  left: -3em;
`;
var $MenuTile = _styled2.default.call(void 0, "div")`
  position: absolute;
  background: rgba(0, 0, 0, 0.05);
  border: 1px solid rgba(0, 0, 0, 0.05);
  transition: all 200ms;
  /**
   * NOTE: One of these should be overridden
   */
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
`;
var $ColumnMenuTile = _styled2.default.call(void 0, $MenuTile)`
  top: 50%;
  border-bottom: none;
  border-right: none;
  bottom: 1px;
  td:first-of-type & {
    border-top-left-radius: 0.5em;
  }
  td:last-of-type & {
    border-top-right-radius: 0.5em;
    border-right: 1px solid rgba(0, 0, 0, 0.05);
    right: -1px;
  }
  svg {
    position: absolute;
    top: 0.1875em;
    left: 50%;
    margin-left: -0.5em;
    color: rgba(0, 0, 0, 0.2);
  }
  &:hover svg {
    color: rgba(0, 0, 0, 0.5);
  }

  /* border-top-left-radius: 0.5em;
  border-top-right-radius: 0.5em; */
`;
var $RowMenuTile = _styled2.default.call(void 0, $MenuTile)`
  left: 50%;
  border-right: none;
  border-bottom: none;
  right: 1px;
  tr:first-of-type & {
    border-top-left-radius: 0.5em;
  }
  tr:last-of-type & {
    border-bottom-left-radius: 0.5em;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    bottom: 0;
  }
  svg {
    position: absolute;
    left: 0.25em;
    top: 50%;
    margin-top: -0.5em;
    color: rgba(0, 0, 0, 0.2);
  }
  &:hover svg {
    color: rgba(0, 0, 0, 0.5);
  }

  /* border-top-left-radius: 0.5em;
  border-bottom-left-radius: 0.5em; */
`;
var $MenuButton = _styled2.default.call(void 0, "div")`
  position: absolute;
  font-size: 1.5em;
  background: white;
  border-radius: 50%;
  cursor: pointer;
  svg {
    display: block;
  }
`;
var $AddMenuButton = _styled2.default.call(void 0, $MenuButton)`
  color: #c0c0c0;
  &:hover {
    color: royalblue;
  }
`;
var $RemoveMenuButton = _styled2.default.call(void 0, $MenuButton)`
  color: #c0c0c0;
  &:hover {
    color: firebrick;
  }
`;
// ../react/src/table-plugin/render-element/styles/index.ts
var $Table = _styled2.default.call(void 0, "table")`
  border-collapse: collapse;
  margin: 1em 0;
  ${({ columns })=>columns.map((column, index2)=>`td:nth-of-type(${index2 + 1}) { text-align: ${column.align}; }`).join("\n")}
`;
var $TableRow = _styled2.default.call(void 0, "tr")`
  position: relative;
  &:first-of-type {
    background: var(--table-head-bgcolor);
  }
`;
var $TableCell = _styled2.default.call(void 0, "td")`
  position: relative;
  border-width: 1px;
  border-style: solid;
  border-color: rgba(0, 0, 0, 0.2) rgba(0, 0, 0, 0.05);
  border-color: var(--table-row-border-color) var(--table-column-border-color);
  padding: 0.75em 1em;
  min-width: 2em;
  &.--selected {
    outline: 2px solid var(--select-color, blue);
  }
  /**
   * Stronger borders on the left and right edge
   */
  &:first-of-type {
    border-left-color: var(--table-border-color);
  }
  &:last-of-type {
    border-right-color: var(--table-border-color);
  }
`;
var $TableContent = _styled2.default.call(void 0, "div")`
  /**
   * Smaller font inside a table than outside of it
   */
  font-size: 0.9375em; /* 15px */
  /**
   * Even smaller font and dimmer for the heading row
   */
  tr:first-of-type & {
    color: rgba(0, 0, 0, 0.6);
    font-size: 0.875em; /* 14px */
  }
`;
// ../react/src/table-plugin/render-element/table-context.tsx
init_react_shim();
var TableContext = _react.createContext.call(void 0, {
    isSelected: false
});
// ../react/src/table-plugin/render-element/table.tsx
function Table({ element: element2, attributes, children }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const isSelected = _slatereact.useSelected.call(void 0);
    _react.useEffect.call(void 0, ()=>{
        const path3 = _slatereact.ReactEditor.findPath(editor, element2);
        normalizeTableIndexes(editor, [
            element2,
            path3
        ]);
    }, []);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, TableContext.Provider, {
        value: {
            isSelected
        },
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Table, {
            ...attributes,
            columns: element2.columns,
            children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "tbody", {
                children
            })
        })
    });
}
// ../react/src/table-plugin/render-element/table-cell/index.tsx
init_react_shim();
// ../react/src/table-plugin/render-element/table-cell/column-menu/index.tsx
init_react_shim();
// ../react/src/table-plugin/icons.tsx
init_react_shim();
var PlusIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, "svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        width: "1em",
        height: "1em",
        ...props,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            fillRule: "evenodd",
            d: "M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm.75-11.25a.75.75 0 0 0-1.5 0v2.5h-2.5a.75.75 0 0 0 0 1.5h2.5v2.5a.75.75 0 0 0 1.5 0v-2.5h2.5a.75.75 0 0 0 0-1.5h-2.5v-2.5z",
            clipRule: "evenodd"
        })
    });
var MinusIcon = (props)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, "svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        width: "1em",
        height: "1em",
        ...props,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            fillRule: "evenodd",
            d: "M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zM6.75 9.25a.75.75 0 0 0 0 1.5h6.5a.75.75 0 0 0 0-1.5h-6.5z",
            clipRule: "evenodd"
        })
    });
var BarsIcon = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M4 6h16M4 12h16M4 18h16"
        })
    });
var AlignLeft = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M4 6h16M4 12h10M4 18h14"
        })
    });
var AlignCenter = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M4 6h16M8 12h8M6 18h12"
        })
    });
var AlignRight = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M4 6h16M10 12h10M6 18h14"
        })
    });
// ../react/src/table-plugin/render-element/table-cell/column-menu/index.tsx
function ColumnMenu({ cellElement }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const menu = useLayer("column-menu");
    const buttonRef = _react.useRef.call(void 0, null);
    const [hover, setHover] = _react.useState.call(void 0, false);
    const onMouseEnter = _react.useCallback.call(void 0, ()=>{
        setHover(true);
    }, []);
    const onMouseLeave = _react.useCallback.call(void 0, ()=>{
        setHover(false);
    }, []);
    const onClick = _react.useCallback.call(void 0, ()=>{
        if (menu.layer) menu.close();
        const dest = buttonRef.current;
        if (dest === null) return;
        const items = [
            {
                icon: AlignLeft,
                title: "Align Column left",
                action: ()=>{
                    editor.tablePlugin.setTableColumnAlign({
                        align: "left"
                    });
                }
            },
            {
                icon: AlignCenter,
                title: "Align Column Center",
                action: ()=>{
                    editor.tablePlugin.setTableColumnAlign({
                        align: "center"
                    });
                }
            },
            {
                icon: AlignRight,
                title: "Align Column Right",
                action: ()=>{
                    editor.tablePlugin.setTableColumnAlign({
                        align: "right"
                    });
                }
            }
        ];
        menu.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, Menu, {
                dest,
                items,
                close: menu.close
            }));
    }, []);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $ColumnMenu, {
        ref: buttonRef,
        contentEditable: false,
        onClick,
        onMouseEnter,
        onMouseLeave,
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ColumnMenuTile, {
                className: "--tile",
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, BarsIcon, {})
            }),
            hover ? /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, {
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $RemoveMenuButton, {
                        style: {
                            top: 0,
                            left: "50%",
                            marginLeft: "-0.5em"
                        },
                        onMouseDown: ()=>editor.tablePlugin.removeColumn({
                                at: cellElement
                            }),
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, MinusIcon, {})
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $AddMenuButton, {
                        style: {
                            left: "-0.5em",
                            top: 0
                        },
                        onMouseDown: ()=>editor.tablePlugin.insertColumn({
                                at: cellElement
                            }),
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, PlusIcon, {})
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $AddMenuButton, {
                        style: {
                            right: "-0.5em",
                            top: 0
                        },
                        onMouseDown: ()=>editor.tablePlugin.insertColumn({
                                at: cellElement,
                                offset: 1
                            }),
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, PlusIcon, {})
                    })
                ]
            }) : null
        ]
    });
}
// ../react/src/table-plugin/render-element/table-cell/row-menu/index.tsx
init_react_shim();
function RowMenu({ cellElement }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const [hover, setHover] = _react.useState.call(void 0, false);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $RowMenu, {
        contentEditable: false,
        onMouseEnter: ()=>setHover(true),
        onMouseLeave: ()=>setHover(false),
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $RowMenuTile, {
                className: "--tile",
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, BarsIcon, {})
            }),
            hover ? /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, {
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $RemoveMenuButton, {
                        style: {
                            top: "50%",
                            left: "0.5em",
                            marginTop: "-0.5em"
                        },
                        onMouseDown: ()=>editor.tablePlugin.removeRow({
                                at: cellElement
                            }),
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, MinusIcon, {})
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $AddMenuButton, {
                        style: {
                            top: "-0.5em",
                            left: "0.5em"
                        },
                        onMouseDown: ()=>editor.tablePlugin.insertRow({
                                at: cellElement
                            }),
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, PlusIcon, {})
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $AddMenuButton, {
                        style: {
                            bottom: "-0.5em",
                            left: "0.5em"
                        },
                        onMouseDown: ()=>editor.tablePlugin.insertRow({
                                at: cellElement,
                                offset: 1
                            }),
                        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, PlusIcon, {})
                    })
                ]
            }) : null
        ]
    });
}
// ../react/src/table-plugin/render-element/table-cell/table-menu/index.tsx
init_react_shim();
// ../react/src/table-plugin/render-element/table-cell/table-menu/$table-menu.tsx
init_react_shim();
var $TableMenu = _styled2.default.call(void 0, "div")`
  position: absolute;
  /**
   * very slightly shaded
   */
  background: rgba(0, 0, 0, 0.001);

  /**
   * hangs out on left
   */
  top: -1.5em;
  left: -4em;
  height: 2.5em;
  width: 2.5em;

  /**
   * hover 
   */
  &:hover {
    /**
     * needs to pop up so that it doesn't jump back and forth with neighbor
     * below
     */
    z-index: 1000;
    /**
     * Makes the visible tile get darker on hover over any part of the
     * menu including the invisible part
     */
    .--row-menu-tile {
      background: rgba(0, 0, 0, 0.15);
    }
  }
`;
var $TableMenuTile = _styled2.default.call(void 0, "div")`
  position: absolute;
  left: 0;
  top: 0;
  width: 1.5em;
  height: 1.5em;
  background: rgba(0, 0, 0, 0.05);
  border-radius: 50%;
`;
// ../react/src/table-plugin/render-element/table-cell/table-menu/index.tsx
function TableMenu() {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $TableMenu, {
        contentEditable: false,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $TableMenuTile, {
            className: "--table-menu-tile"
        })
    });
}
// ../react/src/table-plugin/render-element/table-cell/index.tsx
function TableCell({ element: element2, attributes, children }) {
    const tableContext = _react.useContext.call(void 0, TableContext);
    const selected = _slatereact.useSelected.call(void 0);
    const showTableMenu = tableContext.isSelected && element2.x === 0 && element2.y === 0;
    const showRowMenu = tableContext.isSelected && element2.x === 0;
    const showColumnMenu = tableContext.isSelected && element2.y === 0;
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $TableCell, {
        className: selected ? "--selected" : "",
        ...attributes,
        "data-x": element2.x,
        "data-y": element2.y,
        children: [
            children,
            showTableMenu ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, TableMenu, {}) : null,
            showRowMenu ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, RowMenu, {
                cellElement: element2
            }) : null,
            showColumnMenu ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ColumnMenu, {
                cellElement: element2
            }) : null
        ]
    });
}
// ../react/src/table-plugin/render-element/table-content.tsx
init_react_shim();
function TableContent({ attributes, children }) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $TableContent, {
        ...attributes,
        children
    });
}
// ../react/src/table-plugin/render-element/table-row.tsx
init_react_shim();
function TableRow({ attributes, children }) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $TableRow, {
        ...attributes,
        children
    });
}
// ../react/src/table-plugin/render-element/index.tsx
function renderElement4({ element: element2, attributes, children }) {
    switch(element2.type){
        case "table":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Table, {
                element: element2,
                attributes,
                children
            });
        case "table-row":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, TableRow, {
                element: element2,
                attributes,
                children
            });
        case "table-cell":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, TableCell, {
                element: element2,
                attributes,
                children
            });
        case "table-content":
            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, TableContent, {
                element: element2,
                attributes,
                children
            });
    }
}
// ../react/src/table-plugin/types.ts
init_react_shim();
// ../react/src/table-plugin/index.tsx
var TablePlugin = createPlugin((editor, options, { createPolicy })=>{
    editor.supportsTable = true;
    editor.tablePlugin = createTableMethods(editor);
    return createPolicy({
        name: "table",
        editor: {
            deleteBackward: ()=>{
                return isStartOfElement(editor, "table-cell");
            },
            deleteForward: ()=>{
                return isEndOfElement(editor, "table-cell");
            },
            deleteFragment: ()=>deleteFragmentWithProtectedTypes(editor, [
                    "table-cell"
                ]),
            insertBreak: ()=>{
                const entry = findElementUp(editor, "table-cell");
                return !!entry;
            },
            isMaster (element2) {
                if (element2.type === "table") return true;
            },
            normalizeNode: (entry)=>{
                const [node2] = entry;
                if (!_slate.Element.isElement(node2)) return false;
                switch(node2.type){
                    case "table":
                        return normalizeTableIndexes(editor, entry);
                    case "table-cell":
                        return normalizeTableCell(editor, entry);
                }
                return false;
            }
        },
        editableProps: {
            renderElement: renderElement4,
            onKeyDown: createHotkeyHandler({
                /**
           * navigation
           */ tab: editor.tablePlugin.tabForward,
                "shift+tab": editor.tablePlugin.tabBackward,
                down: editor.tablePlugin.down,
                up: editor.tablePlugin.up,
                /**
           * selection
           */ "mod+a": editor.tablePlugin.selectCell,
                /**
           * insert
           */ "super+t": ()=>editor.tablePlugin.insertTable(3, 2),
                "mod+shift+enter": ()=>editor.tablePlugin.insertRow({
                        offset: 0
                    }),
                "mod+enter": ()=>editor.tablePlugin.insertRow({
                        offset: 1
                    }),
                "super+[": ()=>editor.tablePlugin.insertColumn({
                        offset: 0
                    }),
                "super+]": ()=>editor.tablePlugin.insertColumn({
                        offset: 1
                    }),
                /**
           * remove
           */ "super+backspace": editor.tablePlugin.removeTable,
                "mod+backspace": editor.tablePlugin.removeRow,
                "mod+shift+backspace": editor.tablePlugin.removeColumn
            })
        }
    });
});
// ../react/src/theme-plugin/index.tsx
init_react_shim();
// ../react/src/theme-plugin/global-styles.ts
init_react_shim();
var blue = `
--blue-50: rgb(239 246 255);
--blue-100: rgb(219 234 254);
--blue-200: rgb(191 219 254);
--blue-300: rgb(147 197 253);
--blue-400: rgb(96 165 250);
--blue-500: rgb(59 130 246);
--blue-600: rgb(37 99 235);
--blue-700: rgb(29 78 216);
--blue-800: rgb(30 64 175);
--blue-900: rgb(30 58 138);
`;
var zincShades = `
--shade-50: rgb(250 250 250);
--shade-100: rgb(244 244 245);
--shade-200: rgb(228 228 231);
--shade-300: rgb(212 212 216);
--shade-400: rgb(161 161 170);
--shade-500: rgb(113 113 122);
--shade-600: rgb(82 82 91);
--shade-700: rgb(63 63 70);
--shade-800: rgb(39 39 42);
--shade-900: rgb(24 24 27);
`;
var globalStyles = _react3.css`
  :root {
    /* Tailwind Colors */
    ${blue}
    ${zincShades}
    /* Select Colors */
    --select-color: var(--blue-400);
    --select-editor-color: var(--blue-200);
    --hover-color: var(--blue-200);
    /* Link Colors */
    --link-color: var(--blue-600);
    --link-hover-color: var(--blue-700);
    /* Code Block Colors */
    --code-block-bgcolor: var(--shade-50);
    --code-block-border-color: var(--shade-300);
    /* Inline Code Colors */
    --inline-code-bgcolor: var(--shade-100);
    --inline-code-border-color: var(--shade-200);
    /* Table Colors */
    --table-border-color: var(--shade-300);
    --table-row-border-color: var(--shade-300);
    --table-column-border-color: var(--shade-100);
    --table-head-bgcolor: var(--shade-50);
    --table-menu-bgcolor: var(--shade-100);
    --table-menu-hover-bgcolor: var(--shade-200);
    /* Horizontal Rule Colors */
    --hr-color: var(--shade-300);
  }
`;
// ../react/src/theme-plugin/index.tsx
var ThemePlugin = createPlugin((editor)=>{
    editor.theme = true;
    return {
        name: "theme",
        editor: {},
        renderEditable: ({ attributes, Editable: Editable3 })=>{
            return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, {
                children: [
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _react3.Global, {
                        styles: globalStyles
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Editable3, {
                        ...attributes
                    })
                ]
            });
        },
        editableProps: {}
    };
});
// ../react/src/toolbar-plugin/index.tsx
init_react_shim();
// ../react/src/toolbar-plugin/render-editable/index.tsx
init_react_shim();
// ../react/src/toolbar-plugin/components/index.tsx
init_react_shim();
// ../react/src/toolbar-plugin/components/dialog/table-dialog.tsx
init_react_shim();
// ../react/src/toolbar-plugin/styles/table-styles.ts
init_react_shim();
var $TableDialog = _styled2.default.call(void 0, $Panel)`
  padding: 0.5em;
`;
var $TableDialogGrid = _styled2.default.call(void 0, "div")`
  display: grid;
  grid-template-columns: repeat(5, 1.75em);
  grid-template-rows: 1.5em;
  /* grid-gap: 1px; */
`;
var $TableDialogGridCell = _styled2.default.call(void 0, "div")`
  background: var(--shade-100);
  height: 1.5em;
  border-radius: 0.125em;
  border-right: 1px solid white;
  border-top: 1px solid white;
  cursor: pointer;
  &.--selected {
    background: var(--blue-100);
  }
`;
// ../react/src/toolbar-plugin/components/dialog/table-dialog.tsx
function createRange2(size) {
    return [
        ...Array(size).keys()
    ];
}
function TableDialog({ dest, close }) {
    const [hover, setHover] = _react.useState.call(void 0, {
        x: 0,
        y: 0
    });
    const editor = _slatereact.useSlateStatic.call(void 0);
    const ref = _react.useRef.call(void 0, null);
    const style = useAbsoluteReposition({
        src: ref,
        dest
    }, ({ dest: dest2 })=>{
        return {
            left: dest2.left - 8,
            top: dest2.top + dest2.height
        };
    });
    const rows = createRange2(5).map((i)=>i + 1);
    const cols = createRange2(5).map((i)=>i + 1);
    const hoverCell = _react.useCallback.call(void 0, (x, y)=>{
        setHover({
            x,
            y
        });
    }, [
        setHover
    ]);
    const createTable2 = _react.useCallback.call(void 0, (x, y)=>{
        editor.tablePlugin.insertTable(x, y);
        _slatereact.ReactEditor.focus(editor);
        close();
    }, [
        editor
    ]);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CloseMask, {
                close
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $TableDialog, {
                ref,
                style,
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $TableDialogGrid, {
                    onMouseLeave: ()=>hoverCell(0, 0),
                    children: rows.map((y)=>{
                        return cols.map((x)=>{
                            const selected = x <= hover.x && y <= hover.y;
                            return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $TableDialogGridCell, {
                                className: _clsx.clsx.call(void 0, {
                                    "--selected": selected
                                }),
                                onMouseEnter: ()=>hoverCell(x, y),
                                onClick: ()=>createTable2(x, y)
                            }, `${x},${y}`);
                        });
                    })
                })
            })
        ]
    });
}
// ../react/src/toolbar-plugin/components/toolbar/toolbar.tsx
init_react_shim();
// ../react/src/toolbar-plugin/items/index.tsx
init_react_shim();
// ../react/src/toolbar-plugin/items/block-items.tsx
init_react_shim();
// ../react/src/toolbar-plugin/icons.tsx
init_react_shim();
var H = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M7 12h10M7 5v14M17 5v14M15 19h4M15 5h4M5 19h4M5 5h4"
        })
    });
var More = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        className: "--more-icon",
        width: "0.5em",
        viewBox: "0 0 12 24",
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "m2 12 4 4 4-4"
        })
    });
var LinkPlus = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        width: "0.5em",
        viewBox: "6 0 12 24",
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M9 12h6M12 9v6"
        })
    });
var H1 = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M19 18v-8l-2 2M4 6v12M12 6v12M11 18h2M3 18h2M4 12h8M3 6h2M11 6h2"
        })
    });
var H2 = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M17 12a2 2 0 1 1 4 0c0 .591-.417 1.318-.816 1.858L17 18.001h4M4 6v12M12 6v12M11 18h2M3 18h2M4 12h8M3 6h2M11 6h2"
        })
    });
var H3 = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M19 14a2 2 0 1 0-2-2M17 16a2 2 0 1 0 2-2M4 6v12M12 6v12M11 18h2M3 18h2M4 12h8M3 6h2M11 6h2"
        })
    });
var H4 = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M20 18v-8l-4 6h5M4 6v12M12 6v12M11 18h2M3 18h2M4 12h8M3 6h2M11 6h2"
        })
    });
var H5 = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M17 18h2a2 2 0 1 0 0-4h-2v-4h4M4 6v12M12 6v12M11 18h2M3 18h2M4 12h8M3 6h2M11 6h2"
        })
    });
var H6 = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M19 14a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M21 12a2 2 0 1 0-4 0v4M4 6v12M12 6v12M11 18h2M3 18h2M4 12h8M3 6h2M11 6h2"
            })
        ]
    });
var Paragraph2 = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M7 20V4h5.5a4 4 0 0 1 0 9H7"
        })
    });
var Bold = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M7 5h6a3.5 3.5 0 0 1 0 7H7zM13 12h1a3.5 3.5 0 0 1 0 7H7v-7"
        })
    });
var Italic = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M11 5h6M7 19h6M14 5l-4 14"
        })
    });
var Style = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M4 20h3M14 20h7M6.9 15h6.9M10.2 6.3 16 20M5 20l6-16h2l7 16"
        })
    });
var Link = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M10 14a3.5 3.5 0 0 0 5 0l4-4a3.5 3.5 0 0 0-5-5l-.5.5"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M14 10a3.5 3.5 0 0 0-5 0l-4 4a3.5 3.5 0 0 0 5 5l.5-.5"
            })
        ]
    });
var Blockquote = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M6 15h15M21 19H6M15 11h6M21 7h-6M9 9h1a1 1 0 1 1-1 1V7.5a2 2 0 0 1 2-2M3 9h1a1 1 0 1 1-1 1V7.5a2 2 0 0 1 2-2"
        })
    });
var Quote = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M10 11H6a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v6c0 2.667-1.333 4.333-4 5M19 11h-4a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v6c0 2.667-1.333 4.333-4 5"
        })
    });
var QuoteOff = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M10 11H6a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1m4 4v3c0 2.667-1.333 4.333-4 5M19 11h-4m-1-1V7a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v6c0 .66-.082 1.26-.245 1.798m-1.653 2.29c-.571.4-1.272.704-2.102.912M3 3l18 18"
        })
    });
var BulletList = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M9 6h11M9 12h11M9 18h11M5 6v.01M5 12v.01M5 18v.01"
        })
    });
var Table2 = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "rect", {
                x: 4,
                y: 4,
                width: 16,
                height: 16,
                rx: 2
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M4 10h16M10 4v16"
            })
        ]
    });
var Code = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "m7 8-4 4 4 4M17 8l4 4-4 4M14 4l-4 16"
        })
    });
var Image = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M15 8h.01"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "rect", {
                x: 4,
                y: 4,
                width: 16,
                height: 16,
                rx: 3
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "m4 15 4-4a3 5 0 0 1 3 0l5 5"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "m14 14 1-1a3 5 0 0 1 3 0l2 2"
            })
        ]
    });
var Attachment = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                stroke: "none",
                d: "M0 0h24v24H0z"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M14 3v4a1 1 0 0 0 1 1h4"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M17 21H7a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7l5 5v11a2 2 0 0 1-2 2zM12 11v6M9 14h6"
            })
        ]
    });
var FileUpload = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                stroke: "none",
                d: "M0 0h24v24H0z"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M14 3v4a1 1 0 0 0 1 1h4"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M17 21H7a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7l5 5v11a2 2 0 0 1-2 2zM12 11v6"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M9.5 13.5 12 11l2.5 2.5"
            })
        ]
    });
var PhotoUp = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                stroke: "none",
                d: "M0 0h24v24H0z"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M15 8h.01M12.5 21H6a3 3 0 0 1-3-3V6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v6.5"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "m3 16 5-5c.928-.893 2.072-.893 3 0l3.5 3.5"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "m14 14 1-1c.679-.653 1.473-.829 2.214-.526M19 22v-6M22 19l-3-3-3 3"
            })
        ]
    });
var Plus = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M12 5v14M5 12h14"
        })
    });
var Superscript = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "m5 7 8 10m-8 0 8-10M21 11h-4l3.5-4A1.73 1.73 0 0 0 17 5"
        })
    });
var Subscript = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "m5 7 8 10m-8 0 8-10M21 20h-4l3.5-4a1.73 1.73 0 0 0-3.5-2"
        })
    });
var Strikethrough = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M5 12h14M16 6.5A4 2 0 0 0 12 5h-1a3.5 3.5 0 0 0 0 7h2a3.5 3.5 0 0 1 0 7h-1.5a4 2 0 0 1-4-1.5"
        })
    });
var RemoveStyles = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "m14 6 7 7-2 2M10 10l-4.172 4.172a2.828 2.828 0 1 0 4 4L14 14"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "m16 12 4.414-4.414a2 2 0 0 0 0-2.829l-1.171-1.171a2 2 0 0 0-2.829 0L12 8M4 20l1.768-1.768M3 3l18 18"
            })
        ]
    });
var ListCheck = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "m9 11 3 3 8-8"
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M20 12v6a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h9"
            })
        ]
    });
var ListNumbers = ()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, TablerIcon, {
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
            d: "M11 6h9M11 12h9M12 18h8M4 16a2 2 0 1 1 4 0c0 .591-.5 1-1 1.5L4 20h4M6 10V4L4 6"
        })
    });
var Emoji = ()=>/* @__PURE__ */ _jsxruntime.jsxs.call(void 0, TablerIcon, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "circle", {
                cx: 12,
                cy: 12,
                r: 9
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "path", {
                d: "M9 10h.01M15 10h.01M9.5 15a3.5 3.5 0 0 0 5 0"
            })
        ]
    });
// ../react/src/toolbar-plugin/items/block-items.tsx
var blockItems = [
    {
        icon: H1,
        title: "Heading 1",
        hotkey: "super+1",
        action: (editor)=>editor.heading.convertHeading(1, false)
    },
    {
        icon: H2,
        title: "Heading 2",
        hotkey: "super+2",
        action: (editor)=>editor.heading.convertHeading(2, false)
    },
    {
        icon: H3,
        title: "Heading 3",
        hotkey: "super+3",
        action: (editor)=>editor.heading.convertHeading(3, false)
    },
    {
        icon: H4,
        title: "Heading 4",
        hotkey: "super+4",
        action: (editor)=>editor.heading.convertHeading(4, false)
    },
    {
        icon: H5,
        title: "Heading 5",
        hotkey: "super+5",
        action: (editor)=>editor.heading.convertHeading(5, false)
    },
    {
        icon: H6,
        title: "Heading 6",
        hotkey: "super+6",
        action: (editor)=>editor.heading.convertHeading(1, false)
    },
    "divider",
    {
        icon: Paragraph2,
        title: "Paragraph",
        hotkey: "super+0",
        action: (editor)=>{
            editor.collapsibleParagraph.convertParagraph();
        }
    }
];
var blockDropdownItem = {
    icon: H,
    title: "Paragraph Style",
    more: true,
    children: blockItems
};
// ../react/src/toolbar-plugin/items/dialogItems.tsx
init_react_shim();
// ../react/src/toolbar-plugin/components/dialog/emoji-dialog.tsx
init_react_shim();
var _data = require("b2606339f2d7dbf");
var _data2 = _interopRequireDefault(_data);
var _react5 = require("8ab381e9535cf6c9");
var _react6 = _interopRequireDefault(_react5);
function EmojiDialog({ dest, close }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const ref = _react.useRef.call(void 0, null);
    const style = useAbsoluteReposition({
        src: ref,
        dest
    }, ({ src, dest: dest2 }, viewport)=>{
        return positionInside(src, viewport, {
            left: dest2.left,
            top: dest2.top + dest2.height
        }, {
            margin: 16
        });
    });
    const onEmojiSelect = _react.useCallback.call(void 0, (e)=>{
        _slate.Transforms.insertText(editor, e.native);
        _slatereact.ReactEditor.focus(editor);
        close();
    }, [
        editor
    ]);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CloseMask, {
                close
            }),
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $EmojiDialog, {
                ref,
                style,
                children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _react6.default, {
                    data: _data2.default,
                    onEmojiSelect,
                    autoFocus: true
                })
            })
        ]
    });
}
var $EmojiDialog = _styled2.default.call(void 0, $Panel)``;
// ../react/src/toolbar-plugin/components/dialog/file-dialog.tsx
init_react_shim();
// ../react/src/toolbar-plugin/styles/dialog-shared-styles.ts
init_react_shim();
var $DialogButton = _styled2.default.call(void 0, "div")`
  /* Center vertically and horizontally */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  /* font-size: 1.25em; */
  padding: 0.25em 0.75em;
  text-align: center;
  color: var(--blue-100);
  color: white;
  background: var(--blue-500);
  transition: all 100ms;
  &:hover {
    color: var(--blue-50);
    background: var(--blue-600);
    outline: 2px solid var(--blue-200);
  }
  border-radius: 0.25em;
  svg {
    color: var(--blue-200);
    font-size: 1.25em;
    stroke-width: 2px;
  }
`;
var $DialogHint = _styled2.default.call(void 0, "div")`
  font-size: 0.875em;
  margin-top: 0.5em;
  color: var(--shade-500);
  line-height: 1.375;
`;
// ../react/src/toolbar-plugin/styles/file-dialog-styles.ts
init_react_shim();
var $FileDialog = _styled2.default.call(void 0, $Panel)`
  padding: 1em;
  width: 18em;
`;
// ../react/src/toolbar-plugin/components/dialog/file-dialog.tsx
function FileDialog({ dest, close, icon, buttonCaption, buttonHint }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const ref = _react.useRef.call(void 0, null);
    const style = useAbsoluteReposition({
        src: ref,
        dest
    }, ({ src, dest: dest2 }, viewport)=>{
        return positionInside(src, viewport, {
            left: dest2.left - 16,
            top: dest2.top + dest2.height
        }, {
            margin: 16
        });
    });
    async function onChange(e) {
        if (e.target.files == null || e.target.files.length === 0) return;
        stopEvent(e);
        const { files } = e.target;
        for (const file of files)editor.upload.upload(file);
        close();
    }
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CloseMask, {
                close
            }),
            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $FileDialog, {
                ref,
                style,
                children: [
                    /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, "label", {
                        children: [
                            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "input", {
                                type: "file",
                                multiple: true,
                                style: {
                                    display: "none"
                                },
                                onChange
                            }),
                            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $DialogButton, {
                                children: [
                                    icon,
                                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
                                        style: {
                                            marginLeft: "0.5em"
                                        },
                                        children: buttonCaption
                                    })
                                ]
                            })
                        ]
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $DialogHint, {
                        children: buttonHint
                    })
                ]
            })
        ]
    });
}
function AttachmentDialog({ dest, close }) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, FileDialog, {
        dest,
        close,
        icon: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, FileUpload, {}),
        buttonCaption: "Select files...",
        buttonHint: "Select files to insert as attachments"
    });
}
function ImageDialog({ dest, close }) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, FileDialog, {
        dest,
        close,
        icon: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, PhotoUp, {}),
        buttonCaption: "Select images...",
        buttonHint: "Select image files to upload and insert into the editor"
    });
}
// ../react/src/toolbar-plugin/items/dialogItems.tsx
var dialogItems = [
    {
        icon: Table2,
        title: "Insert Table",
        more: true,
        Component: TableDialog
    },
    {
        icon: Image,
        title: "Insert Image",
        more: true,
        Component: ImageDialog,
        show: (editor)=>_nullishCoalesce(editor.toolbar.showUploadButtons, ()=>false)
    },
    {
        icon: Attachment,
        title: "Insert Attachment",
        more: true,
        Component: AttachmentDialog,
        show: (editor)=>_nullishCoalesce(editor.toolbar.showUploadButtons, ()=>false)
    },
    {
        icon: Emoji,
        title: "Insert Emoji",
        more: true,
        Component: EmojiDialog
    }
];
var expandedDialogItems = dialogItems;
var compactDialogItems = [
    {
        icon: Plus,
        title: "Insert",
        more: true,
        children: dialogItems
    }
];
// ../react/src/toolbar-plugin/items/dropdownItems.tsx
init_react_shim();
// ../react/src/toolbar-plugin/items/codeBlockItems.tsx
init_react_shim();
function codeBlockAction(language) {
    return (editor)=>editor.codeBlock.setCodeBlockLanguage(language) || editor.codeBlock.createCodeBlock({
            language
        });
}
var codeBlockItems = [
    {
        icon: BulletList,
        title: "Plain text",
        action: codeBlockAction("text")
    },
    "divider",
    {
        icon: BulletList,
        title: "HTML",
        action: codeBlockAction("html")
    },
    {
        icon: BulletList,
        title: "SVG",
        action: codeBlockAction("svg")
    },
    {
        icon: BulletList,
        title: "CSS",
        action: codeBlockAction("css")
    },
    "divider",
    {
        icon: BulletList,
        title: "Javascript",
        action: codeBlockAction("javascript")
    },
    {
        icon: BulletList,
        title: "C Like (C, C#, C++, Java)",
        action: codeBlockAction("clike")
    }
];
// ../react/src/toolbar-plugin/items/list-items.tsx
init_react_shim();
var listItems = [
    {
        icon: BulletList,
        title: "Bullet List",
        hotkey: "super+8",
        action: (editor)=>editor.list.convertUnorderedList(false)
    },
    {
        icon: ListNumbers,
        title: "Numbered List",
        hotkey: "super+7",
        action: (editor)=>editor.list.convertOrderedList(false)
    },
    {
        icon: ListCheck,
        title: "Checklist",
        hotkey: "super+9",
        action: (editor)=>editor.list.convertTaskList(false)
    }
];
// ../react/src/toolbar-plugin/items/quote-items.tsx
init_react_shim();
var quoteItems = [
    {
        icon: Quote,
        title: "Add Block Quote",
        hotkey: "super+.",
        action: (editor)=>editor.blockQuotePlugin.indent()
    },
    {
        icon: QuoteOff,
        title: "Remove Block Quote",
        hotkey: "super+,",
        action: (editor)=>editor.blockQuotePlugin.outdent()
    }
];
// ../react/src/toolbar-plugin/items/dropdownItems.tsx
var dropdownItems = [
    {
        icon: BulletList,
        title: "Lists",
        more: true,
        children: listItems
    },
    {
        icon: Blockquote,
        title: "Block Quote",
        more: true,
        children: quoteItems
    },
    {
        icon: Code,
        title: "Code Block",
        more: true,
        children: codeBlockItems
    }
];
// ../react/src/toolbar-plugin/items/linkItem.tsx
init_react_shim();
// ../react/src/toolbar-plugin/components/dialog/anchor-dialog.tsx
init_react_shim();
var isEnter = _ishotkey.isHotkey.call(void 0, "enter");
function AnchorDialog2({ dest, close }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const ref = _react.useRef.call(void 0, null);
    const style = useAbsoluteReposition({
        src: ref,
        dest
    }, ({ src, dest: dest2 }, viewport)=>{
        return positionInside(src, viewport, {
            left: dest2.left - 12,
            top: dest2.top + dest2.height
        }, {
            margin: 16
        });
    });
    const [url, setUrl] = _react.useState.call(void 0, "");
    const insertLink2 = ()=>{
        editor.anchor.insertLink(url, url, {
            select: true
        });
        _slatereact.ReactEditor.focus(editor);
        close();
    };
    const onChangeInput = _react.useCallback.call(void 0, (e)=>{
        setUrl(e.currentTarget.value);
    }, [
        setUrl
    ]);
    const onKeyDown = (e)=>{
        if (!isEnter(e)) return;
        e.preventDefault();
        e.stopPropagation();
        insertLink2();
    };
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment, {
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, CloseMask, {
                close
            }),
            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $AnchorDialog, {
                ref,
                style,
                children: [
                    /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $AnchorDialogInputLine, {
                        children: [
                            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $AnchorDialogInput, {
                                type: "text",
                                value: url,
                                autoFocus: true,
                                onChange: onChangeInput,
                                onKeyDown
                            }),
                            /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $DialogButton, {
                                onClick: insertLink2,
                                children: [
                                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Link, {}),
                                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, LinkPlus, {})
                                ]
                            })
                        ]
                    }),
                    /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $DialogHint, {
                        children: "Enter URL of link"
                    })
                ]
            })
        ]
    });
}
// ../react/src/toolbar-plugin/items/linkItem.tsx
var linkItem = {
    icon: Link,
    title: "Insert Link",
    more: true,
    hotkey: "mod+k",
    Component: AnchorDialog2
};
// ../react/src/toolbar-plugin/items/mark-items.tsx
init_react_shim();
var primaryMarkItems = [
    {
        icon: Bold,
        title: "Bold",
        hotkey: "mod+b",
        action: (editor)=>editor.marksPlugin.toggleBold()
    },
    {
        icon: Italic,
        title: "Italic",
        hotkey: "mod+i",
        action: (editor)=>editor.marksPlugin.toggleItalic()
    }
];
var secondaryMarkItems = [
    {
        icon: Superscript,
        title: "Superscript",
        hotkey: "super+p",
        action: (editor)=>editor.marksPlugin.toggleSup()
    },
    {
        icon: Subscript,
        title: "Subscript",
        hotkey: "super+b",
        action: (editor)=>editor.marksPlugin.toggleSub()
    },
    "divider",
    {
        icon: Strikethrough,
        title: "Strikethrough",
        hotkey: "super+k",
        action: (editor)=>editor.marksPlugin.toggleStrike()
    },
    "divider",
    {
        icon: Code,
        title: "Inline Code",
        hotkey: "mod+j",
        action: (editor)=>editor.inlineCode.toggleInlineCode()
    },
    "divider",
    {
        icon: RemoveStyles,
        title: "Remove Styles",
        hotkey: "super+0",
        /**
     * TODO: Enable remove styles
     */ action: (editor)=>editor.marksPlugin.removeMarks()
    }
];
var expandedMarkItems = [
    ...primaryMarkItems,
    {
        icon: Style,
        title: "Text Style",
        more: true,
        children: secondaryMarkItems
    }
];
var compactMarkItems = [
    {
        icon: Style,
        title: "Text Style",
        more: true,
        children: [
            ...primaryMarkItems,
            "divider",
            ...secondaryMarkItems
        ]
    }
];
// ../react/src/toolbar-plugin/items/index.tsx
var largeItems = [
    blockDropdownItem,
    "divider",
    ...expandedMarkItems,
    "divider",
    linkItem,
    ...dropdownItems,
    "divider",
    ...expandedDialogItems
];
var mediumItems = [
    blockDropdownItem,
    "divider",
    ...expandedMarkItems,
    "divider",
    linkItem,
    ...dropdownItems,
    "divider",
    ...compactDialogItems
];
var smallItems = [
    blockDropdownItem,
    "divider",
    ...compactMarkItems,
    "divider",
    linkItem,
    ...dropdownItems,
    "divider",
    ...compactDialogItems
];
var initialItems = [
    blockDropdownItem,
    "divider"
];
var itemSets = [
    largeItems,
    mediumItems,
    smallItems
];
// ../react/src/toolbar-plugin/components/toolbar/toolbar-button.tsx
init_react_shim();
function ToolbarButton({ active, item }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    const ref = _react.useRef.call(void 0, null);
    const tooltip = useTooltip({
        title: item.title,
        hotkey: ()=>item.hotkey ? formatHotkey(item.hotkey) : void 0
    });
    const menuLayer = useLayer("menu");
    const openMenu = _react.useCallback.call(void 0, ()=>{
        const dest = ref.current;
        const items = item.children;
        const Component = item.Component;
        if (!dest) return;
        if (items) menuLayer.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, Menu, {
                dest,
                items,
                close: menuLayer.close
            }));
        else if (Component) menuLayer.open(()=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, Component, {
                dest,
                close: menuLayer.close
            }));
    }, [
        item
    ]);
    const onClick = _react.useCallback.call(void 0, ()=>{
        if (item.action) {
            item.action(editor);
            _slatereact.ReactEditor.focus(editor);
            return;
        }
        if (menuLayer.layer) menuLayer.close();
        else openMenu();
    }, [
        menuLayer.layer,
        item
    ]);
    const onMouseEnter = _react.useCallback.call(void 0, (e)=>{
        tooltip.onMouseEnter(e);
        if (menuLayer.layer) openMenu();
    }, [
        menuLayer.layer
    ]);
    return /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $ToolbarButton, {
        "data-item-type": "button",
        ref,
        onMouseEnter,
        onMouseLeave: tooltip.onMouseLeave,
        onClick,
        className: _clsx.clsx.call(void 0, {
            "--active": active,
            "--more": item.more
        }),
        children: [
            /* @__PURE__ */ _jsxruntime.jsx.call(void 0, item.icon, {}),
            item.more ? /* @__PURE__ */ _jsxruntime.jsx.call(void 0, More, {}) : null
        ]
    });
}
// ../react/src/toolbar-plugin/components/toolbar/toolbar.tsx
function ToolbarItem({ item }) {
    const editor = _slatereact.useSlateStatic.call(void 0);
    if (item === "divider") return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ToolbarDividerContainer, {
        "data-item-type": "divider",
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ToolbarDivider, {})
    });
    const show = item.show === void 0 ? true : item.show(editor);
    if (!show) return null;
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, ToolbarButton, {
        item
    });
}
function getWidths(toolbar) {
    const button = toolbar.querySelector("[data-item-type=button]");
    const divider = toolbar.querySelector("[data-item-type=divider]");
    if (!button || !divider) throw new Error("Button or divider not found");
    return {
        toolbar: toolbar.offsetWidth,
        button: button.offsetWidth,
        divider: divider.offsetWidth
    };
}
function measureItemSetWidth(items, buttonWidth, dividerWidth) {
    let width = 0;
    for (const item of items)width += item === "divider" ? dividerWidth : buttonWidth;
    return width;
}
function Toolbar() {
    const ref = _react.useRef.call(void 0, null);
    const [items, setItems] = _react.useState.call(void 0, initialItems);
    _react.useEffect.call(void 0, ()=>{
        const refresh = _lodashthrottle2.default.call(void 0, ()=>{
            const toolbar = ref.current;
            if (!toolbar) throw new Error("Toolbar not found");
            const widths = getWidths(toolbar);
            for(let i = 0; i < itemSets.length - 1; i++){
                const itemSetWidth = measureItemSetWidth(itemSets[i], widths.button, widths.divider);
                if (itemSetWidth < widths.toolbar) {
                    setItems(itemSets[i]);
                    return;
                }
            }
            setItems(itemSets[itemSets.length - 1]);
        }, 100, {
            trailing: true
        });
        refresh();
        window.addEventListener("resize", refresh);
        return ()=>{
            window.removeEventListener("resize", refresh);
        };
    }, []);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $ToolbarContainer, {
        ref,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, $Toolbar, {
            children: items.map((item, index2)=>/* @__PURE__ */ _jsxruntime.jsx.call(void 0, ToolbarItem, {
                    item
                }, typeof item === "string" ? index2 : item.title))
        })
    });
}
// ../react/src/toolbar-plugin/render-editable/index.tsx
function renderEditable({ attributes, Editable: Editable3 }) {
    const outerContainerRef = _react.useRef.call(void 0, null);
    const editor = _slatereact.useSlateStatic.call(void 0);
    const focused = _slatereact.useFocused.call(void 0);
    const onClickOuterContainer = _react.useCallback.call(void 0, (e)=>{
        if (e.target !== e.currentTarget) return;
        _slate.Transforms.select(editor, _slate.Editor.end(editor, []));
        _slatereact.ReactEditor.focus(editor);
    }, [
        editor
    ]);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Layers, {
        children: /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, $OuterContainer, {
            ref: outerContainerRef,
            className: _clsx.clsx.call(void 0, {
                "--focused": focused
            }),
            style: {
                height: editor.toolbar.height,
                minHeight: editor.toolbar.minHeight,
                maxHeight: editor.toolbar.maxHeight
            },
            onClick: onClickOuterContainer,
            children: [
                /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Toolbar, {}),
                /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Editable3, {
                    as: $Editable,
                    ...attributes,
                    style: {
                        overflowY: "auto"
                    }
                })
            ]
        })
    });
}
// ../react/src/toolbar-plugin/index.tsx
var ToolbarPlugin = createPlugin((editor, options)=>{
    editor.toolbar = {
        height: _optionalChain([
            options,
            "access",
            (_27)=>_27.toolbar,
            "optionalAccess",
            (_28)=>_28.height
        ]),
        minHeight: _optionalChain([
            options,
            "access",
            (_29)=>_29.toolbar,
            "optionalAccess",
            (_30)=>_30.minHeight
        ]),
        maxHeight: _optionalChain([
            options,
            "access",
            (_31)=>_31.toolbar,
            "optionalAccess",
            (_32)=>_32.maxHeight
        ]),
        showUploadButtons: _nullishCoalesce(_optionalChain([
            options,
            "access",
            (_33)=>_33.toolbar,
            "optionalAccess",
            (_34)=>_34.showUploadButtons
        ]), ()=>true)
    };
    return {
        name: "toolbar",
        editor: {},
        renderEditable,
        editableProps: {}
    };
});
// ../react/src/trailing-block-plugin/index.tsx
init_react_shim();
var TrailingBlockPlugin = createPlugin((editor)=>{
    editor.allowTrailingBlock = true;
    return {
        name: "trailing-block",
        editor: {
            normalizeNode: (entry)=>{
                if (!_slate.Editor.isEditor(entry[0])) return false;
                const lastPath = [
                    editor.children.length - 1
                ];
                const lastElement = _slate.Node.child(editor, editor.children.length - 1);
                if (_slate.Editor.hasBlocks(editor, lastElement) || _slate.Editor.isVoid(editor, lastElement)) _slate.Transforms.insertNodes(editor, {
                    type: "paragraph",
                    children: [
                        {
                            text: ""
                        }
                    ]
                }, {
                    at: _slate.Path.next(lastPath)
                });
                return true;
            }
        }
    };
});
// ../react/src/upload-plugin/index.tsx
init_react_shim();
var _client3 = require("52d8635b59957b97");
// ../react/src/upload-plugin/methods/index.ts
init_react_shim();
// ../react/src/upload-plugin/methods/setElementTimeTraveling.ts
init_react_shim();
function extractLastOp(history) {
    const lastBatch = history.undos[history.undos.length - 1];
    return lastBatch.operations[lastBatch.operations.length - 1];
}
function extractSetNodeOp(history) {
    const lastOp = extractLastOp(history);
    if (lastOp.type !== "set_node") throw new Error(`Expected set_node operation, got ${lastOp.type}.`);
    return lastOp;
}
function setElementTimeTraveling(editor, prev, next) {
    const keys2 = Object.keys(prev);
    const key2 = keys2[0];
    const prevValue = prev[key2];
    const { undos } = editor.history;
    for (const undo of undos){
        for (const op of undo.operations)if ((op.type === "insert_node" || op.type === "remove_node") && op.node[key2] === prevValue) op.node = {
            ...op.node,
            ...next
        };
    }
    const nodeEntries = [
        ..._slate.Editor.nodes(editor, {
            mode: "all",
            at: [],
            match: (n)=>_slate.Element.isElement(n) && /**
       * We can typecast here because when we know `n.type` is the same as
       * `el.type`, we know that `n` is of type `T`.
       */ n[key2] === prevValue
        })
    ];
    for (const nodeEntry of nodeEntries){
        _slate.Transforms.setNodes(editor, next, {
            at: nodeEntry[1]
        });
        const lastSetNodeOp = extractSetNodeOp(editor.history);
        lastSetNodeOp.properties = next;
    }
}
// ../react/src/upload-plugin/methods/upload.ts
init_react_shim();
var _nanoid = require("c02eee7f9e69b513");
function upload(editor, file) {
    const { client } = editor.upload;
    if (client === void 0) throw new Error(`Expected editor.upload.client to be defined if upload is being called`);
    const hashUrl = `$${_nanoid.nanoid.call(void 0)}`;
    const objectUrl = URL.createObjectURL(file);
    _client3.uploadFile.call(void 0, {
        client,
        file,
        onBeforeFetch: ({ clientFile })=>{
            setUpload(editor, hashUrl, {
                status: "progress",
                url: objectUrl,
                sentBytes: 0,
                totalBytes: clientFile.bytes
            });
            if (clientFile.type === "image") {
                if (editor.upload.onUploadImageFile({
                    hashUrl,
                    file,
                    width: clientFile.width,
                    height: clientFile.height
                })) return true;
            }
            if (editor.upload.onUploadFile({
                hashUrl,
                file
            })) return true;
            return false;
        },
        onProgress: ({ sentBytes, totalBytes })=>{
            setUpload(editor, hashUrl, {
                status: "progress",
                url: objectUrl,
                sentBytes,
                totalBytes
            });
        },
        onError: (e)=>{
            setUpload(editor, hashUrl, {
                status: "error",
                url: objectUrl,
                message: e.message
            });
        },
        onSuccess: (e)=>{
            setUpload(editor, hashUrl, {
                status: "success",
                url: e.hostedFile.url
            });
            if (e.hostedFile.type === "image") {
                if (editor.upload.onUploadImageFileSuccess({
                    hashUrl,
                    file,
                    width: e.hostedFile.width,
                    height: e.hostedFile.height,
                    url: e.hostedFile.url
                })) return true;
            }
            editor.upload.onUploadFileSuccess({
                hashUrl,
                file,
                url: e.hostedFile.url
            });
        }
    });
    return false;
}
// ../react/src/upload-plugin/methods/index.ts
function createUploadMethods(editor) {
    return {
        upload: curryOne(upload, editor),
        setElementTimeTraveling: (prev, next)=>setElementTimeTraveling(editor, prev, next)
    };
}
// ../react/src/upload-plugin/index.tsx
var UploadPlugin = //({ authToken }: { authToken?: string }) =>
createPlugin((editor, options)=>{
    const authToken = _optionalChain([
        options,
        "access",
        (_35)=>_35.upload,
        "optionalAccess",
        (_36)=>_36.authToken
    ]);
    if (!authToken) console.warn(`No authToken provided. Uploads are disabled.`);
    const client = authToken ? _client3.createClient.call(void 0, {
        authToken
    }) : void 0;
    editor.upload = {
        client,
        onUploadImageFile: ()=>{
            console.log("called onUploadImageFile");
            return false;
        },
        onUploadFile: ()=>{
            console.log("called onUploadFile");
            return false;
        },
        onUploadImageFileSuccess: ()=>{
            console.log("called onUploadImageFileSuccess");
            return false;
        },
        onUploadFileSuccess: ()=>{
            console.log("called onUploadFileSuccess");
            return false;
        },
        useUploadStore: createUploadStore(),
        ...createUploadMethods(editor)
    };
    const editableProps = authToken ? {
        onPaste (e) {
            const files = _optionalChain([
                e,
                "access",
                (_37)=>_37.nativeEvent,
                "access",
                (_38)=>_38.clipboardData,
                "optionalAccess",
                (_39)=>_39.files
            ]);
            if (!files || files.length === 0) return false;
            for (const file of files)editor.upload.upload(file);
            return true;
        },
        onDrop (e) {
            const files = _optionalChain([
                e,
                "access",
                (_40)=>_40.nativeEvent,
                "access",
                (_41)=>_41.dataTransfer,
                "optionalAccess",
                (_42)=>_42.files
            ]);
            if (!files || files.length === 0) return false;
            for (const file of files)editor.upload.upload(file);
            return true;
        }
    } : {};
    return {
        name: "upload",
        editor: {},
        editableProps
    };
});
// ../react/src/attachment-plugin/index.tsx
init_react_shim();
var AttachmentPlugin = createPlugin((editor, options, { createPolicy })=>{
    editor.attachment = {};
    editor.upload.onUploadFile = ({ hashUrl, file })=>{
        const { selection } = editor;
        _slate.Transforms.insertText(editor, `\u{1F517} `);
        _slate.Transforms.insertNodes(editor, {
            type: "anchor",
            href: hashUrl,
            children: [
                {
                    text: file.name
                }
            ]
        });
        if (!selection) {
            const lastPos = _slate.Editor.end(editor, []);
            _slate.Transforms.select(editor, lastPos);
            _slatereact.ReactEditor.focus(editor);
        }
        _slate.Transforms.move(editor, {
            distance: 1,
            unit: "offset"
        });
        return true;
    };
    editor.upload.onUploadFileSuccess = (e)=>{
        editor.upload.setElementTimeTraveling({
            href: e.hashUrl
        }, {
            href: e.url
        });
        return true;
    };
    return createPolicy({
        name: "attachment"
    });
});
// ../react/src/paste-markdown-plugin/index.tsx
init_react_shim();
// ../react/src/paste-markdown-plugin/methods/index.ts
init_react_shim();
function pasteMarkdown(editor, markdown) {
    const fragment = parse2(markdown);
    _slate.Transforms.insertNodes(editor, fragment);
}
function createPasteMarkdownMethods(editor) {
    return {
        pasteMarkdown: curryOne(pasteMarkdown, editor)
    };
}
// ../react/src/paste-markdown-plugin/index.tsx
var PasteMarkdownPlugin = createPlugin((editor)=>{
    editor.pasteMarkdown = createPasteMarkdownMethods(editor);
    return {
        name: "paste-markdown",
        editor: {},
        editableProps: {
            onPaste (e) {
                const { types } = e.clipboardData;
                if (types.length !== 1 || types[0] !== "text/plain") return false;
                const markdown = e.clipboardData.getData("text/plain");
                editor.pasteMarkdown.pasteMarkdown(markdown);
                stopEvent(e);
                return true;
            }
        }
    };
});
// ../react/src/placeholder-plugin/index.tsx
init_react_shim();
function renderPlaceholder(props) {
    const nextAttributes = {
        ...props.attributes,
        style: {
            ...props.attributes.style,
            width: void 0,
            maxWidth: void 0
        }
    };
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
        ...nextAttributes,
        children: props.children
    });
}
var PlaceholderPlugin = createPlugin((editor, options, { createPolicy })=>{
    editor.placeholder = {};
    return createPolicy({
        name: "placeholder",
        editableProps: {
            renderPlaceholder
        }
    });
});
// ../react/src/entry/plugins.ts
var plugins = [
    PasteMarkdownPlugin,
    ConvertElementPlugin,
    AnchorPlugin,
    HeadingPlugin,
    MarksPlugin,
    InlineCodePlugin,
    BlockQuotePlugin,
    CodeBlockPlugin,
    TablePlugin,
    HorizontalRulePlugin,
    TrailingBlockPlugin,
    ListPlugin,
    AtomicDeletePlugin,
    NormalizeAfterDeletePlugin,
    CollapsibleParagraphPlugin,
    ThemePlugin,
    ToolbarPlugin,
    UploadPlugin,
    AttachmentPlugin,
    ImagePlugin,
    PlaceholderPlugin
];
// ../react/src/entry/SinkEditable.tsx
var Sink = createSink(plugins);
var { withSink, SinkEditable: SinkEditable2 } = Sink;
// ../react/src/entry/useEditor.tsx
init_react_shim();
var _slatehistory = require("7847f450b7671dc4");
function useEditor({ authToken, height, minHeight, maxHeight }) {
    const [editor] = _react.useState.call(void 0, ()=>{
        const editor2 = _slate.createEditor.call(void 0);
        const nextEditor = withSink(_slatereact.withReact.call(void 0, _slatehistory.withHistory.call(void 0, editor2)), {
            upload: {
                authToken
            },
            image: {},
            toolbar: {
                height,
                minHeight,
                maxHeight,
                /**
         * If `authToken` is provided then show upload buttons.
         */ showUploadButtons: !!authToken
            }
        });
        nextEditor.convertElement.addConvertElementType("paragraph");
        editor2.wysimark = {
        };
        editor2.getMarkdown = ()=>{
            return serialize2(editor2.children);
        };
        editor2.setMarkdown = (markdown)=>{
            const documentValue = parse2(markdown);
            editor2.children = documentValue;
            editor2.selection = null;
            _slate.Transforms.select(editor2, _slate.Editor.start(editor2, [
                0
            ]));
        };
        return nextEditor;
    });
    return editor;
}
// ../react/src/entry/index.tsx
function renderLeaf({ children, attributes }) {
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "span", {
        ...attributes,
        children
    });
}
function Editable2({ editor, value, onChange, throttleInMs = 1e3, placeholder, className, style }) {
    const ignoreNextChangeRef = _react.useRef.call(void 0, false);
    const initialValueRef = _react.useRef.call(void 0);
    const prevValueRef = _react.useRef.call(void 0);
    const onThrottledSlateChange = _react.useCallback.call(void 0, _lodashthrottle2.default.call(void 0, ()=>{
        const markdown = serialize2(editor.children);
        editor.wysimark.prevValue = {
            markdown,
            children: editor.children
        };
        onChange(markdown);
    }, throttleInMs, {
        leading: false,
        trailing: true
    }), [
        editor,
        onChange,
        throttleInMs
    ]);
    const onSlateChange = _react.useCallback.call(void 0, ()=>{
        if (prevValueRef.current === editor.children) return;
        prevValueRef.current = editor.children;
        onThrottledSlateChange();
    }, [
        onThrottledSlateChange
    ]);
    if (editor.wysimark.prevValue == null || initialValueRef.current == null) {
        ignoreNextChangeRef.current = true;
        const children = parse2(value);
        prevValueRef.current = initialValueRef.current = children;
        editor.wysimark.prevValue = {
            markdown: value,
            children
        };
    } else if (value !== editor.wysimark.prevValue.markdown) {
        ignoreNextChangeRef.current = true;
        const documentValue = parse2(value);
        editor.children = documentValue;
        editor.selection = null;
        _slate.Transforms.select(editor, _slate.Editor.start(editor, [
            0
        ]));
    }
    const onSinkeEditableMouseDown = _react.useCallback.call(void 0, ()=>{
        if (navigator.userAgent.toLowerCase().includes("firefox")) _slatereact.ReactEditor.focus(editor);
    }, [
        editor
    ]);
    const onBlur = _react.useCallback.call(void 0, ()=>{
        onThrottledSlateChange.flush();
    }, [
        onThrottledSlateChange
    ]);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _slatereact.Slate, {
        editor,
        value: initialValueRef.current,
        onChange: onSlateChange,
        children: /* @__PURE__ */ _jsxruntime.jsx.call(void 0, SinkEditable2, {
            renderLeaf,
            onMouseDown: onSinkeEditableMouseDown,
            onBlur,
            placeholder,
            className,
            style
        })
    });
}
// src/entry/index.tsx
function StandaloneEditor({ standaloneOptions: { onChange, placeholder, ...options }, standaloneMethodsRef }) {
    const [markdown, setMarkdown] = _react.useState.call(void 0, options.initialMarkdown || "");
    const markdownRef = _react.useRef.call(void 0, markdown);
    const editor = useEditor(options);
    markdownRef.current = markdown;
    _react.useImperativeHandle.call(void 0, standaloneMethodsRef, ()=>{
        return {
            getMarkdown () {
                return markdownRef.current;
            },
            setMarkdown (markdown2) {
                markdownRef.current = markdown2;
                setMarkdown(markdown2);
            }
        };
    }, [
        markdownRef,
        setMarkdown
    ]);
    const onChangeEditable = _react.useCallback.call(void 0, (markdown2)=>{
        markdownRef.current = markdown2;
        setMarkdown(markdown2);
        _optionalChain([
            onChange,
            "optionalCall",
            (_43)=>_43(markdown2)
        ]);
    }, [
        editor
    ]);
    return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, Editable2, {
        editor,
        value: markdown,
        onChange: onChangeEditable,
        placeholder
    });
}
function createWysimark(containerElement, options) {
    const standaloneMethodsRef = _react.createRef.call(void 0);
    const root = _client.createRoot.call(void 0, containerElement);
    root.render(/* @__PURE__ */ _jsxruntime.jsx.call(void 0, StandaloneEditor, {
        standaloneMethodsRef,
        standaloneOptions: options
    }));
    return {
        unmount () {
            try {
                root.unmount();
            } catch (e) {}
        },
        getMarkdown () {
            return _optionalChain([
                standaloneMethodsRef,
                "access",
                (_44)=>_44.current,
                "optionalAccess",
                (_45)=>_45.getMarkdown,
                "call",
                (_46)=>_46()
            ]) || "";
        },
        setMarkdown (markdown) {
            _optionalChain([
                standaloneMethodsRef,
                "access",
                (_47)=>_47.current,
                "optionalAccess",
                (_48)=>_48.setMarkdown,
                "call",
                (_49)=>_49(markdown)
            ]);
        }
    };
}
exports.createWysimark = createWysimark; /*! Bundled license information:

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/ 

},{"26c68d34452fa7ec":"21dqq","d0ea530ad52caa8f":"lOjBx","a6eb89848ced5f77":"bGJVT","b94affb311b8d9ed":"bnHwp","d7b7895a02002429":"4vqEy","301311932d6208d7":"6AEwr","28432296ea6ddc1":"99PmY","8d41387af59919b0":"gZDpG","c6e5990497749bc8":"83C22","ecc9b2f4818ce8f3":"cPNyt","6df23693577508f6":"j6uA9","9f881907f53c2762":"b6wSj","c1726e0c075867dc":"gARFp","aa85594e93d90be8":"9qiaY","b2606339f2d7dbf":"gw7fg","8ab381e9535cf6c9":"8FG86","52d8635b59957b97":"dzeg5","c02eee7f9e69b513":"2ifus","7847f450b7671dc4":"03QgC"}],"21dqq":[function(require,module,exports) {
"use strict";
module.exports = require("a569817e6ea559f6");

},{"a569817e6ea559f6":"6YvXz"}],"6YvXz":[function(require,module,exports) {
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var ReactVersion = "18.2.0";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: null
    };
    var ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ""; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || "";
        return stack;
    };
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning("warn", format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
        }
    };
    var assign = Object.assign;
    var emptyObject = {};
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
        isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = "" + config.key;
            }
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (element === null || element === undefined) throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = assign({}, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = "" + config.key;
            } // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = ".";
    var SUBSEPARATOR = ":";
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            "=": "=0",
            ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return "$" + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === "object" && element !== null && element.key != null) {
            checkKeyStringCoercion(element.key);
            return escape("" + element.key);
        } // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case "string":
            case "number":
                invokeCallback = true;
                break;
            case "object":
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                    // The `if` statement here prevents auto-disabling of the safe
                    // coercion ESLint rule, so we must manually disable it below.
                    // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) checkKeyStringCoercion(mappedChild.key);
                    mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === "object") {
                // eslint-disable-next-line react-internal/safe-string-coercion
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue) {
        // TODO: Second argument used to be an optional `calculateChangedBits`
        // function. Warn to reserve for future use?
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            // This might throw either because it's missing or throws. If so, we treat it
            // as still uninitialized and try again next time. Which is the same as what
            // happens if the ctor or any wrappers processing the ctor throws. This might
            // end up fixing it if the resolution was a concurrency bug.
            thenable.then(function(moduleObject) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject;
                }
            }, function(error) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
            if (payload._status === Uninitialized) {
                // In case, we're still uninitialized, then we're waiting for the thenable
                // to resolve. Set it as pending in the meantime.
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
            }
        }
        if (payload._status === Resolved) {
            var moduleObject = payload._result;
            if (moduleObject === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            if (!("default" in moduleObject)) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            return moduleObject.default;
        } else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, "defaultProps", {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, "propTypes", {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== "function") error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
        else if (render.length !== 0 && render.length !== 2) error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.forwardRef((props, ref) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!render.name && !render.displayName) render.displayName = name;
            }
        });
        return elementType;
    }
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.memo((props) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!type.name && !type.displayName) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (dispatcher === null) error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        // intentionally don't throw our own error because this is in a hot path.
        // Also helps ensure this is inlined.
        return dispatcher;
    }
    function useContext(Context) {
        var dispatcher = resolveDispatcher();
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
    }
    function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) return "\n\nCheck the render method of `" + name + "`.";
        }
        return "";
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return "";
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== "object") return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === "string") return;
        var propTypes;
        if (typeof type === "function") propTypes = type.propTypes;
        else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = "null";
            else if (isArray(type)) typeString = "array";
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        try {
            scope();
        } finally{
            ReactCurrentBatchConfig.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
        if (enqueueTaskImpl === null) try {
            // read require off the module object to get around the bundlers.
            // we don't want them to detect a require and bundle a Node polyfill.
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
            // version of setImmediate, bypassing fake timers if any.
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
        } catch (_err) {
            // we're in a browser
            // we can't use regular timers because they may still be faked
            // so we try MessageChannel+postMessage instead
            enqueueTaskImpl = function(callback) {
                if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(undefined);
            };
        }
        return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
        // `act` calls can be nested, so we track the depth. This represents the
        // number of `act` scopes on the stack.
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) // This is the outermost `act` scope. Initialize the queue. The reconciler
        // will detect the queue and use it instead of Scheduler.
        ReactCurrentActQueue.current = [];
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
            // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
            // set to `true` while the given callback is executed, not for updates
            // triggered during an async event, because this is how the legacy
            // implementation of `act` behaved.
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
            // which flushed updates immediately after the scope function exits, even
            // if it's an async function.
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                }
            }
        } catch (error) {
            popActScope(prevActScopeDepth);
            throw error;
        } finally{
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
            // for it to resolve before exiting the current scope.
            var wasAwaited = false;
            var thenable = {
                then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue) {
                        popActScope(prevActScopeDepth);
                        if (actScopeDepth === 0) // We've exited the outermost act scope. Recursively flush the
                        // queue until there's no remaining work.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        else resolve(returnValue);
                    }, function(error) {
                        // The callback threw an error.
                        popActScope(prevActScopeDepth);
                        reject(error);
                    });
                }
            };
            if (!didWarnNoAwaitAct && typeof Promise !== "undefined") // eslint-disable-next-line no-undef
            Promise.resolve().then(function() {}).then(function() {
                if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
            });
            return thenable;
        } else {
            var returnValue = result; // The callback is not an async function. Exit the current scope
            // immediately, without awaiting.
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
                // Exiting the outermost act scope. Flush the queue.
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                } // Return a thenable. If the user awaits it, we'll flush again in
                // case additional work was scheduled by a microtask.
                var _thenable = {
                    then: function(resolve, reject) {
                        // Confirm we haven't re-entered another `act` scope, in case
                        // the user does something weird like await the thenable
                        // multiple times.
                        if (ReactCurrentActQueue.current === null) {
                            // Recursively flush the queue until there's no remaining work.
                            ReactCurrentActQueue.current = [];
                            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        } else resolve(returnValue);
                    }
                };
                return _thenable;
            } else {
                // Since we're inside a nested `act` scope, the returned thenable
                // immediately resolves. The outer scope will flush the queue.
                var _thenable2 = {
                    then: function(resolve, reject) {
                        resolve(returnValue);
                    }
                };
                return _thenable2;
            }
        }
    }
    function popActScope(prevActScopeDepth) {
        if (prevActScopeDepth !== actScopeDepth - 1) error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) try {
            flushActQueue(queue);
            enqueueTask(function() {
                if (queue.length === 0) {
                    // No additional work was scheduled. Finish.
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                } else // Keep flushing work until there's none left.
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
        } catch (error) {
            reject(error);
        }
        else resolve(returnValue);
    }
    var isFlushing = false;
    function flushActQueue(queue) {
        if (!isFlushing) {
            // Prevent re-entrance.
            isFlushing = true;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(true);
                    while (callback !== null);
                }
                queue.length = 0;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                queue = queue.slice(i + 1);
                throw error;
            } finally{
                isFlushing = false;
            }
        }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"lOjBx":[function(require,module,exports) {
"use strict";
var m = require("aaccff5d309d9239");
var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
exports.createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.createRoot(c, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};
exports.hydrateRoot = function(c, h, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.hydrateRoot(c, h, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};

},{"aaccff5d309d9239":"j6uA9"}],"j6uA9":[function(require,module,exports) {
"use strict";
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error("^_^");
}
module.exports = require("b0f0e6b9e8349dac");

},{"b0f0e6b9e8349dac":"3iA9v"}],"3iA9v":[function(require,module,exports) {
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = require("6f0162e9ab224cd4");
    var Scheduler = require("8ad4ca65319d28a7");
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
    } // In DEV, calls to console.warn and console.error get replaced
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        if (!suppressWarning) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            printWarning("warn", format, args);
        }
    }
    function error(format) {
        if (!suppressWarning) {
            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
            printWarning("error", format, args);
        }
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    // -----------------------------------------------------------------------------
    var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
    // the react-reconciler package.
    var enableNewReconciler = false; // Support legacy Primer support on internal FB www
    var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
    // React DOM Chopping Block
    //
    // Similar to main Chopping Block but only flags related to React DOM. These are
    // grouped because we will likely batch all of them into a single major release.
    // -----------------------------------------------------------------------------
    // Disable support for comment nodes as React DOM containers. Already disabled
    // in open source, but www codebase still relies on it. Need to remove.
    var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
    // and client rendering, mostly to allow JSX attributes to apply to the custom
    // element's object properties instead of only HTML attributes.
    // https://github.com/facebook/react/issues/11347
    var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
    var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
    // Debugging and DevTools
    // -----------------------------------------------------------------------------
    // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
    // for an experimental timeline tool.
    var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {};
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === "onDoubleClick") possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error("Invalid attribute name: `%s`", attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case "function":
            case "symbol":
                // eslint-disable-line
                return true;
            case "boolean":
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== "data-" && prefix !== "aria-";
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            "acceptCharset",
            "accept-charset"
        ],
        [
            "className",
            "class"
        ],
        [
            "htmlFor",
            "for"
        ],
        [
            "httpEquiv",
            "http-equiv"
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        "contentEditable",
        "draggable",
        "spellCheck",
        "value"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        "autoReverse",
        "externalResourcesRequired",
        "focusable",
        "preserveAlpha"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        "allowFullScreen",
        "async",
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        "checked",
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        "capture",
        "download" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        "cols",
        "rows",
        "size",
        "span" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        "rowSpan",
        "start"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
    }); // String SVG attributes with the xml namespace.
    [
        "xml:base",
        "xml:lang",
        "xml:space" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        "tabIndex",
        "crossOrigin"
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = "xlinkHref";
    properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    [
        "src",
        "href",
        "action",
        "formAction"
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            checkAttributeStringCoercion(expected, name);
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            // eslint-disable-next-line react-internal/safe-string-coercion
            sanitizeURL("" + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                     // eslint-disable-next-line react-internal/safe-string-coercion
                    if (value === "" + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
            else if (stringValue === "" + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        checkAttributeStringCoercion(expected, name);
        if (value === "" + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else {
                    checkAttributeStringCoercion(value, name);
                    node.setAttribute(_attributeName, "" + value);
                }
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = "";
            else {
                checkAttributeStringCoercion(value, attributeName);
                attributeValue = "" + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_CACHE_TYPE = Symbol.for("react.cache");
    var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return "";
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = "";
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node);
            return info;
        } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    } // Keep in sync with shared/getComponentNameFromType
    function getContextName$1(type) {
        return type.displayName || "Context";
    }
    function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch(tag){
            case CacheComponent:
                return "Cache";
            case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
            case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
                return "DehydratedFragment";
            case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment:
                return "Fragment";
            case HostComponent:
                // Host component type is the display name (e.g. "div", "View")
                return type;
            case HostPortal:
                return "Portal";
            case HostRoot:
                return "Root";
            case HostText:
                return "Text";
            case LazyComponent:
                // Name comes from the type in this case; we don't have a tag.
                return getComponentNameFromType(type);
            case Mode:
                if (type === REACT_STRICT_MODE_TYPE) // Don't be less specific than shared/getComponentNameFromType
                return "StrictMode";
                return "Mode";
            case OffscreenComponent:
                return "Offscreen";
            case Profiler:
                return "Profiler";
            case ScopeComponent:
                return "Scope";
            case SuspenseComponent:
                return "Suspense";
            case SuspenseListComponent:
                return "SuspenseList";
            case TracingMarkerComponent:
                return "TracingMarker";
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
                if (typeof type === "function") return type.displayName || type.name || null;
                if (typeof type === "string") return type;
                break;
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== "undefined") return getComponentNameFromFiber(owner);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return "";
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function getCurrentFiber() {
        return current;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        // The coercion safety check is performed in getToStringValue().
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case "boolean":
            case "number":
            case "string":
            case "undefined":
                return value;
            case "object":
                checkFormFieldValueStringCoercion(value);
                return value;
            default:
                // function, symbol are assigned as empty strings
                return "";
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = "";
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? "true" : "false";
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : undefined);
        if (typeof doc === "undefined") return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps("input", props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, "checked", checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === "submit" || type === "reset") {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute("value");
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty("value")) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty("defaultValue")) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset"; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== "") node.name = "";
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== "") node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            checkAttributeStringCoercion(name, "name");
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // If a value is not provided, then the children must be simple.
        if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) React.Children.forEach(props.children, function(child) {
                if (child == null) return;
                if (typeof child === "string" || typeof child === "number") return;
                if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
            });
            else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
            }
        } // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute("value", toString(getToStringValue(props.value)));
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return "\n\nCheck the render method of `" + ownerName + "`.";
        return "";
    }
    var valuePropNames = [
        "value",
        "defaultValue"
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps("select", props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && propNameIsArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue["$" + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$1(element, props) {
        return assign({}, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps("textarea", props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (defaultValue != null) throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (isArray(children)) {
                    if (children.length > 1) throw new Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = "";
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
    var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
    var SVG_NAMESPACE = "http://www.w3.org/2000/svg"; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case "svg":
                return SVG_NAMESPACE;
            case "math":
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            "animationDelay",
            "animationDirection",
            "animationDuration",
            "animationFillMode",
            "animationIterationCount",
            "animationName",
            "animationPlayState",
            "animationTimingFunction"
        ],
        background: [
            "backgroundAttachment",
            "backgroundClip",
            "backgroundColor",
            "backgroundImage",
            "backgroundOrigin",
            "backgroundPositionX",
            "backgroundPositionY",
            "backgroundRepeat",
            "backgroundSize"
        ],
        backgroundPosition: [
            "backgroundPositionX",
            "backgroundPositionY"
        ],
        border: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth",
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth",
            "borderLeftColor",
            "borderLeftStyle",
            "borderLeftWidth",
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth",
            "borderTopColor",
            "borderTopStyle",
            "borderTopWidth"
        ],
        borderBlockEnd: [
            "borderBlockEndColor",
            "borderBlockEndStyle",
            "borderBlockEndWidth"
        ],
        borderBlockStart: [
            "borderBlockStartColor",
            "borderBlockStartStyle",
            "borderBlockStartWidth"
        ],
        borderBottom: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth"
        ],
        borderColor: [
            "borderBottomColor",
            "borderLeftColor",
            "borderRightColor",
            "borderTopColor"
        ],
        borderImage: [
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth"
        ],
        borderInlineEnd: [
            "borderInlineEndColor",
            "borderInlineEndStyle",
            "borderInlineEndWidth"
        ],
        borderInlineStart: [
            "borderInlineStartColor",
            "borderInlineStartStyle",
            "borderInlineStartWidth"
        ],
        borderLeft: [
            "borderLeftColor",
            "borderLeftStyle",
            "borderLeftWidth"
        ],
        borderRadius: [
            "borderBottomLeftRadius",
            "borderBottomRightRadius",
            "borderTopLeftRadius",
            "borderTopRightRadius"
        ],
        borderRight: [
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth"
        ],
        borderStyle: [
            "borderBottomStyle",
            "borderLeftStyle",
            "borderRightStyle",
            "borderTopStyle"
        ],
        borderTop: [
            "borderTopColor",
            "borderTopStyle",
            "borderTopWidth"
        ],
        borderWidth: [
            "borderBottomWidth",
            "borderLeftWidth",
            "borderRightWidth",
            "borderTopWidth"
        ],
        columnRule: [
            "columnRuleColor",
            "columnRuleStyle",
            "columnRuleWidth"
        ],
        columns: [
            "columnCount",
            "columnWidth"
        ],
        flex: [
            "flexBasis",
            "flexGrow",
            "flexShrink"
        ],
        flexFlow: [
            "flexDirection",
            "flexWrap"
        ],
        font: [
            "fontFamily",
            "fontFeatureSettings",
            "fontKerning",
            "fontLanguageOverride",
            "fontSize",
            "fontSizeAdjust",
            "fontStretch",
            "fontStyle",
            "fontVariant",
            "fontVariantAlternates",
            "fontVariantCaps",
            "fontVariantEastAsian",
            "fontVariantLigatures",
            "fontVariantNumeric",
            "fontVariantPosition",
            "fontWeight",
            "lineHeight"
        ],
        fontVariant: [
            "fontVariantAlternates",
            "fontVariantCaps",
            "fontVariantEastAsian",
            "fontVariantLigatures",
            "fontVariantNumeric",
            "fontVariantPosition"
        ],
        gap: [
            "columnGap",
            "rowGap"
        ],
        grid: [
            "gridAutoColumns",
            "gridAutoFlow",
            "gridAutoRows",
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
        ],
        gridArea: [
            "gridColumnEnd",
            "gridColumnStart",
            "gridRowEnd",
            "gridRowStart"
        ],
        gridColumn: [
            "gridColumnEnd",
            "gridColumnStart"
        ],
        gridColumnGap: [
            "columnGap"
        ],
        gridGap: [
            "columnGap",
            "rowGap"
        ],
        gridRow: [
            "gridRowEnd",
            "gridRowStart"
        ],
        gridRowGap: [
            "rowGap"
        ],
        gridTemplate: [
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
        ],
        listStyle: [
            "listStyleImage",
            "listStylePosition",
            "listStyleType"
        ],
        margin: [
            "marginBottom",
            "marginLeft",
            "marginRight",
            "marginTop"
        ],
        marker: [
            "markerEnd",
            "markerMid",
            "markerStart"
        ],
        mask: [
            "maskClip",
            "maskComposite",
            "maskImage",
            "maskMode",
            "maskOrigin",
            "maskPositionX",
            "maskPositionY",
            "maskRepeat",
            "maskSize"
        ],
        maskPosition: [
            "maskPositionX",
            "maskPositionY"
        ],
        outline: [
            "outlineColor",
            "outlineStyle",
            "outlineWidth"
        ],
        overflow: [
            "overflowX",
            "overflowY"
        ],
        padding: [
            "paddingBottom",
            "paddingLeft",
            "paddingRight",
            "paddingTop"
        ],
        placeContent: [
            "alignContent",
            "justifyContent"
        ],
        placeItems: [
            "alignItems",
            "justifyItems"
        ],
        placeSelf: [
            "alignSelf",
            "justifySelf"
        ],
        textDecoration: [
            "textDecorationColor",
            "textDecorationLine",
            "textDecorationStyle"
        ],
        textEmphasis: [
            "textEmphasisColor",
            "textEmphasisStyle"
        ],
        transition: [
            "transitionDelay",
            "transitionDuration",
            "transitionProperty",
            "transitionTimingFunction"
        ],
        wordWrap: [
            "overflowWrap"
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        "Webkit",
        "ms",
        "Moz",
        "O"
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) return "";
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + "px"; // Presumes implicit 'px' suffix for unitless numbers
        checkCSSPropertyStringCoercion(value, name);
        return ("" + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    var warnValidStyle = function() {};
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error("Unsupported style property %s. Did you mean %s?", name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, "ms-")));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error("`NaN` is an invalid value for the `%s` css style property.", name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error("`Infinity` is an invalid value for the `%s` css style property.", name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf("-") > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === "number") {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = "";
        var delimiter = "";
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") styleName = "cssFloat";
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {};
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = "__html";
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (props.style != null && typeof props.style !== "object") throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) return typeof props.is === "string";
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
    };
    var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    function validateProperty(tagName, name) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
        }).join(", ");
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== "input" && type !== "textarea" && type !== "select") return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {};
    var warnedProperties$1 = {};
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            else error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
        }).join(", ");
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    // This exists to avoid circular dependency between ReactDOMEventReplaying
    // and DOMPluginEventSystem.
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
        if (currentReplayingEvent !== null) error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
        if (currentReplayingEvent === null) error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
        return event === currentReplayingEvent;
    }
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (typeof restoreImpl !== "function") throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var flushSyncImpl = function() {};
    var isInsideEventHandler = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            // TODO: Restore state in the microtask, after the discrete updates flush,
            // instead of early flushing them here.
            flushSyncImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, a, b);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    } // TODO: Replace with flushSync
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (listener && typeof listener !== "function") throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, "passive", {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebook/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (typeof document === "undefined" || document === null) throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent("Event");
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === "object") try {
                        error._suppressLogging = true;
                    } catch (inner) {}
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : "invokeguardedcallback"); // Attach our event handlers
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, "event", windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            } // Remove our event listeners
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var ChildDeletion = /*                */ 16;
    var ContentReset = /*                 */ 32;
    var Callback = /*                     */ 64;
    var DidCapture = /*                   */ 128;
    var ForceClientRender = /*            */ 256;
    var Ref = /*                          */ 512;
    var Snapshot = /*                     */ 1024;
    var Passive = /*                      */ 2048;
    var Hydrating = /*                    */ 4096;
    var Visibility = /*                   */ 8192;
    var StoreConsistency = /*             */ 16384;
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)
    var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 32768;
    var ShouldCapture = /*                */ 65536;
    var ForceUpdateForLegacySuspense = /* */ 131072;
    var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,
    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
    // This enables us to defer more work in the unmount case,
    // since we can defer traversing the tree during layout to look for Passive effects,
    // and instead rely on the static flag as a signal that there may be cleanup work.
    var RefStatic = /*                    */ 2097152;
    var LayoutStatic = /*                 */ 4194304;
    var PassiveStatic = /*                */ 8388608; // These flags allow us to traverse to fibers that have effects on mount
    // without traversing the entire tree after every commit for
    // double invoking
    var MountLayoutDev = /*               */ 16777216;
    var MountPassiveDev = /*              */ 33554432; // Groups of flags that are used in the commit phase to skip over trees that
    // don't contain effects, by checking subtreeFlags.
    var BeforeMutationMask = // flag logic (see #20043)
    Update | Snapshot | 0;
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask
    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
    // This allows certain concepts to persist without recalculating them,
    // e.g. whether a subtree contains passive effects or portals.
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode);
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw new Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) throw new Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (a.alternate !== b) throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (a.tag !== HostRoot) throw new Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) return match;
            child = child.sibling;
        }
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) return match;
            }
            child = child.sibling;
        }
        return null;
    }
    // This module only exists as an ESM wrapper around the external CommonJS
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    // this doesn't actually exist on the scheduler, but it *does*
    // on scheduler/unstable_mock, which we'll need for internal testing
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            if (enableSchedulingProfiler) // Conditionally inject these hooks only if Timeline profiler is supported by this build.
            // This gives DevTools a way to feature detect that isn't tied to version number
            // (since profiling and timeline are controlled by different feature flags).
            internals = assign({}, internals, {
                getLaneLabelMap: getLaneLabelMap,
                injectProfilingHooks: injectProfilingHooks
            });
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error("React instrumentation encountered an error: %s.", err);
        }
        if (hook.checkDCE) // This is the real DevTools.
        return true;
        else // This is likely a hook installed by Fast Refresh runtime.
        return false;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onCommitRoot(root, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
                var schedulerPriority;
                switch(eventPriority){
                    case DiscreteEventPriority:
                        schedulerPriority = ImmediatePriority;
                        break;
                    case ContinuousEventPriority:
                        schedulerPriority = UserBlockingPriority;
                        break;
                    case DefaultEventPriority:
                        schedulerPriority = NormalPriority;
                        break;
                    case IdleEventPriority:
                        schedulerPriority = IdlePriority;
                        break;
                    default:
                        schedulerPriority = NormalPriority;
                        break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
            } else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onPostCommitRoot(root) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") try {
            injectedHook.onPostCommitFiberRoot(rendererID, root);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue === "function") {
            // We're in a test because Scheduler.unstable_yieldValue only exists
            // in SchedulerMock. To reduce the noise in strict mode tests,
            // suppress warnings and disable scheduler yielding during the double render
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === "function") try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    } // Profiler API hooks
    function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
        var map = new Map();
        var lane = 1;
        for(var index = 0; index < TotalLanes; index++){
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
        }
        return map;
    }
    function markCommitStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") injectedProfilingHooks.markCommitStarted(lanes);
    }
    function markCommitStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentPassiveEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
    function markComponentPassiveEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
    function markComponentPassiveEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
    function markComponentLayoutEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
    function markComponentLayoutEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
    function markLayoutEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
    function markLayoutEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") injectedProfilingHooks.markLayoutEffectsStopped();
    }
    function markPassiveEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
    function markPassiveEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") injectedProfilingHooks.markPassiveEffectsStopped();
    }
    function markRenderStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderYielded() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") injectedProfilingHooks.markRenderYielded();
    }
    function markRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") injectedProfilingHooks.markRenderStopped();
    }
    function markRenderScheduled(lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") injectedProfilingHooks.markRenderScheduled(lane);
    }
    function markForceUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
    function markStateUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead
    var ConcurrentMode = /*                 */ 1;
    var ProfileMode = /*                    */ 2;
    var StrictLegacyMode = /*               */ 8;
    var StrictEffectsMode = /*              */ 16;
    // TODO: This is pretty well supported by browsers. Maybe we can drop it.
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) return 32;
        return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    // If those values are changed that package should be rebuilt and redeployed.
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var InputContinuousHydrationLane = /*    */ 2;
    var InputContinuousLane = /*             */ 4;
    var DefaultHydrationLane = /*            */ 8;
    var DefaultLane = /*                     */ 16;
    var TransitionHydrationLane = /*                */ 32;
    var TransitionLanes = /*                       */ 4194240;
    var TransitionLane1 = /*                        */ 64;
    var TransitionLane2 = /*                        */ 128;
    var TransitionLane3 = /*                        */ 256;
    var TransitionLane4 = /*                        */ 512;
    var TransitionLane5 = /*                        */ 1024;
    var TransitionLane6 = /*                        */ 2048;
    var TransitionLane7 = /*                        */ 4096;
    var TransitionLane8 = /*                        */ 8192;
    var TransitionLane9 = /*                        */ 16384;
    var TransitionLane10 = /*                       */ 32768;
    var TransitionLane11 = /*                       */ 65536;
    var TransitionLane12 = /*                       */ 131072;
    var TransitionLane13 = /*                       */ 262144;
    var TransitionLane14 = /*                       */ 524288;
    var TransitionLane15 = /*                       */ 1048576;
    var TransitionLane16 = /*                       */ 2097152;
    var RetryLanes = /*                            */ 130023424;
    var RetryLane1 = /*                             */ 4194304;
    var RetryLane2 = /*                             */ 8388608;
    var RetryLane3 = /*                             */ 16777216;
    var RetryLane4 = /*                             */ 33554432;
    var RetryLane5 = /*                             */ 67108864;
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = /*          */ 134217728;
    var NonIdleLanes = /*                          */ 268435455;
    var IdleHydrationLane = /*               */ 268435456;
    var IdleLane = /*                        */ 536870912;
    var OffscreenLane = /*                   */ 1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
    // It should be kept in sync with the Lanes values above.
    function getLabelForLane(lane) {
        if (lane & SyncLane) return "Sync";
        if (lane & InputContinuousHydrationLane) return "InputContinuousHydration";
        if (lane & InputContinuousLane) return "InputContinuous";
        if (lane & DefaultHydrationLane) return "DefaultHydration";
        if (lane & DefaultLane) return "Default";
        if (lane & TransitionHydrationLane) return "TransitionHydration";
        if (lane & TransitionLanes) return "Transition";
        if (lane & RetryLanes) return "Retry";
        if (lane & SelectiveHydrationLane) return "SelectiveHydration";
        if (lane & IdleHydrationLane) return "IdleHydration";
        if (lane & IdleLane) return "Idle";
        if (lane & OffscreenLane) return "Offscreen";
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
        switch(getHighestPriorityLane(lanes)){
            case SyncLane:
                return SyncLane;
            case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
            case InputContinuousLane:
                return InputContinuousLane;
            case DefaultHydrationLane:
                return DefaultHydrationLane;
            case DefaultLane:
                return DefaultLane;
            case TransitionHydrationLane:
                return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                return lanes & RetryLanes;
            case SelectiveHydrationLane:
                return SelectiveHydrationLane;
            case IdleHydrationLane:
                return IdleHydrationLane;
            case IdleLane:
                return IdleLane;
            case OffscreenLane:
                return OffscreenLane;
            default:
                error("Should have found matching lanes. This is a bug in React.");
                return lanes;
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) return NoLanes;
        var nextLanes = NoLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
        // even if the work is suspended.
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
        } else {
            // The only remaining work is Idle.
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(unblockedLanes);
            else if (pingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(pingedLanes);
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
        // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (// one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
            // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) // Keep working on the existing in-progress tree. Do not interrupt.
            return wipLanes;
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) // When updates are sync by default, we entangle continuous priority updates
        // and default updates, so they render in the same batch. The only reason
        // they use separate lanes is because continuous updates should interrupt
        // transitions, but default updates should not.
        nextLanes |= pendingLanes & DefaultLane;
         // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        // TODO: Reconsider this. The counter-argument is that the partial work
        // represents an intermediate state, which we don't want to show to the user.
        // And by spending extra time finishing it, we're increasing the amount of
        // time it takes to show the final state, which is what they are actually
        // waiting for.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        switch(lane){
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
                // User interactions should expire slightly more quickly.
                //
                // NOTE: This is set to the corresponding constant as in Scheduler.js.
                // When we made it larger, a product metric in www regressed, suggesting
                // there's a user interaction that's being starved by a series of
                // synchronous updates. If that theory is correct, the proper solution is
                // to fix the starvation. However, this scenario supports the idea that
                // expiration times are an important safeguard when starvation
                // does happen.
                return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return currentTime + 5000;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                // TODO: Retries should be allowed to expire if they are CPU bound for
                // too long, but when I made this change it caused a spike in browser
                // crashes. There must be some other underlying bug; not super urgent but
                // ideally should figure out why and fix it. Unfortunately we don't have
                // a repro for the crashes, only detected via production metrics.
                return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
                // Anything idle priority or lower should never expire.
                return NoTimestamp;
            default:
                error("Should have found matching lanes. This is a bug in React.");
                return NoTimestamp;
        }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    // are suspended.
    function getHighestPriorityPendingLanes(root) {
        return getHighestPriorityLanes(root.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root, lanes) {
        // This is a separate check from includesBlockingLane because a lane can
        // expire after a render has already started.
        return (lanes & root.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
        // Cycle through the lanes, assigning each new transition to the next lane.
        // In most cases, this means every transition gets its own lane, until we
        // run out of lanes and cycle back to the beginning.
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) nextTransitionLane = TransitionLane1;
        return lane;
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) nextRetryLane = RetryLane1;
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    }
    function intersectLanes(a, b) {
        return a & b;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
        // could unblock them. Clear the suspended lanes so that we can try rendering
        // them again.
        //
        // TODO: We really only need to unsuspend only lanes that are in the
        // `subtreeLanes` of the updated fiber, or the update lanes of the return
        // path. This would exclude suspended updates in an unrelated sibling tree,
        // since there's no way for this update to unblock it.
        //
        // We don't do this if the incoming update is idle, because we never process
        // idle updates until after all the regular updates have finished; there's no
        // way it could unblock a transition.
        if (updateLane !== IdleLane) {
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
        }
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = NoLanes;
        root.pingedLanes = NoLanes;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        // In addition to entangling each of the given lanes with each other, we also
        // have to consider _transitive_ entanglements. For each lane that is already
        // entangled with *any* of the given lanes, that lane is now transitively
        // entangled with *all* the given lanes.
        //
        // Translated: If C is entangled with A, then entangling A with B also
        // entangles C with B.
        //
        // If this is hard to grasp, it might help to intentionally break this
        // function and look at the tests that fail in ReactTransition-test.js. Try
        // commenting out one of the conditions below.
        var rootEntangledLanes = root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = rootEntangledLanes;
        while(lanes){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            if (lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
            entanglements[index] & entangledLanes) entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    function getBumpedLaneForHydration(root, renderLanes) {
        var renderLane = getHighestPriorityLane(renderLanes);
        var lane;
        switch(renderLane){
            case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
            case DefaultLane:
                lane = DefaultHydrationLane;
                break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                lane = TransitionHydrationLane;
                break;
            case IdleLane:
                lane = IdleHydrationLane;
                break;
            default:
                // Everything else is already either a hydration lane, or shouldn't
                // be retried at a hydration lane.
                lane = NoLane;
                break;
        } // Check if the lane we chose is suspended. If so, that indicates that we
        // already attempted and failed to hydrate at that level. Also check if we're
        // already rendering that lane, which is rare but could happen.
        if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) // Give up trying to hydrate and fall back to client render.
        return NoLane;
        return lane;
    }
    function addFiberToLanesMap(root, fiber, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            updaters.add(fiber);
            lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        var memoizedUpdaters = root.memoizedUpdaters;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate === null || !memoizedUpdaters.has(alternate)) memoizedUpdaters.add(fiber);
                });
                updaters.clear();
            }
            lanes &= ~lane;
        }
    }
    function getTransitionsForLanes(root, lanes) {
        return null;
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
        return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = priority;
            return fn();
        } finally{
            currentUpdatePriority = previousPriority;
        }
    }
    function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) return DiscreteEventPriority;
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) return ContinuousEventPriority;
        if (includesNonIdleWork(lane)) return DefaultEventPriority;
        return IdleEventPriority;
    }
    // This is imported by the event replaying implementation in React DOM. It's
    // in a separate file to break a circular dependency between the renderer and
    // the reconciler.
    function isRootDehydrated(root) {
        var currentState = root.current.memoizedState;
        return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    // has this definition built-in.
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case "focusin":
            case "focusout":
                queuedFocus = null;
                break;
            case "dragenter":
            case "dragleave":
                queuedDrag = null;
                break;
            case "mouseover":
            case "mouseout":
                queuedMouse = null;
                break;
            case "pointerover":
            case "pointerout":
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case "gotpointercapture":
            case "lostpointercapture":
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case "focusin":
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case "dragenter":
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case "mouseover":
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case "pointerover":
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case "gotpointercapture":
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.priority, function() {
                            attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
        // TODO: This will read the priority if it's dispatched by the React
        // event system but not native events. Should read window.event.type, like
        // we do for updates (getCurrentEventPriority).
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
            blockedOn: null,
            target: target,
            priority: updatePriority
        };
        var i = 0;
        for(; i < queuedExplicitHydrationTargets.length; i++){
            // Stop once we hit the first target with lower priority than
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) break;
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) attemptExplicitHydrationTarget(queuedTarget);
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
            } else {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
            case DefaultEventPriority:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
        } // We need to clear only if we didn't queue because
        // queueing is accumulative.
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while(blockedOn !== null){
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) attemptSynchronousHydration(fiber);
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                if (nextBlockedOn === blockedOn) break;
                blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) nativeEvent.stopPropagation();
            return;
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
    // The return_targetInst field above is conceptually part of the return value.
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        return_targetInst = targetInst; // We're not blocked on anything.
        return null;
    }
    function getEventPriority(domEventName) {
        switch(domEventName){
            // Used by SimpleEventPlugin:
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            // eslint-disable-next-line no-fallthrough
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            // eslint-disable-next-line no-fallthrough
            case "beforeblur":
            case "afterblur":
            // eslint-disable-next-line no-fallthrough
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
                return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            // eslint-disable-next-line no-fallthrough
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
                return ContinuousEventPriority;
            case "message":
                // We might be in the Scheduler callback.
                // Eventually this mechanism will be replaced by a check
                // of the current priority on the native scheduler.
                var schedulerPriority = getCurrentPriorityLevel();
                switch(schedulerPriority){
                    case ImmediatePriority:
                        return DiscreteEventPriority;
                    case UserBlockingPriority:
                        return ContinuousEventPriority;
                    case NormalPriority:
                    case LowPriority:
                        // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                        return DefaultEventPriority;
                    case IdlePriority:
                        return IdleEventPriority;
                    default:
                        return DefaultEventPriority;
                }
            default:
                return DefaultEventPriority;
        }
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ("value" in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== "unknown") event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== "unknown") // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {},
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ("movementX" in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ("movementY" in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || "Unidentified";
        return "";
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === "keypress") return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === "keydown" || event.type === "keyup") return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === "keypress") return getEventCharCode(event);
            if (event.type === "keydown" || event.type === "keyup") return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
    var documentMode = null;
    if (canUseDOM && "documentMode" in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", [
            "compositionend",
            "keypress",
            "textInput",
            "paste"
        ]);
        registerTwoPhaseEvent("onCompositionEnd", [
            "compositionend",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
        registerTwoPhaseEvent("onCompositionStart", [
            "compositionstart",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
        registerTwoPhaseEvent("onCompositionUpdate", [
            "compositionupdate",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case "compositionstart":
                return "onCompositionStart";
            case "compositionend":
                return "onCompositionEnd";
            case "compositionupdate":
                return "onCompositionUpdate";
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case "keyup":
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = "onCompositionStart";
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = "onCompositionEnd";
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === "onCompositionStart") isComposing = initialize(nativeEventTarget);
            else if (eventType === "onCompositionEnd") {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
            case "keypress":
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case "textInput":
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case "paste":
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case "keypress":
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") return !!supportedInputTypes[elem.type];
        if (nodeName === "textarea") return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent("onChange", [
            "change",
            "click",
            "focusin",
            "focusout",
            "input",
            "keydown",
            "keyup",
            "selectionchange"
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, "number", node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === "focusout") handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent("onMouseEnter", [
            "mouseout",
            "mouseover"
        ]);
        registerDirectEvent("onMouseLeave", [
            "mouseout",
            "mouseover"
        ]);
        registerDirectEvent("onPointerEnter", [
            "pointerout",
            "pointerover"
        ]);
        registerDirectEvent("onPointerLeave", [
            "pointerout",
            "pointerover"
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ("contains" in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === "function") priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ("selectionStart" in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", [
            "focusout",
            "contextmenu",
            "dragend",
            "focusin",
            "keydown",
            "keyup",
            "mousedown",
            "mouseup",
            "selectionchange"
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case "mousedown":
                mouseDown = true;
                break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case "selectionchange":
                if (skipSelectionChangeEvent) break;
            // falls through
            case "keydown":
            case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes["Webkit" + styleProp] = "webkit" + eventName;
        prefixes["Moz" + styleProp] = "moz" + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {};
    /**
 * Element to check for prefixes on.
 */ var style = {};
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement("div").style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!("TransitionEvent" in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend");
    var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
    var ANIMATION_START = getVendorPrefixedEventName("animationstart");
    var TRANSITION_END = getVendorPrefixedEventName("transitionend");
    var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
    //
    // E.g. it needs "pointerDown", not "pointerdown".
    // This is because we derive both React name ("onPointerDown")
    // and DOM name ("pointerdown") from the same list.
    //
    // Exceptions that don't match this convention are listed separately.
    //
    // prettier-ignore
    var simpleEventPluginEvents = [
        "abort",
        "auxClick",
        "cancel",
        "canPlay",
        "canPlayThrough",
        "click",
        "close",
        "contextMenu",
        "copy",
        "cut",
        "drag",
        "dragEnd",
        "dragEnter",
        "dragExit",
        "dragLeave",
        "dragOver",
        "dragStart",
        "drop",
        "durationChange",
        "emptied",
        "encrypted",
        "ended",
        "error",
        "gotPointerCapture",
        "input",
        "invalid",
        "keyDown",
        "keyPress",
        "keyUp",
        "load",
        "loadedData",
        "loadedMetadata",
        "loadStart",
        "lostPointerCapture",
        "mouseDown",
        "mouseMove",
        "mouseOut",
        "mouseOver",
        "mouseUp",
        "paste",
        "pause",
        "play",
        "playing",
        "pointerCancel",
        "pointerDown",
        "pointerMove",
        "pointerOut",
        "pointerOver",
        "pointerUp",
        "progress",
        "rateChange",
        "reset",
        "resize",
        "seeked",
        "seeking",
        "stalled",
        "submit",
        "suspend",
        "timeUpdate",
        "touchCancel",
        "touchEnd",
        "touchStart",
        "volumeChange",
        "scroll",
        "toggle",
        "touchMove",
        "waiting",
        "wheel"
    ];
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [
            domEventName
        ]);
    }
    function registerSimpleEvents() {
        for(var i = 0; i < simpleEventPluginEvents.length; i++){
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        } // Special cases where event names don't match.
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case "keypress":
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case "keydown":
            case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "beforeblur":
            case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "click":
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            /* falls through */ case "mouseout":
            case "mouseover":
            case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case "copy":
            case "cut":
            case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === "scroll";
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't foresee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        "abort",
        "canplay",
        "canplaythrough",
        "durationchange",
        "emptied",
        "encrypted",
        "ended",
        "error",
        "loadeddata",
        "loadedmetadata",
        "loadstart",
        "pause",
        "play",
        "playing",
        "progress",
        "ratechange",
        "resize",
        "seeked",
        "seeking",
        "stalled",
        "suspend",
        "timeupdate",
        "volumechange",
        "waiting"
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        "cancel",
        "close",
        "invalid",
        "load",
        "scroll",
        "toggle"
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        if (!nonDelegatedEvents.has(domEventName)) error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    } // This is only used by createEventHandle when the
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
                // We handle selectionchange separately because it
                // doesn't bubble and needs to be on the document.
                if (domEventName !== "selectionchange") {
                    if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement);
                    listenToNativeEvent(domEventName, true, rootContainerElement);
                }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) // The selectionchange event also needs deduplication
            // but it is attached to the document.
            {
                if (!ownerDocument[listeningMarker]) {
                    ownerDocument[listeningMarker] = true;
                    listenToNativeEvent("selectionchange", false, ownerDocument);
                }
            }
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") isPassiveListener = true;
        }
        targetContainer;
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
             // If we are processing the onBeforeBlur event, then we need to take
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
    var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
    var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
    var AUTOFOCUS = "autoFocus";
    var CHILDREN = "children";
    var STYLE = "style";
    var HTML$1 = "__html";
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error("Extra attributes from the server: %s", names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        if (shouldWarnDev) {
            if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) // In concurrent roots, we throw when there's a text mismatch and revert to
        // client rendering, up to the nearest Suspense boundary.
        throw new Error("Text content does not match server-rendered HTML.");
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== "textarea" || nextProp !== "";
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === "number") setTextContent(domElement, "" + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === "script") {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === "select") {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
            case "iframe":
            case "object":
            case "embed":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
            case "video":
            case "audio":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case "source":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
            case "img":
            case "image":
            case "link":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
            case "details":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
            case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
            case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case "input":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case "textarea":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
            case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {};
                    styleUpdates[styleName] = "";
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = "";
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case "input":
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
            case "select":
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
            case "iframe":
            case "object":
            case "embed":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent("load", domElement);
                break;
            case "video":
            case "audio":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case "source":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent("error", domElement);
                break;
            case "img":
            case "image":
            case "link":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
            case "details":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent("toggle", domElement);
                break;
            case "input":
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "option":
                validateProps(domElement, rawProps);
                break;
            case "select":
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "textarea":
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case "value":
                    break;
                case "checked":
                    break;
                case "selected":
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === "string") {
                    if (domElement.textContent !== nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === "number") {
                    if (domElement.textContent !== "" + nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            "" + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute("style");
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) // $FlowFixMe - Should be inferred as not undefined.
            warnForExtraAttributes(extraAttributeNames);
        }
        switch(tag){
            case "input":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case "textarea":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case "select":
            case "option":
                break;
            default:
                if (typeof rawProps.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === "") // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case "input":
                restoreControlledState(domElement, props);
                return;
            case "textarea":
                restoreControlledState$2(domElement, props);
                return;
            case "select":
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {};
    var updatedAncestorInfo = function() {};
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        "address",
        "applet",
        "area",
        "article",
        "aside",
        "base",
        "basefont",
        "bgsound",
        "blockquote",
        "body",
        "br",
        "button",
        "caption",
        "center",
        "col",
        "colgroup",
        "dd",
        "details",
        "dir",
        "div",
        "dl",
        "dt",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "frame",
        "frameset",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "iframe",
        "img",
        "input",
        "isindex",
        "li",
        "link",
        "listing",
        "main",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "nav",
        "noembed",
        "noframes",
        "noscript",
        "object",
        "ol",
        "p",
        "param",
        "plaintext",
        "pre",
        "script",
        "section",
        "select",
        "source",
        "style",
        "summary",
        "table",
        "tbody",
        "td",
        "template",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "title",
        "tr",
        "track",
        "ul",
        "wbr",
        "xmp"
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        "button"
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        "dd",
        "dt",
        "li",
        "option",
        "optgroup",
        "p",
        "rp",
        "rt"
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === "form") ancestorInfo.formTag = info;
        if (tag === "a") ancestorInfo.aTagInScope = info;
        if (tag === "button") ancestorInfo.buttonTagInScope = info;
        if (tag === "nobr") ancestorInfo.nobrTagInScope = info;
        if (tag === "p") ancestorInfo.pTagInButtonScope = info;
        if (tag === "li") ancestorInfo.listItemTagAutoclosing = info;
        if (tag === "dd" || tag === "dt") ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
                return tag === "option" || tag === "#text";
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case "option":
                return tag === "#text";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case "tbody":
            case "thead":
            case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case "colgroup":
                return tag === "col" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
                return tag === "frame";
            case "#document":
                return tag === "html";
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                return ancestorInfo.pTagInButtonScope;
            case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
                return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
            case "button":
                return ancestorInfo.buttonTagInScope;
            case "a":
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case "nobr":
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {};
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error("validateDOMNesting: when childText is passed, childTag should be null");
            childTag = "#text";
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = "";
        if (childTag === "#text") {
            if (/\S/.test(childText)) tagDisplayName = "Text nodes";
            else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = "<" + childTag + ">";
        if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
    var SUSPENSE_START_DATA = "$";
    var SUSPENSE_END_DATA = "/$";
    var SUSPENSE_PENDING_START_DATA = "$?";
    var SUSPENSE_FALLBACK_START_DATA = "$!";
    var STYLE$1 = "style";
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, "");
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch(type){
            case "button":
            case "input":
            case "select":
            case "textarea":
                return !!props.autoFocus;
            case "img":
                return true;
            default:
                return false;
        }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) return DefaultEventPriority;
        return getEventPriority(currentEvent.type);
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
    var noTimeout = -1;
    var localPromise = typeof Promise === "function" ? Promise : undefined; // -------------------
    var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout; // TODO: Determine the best fallback here.
    function handleErrorInNextTick(error) {
        setTimeout(function() {
            throw error;
        });
    } // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        switch(type){
            case "button":
            case "input":
            case "select":
            case "textarea":
                if (newProps.autoFocus) domElement.focus();
                return;
            case "img":
                if (newProps.src) domElement.src = newProps.src;
                return;
        }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance; // Delete all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.
                        retryIfBlockedOn(suspenseInstance);
                        return;
                    } else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) depth++;
            }
            node = nextNode;
        }while (node); // TODO: Warn, we didn't find the end comment boundary.
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) clearSuspenseBoundary(container.parentNode, suspenseInstance);
        else if (container.nodeType === ELEMENT_NODE) clearSuspenseBoundary(container, suspenseInstance);
         // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
        // TODO: Does this work for all element types? What about MathML? Should we
        // pass host context to this method?
        instance;
        var style = instance.style;
        if (typeof style.setProperty === "function") style.setProperty("display", "none", "important");
        else style.display = "none";
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
    }
    function unhideInstance(instance, props) {
        instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = "";
        else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) container.removeChild(container.documentElement);
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a suspense node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
            digest = dataset.dgst;
            message = dataset.msg;
            stack = dataset.stck;
        }
        return {
            message: message,
            digest: digest,
            stack: stack
        };
    // const nextSibling = instance.nextSibling;
    // if (nextSibling) {
    //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
    //   value.message = dataset.msg;
    //   value.hash = dataset.hash;
    //   if (true) {
    //     value.stack = dataset.stack;
    //   }
    // }
    // return value;
    }
    function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
            if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) break;
                if (nodeData === SUSPENSE_END_DATA) return null;
            }
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentNode, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentNode, instance);
        }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function errorHydratingContainer(parentContainer) {
        // TODO: This gets logged by onRecoverableError, too, so we should be
        // able to remove it.
        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = "__reactFiber$" + randomKey;
    var internalPropsKey = "__reactProps$" + randomKey;
    var internalContainerInstanceKey = "__reactContainer$" + randomKey;
    var internalEventHandlersKey = "__reactEvents$" + randomKey;
    var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
    var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    function detachDeletedInstance(node) {
        // TODO: This function is only called on host components. I don't think all of
        // these fields are relevant.
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.
        throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error("Unexpected pop.");
            return;
        }
        if (fiber !== fiberStack[index]) error("Unexpected Fiber popped.");
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {};
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentNameFromFiber(workInProgress) || "Unknown";
        checkPropTypes(contextTypes, context, "context", name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (contextStackCursor.current !== emptyContextObject) throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== "function") {
            var componentName = getComponentNameFromFiber(fiber) || "Unknown";
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
        }
        var name = getComponentNameFromFiber(fiber) || "Unknown";
        checkPropTypes(childContextTypes, childContext, "child context", name);
        return assign({}, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) syncQueue = [
            callback
        ];
        else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
        // Only flushes the queue if there's a legacy sync callback scheduled.
        // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
        // it might make more sense for the queue to be a list of roots instead of a
        // list of generic callbacks. Then we can have two: one for legacy roots, one
        // for concurrent roots. And this method would only flush the legacy ones.
        if (includesLegacySyncCallbacks) flushSyncCallbacks();
    }
    function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrance.
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
                var isSync = true;
                var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
                // queue is in the render or commit phases.
                setCurrentUpdatePriority(DiscreteEventPriority);
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(isSync);
                    while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error;
            } finally{
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
            }
        }
        return null;
    }
    // TODO: Use the unified fiber stack module instead of this local one?
    // Intentionally not using it yet to derisk the initial implementation, because
    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd
    // rather the ids be wrong than crash the whole reconciler.
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = "";
    function isForkedChild(workInProgress) {
        warnIfNotHydrating();
        return (workInProgress.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress) {
        warnIfNotHydrating();
        return treeForkCount;
    }
    function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress, totalChildren) {
        // This is called right after we reconcile an array (or iterator) of child
        // fibers, because that's the only place where we know how many children in
        // the whole set without doing extra work later, or storing addtional
        // information on the fiber.
        //
        // That's why this function is separate from pushTreeId — it's called during
        // the render phase of the fork parent, not the child, which is where we push
        // the other context values.
        //
        // In the Fizz implementation this is much simpler because the child is
        // rendered in the same callstack as the parent.
        //
        // It might be better to just add a `forks` field to the Fiber type. It would
        // make this module simpler.
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress;
        treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
        // of the id; we use it to account for leading 0s.
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index + 1;
        var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
        // consideration the leading 1 we use to mark the end of the sequence.
        if (length > 30) {
            // We overflowed the bitwise-safe range. Fall back to slower algorithm.
            // This branch assumes the length of the base id is greater than 5; it won't
            // work for smaller ids, because you need 5 bits per character.
            //
            // We encode the id in multiple steps: first the base id, then the
            // remaining digits.
            //
            // Each 5 bit sequence corresponds to a single base 32 character. So for
            // example, if the current id is 23 bits long, we can convert 20 of those
            // bits into a string of 4 characters, with 3 bits left over.
            //
            // First calculate how many bits in the base id represent a complete
            // sequence of characters.
            var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.
            var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.
            var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
            // we made more room, this time it won't overflow.
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
        } else {
            // Normal path
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
        }
    }
    function pushMaterializedTreeId(workInProgress) {
        warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
        // in its children.
        var returnFiber = workInProgress.return;
        if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress, numberOfForks);
            pushTreeId(workInProgress, numberOfForks, slotIndex);
        }
    }
    function getBitLength(number) {
        return 32 - clz32(number);
    }
    function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress) {
        // Restore the previous values.
        // This is a bit more complicated than other context-like modules in Fiber
        // because the same Fiber may appear on the stack multiple times and for
        // different reasons. We have to keep popping until the work-in-progress is
        // no longer at the top of the stack.
        while(workInProgress === treeForkProvider){
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
        }
        while(workInProgress === treeContextProvider){
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
        }
    }
    function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) return {
            id: treeContextId,
            overflow: treeContextOverflow
        };
        else return null;
    }
    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress;
    }
    function warnIfNotHydrating() {
        if (!getIsHydrating()) error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
    // due to earlier mismatches or a suspended fiber.
    var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary
    var hydrationErrors = null;
    function warnIfHydrating() {
        if (isHydrating) error("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = true;
    }
    function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
    }
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) restoreSuspendedTreeContext(fiber, treeContext);
        return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
        }
    }
    function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                childToDelete
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(childToDelete);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
        if (didSuspendOrErrorDEV) // Inside a boundary that already suspended. We're currently rendering the
        // siblings of a suspended node. The mismatch may be due to the missing
        // data, so it's probably a false positive.
        return;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                        break;
                }
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch(fiber.tag){
                    case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                    case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = getFirstHydratableChild(instance);
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            case SuspenseComponent:
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                    var suspenseState = {
                        dehydrated: suspenseInstance,
                        treeContext: getSuspendedTreeContext(),
                        retryLane: OffscreenLane
                    };
                    fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
                    // This simplifies the code for getHostSibling and deleting nodes,
                    // since it doesn't have to consider all Suspense boundaries and
                    // check if they're dehydrated ones or not.
                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                    dehydratedFragment.return = fiber;
                    fiber.child = dehydratedFragment;
                    hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
                    // it during the first pass. Instead, we'll reenter it later.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
    function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                    break;
            }
        }
        return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        } // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them. We also don't delete anything inside the root container.
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                    warnIfUnhydratedTailNodes(fiber);
                    throwOnHydrationMismatch();
                } else while(nextInstance){
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                }
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while(nextInstance){
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
        }
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
            // Successfully completed a forced client render. The errors that occurred
            // during the hydration attempt are now recovered. We will log them in
            // commit phase, once the entire tree has finished.
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
        }
    }
    function getIsHydrating() {
        return isHydrating;
    }
    function queueHydrationError(error) {
        if (hydrationErrors === null) hydrationErrors = [
            error
        ];
        else hydrationErrors.push(error);
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictLegacyMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(", ");
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedupe strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {};
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            if (node === propagationRoot) break;
            node = node.return;
        }
        if (node !== propagationRoot) error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChange(workInProgress, context, renderLanes) {
        propagateContextChange_eager(workInProgress, context, renderLanes);
    }
    function propagateContextChange_eager(workInProgress, context, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var lane = pickArbitraryLane(renderLanes);
                            var update = createUpdate(NoTimestamp, lane);
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            // Inlined `enqueueUpdate` to remove interleaved update check
                            var updateQueue = fiber.updateQueue;
                            if (updateQueue === null) ;
                            else {
                                var sharedQueue = updateQueue.shared;
                                var pending = sharedQueue.pending;
                                if (pending === null) // This is the first update. Create a circular list.
                                update.next = update;
                                else {
                                    update.next = pending.next;
                                    pending.next = update;
                                }
                                sharedQueue.pending = update;
                            }
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else if (fiber.tag === DehydratedFragment) {
                // If a dehydrated suspense boundary is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates.
                var parentSuspense = fiber.return;
                if (parentSuspense === null) throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                 // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childLanes on
                // this fiber to indicate that a context has changed.
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                nextFiber = fiber.sibling;
            } else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext === context) ;
        else {
            var contextItem = {
                context: context,
                memoizedValue: value,
                next: null
            };
            if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
    }
    // render. When this render exits, either because it finishes or because it is
    // interrupted, the interleaved updates will be transferred onto the main part
    // of the queue.
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) concurrentQueues = [
            queue
        ];
        else concurrentQueues.push(queue);
    }
    function finishQueueingConcurrentUpdates() {
        // Transfer the interleaved updates onto the main queue. Each queue has a
        // `pending` field and an `interleaved` field. When they are not null, they
        // point to the last node in a circular linked list. We need to append the
        // interleaved list to the end of the pending list by joining them into a
        // single, circular list.
        if (concurrentQueues !== null) {
            for(var i = 0; i < concurrentQueues.length; i++){
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                    queue.interleaved = null;
                    var firstInterleavedUpdate = lastInterleavedUpdate.next;
                    var lastPendingUpdate = queue.pending;
                    if (lastPendingUpdate !== null) {
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = firstInterleavedUpdate;
                        lastInterleavedUpdate.next = firstPendingUpdate;
                    }
                    queue.pending = lastInterleavedUpdate;
                }
            }
            concurrentQueues = null;
        }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    } // Calling this function outside this module should only be done for backwards
    // compatibility and should always be accompanied by a warning.
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
            // This is an unsafe render phase update. Add directly to the update
            // queue so we can process it immediately during the current render.
            var pending = sharedQueue.pending;
            if (pending === null) // This is the first update. Create a circular list.
            update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
            // this fiber. This is for backwards compatibility in the case where you
            // update a different component during render phase than the one that is
            // currently renderings (a pattern that is accompanied by a warning).
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
    }
    function entangleTransitions(root, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
            // have finished. We can remove them from the shared queue, which represents
            // a superset of the actually pending lanes. In some cases we may entangle
            // more than we need to, but that's OK. In fact it's worse if we *don't*
            // entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null); // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === "function") {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return assign({}, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current = workInProgress.alternate;
            if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null && // If the update was already committed, we should not queue its
                    // callback again.
                    update.lane !== NoLane) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true);
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
            // process them during this render, but we do need to track which lanes
            // are remaining.
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                    newLanes = mergeLanes(newLanes, interleaved.lane);
                    interleaved = interleaved.next;
                }while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) // `queue.lanes` is used for entangling transitions. We can set it back to
            // zero once the queue is empty.
            queue.shared.lanes = NoLanes;
             // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (typeof callback !== "function") throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === "function") return;
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: false,
        value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                // Invoke the function an extra time to help detect side-effects.
                partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "replaceState");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "forceUpdate");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markForceUpdateScheduled(fiber, lane);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentNameFromType(ctor) || "Component";
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === "function") error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
        if (typeof instance.componentDidUnmount === "function") error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === "function") error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === "function") error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === "function") error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === "function") error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === "function") error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === "function") error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== "object" || isArray(_state))) error("%s.state: must be set to an object or null", name);
        if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== "object") addendum = " However, it is set to a " + typeof contextType + ".";
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = " Did you accidentally pass the Context.Provider instead?";
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = " Did you accidentally pass the Context.Consumer instead?";
                else addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
        }
        if (typeof contextType === "object" && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                instance = new ctor(props, context); // eslint-disable-line no-new
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = "componentWillMount";
            else if (typeof instance.UNSAFE_componentWillMount === "function") foundWillMountName = "UNSAFE_componentWillMount";
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = "componentWillReceiveProps";
            else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = "componentWillUpdate";
            else if (typeof instance.UNSAFE_componentWillUpdate === "function") foundWillUpdateName = "UNSAFE_componentWillUpdate";
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === "function") instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || "Component");
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentNameFromFiber(workInProgress) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
            workInProgress.flags |= fiberFlags;
        }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
                workInProgress.flags |= fiberFlags;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === "function") instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                _fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags;
            }
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                _fiberFlags2 |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags2 |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags2;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
        // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === "function") instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === "function") workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === "function") workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {};
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== "object") return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (typeof child._store !== "object") throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
    };
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
            // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (ownerFiber.tag !== ClassComponent) throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + "bug in React. Please file an issue.");
                 // Assigning this to a const so Flow knows it won't change in the closure
                var resolvedInst = inst;
                checkPropStringCoercion(mixedRef, "ref");
                var stringRef = "" + mixedRef; // Check if previous string ref matches new string ref
                if (current !== null && current.ref !== null && typeof current.ref === "function" && current.ref._stringRef === stringRef) return current.ref;
                var ref = function(value) {
                    var refs = resolvedInst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = resolvedInst.refs = {};
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (typeof mixedRef !== "string") throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + " the following reasons:\n" + "1. You may be adding a ref to a function component\n" + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + "3. You have multiple copies of React loaded\n" + "See https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    }
    function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
                returnFiber.deletions = [
                    childToDelete
                ];
                returnFiber.flags |= ChildDeletion;
            } else deletions.push(childToDelete);
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
                // During hydration, the useId algorithm needs to know which fibers are
                // part of a list of children (arrays, iterators).
                newFiber.flags |= Forked;
                return lastPlacedIndex;
            }
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags |= Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags |= Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags |= Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
            if (current !== null) {
                if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return createChild(returnFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) return updateElement(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== "object" || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                    var _numberOfForks = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) throw new Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                    var _numberOfForks3 = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    var elementType = element.type;
                    if (elementType === REACT_FRAGMENT_TYPE) {
                        if (child.tag === Fragment) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.props.children);
                            existing.return = returnFiber;
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                            return existing;
                        }
                    } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing = useFiber(child, element.props);
                        _existing.ref = coerceRef(returnFiber, child, element);
                        _existing.return = returnFiber;
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                        return _existing;
                    }
                     // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_PORTAL_TYPE:
                        return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init; // TODO: This function is supposed to be non-recursive.
                        return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (current !== null && workInProgress.child !== current.child) throw new Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (c === NO_CONTEXT) throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // Regular boundaries always capture.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*   */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Insertion = /*  */ 2;
    var Layout = /*    */ 4;
    var Passive$1 = /*   */ 8;
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.
    var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
    // hydration). This counter is global, so client ids are not stable across
    // render attempts.
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += " ";
                    row += newHookName + "\n";
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass);
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
        // render. If this fires, it suggests that we incorrectly reset the static
        // flags in some other part of the codebase. This has happened before, for
        // example, in the SuspenseList implementation.
        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current.mode & ConcurrentMode) !== NoMode) error("Internal React error: Expected static flag was missing. Please notify the React team.");
        didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
        // localIdCounter = 0;
        if (didRenderTooFewHooks) throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function checkDidRenderIdHook() {
        // This should be called immediately after every renderWithHooks call.
        // Conceptually, it's part of the return value of renderWithHooks; it's only a
        // separate function to avoid using an array tuple.
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
        // complete phase (bubbleProperties).
        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        else workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (nextCurrentHook === null) throw new Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null,
            stores: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            hasEagerState: update.hasEagerState,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.hasEagerState) // If this update is a state update (not a reducer) and was processed eagerly,
                    // we can use the eagerly computed state
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first);
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        } // Interleaved updates are stored on a separate queue. We aren't going to
        // process them during this render, but we do need to track which lanes
        // are remaining.
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
            }while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) // `queue.lanes` is used for entangling transitions. We can set it back to
        // zero once the queue is empty.
        queue.lanes = NoLanes;
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating = getIsHydrating();
        if (isHydrating) {
            if (getServerSnapshot === undefined) throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            nextSnapshot = getServerSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                }
            }
        } else {
            nextSnapshot = getSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                }
            }
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            //
            // We won't do this if we're hydrating server-rendered content, because if
            // the content is stale, it's already visible anyway. Instead we'll patch
            // it up in a passive effect.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        } // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst; // Schedule an effect to subscribe to the store.
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Schedule an effect to update the mutable instance fields. We will update
        // this whenever subscribe, getSnapshot, or value changes. Because there's no
        // clean-up function, and we track the deps correctly, we can call pushEffect
        // directly, without storing any additional state. For the same reason, we
        // don't need to set a static flag, either.
        // TODO: We can move this to the passive phase once we add a pre-commit
        // consistency check. See the next comment.
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        var nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
            }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Whenever getSnapshot or subscribe changes, we need to check in the
        // commit phase if there was an interleaved mutation. In concurrent mode
        // this can happen all the time, but even in synchronous mode, an earlier
        // effect may have mutated the store.
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
        // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
            getSnapshot: getSnapshot,
            value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [
                check
            ];
        } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) componentUpdateQueue.stores = [
                check
            ];
            else stores.push(check);
        }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        // These are updated in the passive phase
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
        // have been in an event that fired before the passive effects, or it could
        // have been in a layout effect. In that case, we would have used the old
        // snapsho and getSnapshot values to bail out. We need to check one more time.
        if (checkIfSnapshotChanged(inst)) // Force a re-render.
        forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
            // The store changed. Check if the snapshot changed since the last time we
            // read from the store.
            if (checkIfSnapshotChanged(inst)) // Force a re-render.
            forceStoreRerender(fiber);
        }; // Subscribe to the store and return a clean-up function.
        return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
        } catch (error) {
            return true;
        }
    }
    function forceStoreRerender(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var _ref2 = {
            current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        else return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty("current")) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== "function") error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== "function") error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
    }
    function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
            // This is a rerender during a mount.
            hook.memoizedState = value;
            return value;
        } else {
            // This is a rerender during an update.
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
        }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
            // This is an urgent update. If the value has changed, keep using the
            // previous value and spawn a deferred render to update it later.
            if (!objectIs(value, prevValue)) {
                // Schedule a deferred render
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
                // from the latest value. The name "baseState" doesn't really match how we
                // use it because we're reusing a state hook field instead of creating a
                // new one.
                hook.baseState = true;
            } // Reuse the previous value
            return prevValue;
        } else {
            // This is not an urgent update, so we can use the latest value regardless
            // of what it is. No need to defer it.
            // However, if we're currently inside a spawned render, then we need to mark
            // this as an update to prevent the fiber from bailing out.
            //
            // `baseState` is true when the current value is different from the rendered
            // value. The name doesn't really match how we use it because we're reusing
            // a state hook field instead of creating a new one.
            if (hook.baseState) {
                // Flip this back to false.
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
        }
    }
    function startTransition(setPending, callback, options) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
        try {
            setPending(false);
            callback();
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1]; // The `start` method never changes.
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [
            isPending,
            start
        ];
    }
    function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function mountId() {
        var hook = mountWorkInProgressHook();
        var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
        // should do this in Fiber, too? Deferring this decision for now because
        // there's no other place to store the prefix except for an internal field on
        // the public createRoot object, which the fiber tree does not currently have
        // a reference to.
        var identifierPrefix = root.identifierPrefix;
        var id;
        if (getIsHydrating()) {
            var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.
            id = ":" + identifierPrefix + "R" + treeId; // Unless this is the first id at this level, append a number at the end
            // that represents the position of this useId hook among all the useId
            // hooks for this fiber.
            var localId = localIdCounter++;
            if (localId > 0) id += "H" + localId.toString(32);
            id += ":";
        } else {
            // Use a lowercase r prefix for client-generated ids.
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
    }
    function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
        if (typeof arguments[3] === "function") error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
        if (typeof arguments[3] === "function") error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.hasEagerState = true;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) {
                            // Fast path. We can bail out without scheduling React to re-render.
                            // It's still possible that we'll need to rebase this update later,
                            // if the component re-renders for a different reason and by that
                            // time the reducer has changed.
                            // TODO: Do we still need to entangle transitions in this case?
                            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                            return;
                        }
                    } catch (error) {} finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
    } // TODO: Move to ReactFiberConcurrentUpdates?
    function entangleTransitionUpdate(root, queue, lane) {
        if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
            // must have finished. We can remove them from the shared queue, which
            // represents a superset of the actually pending lanes. In some cases we
            // may entangle more than we need to, but that's OK. In fact it's worse if
            // we *don't* entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function markUpdateInDevTools(fiber, lane, action) {
        markStateUpdateScheduled(fiber, lane);
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    /**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */ var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
        return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
        nestedUpdateScheduled = true;
    }
    function resetNestedUpdateFlag() {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
    }
    function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
    }
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        root.effectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        if (root !== null) root.passiveEffectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        if (parentStateNode !== null) // Detached fibers have their state node cleared out.
                        // In this case, the return pointer is also cleared out,
                        // so we won't be able to report the time spent in this Profiler's subtree.
                        parentStateNode.passiveEffectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    function createCapturedValueAtFiber(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
        };
    }
    function createCapturedValue(value, digest, stack) {
        return {
            value: value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ""; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console["error"](error); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console["error"](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ""
            });
            if (typeof getDerivedStateFromError !== "function") // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
            }
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        // Attach a ping listener
        //
        // The data might resolve before we have a chance to commit the fallback. Or,
        // in the case of a refresh, we'll never commit a fallback. So we need to
        // attach a listener now. When it resolves ("pings"), we can decide whether to
        // try rendering the tree again.
        //
        // Only attach a listener if one does not already exist for the lanes
        // we're currently rendering (which acts like a "thread ID" here).
        //
        // We only need to do this in concurrent mode. Legacy Suspense always
        // commits fallbacks synchronously, so there are no pings.
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            if (isDevToolsPresent) // If we have pending work still, restore the original updaters
            restorePendingUpdaters(root, lanes);
            wakeable.then(ping, ping);
        }
    }
    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
        // Retry listener
        //
        // If the fallback does commit, we need to attach a different type of
        // listener. This one schedules an update on the Suspense boundary to turn
        // the fallback state off.
        //
        // Stash the wakeable on the boundary fiber so we can access it in the
        // commit phase.
        //
        // When the wakeable resolves, we'll attempt to render the boundary
        // again ("retry").
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
        } else wakeables.add(wakeable);
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        // A legacy mode Suspense quirk, only relevant to hook components.
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
            } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
            }
        }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) return node;
             // This boundary already captured during this render. Continue to the next
            // boundary.
            node = node.return;
        }while (node !== null);
        return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
        // This marks a Suspense boundary so that when we're unwinding the stack,
        // it captures the suspended "exception" and does a second (fallback) pass.
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            // Legacy Mode Suspense
            //
            // If the boundary is in legacy mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. When the Suspense boundary completes,
            // we'll do a second pass to render the fallback.
            if (suspenseBoundary === returnFiber) // Special case where we suspended while reconciling the children of
            // a Suspense boundary's inner Offscreen wrapper fiber. This happens
            // when a React.lazy component is a direct child of a
            // Suspense boundary.
            //
            // Suspense boundaries are implemented as multiple fibers, but they
            // are a single conceptual unit. The legacy mode behavior where we
            // pretend the suspended fiber committed as `null` won't work,
            // because in this case the "suspended" fiber is the inner
            // Offscreen wrapper.
            //
            // Because the contents of the boundary haven't started rendering
            // yet (i.e. nothing in the tree has partially rendered) we can
            // switch to the regular, concurrent mode behavior: mark the
            // boundary with ShouldCapture and enter the unwind phase.
            suspenseBoundary.flags |= ShouldCapture;
            else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                // But we shouldn't call any lifecycle methods or callbacks. Remove
                // all lifecycle effect tags.
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                    // completed class component. For example, we should not call
                    // componentWillUnmount if it is deleted.
                    sourceFiber.tag = IncompleteClassComponent;
                    else {
                        // When we try rendering again, we should not reuse the current fiber,
                        // since it's known to be in an inconsistent state. Use a force update to
                        // prevent a bail out.
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update, SyncLane);
                    }
                } // The source fiber did not complete. Mark it with Sync priority to
                // indicate that it still has pending work.
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. Transitions apply
        // to this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.
        suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
        // the begin phase to prevent an early bailout.
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete;
        if (isDevToolsPresent) // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, rootRenderLanes);
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
            // This is a wakeable. The component suspended.
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) markDidThrowWhileHydratingDEV();
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
                // commits fallbacks synchronously, so there are no pings.
                if (suspenseBoundary.mode & ConcurrentMode) attachPingListener(root, wakeable, rootRenderLanes);
                attachRetryListener(suspenseBoundary, root, wakeable);
                return;
            } else {
                // No boundary was found. Unless this is a sync update, this is OK.
                // We can suspend and wait for more data to arrive.
                if (!includesSyncLane(rootRenderLanes)) {
                    // This is not a sync update. Suspend. Since we're not activating a
                    // Suspense boundary, this will unwind all the way to the root without
                    // performing a second pass to render a fallback. (This is arguably how
                    // refresh transitions should work, too, since we're not going to commit
                    // the fallbacks anyway.)
                    //
                    // This case also applies to initial hydration.
                    attachPingListener(root, wakeable, rootRenderLanes);
                    renderDidSuspendDelayIfPossible();
                    return;
                } // This is a sync/discrete update. We treat this case like an error
                // because discrete renders are expected to produce a complete tree
                // synchronously to maintain consistency with external state.
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."); // If we're outside a transition, fall through to the regular error path.
                // The error will be caught by the nearest suspense boundary.
                value = uncaughtSuspenseError;
            }
        } else // This is a regular error, not a Suspense wakeable.
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
            // discarding the dehydrated content and switching to a client render.
            // Instead of surfacing the error, find the nearest Suspense boundary
            // and render it again without hydration.
            if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) // Set a flag to indicate that we should try rendering the normal
                // children again, not the fallback.
                _suspenseBoundary.flags |= ForceClientRender;
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
                // still log it so it can be fixed.
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
            }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null);
    }
    function getSuspendedCache() {
        return null;
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
        var currentChild = current.child; // This is always exactly one child
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
        if (!hasScheduledUpdateOrContext) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
                // would during a normal fiber bailout.
                //
                // We don't have strong guarantees that the props object is referentially
                // equal during updates where we can't bail out anyway — like if the props
                // are shallowly equal, but there's a local state or context update in the
                // same batch.
                //
                // However, as a principle, we should aim to make the behavior consistent
                // across different ways of memoizing a component. For example, React.memo
                // has a different internal Fiber layout if you pass a normal function
                // component (SimpleMemoComponent) versus if you pass a different type
                // like forwardRef (MemoComponent). But this is an implementation detail.
                // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
                // affect whether the props object is reused during a bailout.
                workInProgress.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumulated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
            // Rendering a hidden tree.
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Consider how Offscreen should work with transitions in the future
                var nextState = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
                // and resume this tree later.
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes,
                    cachePool: spawnedCachePool,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState;
                workInProgress.updateQueue = null;
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // This is the second render. The surrounding visible content has already
                // committed. Now we resume rendering the hidden tree.
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            // Rendering a visible tree.
            var _subtreeRenderLanes;
            if (prevState !== null) {
                // We're going from hidden -> visible.
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    function updateFragment(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update;
        // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.flags |= Ref;
            workInProgress.flags |= RefStatic;
        }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        // This is used by DevTools to force a boundary to error.
        switch(shouldError(workInProgress)){
            case false:
                var _instance = workInProgress.stateNode;
                var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
                // Is there a better way to do this?
                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
            case true:
                workInProgress.flags |= DidCapture;
                workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state
                var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
                enqueueCapturedUpdate(workInProgress, update);
                break;
        }
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || "a component");
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            markComponentRenderStarted(workInProgress);
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    instance.render();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            setIsRendering(false);
            markComponentRenderStopped();
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        if (current === null) throw new Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var root = workInProgress.stateNode;
        // being called "element".
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
            // This is a hydration root whose shell has not yet hydrated. We should
            // attempt to hydrate.
            // Flip isDehydrated to false to indicate that when this render
            // finishes, the root will no longer be dehydrated.
            var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
            };
            var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
            // have reducer functions so it doesn't need rebasing.
            updateQueue.baseState = overrideState;
            workInProgress.memoizedState = overrideState;
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during a previous attempt to hydrate the shell, so we
                // forced a client render.
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
            } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
            } else {
                // The outermost shell has not hydrated yet. Start hydrating.
                enterHydrationState(workInProgress);
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while(node){
                    // Mark each child as hydrating. This is a fast path to know whether this
                    // tree is part of a hydrating tree. This is used to determine if a child
                    // node has fully mounted yet, and for scheduling event replaying.
                    // Conceptually this is similar to Placement in that a new subtree is
                    // inserted into the React tree here. It just happens to not need DOM
                    // mutations because it already exists.
                    node.flags = node.flags & ~Placement | Hydrating;
                    node = node.sibling;
                }
            }
        } else {
            // Root is not dehydrated. Either this is a client-only root, or it
            // already hydrated.
            resetHydrationState();
            if (nextChildren === prevChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }
        return workInProgress.child;
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
        // Revert to client rendering.
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress.flags |= ForceClientRender;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);
                return child;
        }
        var hint = "";
        if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) hint = " Did you wrap a component in React.lazy() more than once?";
        // because the fact that it's a separate type of work is an
        // implementation detail.
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        var hasId;
        markComponentRenderStarted(workInProgress);
        if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    hasId = checkDidRenderIdHook();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
        }
        if (workInProgress.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += "\n\nCheck the render method of `" + ownerName + "`.";
            var warningKey = ownerName || "";
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes,
            cachePool: getSuspendedCache(),
            transitions: null
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        var cachePool = null;
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
            cachePool: cachePool,
            transitions: prevOffscreenState.transitions
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallback
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else // Attempting the main content
        if (current === null || current.memoizedState !== null) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconciliation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current === null) {
            // Initial mount
            // Special path for hydration
            // If we're currently hydrating, try to hydrate this boundary.
            tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var suspenseState = workInProgress.memoizedState;
            if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
        } else {
            // This is an update.
            // Special path for hydration
            var prevState = current.memoizedState;
            if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
            }
            if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
                var _primaryChildFragment2 = workInProgress.child;
                var prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment3;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
        // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
        // this wrapper function to constrain it.
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
        });
        if ((workInProgress.mode & ConcurrentMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            var deletions = workInProgress.deletions;
            if (deletions === null) {
                workInProgress.deletions = [
                    currentFallbackChildFragment
                ];
                workInProgress.flags |= ChildDeletion;
            } else deletions.push(currentFallbackChildFragment);
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it.
            workInProgress.deletions = null;
        } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
            // (We don't do this in legacy mode, because in legacy mode we don't re-use
            // the current tree; see previous branch.)
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
        // Falling back to client rendering. Because this has performance
        // implications, it's considered a recoverable error, even though the user
        // likely won't observe anything wrong with the UI.
        //
        // The error is passed in as an argument to enforce that every caller provide
        // a custom message, or explicitly opt out (currently the only path that opts
        // out is legacy mode; every concurrent path provides an error).
        if (recoverableError !== null) queueHydrationError(recoverableError);
         // This will add the old fiber to the deletion list
        reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.
        var nextProps = workInProgress.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
        // mounted but this is a new fiber.
        primaryChildFragment.flags |= Placement;
        workInProgress.memoizedState = null;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var fiberMode = workInProgress.mode;
        var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
        // boundary) already mounted but this is a new fiber.
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        if ((workInProgress.mode & ConcurrentMode) !== NoMode) // We will have dropped the effect list which contains the
        // deletion. We need to reconcile to delete the current child.
        reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            workInProgress.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) // This is a client-only boundary. Since we won't get any content from the server
        // for this, we need to schedule that at a higher priority based on when it would
        // have timed out. In theory we could render it in this pass but it would have the
        // wrong priority associated with it and will prevent hydration of parent path.
        // Instead, we'll leave work left on it to render it in a separate commit.
        // TODO This time should be the time at which the server rendered response that is
        // a parent to this boundary was displayed. However, since we currently don't have
        // a protocol to transfer that time, we'll just estimate it by using the current
        // time. This will mean that Suspense timeouts are slightly shifted to later than
        // they should be.
        // Schedule a normal pri update to render this content.
        workInProgress.lanes = laneToLanes(DefaultHydrationLane);
        else // We'll continue hydrating the rest at offscreen priority since we'll already
        // be showing the right content coming from the server, it is no rush.
        workInProgress.lanes = laneToLanes(OffscreenLane);
        return null;
    }
    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
        if (!didSuspend) {
            // This is the first render pass. Attempt to hydrate.
            // We should never be hydrating at this point because it is the first pass,
            // but after we've already committed once.
            warnIfHydrating();
            if ((workInProgress.mode & ConcurrentMode) === NoMode) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null);
            if (isSuspenseInstanceFallback(suspenseInstance)) {
                // This boundary is in a permanent fallback state. In this case, we'll never
                // get an update and we'll never be able to hydrate the final content. Let's just try the
                // client side render instead.
                var digest, message, stack;
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
                var error;
                if (message) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error(message);
                else error = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                var capturedValue = createCapturedValue(error, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
            }
            // any context has changed, we need to treat is as if the input might have changed.
            var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
            if (didReceiveUpdate || hasContextChanged) {
                // This boundary has changed since the first render. This means that we are now unable to
                // hydrate it. We might still be able to hydrate it using a higher priority lane.
                var root = getWorkInProgressRoot();
                if (root !== null) {
                    var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                    if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                        // Intentionally mutating since this render will get interrupted. This
                        // is one of the very rare times where we mutate the current tree
                        // during the render phase.
                        suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render
                        var eventTime = NoTimestamp;
                        enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
                        scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
                    }
                } // If we have scheduled higher pri work above, this will probably just abort the render
                // since we now have higher priority work, but in case it doesn't, we need to prepare to
                // render something, if we time out. Even if that requires us to delete everything and
                // skip hydration.
                // Delay having to do this as long as the suspense timeout allows us.
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
                // This component is still pending more data from the server, so we can't hydrate its
                // content. We treat it as if this component suspended itself. It might seem as if
                // we could just try to render it client-side instead. However, this will perform a
                // lot of unnecessary work and is unlikely to complete since it often will suspend
                // on missing data anyway. Additionally, the server might be able to render more
                // than we can on the client yet. In that case we'd end up with more fallback states
                // on the client than if we just leave it alone. If the server times out or errors
                // these should update this boundary to the permanent Fallback state instead.
                // Mark it as having captured (i.e. suspended).
                workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.
                workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.
                var retry = retryDehydratedSuspenseBoundary.bind(null, current);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
            } else {
                // This is the first attempt.
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
            }
        } else {
            // This is the second render pass. We already attempted to hydrated, but
            // something either suspended or errored.
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during hydration. Try again without hydrating.
                workInProgress.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
            } else if (workInProgress.memoizedState !== null) {
                // Something suspended and we should still be in dehydrated mode.
                // Leave the existing child in place.
                workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
                // but the normal suspense pass doesn't.
                workInProgress.flags |= DidCapture;
                return null;
            } else {
                // Suspended but we should no longer be in dehydrated mode.
                // Therefore we now have to render the fallback.
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var _primaryChildFragment4 = workInProgress.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            }
        }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") switch(revealOrder.toLowerCase()){
                case "together":
                case "forwards":
                case "backwards":
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                case "forward":
                case "backward":
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
            }
            else error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
        if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & ConcurrentMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case "forwards":
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
                break;
            case "backwards":
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                break;
            case "together":
                initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        pushProvider(workInProgress, context, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== "function") error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            if (current !== null) {
                // A lazy component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            }
        }
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) return null;
         // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error("Cannot swap the root fiber.");
         // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
            throw new Error("Expected parent to have a child.");
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
                throw new Error("Expected to find the previous sibling.");
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                current
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(current);
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
        // Before performing an early bailout, we must check if there are pending
        // updates or context.
        var updateLanes = current.lanes;
        if (includesSomeLane(updateLanes, renderLanes)) return true;
         // No pending update, but because context is propagated lazily, we need
        return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
        // This fiber does not have any pending work. Bailout without entering
        // the begin phase. There's still some bookkeeping we that needs to be done
        // in this optimized path, mostly pushing stuff onto the stack.
        switch(workInProgress.tag){
            case HostRoot:
                pushHostRootContext(workInProgress);
                var root = workInProgress.stateNode;
                resetHydrationState();
                break;
            case HostComponent:
                pushHostContext(workInProgress);
                break;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) pushContextProvider(workInProgress);
                break;
            case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            case ContextProvider:
                var newValue = workInProgress.memoizedProps.value;
                var context = workInProgress.type._context;
                pushProvider(workInProgress, context, newValue);
                break;
            case Profiler:
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) workInProgress.flags |= Update;
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
                break;
            case SuspenseComponent:
                var state = workInProgress.memoizedState;
                if (state !== null) {
                    if (state.dehydrated !== null) {
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                        // been unsuspended it has committed as a resolved Suspense component.
                        // If it needs to be retried, it should have work scheduled on it.
                        workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
                        // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
                        return null;
                    } // If this boundary is currently timed out, we need to decide
                    // whether to retry the primary children, or to skip over it and
                    // go straight to the fallback. Check the priority of the primary
                    // child fragment.
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes, primaryChildLanes)) // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                    else {
                        // The primary child fragment does not have pending work marked
                        // on it
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                        // priority. Bailout.
                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        if (child !== null) // The fallback children have pending work. Skip over the
                        // primary children and work on the fallback.
                        return child.sibling;
                        else // Note: We can return `null` here because we already checked
                        // whether there were nested context consumers, via the call to
                        // `bailoutOnAlreadyFinishedWork` above.
                        return null;
                    }
                } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                break;
            case SuspenseListComponent:
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                    if (_hasChildWork) // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                     // If none of the children had any work, that means that none of
                    // them got retried so they'll still be blocked in the same way
                    // as before. We can fast bail out.
                    workInProgress.flags |= DidCapture;
                } // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                    // Reset to the "together" mode in case we've started a different
                    // update in the past but didn't complete it.
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) break;
                else // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
        if (workInProgress._debugNeedsRemount && current !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else {
                // Neither props nor legacy context changes. Check if there's a pending
                // update or context change.
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress.flags & DidCapture) === NoFlags) {
                    // No pending updates or context. Bail out now.
                    didReceiveUpdate = false;
                    return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                }
                if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
                else // An update was scheduled on this fiber, but there are no new props
                // nor legacy context. Set this to false. If an update queue or context
                // consumer produces a changed value, it will set this to true. Otherwise,
                // the component will assume the children have not changed and bail out.
                didReceiveUpdate = false;
            }
        } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress)) {
                // Check if this child belongs to a list of muliple children in
                // its parent.
                //
                // In a true multi-threaded implementation, we would render children on
                // parallel threads. This would represent the beginning of a new render
                // thread for this subtree.
                //
                // We only use this for id generation during hydration, which is why the
                // logic is located in this special branch.
                var slotIndex = workInProgress.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress, numberOfForks, slotIndex);
            }
        } // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, renderLanes);
            case FunctionComponent:
                var Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case IncompleteClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case ScopeComponent:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
        workInProgress.flags |= RefStatic;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(current, workInProgress) {};
    updateHostComponent$1 = function(current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case "hidden":
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case "collapsed":
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while(child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                    subtreeFlags |= child.subtreeFlags;
                    subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                    // When work is done, it should bubble to the parent's actualDuration. If
                    // the fiber has not been cloned though, (meaning no work was done), then
                    // this value will reflect the amount of time spent working on a previous
                    // render. In that case it should not bubble. We determine whether it was
                    // cloned by comparing the child pointer.
                    actualDuration += child.actualDuration;
                    treeBaseDuration += child.treeBaseDuration;
                    child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
            } else {
                var _child = completedWork.child;
                while(_child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                    subtreeFlags |= _child.subtreeFlags;
                    subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child.return = completedWork;
                    _child = _child.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        } else {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while(_child2 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child2.subtreeFlags & StaticMask;
                    subtreeFlags |= _child2.flags & StaticMask;
                    _treeBaseDuration += _child2.treeBaseDuration;
                    _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
                var _child3 = completedWork.child;
                while(_child3 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child3.subtreeFlags & StaticMask;
                    subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child3.return = completedWork;
                    _child3 = _child3.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress);
            resetHydrationState();
            workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
        }
        var wasHydrated = popHydrationState(workInProgress);
        if (nextState !== null && nextState.dehydrated !== null) {
            // We might be inside a hydration state the first time we're picking up this
            // Suspense boundary, and also after we've reentered it for further hydration.
            if (current === null) {
                if (!wasHydrated) throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                prepareToHydrateHostSuspenseInstance(workInProgress);
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            } else {
                // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
                // state since we're now exiting out of it. popHydrationState doesn't do that for us.
                resetHydrationState();
                if ((workInProgress.flags & DidCapture) === NoFlags) // This boundary did not suspend so it's now hydrated and unsuspended.
                workInProgress.memoizedState = null;
                 // If nothing suspended, we need to schedule an effect to mark this boundary
                // as having hydrated so events know that they're free to be invoked.
                // It's also a signal to replay events and the suspense callback.
                // If something suspended, schedule an effect to attach retry listeners.
                // So we might as well always mark this.
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var _primaryChildFragment = workInProgress.child;
                        if (_primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            }
        } else {
            // Successfully completed this tree. If this was a forced client render,
            // there may have been recoverable errors during first hydration
            // attempt. If so, add them to a queue so we can log them in the
            // commit phase.
            upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path
            return true;
        }
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                bubbleProperties(workInProgress);
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostRoot:
                var fiberRoot = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (current !== null) {
                        var prevState = current.memoizedState;
                        if (!prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress.flags & ForceClientRender) !== NoFlags) {
                            // Schedule an effect to clear this container at the start of the
                            // next commit. This handles the case of React rendering into a
                            // container with previous children. It's also safe to do for
                            // updates too, because current.child would only be null if the
                            // previous render was null (so the container would already
                            // be empty).
                            workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                            // recoverable errors during first hydration attempt. If so, add
                            // them to a queue so we can log them in the commit phase.
                            upgradeHydrationErrorsToRecoverable();
                        }
                    }
                }
                updateHostContainer(current, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== "string") {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
                // to its own fiber type so that we can add other kinds of hydration
                // boundaries that aren't associated with a Suspense tree. In anticipation
                // of such a refactor, all the hydration logic is contained in
                // this branch.
                if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
                    var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);
                    if (!fallthroughToNormalSuspensePath) {
                        if (workInProgress.flags & ShouldCapture) // Special case. There were remaining unhydrated nodes. We treat
                        // this as a mismatch. Revert to client rendering.
                        return workInProgress;
                        else // Did not finish hydrating, either because this is the initial
                        // render or because something suspended.
                        return null;
                    } // Continue with the normal Suspense path.
                }
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                     // Don't bubble properties in this case.
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current !== null && current.memoizedState !== null;
                // a passive effect, which is when we process the transitions
                if (nextDidTimeout !== prevDidTimeout) // an effect to toggle the subtree's visibility. When we switch from
                // fallback -> primary, the inner Offscreen fiber schedules this effect
                // as part of its normal complete phase. But when we switch from
                // primary -> fallback, the inner Offscreen fiber does not have a complete
                // phase. So we need to schedule its effect here.
                //
                // We also use this flag to connect/disconnect the effects, but the same
                // logic applies: when re-connecting, the Offscreen fiber's complete
                // phase will handle scheduling the effect. It's only when the fallback
                // is active that we have to do anything special.
                {
                    if (nextDidTimeout) {
                        var _offscreenFiber2 = workInProgress.child;
                        _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
                        // in the concurrent tree already suspended during this render.
                        // This is a known bug.
                        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                            // TODO: Move this back to throwException because this is too late
                            // if this is a large tree which is common for initial loads. We
                            // don't know if we should restart a render or not until we get
                            // this marker, and this is too late.
                            // If this render already had a ping or lower pri updates,
                            // and this is the first time we know we're going to suspend we
                            // should be able to immediately restart from within throwException.
                            var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                            // this boundary is ok.
                            renderDidSuspend();
                            else // Otherwise, we're going to have to hide content so we should
                            // suspend for longer if possible.
                            renderDidSuspendDelayIfPossible();
                        }
                    }
                }
                var wakeables = workInProgress.updateQueue;
                if (wakeables !== null) // Schedule an effect to attach a retry listener to the promise.
                // TODO: Move to passive phase
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(current, workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                bubbleProperties(workInProgress);
                return null;
            case ContextProvider:
                // Pop provider fiber
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) {
                    // We're running in the default, "independent" mode.
                    // We don't do anything in this mode.
                    bubbleProperties(workInProgress);
                    return null;
                }
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thenables. Instead, we'll transfer its thenables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThenables = suspended.updateQueue;
                                    if (newThenables !== null) {
                                        workInProgress.updateQueue = newThenables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect flags before doing the second pass since that's now invalid.
                                    // Reset the child fibers to their original state.
                                    workInProgress.subtreeFlags = NoFlags;
                                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThenables = _suspended.updateQueue;
                            if (_newThenables !== null) {
                                workInProgress.updateQueue = _newThenables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We're done.
                                bubbleProperties(workInProgress);
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    // Don't bubble properties in this case.
                    return next;
                }
                bubbleProperties(workInProgress);
                return null;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                var _nextState = workInProgress.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current !== null) {
                    var _prevState = current.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) workInProgress.flags |= Visibility;
                }
                if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) bubbleProperties(workInProgress);
                else // Don't bubble properties for hidden children unless we're rendering
                // at offscreen priority.
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress);
                    // Check if there was an insertion or update in the hidden subtree.
                    // If so, we need to hide those nodes in the commit phase, so
                    // schedule a visibility effect.
                    if (workInProgress.subtreeFlags & (Placement | Update)) workInProgress.flags |= Visibility;
                }
                return null;
            case CacheComponent:
                return null;
            case TracingMarkerComponent:
                return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
    }
    function unwindWork(current, workInProgress, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                var root = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                    // There was an error during render that wasn't captured by a suspense
                    // boundary. Do a second pass on the root to unmount the children.
                    workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                    return workInProgress;
                } // We unwound to the root without completing it. Exit.
                return null;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var suspenseState = workInProgress.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (workInProgress.alternate === null) throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    resetHydrationState();
                }
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            case CacheComponent:
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(current, interruptedWork, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(interruptedWork);
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                var root = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
    // Only used when enableSuspenseLayoutEffectSemantics is enabled.
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
    var nextEffect = null; // Used for Profiling builds to track updaters.
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error) {
        invokeGuardedCallback(null, function() {
            throw error;
        });
        clearCaughtError();
    }
    var callComponentWillUnmountWithTimer = function(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        if (current.mode & ProfileMode) try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
        } finally{
            recordLayoutEffectDuration(current);
        }
        else instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt mounting.
    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
        try {
            commitHookEffectListMount(Layout, current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        try {
            callComponentWillUnmountWithTimer(current, instance);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
        try {
            instance.componentDidMount();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            commitAttachRef(current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === "function") {
                var retVal;
                try {
                    if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        retVal = ref(null);
                    } finally{
                        recordLayoutEffectDuration(current);
                    }
                    else retVal = ref(null);
                } catch (error) {
                    captureCommitPhaseError(current, nearestMountedAncestor, error);
                }
                if (typeof retVal === "function") error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current));
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
        try {
            destroy();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root, firstChild) {
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitBeforeMutationEffects_complete();
        }
    }
    function commitBeforeMutationEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch(finishedWork.tag){
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    break;
                case ClassComponent:
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                    break;
                case HostRoot:
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                    break;
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                    break;
                default:
                    throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            resetCurrentFiber();
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStarted(finishedWork);
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStarted(finishedWork);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                        safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStopped();
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStopped();
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect);
        }
    }
    function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStarted(finishedWork);
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStarted(finishedWork);
                    var create = effect.create;
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                    effect.destroy = create();
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStopped();
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStopped();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== "function") {
                        var hookName = void 0;
                        if ((effect.tag & Layout) !== NoFlags) hookName = "useLayoutEffect";
                        else if ((effect.tag & Insertion) !== NoFlags) hookName = "useInsertionEffect";
                        else hookName = "useEffect";
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === "function") addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + hookName + "(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = " You returned: " + destroy;
                        error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect);
        }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        // Only Profilers with work in their subtree will have an Update effect scheduled.
        if ((finishedWork.flags & Update) !== NoFlags) switch(finishedWork.tag){
            case Profiler:
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
                // It does not get reset until the start of the next commit phase.
                var commitTime = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                if (isCurrentUpdateNested()) phase = "nested-update";
                if (typeof onPostCommit === "function") onPostCommit(id, phase, passiveEffectDuration, commitTime);
                 // Bubble times to the next nearest ancestor Profiler.
                // After we process that Profiler, we'll bubble further up.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
        }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    // At this point layout effects have already been destroyed (during mutation phase).
                    // This is done to prevent sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally{
                        recordLayoutEffectDuration(finishedWork);
                    }
                    else commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                break;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                        if (current === null) {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidMount();
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidMount();
                        } else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                            var prevState = current.memoizedState; // We could update instance props and state here,
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                break;
            case HostText:
                break;
            case HostPortal:
                break;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                var phase = current === null ? "mount" : "update";
                if (isCurrentUpdateNested()) phase = "nested-update";
                if (typeof onRender === "function") onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
                if (typeof onCommit === "function") onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                 // Schedule a passive effect for this Profiler to call onPostCommit hooks.
                // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
                // because the effect is also where times bubble to parent Profilers.
                enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
                // Do not reset these values until the next render so DevTools has a chance to read them first.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.effectDuration += effectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
                break;
            default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (!offscreenSubtreeWasHidden) {
            if (finishedWork.flags & Ref) commitAttachRef(finishedWork);
        }
    }
    function reappearLayoutEffectsOnFiber(node) {
        // Turn on layout effects in a tree that previously disappeared.
        // TODO (Offscreen) Check: flags & LayoutStatic
        switch(node.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (node.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally{
                    recordLayoutEffectDuration(node);
                }
                else safelyCallCommitHookLayoutEffectListMount(node, node.return);
                break;
            case ClassComponent:
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") safelyCallComponentDidMount(node, node.return, instance);
                safelyAttachRef(node, node.return);
                break;
            case HostComponent:
                safelyAttachRef(node, node.return);
                break;
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // Only hide or unhide the top-most host nodes.
        var hostSubtreeRoot = null;
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                        var instance = node.stateNode;
                        if (isHidden) hideInstance(instance);
                        else unhideInstance(node.stateNode, node.memoizedProps);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
            } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) try {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                if (hostSubtreeRoot === node) hostSubtreeRoot = null;
                node = node.return;
            }
            if (hostSubtreeRoot === node) hostSubtreeRoot = null;
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else retVal = ref(instanceToUse);
                if (typeof retVal === "function") error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            } else {
                if (!ref.hasOwnProperty("current")) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointer to disconnect it from the tree.
        // This enables us to detect and warn against state updates on an unmounted component.
        // It also prevents events from bubbling from within disconnected components.
        //
        // Ideally, we should also clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child.
        // This child itself will be GC:ed when the parent updates the next time.
        //
        // Note that we can't clear child or sibling pointers yet.
        // They're needed for passive effects and for findDOMNode.
        // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
        //
        // Don't reset the alternate yet, either. We need that so we can detach the
        // alternate's fields in the passive phase. Clearing the return pointer is
        // sufficient for findDOMNode semantics.
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.return = null;
        fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
        } // Note: Defensively using negation instead of < in case
        // Clear cyclical Fiber fields. This level alone is designed to roughly
        // approximate the planned Fiber refactor. In that world, `setState` will be
        // bound to a special "instance" object instead of a Fiber. The Instance
        // object will not have any of these fields. It will only be connected to
        // the fiber tree via a single link at the root. So if this level alone is
        // sufficient to fix memory issues, that bodes well for our plans.
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
        // tree, which has its own pointers to children, parents, and siblings.
        // The other host nodes also point back to fibers, so we should detach that
        // one, too.
        if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) detachDeletedInstance(hostInstance);
        }
        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
        fiber._debugOwner = null;
        // Theoretically, nothing in here should be necessary, because we already
        // disconnected the fiber from the tree. So even if something leaks this
        // particular fiber, it won't leak anything else
        //
        // The purpose of this branch is to be super aggressive so we can measure
        // if there's any difference in memory impact. If there is, that could
        // indicate a React leak we don't know about.
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
        fiber.updateQueue = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        switch(parentFiber.tag){
            case HostComponent:
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent); // Clear ContentReset from the effect tag
                    parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                // children to find all the terminal nodes.
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
            case HostRoot:
            case HostPortal:
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
            // eslint-disable-next-line-no-fallthrough
            default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    } // These are tracked on the stack as we recursively traverse a
    // deleted subtree.
    // TODO: Update these during the whole mutation phase, not just during
    // a deletion.
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root, returnFiber, deletedFiber) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        // Recursively delete all host nodes from the parent, detach refs, clean
        // up mounted layout effects, and call componentWillUnmount.
        // We only need to remove the topmost host child in each branch. But then we
        // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
        // could split this into two separate traversals functions, where the second
        // one doesn't include any removeChild logic. This is maybe the same
        // function as "disappearLayoutEffects" (or whatever that turns into after
        // the layout phase is refactored to use recursion).
        // Before starting, find the nearest host parent on the stack so we know
        // which instance/container to remove the children from.
        // TODO: Instead of searching up the fiber return path on every deletion, we
        // can track the nearest host component on the JS stack as we traverse the
        // tree during the commit phase. This would make insertions faster, too.
        var parent = returnFiber;
        findParent: while(parent !== null){
            switch(parent.tag){
                case HostComponent:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                case HostRoot:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                case HostPortal:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
            }
            parent = parent.return;
        }
        if (hostParent === null) throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
        detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        // TODO: Use a static flag to skip trees that don't have unmount effects
        var child = parent.child;
        while(child !== null){
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
        }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
        // into their subtree. There are simpler cases in the inner switch
        // that don't modify the stack.
        switch(deletedFiber.tag){
            case HostComponent:
                if (!offscreenSubtreeWasHidden) safelyDetachRef(deletedFiber, nearestMountedAncestor);
                 // Intentional fallthrough to next branch
            // eslint-disable-next-line-no-fallthrough
            case HostText:
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                    // Now that all the child effects have unmounted, we can remove the
                    // node from the tree.
                    if (hostParentIsContainer) removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    else removeChild(hostParent, deletedFiber.stateNode);
                }
                return;
            case DehydratedFragment:
                if (hostParent !== null) {
                    if (hostParentIsContainer) clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    else clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
                return;
            case HostPortal:
                // When we go into a portal, it becomes the parent to remove from.
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
                return;
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    var updateQueue = deletedFiber.updateQueue;
                    if (updateQueue !== null) {
                        var lastEffect = updateQueue.lastEffect;
                        if (lastEffect !== null) {
                            var firstEffect = lastEffect.next;
                            var effect = firstEffect;
                            do {
                                var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                                if (destroy !== undefined) {
                                    if ((tag & Insertion) !== NoFlags$1) safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                    else if ((tag & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                                        if (deletedFiber.mode & ProfileMode) {
                                            startLayoutEffectTimer();
                                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                            recordLayoutEffectDuration(deletedFiber);
                                        } else safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                        markComponentLayoutEffectUnmountStopped();
                                    }
                                }
                                effect = effect.next;
                            }while (effect !== firstEffect);
                        }
                    }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ClassComponent:
                if (!offscreenSubtreeWasHidden) {
                    safelyDetachRef(deletedFiber, nearestMountedAncestor);
                    var instance = deletedFiber.stateNode;
                    if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ScopeComponent:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case OffscreenComponent:
                if (deletedFiber.mode & ConcurrentMode) {
                    // If this offscreen component is hidden, we already unmounted it. Before
                    // deleting the children, track that it's already unmounted so that we
                    // don't attempt to unmount the effects again.
                    // TODO: If the tree is hidden, in most cases we should be able to skip
                    // over the nested children entirely. An exception is we haven't yet found
                    // the topmost host node to delete, which we already track on the stack.
                    // But the other case is portals, which need to be detached no matter how
                    // deeply they are nested. We should use a subtree flag to track whether a
                    // subtree includes a nested portal.
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                break;
            default:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
        }
    }
    function commitSuspenseCallback(finishedWork) {
        // TODO: Move this to passive phase
        var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    retryCache.add(wakeable);
                    if (isDevToolsPresent) {
                        if (inProgressLanes !== null && inProgressRoot !== null) // If we have pending work still, associate the original updaters with it.
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                        else throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    function commitMutationEffects(root, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
        // Deletions effects can be scheduled on any fiber type. They need to happen
        // before the children effects hae fired.
        var deletions = parentFiber.deletions;
        if (deletions !== null) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            try {
                commitDeletionEffects(root, parentFiber, childToDelete);
            } catch (error) {
                captureCommitPhaseError(childToDelete, parentFiber, error);
            }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while(child !== null){
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root);
                child = child.sibling;
            }
        }
        setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
        // because the fiber tag is more specific. An exception is any flag related
        // to reconcilation, because those can be set on all fiber types.
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    try {
                        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                        commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    } // Layout effects are destroyed during the mutation phase so that all
                    // destroy functions for all fibers are called before any create functions.
                    // This prevents sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) {
                        try {
                            startLayoutEffectTimer();
                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                        recordLayoutEffectDuration(finishedWork);
                    } else try {
                        commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                return;
            case ClassComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                return;
            case HostComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                // TODO: ContentReset gets cleared by the children during the commit
                // phase. This is a refactor hazard because it means we must read
                // flags the flags after `commitReconciliationEffects` has already run;
                // the order matters. We should refactor so that ContentReset does not
                // rely on mutating the flag during commit. Like by setting a flag
                // during the render phase instead.
                if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                        resetTextContent(instance);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                        // Commit the work prepared earlier.
                        var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                        // as the newProps. The updatePayload will contain the real change in
                        // this case.
                        var oldProps = current !== null ? current.memoizedProps : newProps;
                        var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                        var updatePayload = finishedWork.updateQueue;
                        finishedWork.updateQueue = null;
                        if (updatePayload !== null) try {
                            commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                    }
                }
                return;
            case HostText:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (finishedWork.stateNode === null) throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldText = current !== null ? current.memoizedProps : newText;
                    try {
                        commitTextUpdate(textInstance, oldText, newText);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                return;
            case HostRoot:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (current !== null) {
                        var prevRootState = current.memoizedState;
                        if (prevRootState.isDehydrated) try {
                            commitHydratedContainer(root.containerInfo);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                    }
                }
                return;
            case HostPortal:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
            case SuspenseComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                    var offscreenInstance = offscreenFiber.stateNode;
                    var newState = offscreenFiber.memoizedState;
                    var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
                    // read it during an event
                    offscreenInstance.isHidden = isHidden;
                    if (isHidden) {
                        var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                        if (!wasHidden) // TODO: Move to passive phase
                        markCommitTimeOfFallback();
                    }
                }
                if (flags & Update) {
                    try {
                        commitSuspenseCallback(finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                    attachSuspenseRetryListeners(finishedWork);
                }
                return;
            case OffscreenComponent:
                var _wasHidden = current !== null && current.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                    // Before committing the children, track on the stack whether this
                    // offscreen subtree was already hidden, so that we don't unmount the
                    // effects again.
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                    recursivelyTraverseMutationEffects(root, finishedWork);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                    var _offscreenInstance = finishedWork.stateNode;
                    var _newState = finishedWork.memoizedState;
                    var _isHidden = _newState !== null;
                    var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
                    // read it during an event
                    _offscreenInstance.isHidden = _isHidden;
                    if (_isHidden) {
                        if (!_wasHidden) {
                            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                                nextEffect = offscreenBoundary;
                                var offscreenChild = offscreenBoundary.child;
                                while(offscreenChild !== null){
                                    nextEffect = offscreenChild;
                                    disappearLayoutEffects_begin(offscreenChild);
                                    offscreenChild = offscreenChild.sibling;
                                }
                            }
                        }
                    }
                    // TODO: This needs to run whenever there's an insertion or update
                    // inside a hidden Offscreen tree.
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
                return;
            case SuspenseListComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) attachSuspenseRetryListeners(finishedWork);
                return;
            case ScopeComponent:
                return;
            default:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
        }
    }
    function commitReconciliationEffects(finishedWork) {
        // Placement effects (insertions, reorders) can be scheduled on any fiber
        // type. They needs to happen after the children effects have fired, but
        // before the effects on this fiber have fired.
        var flags = finishedWork.flags;
        if (flags & Placement) {
            try {
                commitPlacement(finishedWork);
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            } // Clear the "placement" from effect tag so that we know that this is
            // inserted, before any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted does
            // and isMounted is deprecated anyway so we should be able to kill this.
            finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) finishedWork.flags &= ~Hydrating;
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
        // Suspense layout effects semantics don't change for legacy roots.
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
                // Keep track of the current Offscreen stack's state.
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                    // The Offscreen tree is hidden. Skip over its layout effects.
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                } else {
                    // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
                    var current = fiber.alternate;
                    var wasHidden = current !== null && current.memoizedState !== null;
                    var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.
                    offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                    if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                        // This is the root of a reappearing boundary. Turn its layout effects
                        // back on.
                        nextEffect = fiber;
                        reappearLayoutEffects_begin(fiber);
                    }
                    var child = firstChild;
                    while(child !== null){
                        nextEffect = child;
                        commitLayoutEffects_begin(child, root, committedLanes);
                        child = child.sibling;
                    } // Restore Offscreen state and resume in our-progress traversal.
                    nextEffect = fiber;
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                    commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
            switch(fiber.tag){
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    if (fiber.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally{
                        recordLayoutEffectDuration(fiber);
                    }
                    else commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    break;
                case ClassComponent:
                    // TODO (Offscreen) Check: flags & RefStatic
                    safelyDetachRef(fiber, fiber.return);
                    var instance = fiber.stateNode;
                    if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                    break;
                case HostComponent:
                    safelyDetachRef(fiber, fiber.return);
                    break;
                case OffscreenComponent:
                    // Check if this is a
                    var isHidden = fiber.memoizedState !== null;
                    if (isHidden) {
                        // Nested Offscreen tree is already hidden. Don't disappear
                        // its effects.
                        disappearLayoutEffects_complete(subtreeRoot);
                        continue;
                    }
                    break;
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else disappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                    // Nested Offscreen tree is still hidden. Don't re-appear its effects.
                    reappearLayoutEffects_complete(subtreeRoot);
                    continue;
                }
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else reappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic
            setCurrentFiber(fiber);
            try {
                reappearLayoutEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
        }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                    commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    try {
                        commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                    } finally{
                        recordPassiveEffectDuration(finishedWork);
                    }
                } else commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
        }
    }
    function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                    for(var i = 0; i < deletions.length; i++){
                        var fiberToDelete = deletions[i];
                        nextEffect = fiberToDelete;
                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                    }
                    // A fiber was deleted from this parent fiber, but it's still part of
                    // the previous (alternate) parent fiber's list of children. Because
                    // children are a linked list, an earlier sibling that's still alive
                    // will be connected to the deleted fiber via its `alternate`:
                    //
                    //   live fiber
                    //   --alternate--> previous live fiber
                    //   --sibling--> deleted fiber
                    //
                    // We can't disconnect `alternate` on nodes that haven't been deleted
                    // yet, but we can disconnect the `sibling` and `child` pointers.
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                        var detachedChild = previousFiber.child;
                        if (detachedChild !== null) {
                            previousFiber.child = null;
                            do {
                                var detachedSibling = detachedChild.sibling;
                                detachedChild.sibling = null;
                                detachedChild = detachedSibling;
                            }while (detachedChild !== null);
                        }
                    }
                    nextEffect = fiber;
                }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffects_complete();
        }
    }
    function commitPassiveUnmountEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                    recordPassiveEffectDuration(finishedWork);
                } else commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                break;
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while(nextEffect !== null){
            var fiber = nextEffect; // Deletion effects fire in parent -> child order
            // TODO: Check if fiber has a PassiveStatic flag
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
            // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
            if (child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            // Recursively traverse the entire deleted tree and clean up fiber fields.
            // This is more aggressive than ideal, and the long term goal is to only
            // have to detach the deleted tree at the root.
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
            }
            if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
            }
            nextEffect = returnFiber;
        }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (current.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                    recordPassiveEffectDuration(current);
                } else commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                break;
        }
    } // TODO: Reuse reappearLayoutEffects traversal here?
    function invokeLayoutEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                try {
                    instance.componentDidMount();
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokePassiveEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                break;
        }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
        }
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor("selector.role");
        TEST_NAME_TYPE = symbolFor("selector.test_id");
        TEXT_TYPE = symbolFor("selector.text");
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
        // Legacy mode. We preserve the behavior of React 17's act. It assumes an
        // act environment whenever `jest` is defined, but you can still turn off
        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
        // to false.
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest
        var jestIsDefined = typeof jest !== "undefined";
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
    }
    function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) // TODO: Include link to relevant documentation page.
        error("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var RenderContext = /*                */ 2;
    var CommitContext = /*                */ 4;
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).
    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.
    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
    // We will log them once the tree commits.
    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) // This is a render phase update. These are not officially supported. The
        // old behavior is to give this the same "thread" (lanes) as
        // whatever is currently rendering. So if you call `setState` on a component
        // that happens later in the same render, it will flush. Ideally, we want to
        // remove the special case and treat them as if they came from an
        // interleaved event. Regardless, this pattern is not officially supported.
        // This behavior is only a fallback. The flag only exists until we can roll
        // out the setState warning, since existing code might accidentally rely on
        // the current behavior.
        return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) transition._updatedFibers = new Set();
                transition._updatedFibers.add(fiber);
            } // The algorithm for assigning an update to a lane should be stable for all
            // updates at the same priority within the same event. To do this, the
            // inputs to the algorithm must be the same.
            //
            // The trick we use is to cache the first of each of these inputs within an
            // event. Then reset the cached values once we can be sure the event is
            // over. Our heuristic for that is whenever we enter a concurrent work loop.
            if (currentEventTransitionLane === NoLane) // All transitions within the same event are assigned the same lane.
            currentEventTransitionLane = claimNextTransitionLane();
            return currentEventTransitionLane;
        } // Updates originating inside certain React methods, like flushSync, have
        // their priority set by tracking it with a context variable.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) return updateLane;
         // This update originated outside React. Ask the host environment for an
        // appropriate priority, based on the type of event.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var eventLane = getCurrentEventPriority();
        return eventLane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
        checkForNestedUpdates();
        if (isRunningInsertionEffect) error("useInsertionEffect must not schedule updates.");
        if (isFlushingPassiveEffects) didScheduleUpdateDuringPassiveEffects = true;
        markRootUpdated(root, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) // This update was dispatched during the render phase. This is a mistake
        // if the update originates from user space (with the exception of local
        // hook updates, which are handled differently and don't reach this
        // function), but there are some internal React features that use this as
        // an implementation detail, like selective hydration.
        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
        else {
            if (isDevToolsPresent) addFiberToLanesMap(root, fiber, lane);
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root === workInProgressRoot) {
                // Received an update to a tree that's in the middle of rendering. Mark
                // that there was an interleaved update work on this root. Unless the
                // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                // phase update. In that case, we don't treat render phase updates as if
                // they were interleaved, for backwards compat reasons.
                if ((executionContext & RenderContext) === NoContext) workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
                // definitely won't finish. Since we have a new update, let's mark it as
                // suspended now, right before marking the incoming update. This has the
                // effect of interrupting the current render and switching to the update.
                // TODO: Make sure this doesn't override pings that happen while we've
                // already started rendering.
                markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
            ensureRootIsScheduled(root, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
        // This is a special fork of scheduleUpdateOnFiber that is only used to
        // schedule the initial hydration of a root that has just been created. Most
        // of the stuff in scheduleUpdateOnFiber can be skipped.
        //
        // The main reason for this separate path, though, is to distinguish the
        // initial children from subsequent updates. In fully client-rendered roots
        // (createRoot instead of hydrateRoot), all top-level renders are modeled as
        // updates, but hydration roots are special because the initial render must
        // match what was rendered on the server.
        var current = root.current;
        current.lanes = lane;
        markRootUpdated(root, lane, eventTime);
        ensureRootIsScheduled(root, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
        // Check if this is a render phase update. Only called by class components,
        // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
        return(// decided not to enable it.
        (executionContext & RenderContext) !== NoContext);
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) cancelCallback$1(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLane;
            return;
        } // We use the highest priority lane to represent the priority of the callback.
        var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
        // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            // If we're going to re-use an existing task, it needs to exist.
            // Assume that discrete update microtasks are non-cancellable and null.
            // TODO: Temporary until we confirm this warning is not fired.
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            return;
        }
        if (existingCallbackNode != null) // Cancel the existing callback. We'll schedule a new one below.
        cancelCallback$1(existingCallbackNode);
         // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
            // Special case: Sync React callbacks are scheduled on a special
            // internal queue
            if (root.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
            } else scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            // Flush the queue in a microtask.
            if (ReactCurrentActQueue$1.current !== null) // Inside `act`, use our internal `act` queue so that these get flushed
            // at the end of the current scope even when using the sync version
            // of `act`.
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            else scheduleMicrotask(function() {
                // In Safari, appending an iframe forces microtasks to run.
                // https://github.com/facebook/react/issues/22459
                // We don't support running callbacks in the middle of render
                // or commit so we need to check against that.
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) // Note that this would still prematurely flush the callbacks
                // if this happens outside render or commit phase (e.g. in an event).
                flushSyncCallbacks();
            });
            newCallbackNode = null;
        } else {
            var schedulerPriorityLevel;
            switch(lanesToEventPriority(nextLanes)){
                case DiscreteEventPriority:
                    schedulerPriorityLevel = ImmediatePriority;
                    break;
                case ContinuousEventPriority:
                    schedulerPriorityLevel = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    schedulerPriorityLevel = NormalPriority;
                    break;
                case IdleEventPriority:
                    schedulerPriorityLevel = IdlePriority;
                    break;
                default:
                    schedulerPriorityLevel = NormalPriority;
                    break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root, didTimeout) {
        resetNestedUpdateFlag();
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next lanes to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
         // We disable time-slicing in some cases: if the work has been CPU-bound
        // for too long ("expired" work, to prevent starvation), or we're in
        // sync-updates-by-default mode.
        // TODO: We only check `didTimeout` defensively, to account for a Scheduler
        // bug we're still investigating. Once the bug in Scheduler is fixed,
        // we can remove this, since we track expiration ourselves.
        var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
        if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
                // If something threw an error, try rendering one more time. We'll
                // render synchronously to block concurrent data mutations, and we'll
                // includes all pending updates are included. If it still fails after
                // the second attempt, we'll give up and commit the resulting tree.
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                if (errorRetryLanes !== NoLanes) {
                    lanes = errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                }
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) // The render unwound without completing the tree. This happens in special
            // cases where need to exit the current render without producing a
            // consistent tree or committing.
            //
            // This should only happen during a concurrent render, not a discrete or
            // synchronous update. We should have already checked for this when we
            // unwound the stack.
            markRootSuspended$1(root, lanes);
            else {
                // The render completed.
                // Check if this render may have yielded to a concurrent event, and if so,
                // confirm that any newly rendered stores are consistent.
                // TODO: It's possible that even a concurrent render may never have yielded
                // to the main thread, if it was fast enough, or if it expired. We could
                // skip the consistency check in that case, too.
                var renderWasConcurrent = !includesBlockingLane(root, lanes);
                var finishedWork = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                    // A store was mutated in an interleaved event. Render again,
                    // synchronously, to block further mutations.
                    exitStatus = renderRootSync(root, lanes); // We need to check again if something threw
                    if (exitStatus === RootErrored) {
                        var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                        if (_errorRetryLanes !== NoLanes) {
                            lanes = _errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
                        // concurrent events.
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var _fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root, NoLanes);
                        markRootSuspended$1(root, lanes);
                        ensureRootIsScheduled(root, now());
                        throw _fatalError;
                    }
                } // We now have a consistent tree. The next step is either to commit it,
                // or, if something suspended, wait to commit it after a timeout.
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
            }
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function recoverFromConcurrentError(root, errorRetryLanes) {
        // If an error occurred during hydration, discard server response and fall
        // back to client side render.
        // Before rendering again, save the errors from the previous attempt.
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root)) {
            // The shell failed to hydrate. Set a flag to force a client rendering
            // during the next attempt. To do this, we call prepareFreshStack now
            // to create the root work-in-progress fiber. This is a bit weird in terms
            // of factoring, because it relies on renderRootSync not calling
            // prepareFreshStack again in the call below, which happens because the
            // root and lanes haven't changed.
            //
            // TODO: I think what we should do is set ForceClientRender inside
            // throwException, like we do for nested Suspense boundaries. The reason
            // it's here instead is so we can switch to the synchronous work loop, too.
            // Something to consider for a future refactor.
            var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            errorHydratingContainer(root.containerInfo);
        }
        var exitStatus = renderRootSync(root, errorRetryLanes);
        if (exitStatus !== RootErrored) {
            // Successfully finished rendering on retry
            // The errors from the failed first attempt have been recovered. Add
            // them to the collection of recoverable errors. We'll log them in the
            // commit phase.
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
            // from the first attempt, to preserve the causal sequence.
            if (errorsFromSecondAttempt !== null) queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
    }
    function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) workInProgressRootRecoverableErrors = errors;
        else workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootInProgress:
            case RootFatalErrored:
                throw new Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            default:
                throw new Error("Unknown root exit status.");
        }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        // Search the rendered tree for external store reads, and check whether the
        // stores were mutated in a concurrent event. Intentionally using an iterative
        // loop instead of recursion so we can exit early.
        var node = finishedWork;
        while(true){
            if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                    var checks = updateQueue.stores;
                    if (checks !== null) for(var i = 0; i < checks.length; i++){
                        var check = checks[i];
                        var getSnapshot = check.getSnapshot;
                        var renderedValue = check.value;
                        try {
                            if (!objectIs(getSnapshot(), renderedValue)) // Found an inconsistent store.
                            return false;
                        } catch (error) {
                            // If `getSnapshot` throws, return `false`. This will schedule
                            // a re-render, and the error will be rethrown during render.
                            return false;
                        }
                    }
                }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
            }
            if (node === finishedWork) return true;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return true;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow doesn't know this is unreachable, but eslint does
        // eslint-disable-next-line no-unreachable
        return true;
    }
    function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
        syncNestedUpdateFlag();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
        flushPassiveEffects();
        var lanes = getNextLanes(root, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
            // There's no remaining sync work left.
            ensureRootIsScheduled(root, now());
            return null;
        }
        var exitStatus = renderRootSync(root, lanes);
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
            if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
            }
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) throw new Error("Root did not complete. This is a bug in React.");
         // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushRoot(root, lanes) {
        if (lanes !== NoLanes) {
            markRootEntangled(root, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
            }
        }
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
            // most batchedUpdates-like method.
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) resetRenderTimer();
        }
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync(fn) {
        // In legacy mode, we flush pending passive effects at the beginning of the
        // next event, not at the end of the previous one.
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) return fn();
            else return undefined;
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) flushSyncCallbacks();
        }
    }
    function isAlreadyRendering() {
        // Used by the renderer to print a warning if certain APIs are called from
        // the wrong context.
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                var current = interruptedWork.alternate;
                unwindInterruptedWork(current, interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        var rootWorkInProgress = createWorkInProgress(root.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return rootWorkInProgress;
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                if (enableSchedulingProfiler) {
                    markComponentRenderStopped();
                    if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                        var wakeable = thrownValue;
                        markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                    } else markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true);
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError(error) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) workInProgressRootExitStatus = RootErrored;
        if (workInProgressRootConcurrentErrors === null) workInProgressRootConcurrentErrors = [
            error
        ];
        else workInProgressRootConcurrentErrors.push(error);
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) // This is a sync render, so we should have finished the whole tree.
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
            markRenderYielded();
            return RootInProgress;
        } else {
            markRenderStopped();
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its subtree flags.
                    returnFiber.flags |= Incomplete;
                    returnFiber.subtreeFlags = NoFlags;
                    returnFiber.deletions = null;
                } else {
                    // We've unwound all the way to the root.
                    workInProgressRootExitStatus = RootDidNotComplete;
                    workInProgress = null;
                    return;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null); // We've reached the root.
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootCompleted;
    }
    function commitRoot(root, recoverableErrors, transitions) {
        // TODO: This no longer makes any sense. We already wrap the mutation and
        // layout phases. Should be able to remove.
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally{
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
    }
    function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        markCommitStarted(lanes);
        if (finishedWork === null) {
            markCommitStopped();
            return null;
        } else if (lanes === NoLanes) error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (finishedWork === root.current) throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root.callbackNode = null;
        root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);
        if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // If there are pending passive effects, schedule a callback to process them.
        // Do this as early as possible, so it is queued before anything else that
        // might get scheduled in the commit phase. (See #16714.)
        // TODO: Delete all other places that schedule the passive effect callback
        // They're redundant.
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                // to store it in pendingPassiveTransitions until they get processed
                // We need to pass this through as an argument to commitRoot
                // because workInProgressTransitions might have changed between
                // the previous render and commit if we throttle the commit
                // with setTimeout
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                    flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
                    // *after* passive effects fire to avoid freeing a cache pool that may
                    // be referenced by a node in the tree (HostRoot, Cache boundary etc)
                    return null;
                });
            }
        } // Check if there are any effects in the whole tree.
        // TODO: This is left over from the effect list implementation, where we had
        // to check for the existence of `firstEffect` to satisfy Flow. I think the
        // only other reason this optimization exists is because it affects profiling.
        // Reconsider whether this is necessary.
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext; // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            commitMutationEffects(root, finishedWork, lanes);
            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            markLayoutEffectsStarted(lanes);
            commitLayoutEffects(finishedWork, root, lanes);
            markLayoutEffectsStopped();
            // opportunity to paint.
            requestPaint();
            executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
        } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
        } // Read this again, since an effect might have updated it
        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
        // TODO: This is part of the `componentDidCatch` implementation. Its purpose
        // is to detect whether something might have called setState inside
        // `componentDidCatch`. The mechanism is known to be flawed because `setState`
        // inside `componentDidCatch` is itself flawed — that's why we recommend
        // `getDerivedStateFromError` instead. However, it could be improved by
        // checking if remainingLanes includes Sync work, instead of whether there's
        // any work remaining at all (which would also include stuff like Suspense
        // retries or transitions). It's been like this for a while, though, so fixing
        // it probably isn't that urgent.
        if (remainingLanes === NoLanes) // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) commitDoubleInvokeEffectsInDEV(root.current, false);
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        if (isDevToolsPresent) root.memoizedUpdaters.clear();
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root, now());
        if (recoverableErrors !== null) {
            // There were errors during this render, but recovered from them without
            // needing to surface it to the UI. We log them here.
            var onRecoverableError = root.onRecoverableError;
            for(var i = 0; i < recoverableErrors.length; i++){
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                    componentStack: componentStack,
                    digest: digest
                });
            }
        }
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
        } // If the passive effects are the result of a discrete render, flush them
        // synchronously at the end of the current task so that the result is
        // immediately observable. Otherwise, we assume that they are not
        // order-dependent and do not need to be observed by external systems, so we
        // can wait until after paint.
        // TODO: We can optimize this by not scheduling the callback earlier. Since we
        // currently schedule the callback in multiple places, will wait until those
        // are consolidated.
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) flushPassiveEffects();
         // Read this again, since a passive effect might have updated it
        remainingLanes = root.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
            markNestedUpdateScheduled();
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
         // If layout work was scheduled, flush it now.
        flushSyncCallbacks();
        markCommitStopped();
        return null;
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
        // probably just combine the two functions. I believe they were only separate
        // in the first place because we used to wrap it with
        // `Scheduler.runWithPriority`, which accepts a function. But now we track the
        // priority within React itself, so we can mutate the variable directly.
        if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
            } finally{
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
            }
        }
        return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
         // Cache and clear the transitions flag
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
        // Figure out why and fix it. It's not causing any known issues (probably
        // because it's only used for profiling), but it's a refactor hazard.
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
        markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root.current);
        commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for(var i = 0; i < profilerEffects.length; i++){
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root, _fiber);
        }
        markPassiveEffectsStopped();
        commitDoubleInvokeEffectsInDEV(root.current, true);
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        if (didScheduleUpdateDuringPassiveEffects) {
            if (root === rootWithPassiveNestedUpdates) nestedPassiveUpdateCount++;
            else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root;
            }
        } else nestedPassiveUpdateCount = 0;
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
        onPostCommitRoot(root);
        var stateNode = root.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
        }
        var fiber = null;
        fiber = nearestMountedAncestor;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    var root = enqueueUpdate(fiber, update, SyncLane);
                    var eventTime = requestEventTime();
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
        // will fire for errors that are thrown by destroy functions inside deleted
        // trees. What it should instead do is propagate the error to the parent of
        // the deleted tree. In the meantime, do not add this warning to the
        // allowlist; this is only for our internal use.
        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new lanes.
        if (retryLane === NoLane) // TODO: Assign this to `suspenseState.retryLane`? to avoid
        // unnecessary entanglement?
        retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) retryLane = suspenseState.retryLane;
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        switch(boundaryFiber.tag){
            case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) retryLane = suspenseState.retryLane;
                break;
            case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
            default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
        // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
        // Maybe not a big deal since this is DEV only behavior.
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        resetCurrentFiber();
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        var current = firstChild;
        var subtreeRoot = null;
        while(current !== null){
            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) current = current.child;
            else {
                if ((current.flags & fiberFlags) !== NoFlags) invokeEffectFn(current);
                if (current.sibling !== null) current = current.sibling;
                else current = subtreeRoot = current.return;
            }
        }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & ConcurrentMode)) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") // Don't replay promises.
            // Don't replay errors if we are hydrating and have already suspended or handled an error
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
                originalError._suppressLogging = true;
            } // We always throw the original error in case the second render pass is not idempotent.
            // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown"; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    }
    function restorePendingUpdaters(root, lanes) {
        if (isDevToolsPresent) {
            var memoizedUpdaters = root.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
            }); // This function intentionally does not clear memoized updaters.
        // Those may still be relevant to the current commit
        // and a future one (e.g. Suspense).
        }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
        // If we're currently inside an `act` scope, bypass Scheduler and push to
        // the `act` queue instead.
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
        } else return scheduleCallback(priorityLevel, callback);
    }
    function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) return;
         // In production, always call Scheduler. This function will be stripped out.
        return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) // Not in an act environment. No need to warn.
            return;
        } else {
            // Legacy mode has additional cases where we suppress a warning.
            if (!isLegacyActEnvironment()) // Not in an act environment. No need to warn.
            return;
            if (executionContext !== NoContext) // Legacy mode doesn't warn if the update is batched, i.e.
            // batchedUpdates or flushSync.
            return;
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) // For backwards compatibility with pre-hooks code, legacy mode only
            // warns for updates that originate from a hook.
            return;
        }
        if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
    }
    function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
    }
    /* eslint-disable react-internal/prod-error-codes */ var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === "function") {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === "function") needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === "function") needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== "function") return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root, element) {
        if (root.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error("Expected resolveFamily to be set during hot reload.");
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
        }
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error("Expected to reach root first.");
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            // DEV-only fields
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress.flags = NoFlags; // The effects are no longer valid.
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        } // Reset all effects except static ones.
        // Static effects are not specific to a render.
        workInProgress.flags = current.flags & StaticMask;
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect flags but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.
        var current = workInProgress.alternate;
        if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
            }
        } else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === "string") fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) // Strict effects should never run on legacy roots
                mode |= StrictEffectsMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_CACHE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_TRACING_MARKER_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_DEBUG_TRACING_MODE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === "object" && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                }
                var info = "";
                if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) info += "\n\nCheck the render method of `" + ownerName + "`.";
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== "string") error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
            isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        this.mutableSourceEagerHydrationData = null;
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
        this.memoizedUpdaters = new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for(var _i = 0; _i < TotalLanes; _i++)pendingUpdatersLaneMap.push(new Set());
        switch(tag){
            case ConcurrentRoot:
                this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
                break;
            case LegacyRoot:
                this._debugRootType = hydrate ? "hydrate()" : "render()";
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread
    // them through the root constructor. Perhaps we should put them all into a
    // single type, like a DynamicHostConfig that is defined by the renderer.
    identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    var ReactVersion = "18.2.0";
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        checkKeyStringCoercion(key);
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === "function") throw new Error("Unable to find node on an unmounted component.");
            else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = true;
        var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor
        root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
        // a regular update because the initial render must match was was rendered
        // on the server.
        // NOTE: This update intentionally doesn't have a payload. We're only using
        // the update to schedule work on the root fiber (and, for legacy roots, to
        // enqueue the callback if one is provided).
        var current = root.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current, update, lane);
        scheduleInitialHydrationOnRoot(root, lane, eventTime);
        return root;
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== "function") error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        var root = enqueueUpdate(current$1, update, lane);
        if (root !== null) {
            scheduleUpdateOnFiber(root, current$1, lane, eventTime);
            entangleTransitions(root, current$1, lane);
        }
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function attemptSynchronousHydration$1(fiber) {
        switch(fiber.tag){
            case HostRoot:
                var root = fiber.stateNode;
                if (isRootDehydrated(root)) {
                    // Flush the first scheduled "update".
                    var lanes = getHighestPriorityPendingLanes(root);
                    flushRoot(root, lanes);
                }
                break;
            case SuspenseComponent:
                flushSync(function() {
                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                    if (root !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
                    }
                }); // If we're still blocked after this, we need to increase
                // the priority of any promises resolving within this
                // boundary so that they next attempt also has higher pri.
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thenables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var lane = SelectiveHydrationLane;
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var lane = requestUpdateLane(fiber);
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
        return null;
    };
    function shouldError(fiber) {
        return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length) {
            if (isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setErrorHandler: setErrorHandler,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
        });
    }
    /* global reportError */ var defaultOnRecoverableError = typeof reportError === "function" ? // emulating an uncaught JavaScript error.
    reportError : function(error) {
        // In older browsers and test environments, fallback to console.error.
        // eslint-disable-next-line react-internal/no-production-logging
        console["error"](error);
    };
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (root === null) throw new Error("Cannot update an unmounted root.");
        if (typeof arguments[1] === "function") error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        else if (isValidContainer(arguments[1])) error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        else if (typeof arguments[1] !== "undefined") error("You passed a second argument to root.render(...) but it only accepts one argument.");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        if (typeof arguments[0] === "function") error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        if (root !== null) {
            this._internalRoot = null;
            var container = root.containerInfo;
            if (isAlreadyRendering()) error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            flushSync(function() {
                updateContainer(null, root, null, null);
            });
            unmarkContainerAsRoot(container);
        }
    };
    function createRoot(container, options) {
        if (!isValidContainer(container)) throw new Error("createRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options !== null && options !== undefined) {
            if (options.hydrate) warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            else if (typeof options === "object" && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
            if (options.transitionCallbacks !== undefined) transitionCallbacks = options.transitionCallbacks;
        }
        var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root);
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
        if (target) queueExplicitHydrationTarget(target);
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options) {
        if (!isValidContainer(container)) throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        if (initialChildren === undefined) error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        // the hydration callbacks.
        var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option
        var mutableSources = options != null && options.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options !== null && options !== undefined) {
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
        }
        var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.
        listenToAllSupportedEvents(container);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return new ReactDOMHydrationRoot(root);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    } // TODO: Remove this function which also includes comment nodes.
    // We only use it in places that are currently more relaxed.
    function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
    }
    function warnIfReactDOMContainerInDEV(container) {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            else error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
        }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function noopOnRecoverableError() {
    // legacy API.
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
            if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            }
            var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = root;
            markContainerAsRoot(root.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root;
        } else {
            // First clear any existing content.
            var rootSibling;
            while(rootSibling = container.lastChild)container.removeChild(rootSibling);
            if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(_root);
                    _originalCallback.call(instance);
                };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.
            flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
        }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== "function") error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
        var maybeRoot = container._reactRootContainer;
        var root;
        if (!maybeRoot) // Initial mount
        root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
            root = maybeRoot;
            if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, root, parentComponent, callback);
        }
        return getPublicRootInstance(root);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
    }
    function hydrate(element, container, callback) {
        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(containerNode)) throw new Error("Target container is not a DOM element.");
        if (parentComponent == null || !has(parentComponent)) throw new Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw new Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            batchedUpdates$1
        ]
    };
    function createRoot$1(container, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return createRoot(container, options);
    }
    function hydrateRoot$1(container, initialChildren, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return hydrateRoot(container, initialChildren, options);
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync$1(fn) {
        if (isAlreadyRendering()) error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.createRoot = createRoot$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync$1;
    exports.hydrate = hydrate;
    exports.hydrateRoot = hydrateRoot$1;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{"6f0162e9ab224cd4":"21dqq","8ad4ca65319d28a7":"juvHo"}],"juvHo":[function(require,module,exports) {
"use strict";
module.exports = require("ef03b89c8fe2794e");

},{"ef03b89c8fe2794e":"RqdIf"}],"RqdIf":[function(require,module,exports) {
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var frameYieldMs = 5;
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
        if (heap.length === 0) return null;
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
        }
        return first;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(index > 0){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while(index < halfLength){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.
    var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
    var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
    var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null; // IE and Node.js + jsdom
    var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) break;
            var callback = currentTask.callback;
            if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
    // thread, like user events. By default, it yields multiple times per frame.
    // It does not attempt to align with frame boundaries, since most tasks don't
    // need to be frame aligned; for those that do, use requestAnimationFrame.
    var frameInterval = frameYieldMs;
    var startTime = -1;
    function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) // The main thread has only been blocked for a really short amount of time;
        // smaller than a single frame. Don't yield yet.
        return false;
         // The main thread has been blocked for a non-negligible amount of time. We
        return true;
    }
    function requestPaint() {}
    function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
            // Using console['error'] to evade Babel and ESLint
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
        }
        if (fps > 0) frameInterval = Math.floor(1000 / fps);
        else // reset the framerate
        frameInterval = frameYieldMs;
    }
    var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
            // has been blocked.
            startTime = currentTime;
            var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
            // error can be observed.
            //
            // Intentionally not using a try-catch, since that makes some debugging
            // techniques harder. Instead, if `scheduledHostCallback` errors, then
            // `hasMoreWork` will remain true, and we'll continue the work loop.
            var hasMoreWork = true;
            try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally{
                if (hasMoreWork) // If there's more work, schedule the next message event at the end
                // of the preceding one.
                schedulePerformWorkUntilDeadline();
                else {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                }
            }
        } else isMessageLoopRunning = false;
         // Yielding to the browser will give it a chance to paint, so we can
    };
    var schedulePerformWorkUntilDeadline;
    if (typeof localSetImmediate === "function") // Node.js and old IE.
    // There's a few reasons for why we prefer setImmediate.
    //
    // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
    // (Even though this is a DOM fork of the Scheduler, you could get here
    // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
    // https://github.com/facebook/react/issues/20756
    //
    // But also, it runs earlier which is the semantic we want.
    // If other browsers ever implement it, it's better to use it.
    // Although both of these would be inferior to native scheduling.
    schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if (typeof MessageChannel !== "undefined") {
        // DOM and Worker environments.
        // We prefer MessageChannel because of the 4ms setTimeout clamping.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else // We should only fallback here in non-browser environments.
    schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
        }
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_forceFrameRate = forceFrameRate;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"bGJVT":[function(require,module,exports) {
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as the `TypeError` message for "Functions" methods. */ var global = arguments[3];
var FUNC_ERROR_TEXT = "Expected a function";
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/** `Object#toString` result references. */ var symbolTag = "[object Symbol]";
/** Used to match leading and trailing whitespace. */ var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
/** Detect free variable `self`. */ var freeSelf = typeof self == "object" && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function("return this")();
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */ var now = function() {
    return root.Date.now();
};
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */ function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) return trailingEdge(time);
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) return invokeFunc(time);
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) clearTimeout(timerId);
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(now());
    }
    function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) return leadingEdge(lastCallTime);
            if (maxing) {
                // Handle invocations in a tight loop.
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}
/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */ function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
    if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
    });
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == "object";
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == "number") return value;
    if (isSymbol(value)) return NAN;
    if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") return value === 0 ? value : +value;
    value = value.replace(reTrim, "");
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = throttle;

},{}],"bnHwp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Editor", ()=>Editor);
parcelHelpers.export(exports, "Element", ()=>Element);
parcelHelpers.export(exports, "Location", ()=>Location);
parcelHelpers.export(exports, "Node", ()=>Node);
parcelHelpers.export(exports, "Operation", ()=>Operation);
parcelHelpers.export(exports, "Path", ()=>Path);
parcelHelpers.export(exports, "PathRef", ()=>PathRef);
parcelHelpers.export(exports, "Point", ()=>Point);
parcelHelpers.export(exports, "PointRef", ()=>PointRef);
parcelHelpers.export(exports, "Range", ()=>Range);
parcelHelpers.export(exports, "RangeRef", ()=>RangeRef);
parcelHelpers.export(exports, "Scrubber", ()=>Scrubber);
parcelHelpers.export(exports, "Span", ()=>Span);
parcelHelpers.export(exports, "Text", ()=>Text);
parcelHelpers.export(exports, "Transforms", ()=>Transforms);
parcelHelpers.export(exports, "createEditor", ()=>createEditor);
var _isPlainObject = require("is-plain-object");
var _immer = require("immer");
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var DIRTY_PATHS = new WeakMap();
var DIRTY_PATH_KEYS = new WeakMap();
var FLUSHING = new WeakMap();
var NORMALIZING = new WeakMap();
var PATH_REFS = new WeakMap();
var POINT_REFS = new WeakMap();
var RANGE_REFS = new WeakMap();
function ownKeys$9(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$9(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$9(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$9(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
/**
 * Create a new Slate `Editor` object.
 */ var createEditor = ()=>{
    var editor = {
        children: [],
        operations: [],
        selection: null,
        marks: null,
        isInline: ()=>false,
        isVoid: ()=>false,
        markableVoid: ()=>false,
        onChange: ()=>{},
        apply: (op)=>{
            for (var ref of Editor.pathRefs(editor))PathRef.transform(ref, op);
            for (var _ref of Editor.pointRefs(editor))PointRef.transform(_ref, op);
            for (var _ref2 of Editor.rangeRefs(editor))RangeRef.transform(_ref2, op);
            var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];
            var oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || new Set();
            var dirtyPaths;
            var dirtyPathKeys;
            var add = (path)=>{
                if (path) {
                    var key = path.join(",");
                    if (!dirtyPathKeys.has(key)) {
                        dirtyPathKeys.add(key);
                        dirtyPaths.push(path);
                    }
                }
            };
            if (Path.operationCanTransformPath(op)) {
                dirtyPaths = [];
                dirtyPathKeys = new Set();
                for (var path of oldDirtyPaths){
                    var newPath = Path.transform(path, op);
                    add(newPath);
                }
            } else {
                dirtyPaths = oldDirtyPaths;
                dirtyPathKeys = oldDirtyPathKeys;
            }
            var newDirtyPaths = editor.getDirtyPaths(op);
            for (var _path of newDirtyPaths)add(_path);
            DIRTY_PATHS.set(editor, dirtyPaths);
            DIRTY_PATH_KEYS.set(editor, dirtyPathKeys);
            Transforms.transform(editor, op);
            editor.operations.push(op);
            Editor.normalize(editor); // Clear any formats applied to the cursor if the selection changes.
            if (op.type === "set_selection") editor.marks = null;
            if (!FLUSHING.get(editor)) {
                FLUSHING.set(editor, true);
                Promise.resolve().then(()=>{
                    FLUSHING.set(editor, false);
                    editor.onChange();
                    editor.operations = [];
                });
            }
        },
        addMark: (key, value)=>{
            var { selection, markableVoid } = editor;
            if (selection) {
                var match = (node, path)=>{
                    if (!Text.isText(node)) return false; // marks can only be applied to text
                    var [parentNode, parentPath] = Editor.parent(editor, path);
                    return !editor.isVoid(parentNode) || editor.markableVoid(parentNode);
                };
                var expandedSelection = Range.isExpanded(selection);
                var markAcceptingVoidSelected = false;
                if (!expandedSelection) {
                    var [selectedNode, selectedPath] = Editor.node(editor, selection);
                    if (selectedNode && match(selectedNode, selectedPath)) {
                        var [parentNode] = Editor.parent(editor, selectedPath);
                        markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);
                    }
                }
                if (expandedSelection || markAcceptingVoidSelected) Transforms.setNodes(editor, {
                    [key]: value
                }, {
                    match,
                    split: true,
                    voids: true
                });
                else {
                    var marks = _objectSpread$9(_objectSpread$9({}, Editor.marks(editor) || {}), {}, {
                        [key]: value
                    });
                    editor.marks = marks;
                    if (!FLUSHING.get(editor)) editor.onChange();
                }
            }
        },
        deleteBackward: (unit)=>{
            var { selection } = editor;
            if (selection && Range.isCollapsed(selection)) Transforms.delete(editor, {
                unit,
                reverse: true
            });
        },
        deleteForward: (unit)=>{
            var { selection } = editor;
            if (selection && Range.isCollapsed(selection)) Transforms.delete(editor, {
                unit
            });
        },
        deleteFragment: (direction)=>{
            var { selection } = editor;
            if (selection && Range.isExpanded(selection)) Transforms.delete(editor, {
                reverse: direction === "backward"
            });
        },
        getFragment: ()=>{
            var { selection } = editor;
            if (selection) return Node.fragment(editor, selection);
            return [];
        },
        insertBreak: ()=>{
            Transforms.splitNodes(editor, {
                always: true
            });
        },
        insertSoftBreak: ()=>{
            Transforms.splitNodes(editor, {
                always: true
            });
        },
        insertFragment: (fragment)=>{
            Transforms.insertFragment(editor, fragment);
        },
        insertNode: (node)=>{
            Transforms.insertNodes(editor, node);
        },
        insertText: (text)=>{
            var { selection, marks } = editor;
            if (selection) {
                if (marks) {
                    var node = _objectSpread$9({
                        text
                    }, marks);
                    Transforms.insertNodes(editor, node);
                } else Transforms.insertText(editor, text);
                editor.marks = null;
            }
        },
        normalizeNode: (entry)=>{
            var [node, path] = entry; // There are no core normalizations for text nodes.
            if (Text.isText(node)) return;
             // Ensure that block and inline nodes have at least one text child.
            if (Element.isElement(node) && node.children.length === 0) {
                var child = {
                    text: ""
                };
                Transforms.insertNodes(editor, child, {
                    at: path.concat(0),
                    voids: true
                });
                return;
            } // Determine whether the node should have block or inline children.
            var shouldHaveInlines = Editor.isEditor(node) ? false : Element.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0])); // Since we'll be applying operations while iterating, keep track of an
            // index that accounts for any added/removed nodes.
            var n = 0;
            for(var i = 0; i < node.children.length; i++, n++){
                var currentNode = Node.get(editor, path);
                if (Text.isText(currentNode)) continue;
                var _child = node.children[i];
                var prev = currentNode.children[n - 1];
                var isLast = i === node.children.length - 1;
                var isInlineOrText = Text.isText(_child) || Element.isElement(_child) && editor.isInline(_child); // Only allow block nodes in the top-level children and parent blocks
                // that only contain block nodes. Similarly, only allow inline nodes in
                // other inline nodes, or parent blocks that only contain inlines and
                // text.
                if (isInlineOrText !== shouldHaveInlines) {
                    Transforms.removeNodes(editor, {
                        at: path.concat(n),
                        voids: true
                    });
                    n--;
                } else if (Element.isElement(_child)) // Ensure that inline nodes are surrounded by text nodes.
                {
                    if (editor.isInline(_child)) {
                        if (prev == null || !Text.isText(prev)) {
                            var newChild = {
                                text: ""
                            };
                            Transforms.insertNodes(editor, newChild, {
                                at: path.concat(n),
                                voids: true
                            });
                            n++;
                        } else if (isLast) {
                            var _newChild = {
                                text: ""
                            };
                            Transforms.insertNodes(editor, _newChild, {
                                at: path.concat(n + 1),
                                voids: true
                            });
                            n++;
                        }
                    }
                } else // Merge adjacent text nodes that are empty or match.
                if (prev != null && Text.isText(prev)) {
                    if (Text.equals(_child, prev, {
                        loose: true
                    })) {
                        Transforms.mergeNodes(editor, {
                            at: path.concat(n),
                            voids: true
                        });
                        n--;
                    } else if (prev.text === "") {
                        Transforms.removeNodes(editor, {
                            at: path.concat(n - 1),
                            voids: true
                        });
                        n--;
                    } else if (_child.text === "") {
                        Transforms.removeNodes(editor, {
                            at: path.concat(n),
                            voids: true
                        });
                        n--;
                    }
                }
            }
        },
        removeMark: (key)=>{
            var { selection } = editor;
            if (selection) {
                var match = (node, path)=>{
                    if (!Text.isText(node)) return false; // marks can only be applied to text
                    var [parentNode, parentPath] = Editor.parent(editor, path);
                    return !editor.isVoid(parentNode) || editor.markableVoid(parentNode);
                };
                var expandedSelection = Range.isExpanded(selection);
                var markAcceptingVoidSelected = false;
                if (!expandedSelection) {
                    var [selectedNode, selectedPath] = Editor.node(editor, selection);
                    if (selectedNode && match(selectedNode, selectedPath)) {
                        var [parentNode] = Editor.parent(editor, selectedPath);
                        markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);
                    }
                }
                if (expandedSelection || markAcceptingVoidSelected) Transforms.unsetNodes(editor, key, {
                    match,
                    split: true,
                    voids: true
                });
                else {
                    var marks = _objectSpread$9({}, Editor.marks(editor) || {});
                    delete marks[key];
                    editor.marks = marks;
                    if (!FLUSHING.get(editor)) editor.onChange();
                }
            }
        },
        /**
     * Get the "dirty" paths generated from an operation.
     */ getDirtyPaths: (op)=>{
            switch(op.type){
                case "insert_text":
                case "remove_text":
                case "set_node":
                    var { path } = op;
                    return Path.levels(path);
                case "insert_node":
                    var { node, path: _path2 } = op;
                    var levels = Path.levels(_path2);
                    var descendants = Text.isText(node) ? [] : Array.from(Node.nodes(node), (_ref3)=>{
                        var [, p] = _ref3;
                        return _path2.concat(p);
                    });
                    return [
                        ...levels,
                        ...descendants
                    ];
                case "merge_node":
                    var { path: _path3 } = op;
                    var ancestors = Path.ancestors(_path3);
                    var previousPath = Path.previous(_path3);
                    return [
                        ...ancestors,
                        previousPath
                    ];
                case "move_node":
                    var { path: _path4, newPath } = op;
                    if (Path.equals(_path4, newPath)) return [];
                    var oldAncestors = [];
                    var newAncestors = [];
                    for (var ancestor of Path.ancestors(_path4)){
                        var p = Path.transform(ancestor, op);
                        oldAncestors.push(p);
                    }
                    for (var _ancestor of Path.ancestors(newPath)){
                        var _p = Path.transform(_ancestor, op);
                        newAncestors.push(_p);
                    }
                    var newParent = newAncestors[newAncestors.length - 1];
                    var newIndex = newPath[newPath.length - 1];
                    var resultPath = newParent.concat(newIndex);
                    return [
                        ...oldAncestors,
                        ...newAncestors,
                        resultPath
                    ];
                case "remove_node":
                    var { path: _path5 } = op;
                    var _ancestors = Path.ancestors(_path5);
                    return [
                        ..._ancestors
                    ];
                case "split_node":
                    var { path: _path6 } = op;
                    var _levels = Path.levels(_path6);
                    var nextPath = Path.next(_path6);
                    return [
                        ..._levels,
                        nextPath
                    ];
                default:
                    return [];
            }
        }
    };
    return editor;
};
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
// Character (grapheme cluster) boundaries are determined according to
// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].
//
// References:
//
// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table
// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt
// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html
// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt
/**
 * Get the distance to the end of the first character in a string of text.
 */ var getCharacterDistance = function getCharacterDistance(str) {
    var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var isLTR = !isRTL;
    var codepoints = isRTL ? codepointsIteratorRTL(str) : str;
    var left = CodepointType.None;
    var right = CodepointType.None;
    var distance = 0; // Evaluation of these conditions are deferred.
    var gb11 = null; // Is GB11 applicable?
    var gb12Or13 = null; // Is GB12 or GB13 applicable?
    for (var char of codepoints){
        var code = char.codePointAt(0);
        if (!code) break;
        var type = getCodepointType(char, code);
        [left, right] = isLTR ? [
            right,
            type
        ] : [
            type,
            left
        ];
        if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {
            if (isLTR) gb11 = endsWithEmojiZWJ(str.substring(0, distance));
            else gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));
            if (!gb11) break;
        }
        if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {
            if (gb12Or13 !== null) gb12Or13 = !gb12Or13;
            else if (isLTR) gb12Or13 = true;
            else gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));
            if (!gb12Or13) break;
        }
        if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) break;
        distance += char.length;
    }
    return distance || 1;
};
var SPACE = /\s/;
var PUNCTUATION = /[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
var CHAMELEON = /['\u2018\u2019]/;
/**
 * Get the distance to the end of the first word in a string of text.
 */ var getWordDistance = function getWordDistance(text) {
    var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var dist = 0;
    var started = false;
    while(text.length > 0){
        var charDist = getCharacterDistance(text, isRTL);
        var [char, remaining] = splitByCharacterDistance(text, charDist, isRTL);
        if (isWordCharacter(char, remaining, isRTL)) {
            started = true;
            dist += charDist;
        } else if (!started) dist += charDist;
        else break;
        text = remaining;
    }
    return dist;
};
/**
 * Split a string in two parts at a given distance starting from the end when
 * `isRTL` is set to `true`.
 */ var splitByCharacterDistance = (str, dist, isRTL)=>{
    if (isRTL) {
        var at = str.length - dist;
        return [
            str.slice(at, str.length),
            str.slice(0, at)
        ];
    }
    return [
        str.slice(0, dist),
        str.slice(dist)
    ];
};
/**
 * Check if a character is a word character. The `remaining` argument is used
 * because sometimes you must read subsequent characters to truly determine it.
 */ var isWordCharacter = function isWordCharacter(char, remaining) {
    var isRTL = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (SPACE.test(char)) return false;
     // Chameleons count as word characters as long as they're in a word, so
    // recurse to see if the next one is a word character or not.
    if (CHAMELEON.test(char)) {
        var charDist = getCharacterDistance(remaining, isRTL);
        var [nextChar, nextRemaining] = splitByCharacterDistance(remaining, charDist, isRTL);
        if (isWordCharacter(nextChar, nextRemaining, isRTL)) return true;
    }
    if (PUNCTUATION.test(char)) return false;
    return true;
};
/**
 * Iterate on codepoints from right to left.
 */ var codepointsIteratorRTL = function* codepointsIteratorRTL(str) {
    var end = str.length - 1;
    for(var i = 0; i < str.length; i++){
        var char1 = str.charAt(end - i);
        if (isLowSurrogate(char1.charCodeAt(0))) {
            var char2 = str.charAt(end - i - 1);
            if (isHighSurrogate(char2.charCodeAt(0))) {
                yield char2 + char1;
                i++;
                continue;
            }
        }
        yield char1;
    }
};
/**
 * Is `charCode` a high surrogate.
 *
 * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates
 */ var isHighSurrogate = (charCode)=>{
    return charCode >= 0xd800 && charCode <= 0xdbff;
};
/**
 * Is `charCode` a low surrogate.
 *
 * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates
 */ var isLowSurrogate = (charCode)=>{
    return charCode >= 0xdc00 && charCode <= 0xdfff;
};
var CodepointType;
(function(CodepointType) {
    CodepointType[CodepointType["None"] = 0] = "None";
    CodepointType[CodepointType["Extend"] = 1] = "Extend";
    CodepointType[CodepointType["ZWJ"] = 2] = "ZWJ";
    CodepointType[CodepointType["RI"] = 4] = "RI";
    CodepointType[CodepointType["Prepend"] = 8] = "Prepend";
    CodepointType[CodepointType["SpacingMark"] = 16] = "SpacingMark";
    CodepointType[CodepointType["L"] = 32] = "L";
    CodepointType[CodepointType["V"] = 64] = "V";
    CodepointType[CodepointType["T"] = 128] = "T";
    CodepointType[CodepointType["LV"] = 256] = "LV";
    CodepointType[CodepointType["LVT"] = 512] = "LVT";
    CodepointType[CodepointType["ExtPict"] = 1024] = "ExtPict";
    CodepointType[CodepointType["Any"] = 2048] = "Any";
})(CodepointType || (CodepointType = {}));
var reExtend = /^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/;
var rePrepend = /^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/;
var reSpacingMark = /^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/;
var reL = /^[\u1100-\u115F\uA960-\uA97C]$/;
var reV = /^[\u1160-\u11A7\uD7B0-\uD7C6]$/;
var reT = /^[\u11A8-\u11FF\uD7CB-\uD7FB]$/;
var reLV = /^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/;
var reLVT = /^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/;
var reExtPict = /^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/;
var getCodepointType = (char, code)=>{
    var type = CodepointType.Any;
    if (char.search(reExtend) !== -1) type |= CodepointType.Extend;
    if (code === 0x200d) type |= CodepointType.ZWJ;
    if (code >= 0x1f1e6 && code <= 0x1f1ff) type |= CodepointType.RI;
    if (char.search(rePrepend) !== -1) type |= CodepointType.Prepend;
    if (char.search(reSpacingMark) !== -1) type |= CodepointType.SpacingMark;
    if (char.search(reL) !== -1) type |= CodepointType.L;
    if (char.search(reV) !== -1) type |= CodepointType.V;
    if (char.search(reT) !== -1) type |= CodepointType.T;
    if (char.search(reLV) !== -1) type |= CodepointType.LV;
    if (char.search(reLVT) !== -1) type |= CodepointType.LVT;
    if (char.search(reExtPict) !== -1) type |= CodepointType.ExtPict;
    return type;
};
function intersects(x, y) {
    return (x & y) !== 0;
}
var NonBoundaryPairs = [
    [
        CodepointType.L,
        CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT
    ],
    [
        CodepointType.LV | CodepointType.V,
        CodepointType.V | CodepointType.T
    ],
    [
        CodepointType.LVT | CodepointType.T,
        CodepointType.T
    ],
    [
        CodepointType.Any,
        CodepointType.Extend | CodepointType.ZWJ
    ],
    [
        CodepointType.Any,
        CodepointType.SpacingMark
    ],
    [
        CodepointType.Prepend,
        CodepointType.Any
    ],
    [
        CodepointType.ZWJ,
        CodepointType.ExtPict
    ],
    [
        CodepointType.RI,
        CodepointType.RI
    ]
];
function isBoundaryPair(left, right) {
    return NonBoundaryPairs.findIndex((r)=>intersects(left, r[0]) && intersects(right, r[1])) === -1;
}
var endingEmojiZWJ = /(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/;
var endsWithEmojiZWJ = (str)=>{
    return str.search(endingEmojiZWJ) !== -1;
};
var endingRIs = /(?:\uD83C[\uDDE6-\uDDFF])+$/g;
var endsWithOddNumberOfRIs = (str)=>{
    var match = str.match(endingRIs);
    if (match === null) return false;
    else {
        // A RI is represented by a surrogate pair.
        var numRIs = match[0].length / 2;
        return numRIs % 2 === 1;
    }
};
/**
 * Shared the function with isElementType utility
 */ var isElement = (value)=>{
    return (0, _isPlainObject.isPlainObject)(value) && Node.isNodeList(value.children) && !Editor.isEditor(value);
}; // eslint-disable-next-line no-redeclare
var Element = {
    /**
   * Check if a value implements the 'Ancestor' interface.
   */ isAncestor (value) {
        return (0, _isPlainObject.isPlainObject)(value) && Node.isNodeList(value.children);
    },
    /**
   * Check if a value implements the `Element` interface.
   */ isElement,
    /**
   * Check if a value is an array of `Element` objects.
   */ isElementList (value) {
        return Array.isArray(value) && value.every((val)=>Element.isElement(val));
    },
    /**
   * Check if a set of props is a partial of Element.
   */ isElementProps (props) {
        return props.children !== undefined;
    },
    /**
   * Check if a value implements the `Element` interface and has elementKey with selected value.
   * Default it check to `type` key value
   */ isElementType: function isElementType(value, elementVal) {
        var elementKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "type";
        return isElement(value) && value[elementKey] === elementVal;
    },
    /**
   * Check if an element matches set of properties.
   *
   * Note: this checks custom properties, and it does not ensure that any
   * children are equivalent.
   */ matches (element, props) {
        for(var key in props){
            if (key === "children") continue;
            if (element[key] !== props[key]) return false;
        }
        return true;
    }
};
var _excluded$4 = [
    "text"
], _excluded2$3 = [
    "text"
];
function ownKeys$8(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$8(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$8(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$8(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var IS_EDITOR_CACHE = new WeakMap(); // eslint-disable-next-line no-redeclare
var Editor = {
    /**
   * Get the ancestor above a location in the document.
   */ above (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { voids = false, mode = "lowest", at = editor.selection, match } = options;
        if (!at) return;
        var path = Editor.path(editor, at);
        var reverse = mode === "lowest";
        for (var [n, p] of Editor.levels(editor, {
            at: path,
            voids,
            match,
            reverse
        })){
            if (Text.isText(n)) return;
            if (Range.isRange(at)) {
                if (Path.isAncestor(p, at.anchor.path) && Path.isAncestor(p, at.focus.path)) return [
                    n,
                    p
                ];
            } else {
                if (!Path.equals(path, p)) return [
                    n,
                    p
                ];
            }
        }
    },
    /**
   * Add a custom property to the leaf text nodes in the current selection.
   *
   * If the selection is currently collapsed, the marks will be added to the
   * `editor.marks` property instead, and applied when text is inserted next.
   */ addMark (editor, key, value) {
        editor.addMark(key, value);
    },
    /**
   * Get the point after a location.
   */ after (editor, at) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var anchor = Editor.point(editor, at, {
            edge: "end"
        });
        var focus = Editor.end(editor, []);
        var range = {
            anchor,
            focus
        };
        var { distance = 1 } = options;
        var d = 0;
        var target;
        for (var p of Editor.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
            at: range
        }))){
            if (d > distance) break;
            if (d !== 0) target = p;
            d++;
        }
        return target;
    },
    /**
   * Get the point before a location.
   */ before (editor, at) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var anchor = Editor.start(editor, []);
        var focus = Editor.point(editor, at, {
            edge: "start"
        });
        var range = {
            anchor,
            focus
        };
        var { distance = 1 } = options;
        var d = 0;
        var target;
        for (var p of Editor.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
            at: range,
            reverse: true
        }))){
            if (d > distance) break;
            if (d !== 0) target = p;
            d++;
        }
        return target;
    },
    /**
   * Delete content in the editor backward from the current selection.
   */ deleteBackward (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { unit = "character" } = options;
        editor.deleteBackward(unit);
    },
    /**
   * Delete content in the editor forward from the current selection.
   */ deleteForward (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { unit = "character" } = options;
        editor.deleteForward(unit);
    },
    /**
   * Delete the content in the current selection.
   */ deleteFragment (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { direction = "forward" } = options;
        editor.deleteFragment(direction);
    },
    /**
   * Get the start and end points of a location.
   */ edges (editor, at) {
        return [
            Editor.start(editor, at),
            Editor.end(editor, at)
        ];
    },
    /**
   * Get the end point of a location.
   */ end (editor, at) {
        return Editor.point(editor, at, {
            edge: "end"
        });
    },
    /**
   * Get the first node at a location.
   */ first (editor, at) {
        var path = Editor.path(editor, at, {
            edge: "start"
        });
        return Editor.node(editor, path);
    },
    /**
   * Get the fragment at a location.
   */ fragment (editor, at) {
        var range = Editor.range(editor, at);
        var fragment = Node.fragment(editor, range);
        return fragment;
    },
    /**
   * Check if a node has block children.
   */ hasBlocks (editor, element) {
        return element.children.some((n)=>Editor.isBlock(editor, n));
    },
    /**
   * Check if a node has inline and text children.
   */ hasInlines (editor, element) {
        return element.children.some((n)=>Text.isText(n) || Editor.isInline(editor, n));
    },
    /**
   * Check if a node has text children.
   */ hasTexts (editor, element) {
        return element.children.every((n)=>Text.isText(n));
    },
    /**
   * Insert a block break at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */ insertBreak (editor) {
        editor.insertBreak();
    },
    /**
   * Insert a soft break at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */ insertSoftBreak (editor) {
        editor.insertSoftBreak();
    },
    /**
   * Insert a fragment at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */ insertFragment (editor, fragment) {
        editor.insertFragment(fragment);
    },
    /**
   * Insert a node at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */ insertNode (editor, node) {
        editor.insertNode(node);
    },
    /**
   * Insert text at the current selection.
   *
   * If the selection is currently expanded, it will be deleted first.
   */ insertText (editor, text) {
        editor.insertText(text);
    },
    /**
   * Check if a value is a block `Element` object.
   */ isBlock (editor, value) {
        return Element.isElement(value) && !editor.isInline(value);
    },
    /**
   * Check if a value is an `Editor` object.
   */ isEditor (value) {
        var cachedIsEditor = IS_EDITOR_CACHE.get(value);
        if (cachedIsEditor !== undefined) return cachedIsEditor;
        if (!(0, _isPlainObject.isPlainObject)(value)) return false;
        var isEditor = typeof value.addMark === "function" && typeof value.apply === "function" && typeof value.deleteBackward === "function" && typeof value.deleteForward === "function" && typeof value.deleteFragment === "function" && typeof value.insertBreak === "function" && typeof value.insertSoftBreak === "function" && typeof value.insertFragment === "function" && typeof value.insertNode === "function" && typeof value.insertText === "function" && typeof value.isInline === "function" && typeof value.isVoid === "function" && typeof value.normalizeNode === "function" && typeof value.onChange === "function" && typeof value.removeMark === "function" && typeof value.getDirtyPaths === "function" && (value.marks === null || (0, _isPlainObject.isPlainObject)(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node.isNodeList(value.children) && Operation.isOperationList(value.operations);
        IS_EDITOR_CACHE.set(value, isEditor);
        return isEditor;
    },
    /**
   * Check if a point is the end point of a location.
   */ isEnd (editor, point, at) {
        var end = Editor.end(editor, at);
        return Point.equals(point, end);
    },
    /**
   * Check if a point is an edge of a location.
   */ isEdge (editor, point, at) {
        return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at);
    },
    /**
   * Check if an element is empty, accounting for void nodes.
   */ isEmpty (editor, element) {
        var { children } = element;
        var [first] = children;
        return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === "" && !editor.isVoid(element);
    },
    /**
   * Check if a value is an inline `Element` object.
   */ isInline (editor, value) {
        return Element.isElement(value) && editor.isInline(value);
    },
    /**
   * Check if the editor is currently normalizing after each operation.
   */ isNormalizing (editor) {
        var isNormalizing = NORMALIZING.get(editor);
        return isNormalizing === undefined ? true : isNormalizing;
    },
    /**
   * Check if a point is the start point of a location.
   */ isStart (editor, point, at) {
        // PERF: If the offset isn't `0` we know it's not the start.
        if (point.offset !== 0) return false;
        var start = Editor.start(editor, at);
        return Point.equals(point, start);
    },
    /**
   * Check if a value is a void `Element` object.
   */ isVoid (editor, value) {
        return Element.isElement(value) && editor.isVoid(value);
    },
    /**
   * Get the last node at a location.
   */ last (editor, at) {
        var path = Editor.path(editor, at, {
            edge: "end"
        });
        return Editor.node(editor, path);
    },
    /**
   * Get the leaf text node at a location.
   */ leaf (editor, at) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var path = Editor.path(editor, at, options);
        var node = Node.leaf(editor, path);
        return [
            node,
            path
        ];
    },
    /**
   * Iterate through all of the levels at a location.
   */ *levels (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { at = editor.selection, reverse = false, voids = false } = options;
        var { match } = options;
        if (match == null) match = ()=>true;
        if (!at) return;
        var levels = [];
        var path = Editor.path(editor, at);
        for (var [n, p] of Node.levels(editor, path)){
            if (!match(n, p)) continue;
            levels.push([
                n,
                p
            ]);
            if (!voids && Editor.isVoid(editor, n)) break;
        }
        if (reverse) levels.reverse();
        yield* levels;
    },
    /**
   * Get the marks that would be added to text at the current selection.
   */ marks (editor) {
        var { marks, selection } = editor;
        if (!selection) return null;
        if (marks) return marks;
        if (Range.isExpanded(selection)) {
            var [match] = Editor.nodes(editor, {
                match: Text.isText
            });
            if (match) {
                var [_node] = match;
                var _rest = _objectWithoutProperties(_node, _excluded$4);
                return _rest;
            } else return {};
        }
        var { anchor } = selection;
        var { path } = anchor;
        var [node] = Editor.leaf(editor, path);
        if (anchor.offset === 0) {
            var prev = Editor.previous(editor, {
                at: path,
                match: Text.isText
            });
            var block = Editor.above(editor, {
                match: (n)=>Editor.isBlock(editor, n)
            });
            if (prev && block) {
                var [prevNode, prevPath] = prev;
                var [, blockPath] = block;
                if (Path.isAncestor(blockPath, prevPath)) node = prevNode;
            }
        }
        var rest = _objectWithoutProperties(node, _excluded2$3);
        return rest;
    },
    /**
   * Get the matching node in the branch of the document after a location.
   */ next (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { mode = "lowest", voids = false } = options;
        var { match, at = editor.selection } = options;
        if (!at) return;
        var pointAfterLocation = Editor.after(editor, at, {
            voids
        });
        if (!pointAfterLocation) return;
        var [, to] = Editor.last(editor, []);
        var span = [
            pointAfterLocation.path,
            to
        ];
        if (Path.isPath(at) && at.length === 0) throw new Error("Cannot get the next node from the root node!");
        if (match == null) {
            if (Path.isPath(at)) {
                var [parent] = Editor.parent(editor, at);
                match = (n)=>parent.children.includes(n);
            } else match = ()=>true;
        }
        var [next] = Editor.nodes(editor, {
            at: span,
            match,
            mode,
            voids
        });
        return next;
    },
    /**
   * Get the node at a location.
   */ node (editor, at) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var path = Editor.path(editor, at, options);
        var node = Node.get(editor, path);
        return [
            node,
            path
        ];
    },
    /**
   * Iterate through all of the nodes in the Editor.
   */ *nodes (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { at = editor.selection, mode = "all", universal = false, reverse = false, voids = false } = options;
        var { match } = options;
        if (!match) match = ()=>true;
        if (!at) return;
        var from;
        var to;
        if (Span.isSpan(at)) {
            from = at[0];
            to = at[1];
        } else {
            var first = Editor.path(editor, at, {
                edge: "start"
            });
            var last = Editor.path(editor, at, {
                edge: "end"
            });
            from = reverse ? last : first;
            to = reverse ? first : last;
        }
        var nodeEntries = Node.nodes(editor, {
            reverse,
            from,
            to,
            pass: (_ref)=>{
                var [n] = _ref;
                return voids ? false : Editor.isVoid(editor, n);
            }
        });
        var matches = [];
        var hit;
        for (var [node, path] of nodeEntries){
            var isLower = hit && Path.compare(path, hit[1]) === 0; // In highest mode any node lower than the last hit is not a match.
            if (mode === "highest" && isLower) continue;
            if (!match(node, path)) {
                // If we've arrived at a leaf text node that is not lower than the last
                // hit, then we've found a branch that doesn't include a match, which
                // means the match is not universal.
                if (universal && !isLower && Text.isText(node)) return;
                else continue;
            } // If there's a match and it's lower than the last, update the hit.
            if (mode === "lowest" && isLower) {
                hit = [
                    node,
                    path
                ];
                continue;
            } // In lowest mode we emit the last hit, once it's guaranteed lowest.
            var emit = mode === "lowest" ? hit : [
                node,
                path
            ];
            if (emit) {
                if (universal) matches.push(emit);
                else yield emit;
            }
            hit = [
                node,
                path
            ];
        } // Since lowest is always emitting one behind, catch up at the end.
        if (mode === "lowest" && hit) {
            if (universal) matches.push(hit);
            else yield hit;
        } // Universal defers to ensure that the match occurs in every branch, so we
        // yield all of the matches after iterating.
        if (universal) yield* matches;
    },
    /**
   * Normalize any dirty objects in the editor.
   */ normalize (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { force = false } = options;
        var getDirtyPaths = (editor)=>{
            return DIRTY_PATHS.get(editor) || [];
        };
        var getDirtyPathKeys = (editor)=>{
            return DIRTY_PATH_KEYS.get(editor) || new Set();
        };
        var popDirtyPath = (editor)=>{
            var path = getDirtyPaths(editor).pop();
            var key = path.join(",");
            getDirtyPathKeys(editor).delete(key);
            return path;
        };
        if (!Editor.isNormalizing(editor)) return;
        if (force) {
            var allPaths = Array.from(Node.nodes(editor), (_ref2)=>{
                var [, p] = _ref2;
                return p;
            });
            var allPathKeys = new Set(allPaths.map((p)=>p.join(",")));
            DIRTY_PATHS.set(editor, allPaths);
            DIRTY_PATH_KEYS.set(editor, allPathKeys);
        }
        if (getDirtyPaths(editor).length === 0) return;
        Editor.withoutNormalizing(editor, ()=>{
            /*
        Fix dirty elements with no children.
        editor.normalizeNode() does fix this, but some normalization fixes also require it to work.
        Running an initial pass avoids the catch-22 race condition.
      */ for (var dirtyPath of getDirtyPaths(editor))if (Node.has(editor, dirtyPath)) {
                var entry = Editor.node(editor, dirtyPath);
                var [node, _] = entry;
                /*
            The default normalizer inserts an empty text node in this scenario, but it can be customised.
            So there is some risk here.
                       As long as the normalizer only inserts child nodes for this case it is safe to do in any order;
            by definition adding children to an empty node can't cause other paths to change.
          */ if (Element.isElement(node) && node.children.length === 0) editor.normalizeNode(entry);
            }
            var max = getDirtyPaths(editor).length * 42; // HACK: better way?
            var m = 0;
            while(getDirtyPaths(editor).length !== 0){
                if (m > max) throw new Error("\n            Could not completely normalize the editor after ".concat(max, " iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          "));
                var _dirtyPath = popDirtyPath(editor); // If the node doesn't exist in the tree, it does not need to be normalized.
                if (Node.has(editor, _dirtyPath)) {
                    var _entry = Editor.node(editor, _dirtyPath);
                    editor.normalizeNode(_entry);
                }
                m++;
            }
        });
    },
    /**
   * Get the parent node of a location.
   */ parent (editor, at) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var path = Editor.path(editor, at, options);
        var parentPath = Path.parent(path);
        var entry = Editor.node(editor, parentPath);
        return entry;
    },
    /**
   * Get the path of a location.
   */ path (editor, at) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { depth, edge } = options;
        if (Path.isPath(at)) {
            if (edge === "start") {
                var [, firstPath] = Node.first(editor, at);
                at = firstPath;
            } else if (edge === "end") {
                var [, lastPath] = Node.last(editor, at);
                at = lastPath;
            }
        }
        if (Range.isRange(at)) {
            if (edge === "start") at = Range.start(at);
            else if (edge === "end") at = Range.end(at);
            else at = Path.common(at.anchor.path, at.focus.path);
        }
        if (Point.isPoint(at)) at = at.path;
        if (depth != null) at = at.slice(0, depth);
        return at;
    },
    hasPath (editor, path) {
        return Node.has(editor, path);
    },
    /**
   * Create a mutable ref for a `Path` object, which will stay in sync as new
   * operations are applied to the editor.
   */ pathRef (editor, path) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { affinity = "forward" } = options;
        var ref = {
            current: path,
            affinity,
            unref () {
                var { current } = ref;
                var pathRefs = Editor.pathRefs(editor);
                pathRefs.delete(ref);
                ref.current = null;
                return current;
            }
        };
        var refs = Editor.pathRefs(editor);
        refs.add(ref);
        return ref;
    },
    /**
   * Get the set of currently tracked path refs of the editor.
   */ pathRefs (editor) {
        var refs = PATH_REFS.get(editor);
        if (!refs) {
            refs = new Set();
            PATH_REFS.set(editor, refs);
        }
        return refs;
    },
    /**
   * Get the start or end point of a location.
   */ point (editor, at) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { edge = "start" } = options;
        if (Path.isPath(at)) {
            var path;
            if (edge === "end") {
                var [, lastPath] = Node.last(editor, at);
                path = lastPath;
            } else {
                var [, firstPath] = Node.first(editor, at);
                path = firstPath;
            }
            var node = Node.get(editor, path);
            if (!Text.isText(node)) throw new Error("Cannot get the ".concat(edge, " point in the node at path [").concat(at, "] because it has no ").concat(edge, " text node."));
            return {
                path,
                offset: edge === "end" ? node.text.length : 0
            };
        }
        if (Range.isRange(at)) {
            var [start, end] = Range.edges(at);
            return edge === "start" ? start : end;
        }
        return at;
    },
    /**
   * Create a mutable ref for a `Point` object, which will stay in sync as new
   * operations are applied to the editor.
   */ pointRef (editor, point) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { affinity = "forward" } = options;
        var ref = {
            current: point,
            affinity,
            unref () {
                var { current } = ref;
                var pointRefs = Editor.pointRefs(editor);
                pointRefs.delete(ref);
                ref.current = null;
                return current;
            }
        };
        var refs = Editor.pointRefs(editor);
        refs.add(ref);
        return ref;
    },
    /**
   * Get the set of currently tracked point refs of the editor.
   */ pointRefs (editor) {
        var refs = POINT_REFS.get(editor);
        if (!refs) {
            refs = new Set();
            POINT_REFS.set(editor, refs);
        }
        return refs;
    },
    /**
   * Return all the positions in `at` range where a `Point` can be placed.
   *
   * By default, moves forward by individual offsets at a time, but
   * the `unit` option can be used to to move by character, word, line, or block.
   *
   * The `reverse` option can be used to change iteration direction.
   *
   * Note: By default void nodes are treated as a single point and iteration
   * will not happen inside their content unless you pass in true for the
   * `voids` option, then iteration will occur.
   */ *positions (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { at = editor.selection, unit = "offset", reverse = false, voids = false } = options;
        if (!at) return;
        /**
     * Algorithm notes:
     *
     * Each step `distance` is dynamic depending on the underlying text
     * and the `unit` specified.  Each step, e.g., a line or word, may
     * span multiple text nodes, so we iterate through the text both on
     * two levels in step-sync:
     *
     * `leafText` stores the text on a text leaf level, and is advanced
     * through using the counters `leafTextOffset` and `leafTextRemaining`.
     *
     * `blockText` stores the text on a block level, and is shortened
     * by `distance` every time it is advanced.
     *
     * We only maintain a window of one blockText and one leafText because
     * a block node always appears before all of its leaf nodes.
     */ var range = Editor.range(editor, at);
        var [start, end] = Range.edges(range);
        var first = reverse ? end : start;
        var isNewBlock = false;
        var blockText = "";
        var distance = 0; // Distance for leafText to catch up to blockText.
        var leafTextRemaining = 0;
        var leafTextOffset = 0; // Iterate through all nodes in range, grabbing entire textual content
        // of block nodes in blockText, and text nodes in leafText.
        // Exploits the fact that nodes are sequenced in such a way that we first
        // encounter the block node, then all of its text nodes, so when iterating
        // through the blockText and leafText we just need to remember a window of
        // one block node and leaf node, respectively.
        for (var [node, path] of Editor.nodes(editor, {
            at,
            reverse,
            voids
        })){
            /*
       * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks
       */ if (Element.isElement(node)) {
                // Void nodes are a special case, so by default we will always
                // yield their first point. If the `voids` option is set to true,
                // then we will iterate over their content.
                if (!voids && editor.isVoid(node)) {
                    yield Editor.start(editor, path);
                    continue;
                } // Inline element nodes are ignored as they don't themselves
                // contribute to `blockText` or `leafText` - their parent and
                // children do.
                if (editor.isInline(node)) continue; // Block element node - set `blockText` to its text content.
                if (Editor.hasInlines(editor, node)) {
                    // We always exhaust block nodes before encountering a new one:
                    //   console.assert(blockText === '',
                    //     `blockText='${blockText}' - `+
                    //     `not exhausted before new block node`, path)
                    // Ensure range considered is capped to `range`, in the
                    // start/end edge cases where block extends beyond range.
                    // Equivalent to this, but presumably more performant:
                    //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))
                    //   blockRange = Range.intersection(range, blockRange) // intersect
                    //   blockText = Editor.string(editor, blockRange, { voids })
                    var e = Path.isAncestor(path, end.path) ? end : Editor.end(editor, path);
                    var s = Path.isAncestor(path, start.path) ? start : Editor.start(editor, path);
                    blockText = Editor.string(editor, {
                        anchor: s,
                        focus: e
                    }, {
                        voids
                    });
                    isNewBlock = true;
                }
            }
            /*
       * TEXT LEAF NODE - Iterate through text content, yielding
       * positions every `distance` offset according to `unit`.
       */ if (Text.isText(node)) {
                var isFirst = Path.equals(path, first.path); // Proof that we always exhaust text nodes before encountering a new one:
                //   console.assert(leafTextRemaining <= 0,
                //     `leafTextRemaining=${leafTextRemaining} - `+
                //     `not exhausted before new leaf text node`, path)
                // Reset `leafText` counters for new text node.
                if (isFirst) {
                    leafTextRemaining = reverse ? first.offset : node.text.length - first.offset;
                    leafTextOffset = first.offset; // Works for reverse too.
                } else {
                    leafTextRemaining = node.text.length;
                    leafTextOffset = reverse ? leafTextRemaining : 0;
                } // Yield position at the start of node (potentially).
                if (isFirst || isNewBlock || unit === "offset") {
                    yield {
                        path,
                        offset: leafTextOffset
                    };
                    isNewBlock = false;
                } // Yield positions every (dynamically calculated) `distance` offset.
                while(true){
                    // If `leafText` has caught up with `blockText` (distance=0),
                    // and if blockText is exhausted, break to get another block node,
                    // otherwise advance blockText forward by the new `distance`.
                    if (distance === 0) {
                        if (blockText === "") break;
                        distance = calcDistance(blockText, unit, reverse); // Split the string at the previously found distance and use the
                        // remaining string for the next iteration.
                        blockText = splitByCharacterDistance(blockText, distance, reverse)[1];
                    } // Advance `leafText` by the current `distance`.
                    leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;
                    leafTextRemaining = leafTextRemaining - distance; // If `leafText` is exhausted, break to get a new leaf node
                    // and set distance to the overflow amount, so we'll (maybe)
                    // catch up to blockText in the next leaf text node.
                    if (leafTextRemaining < 0) {
                        distance = -leafTextRemaining;
                        break;
                    } // Successfully walked `distance` offsets through `leafText`
                    // to catch up with `blockText`, so we can reset `distance`
                    // and yield this position in this node.
                    distance = 0;
                    yield {
                        path,
                        offset: leafTextOffset
                    };
                }
            }
        } // Proof that upon completion, we've exahusted both leaf and block text:
        //   console.assert(leafTextRemaining <= 0, "leafText wasn't exhausted")
        //   console.assert(blockText === '', "blockText wasn't exhausted")
        // Helper:
        // Return the distance in offsets for a step of size `unit` on given string.
        function calcDistance(text, unit, reverse) {
            if (unit === "character") return getCharacterDistance(text, reverse);
            else if (unit === "word") return getWordDistance(text, reverse);
            else if (unit === "line" || unit === "block") return text.length;
            return 1;
        }
    },
    /**
   * Get the matching node in the branch of the document before a location.
   */ previous (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { mode = "lowest", voids = false } = options;
        var { match, at = editor.selection } = options;
        if (!at) return;
        var pointBeforeLocation = Editor.before(editor, at, {
            voids
        });
        if (!pointBeforeLocation) return;
        var [, to] = Editor.first(editor, []); // The search location is from the start of the document to the path of
        // the point before the location passed in
        var span = [
            pointBeforeLocation.path,
            to
        ];
        if (Path.isPath(at) && at.length === 0) throw new Error("Cannot get the previous node from the root node!");
        if (match == null) {
            if (Path.isPath(at)) {
                var [parent] = Editor.parent(editor, at);
                match = (n)=>parent.children.includes(n);
            } else match = ()=>true;
        }
        var [previous] = Editor.nodes(editor, {
            reverse: true,
            at: span,
            match,
            mode,
            voids
        });
        return previous;
    },
    /**
   * Get a range of a location.
   */ range (editor, at, to) {
        if (Range.isRange(at) && !to) return at;
        var start = Editor.start(editor, at);
        var end = Editor.end(editor, to || at);
        return {
            anchor: start,
            focus: end
        };
    },
    /**
   * Create a mutable ref for a `Range` object, which will stay in sync as new
   * operations are applied to the editor.
   */ rangeRef (editor, range) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { affinity = "forward" } = options;
        var ref = {
            current: range,
            affinity,
            unref () {
                var { current } = ref;
                var rangeRefs = Editor.rangeRefs(editor);
                rangeRefs.delete(ref);
                ref.current = null;
                return current;
            }
        };
        var refs = Editor.rangeRefs(editor);
        refs.add(ref);
        return ref;
    },
    /**
   * Get the set of currently tracked range refs of the editor.
   */ rangeRefs (editor) {
        var refs = RANGE_REFS.get(editor);
        if (!refs) {
            refs = new Set();
            RANGE_REFS.set(editor, refs);
        }
        return refs;
    },
    /**
   * Remove a custom property from all of the leaf text nodes in the current
   * selection.
   *
   * If the selection is currently collapsed, the removal will be stored on
   * `editor.marks` and applied to the text inserted next.
   */ removeMark (editor, key) {
        editor.removeMark(key);
    },
    /**
   * Manually set if the editor should currently be normalizing.
   *
   * Note: Using this incorrectly can leave the editor in an invalid state.
   *
   */ setNormalizing (editor, isNormalizing) {
        NORMALIZING.set(editor, isNormalizing);
    },
    /**
   * Get the start point of a location.
   */ start (editor, at) {
        return Editor.point(editor, at, {
            edge: "start"
        });
    },
    /**
   * Get the text string content of a location.
   *
   * Note: by default the text of void nodes is considered to be an empty
   * string, regardless of content, unless you pass in true for the voids option
   */ string (editor, at) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { voids = false } = options;
        var range = Editor.range(editor, at);
        var [start, end] = Range.edges(range);
        var text = "";
        for (var [node, path] of Editor.nodes(editor, {
            at: range,
            match: Text.isText,
            voids
        })){
            var t = node.text;
            if (Path.equals(path, end.path)) t = t.slice(0, end.offset);
            if (Path.equals(path, start.path)) t = t.slice(start.offset);
            text += t;
        }
        return text;
    },
    /**
   * Convert a range into a non-hanging one.
   */ unhangRange (editor, range) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { voids = false } = options;
        var [start, end] = Range.edges(range); // PERF: exit early if we can guarantee that the range isn't hanging.
        if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) return range;
        var endBlock = Editor.above(editor, {
            at: end,
            match: (n)=>Editor.isBlock(editor, n)
        });
        var blockPath = endBlock ? endBlock[1] : [];
        var first = Editor.start(editor, start);
        var before = {
            anchor: first,
            focus: end
        };
        var skip = true;
        for (var [node, path] of Editor.nodes(editor, {
            at: before,
            match: Text.isText,
            reverse: true,
            voids
        })){
            if (skip) {
                skip = false;
                continue;
            }
            if (node.text !== "" || Path.isBefore(path, blockPath)) {
                end = {
                    path,
                    offset: node.text.length
                };
                break;
            }
        }
        return {
            anchor: start,
            focus: end
        };
    },
    /**
   * Match a void node in the current branch of the editor.
   */ void (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return Editor.above(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {
            match: (n)=>Editor.isVoid(editor, n)
        }));
    },
    /**
   * Call a function, deferring normalization until after it completes.
   */ withoutNormalizing (editor, fn) {
        var value = Editor.isNormalizing(editor);
        Editor.setNormalizing(editor, false);
        try {
            fn();
        } finally{
            Editor.setNormalizing(editor, value);
        }
        Editor.normalize(editor);
    }
};
var Location = {
    /**
   * Check if a value implements the `Location` interface.
   */ isLocation (value) {
        return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value);
    }
}; // eslint-disable-next-line no-redeclare
var Span = {
    /**
   * Check if a value implements the `Span` interface.
   */ isSpan (value) {
        return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);
    }
};
var _excluded$3 = [
    "children"
], _excluded2$2 = [
    "text"
];
var IS_NODE_LIST_CACHE = new WeakMap(); // eslint-disable-next-line no-redeclare
var Node = {
    /**
   * Get the node at a specific path, asserting that it's an ancestor node.
   */ ancestor (root, path) {
        var node = Node.get(root, path);
        if (Text.isText(node)) throw new Error("Cannot get the ancestor node at path [".concat(path, "] because it refers to a text node instead: ").concat(Scrubber.stringify(node)));
        return node;
    },
    /**
   * Return a generator of all the ancestor nodes above a specific path.
   *
   * By default the order is top-down, from highest to lowest ancestor in
   * the tree, but you can pass the `reverse: true` option to go bottom-up.
   */ *ancestors (root, path) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        for (var p of Path.ancestors(path, options)){
            var n = Node.ancestor(root, p);
            var entry = [
                n,
                p
            ];
            yield entry;
        }
    },
    /**
   * Get the child of a node at a specific index.
   */ child (root, index) {
        if (Text.isText(root)) throw new Error("Cannot get the child of a text node: ".concat(Scrubber.stringify(root)));
        var c = root.children[index];
        if (c == null) throw new Error("Cannot get child at index `".concat(index, "` in node: ").concat(Scrubber.stringify(root)));
        return c;
    },
    /**
   * Iterate over the children of a node at a specific path.
   */ *children (root, path) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { reverse = false } = options;
        var ancestor = Node.ancestor(root, path);
        var { children } = ancestor;
        var index = reverse ? children.length - 1 : 0;
        while(reverse ? index >= 0 : index < children.length){
            var child = Node.child(ancestor, index);
            var childPath = path.concat(index);
            yield [
                child,
                childPath
            ];
            index = reverse ? index - 1 : index + 1;
        }
    },
    /**
   * Get an entry for the common ancesetor node of two paths.
   */ common (root, path, another) {
        var p = Path.common(path, another);
        var n = Node.get(root, p);
        return [
            n,
            p
        ];
    },
    /**
   * Get the node at a specific path, asserting that it's a descendant node.
   */ descendant (root, path) {
        var node = Node.get(root, path);
        if (Editor.isEditor(node)) throw new Error("Cannot get the descendant node at path [".concat(path, "] because it refers to the root editor node instead: ").concat(Scrubber.stringify(node)));
        return node;
    },
    /**
   * Return a generator of all the descendant node entries inside a root node.
   */ *descendants (root) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        for (var [node, path] of Node.nodes(root, options))if (path.length !== 0) // NOTE: we have to coerce here because checking the path's length does
        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.
        yield [
            node,
            path
        ];
    },
    /**
   * Return a generator of all the element nodes inside a root node. Each iteration
   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the
   * root node is an element it will be included in the iteration as well.
   */ *elements (root) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        for (var [node, path] of Node.nodes(root, options))if (Element.isElement(node)) yield [
            node,
            path
        ];
    },
    /**
   * Extract props from a Node.
   */ extractProps (node) {
        if (Element.isAncestor(node)) {
            var properties = _objectWithoutProperties(node, _excluded$3);
            return properties;
        } else {
            var properties = _objectWithoutProperties(node, _excluded2$2);
            return properties;
        }
    },
    /**
   * Get the first node entry in a root node from a path.
   */ first (root, path) {
        var p = path.slice();
        var n = Node.get(root, p);
        while(n){
            if (Text.isText(n) || n.children.length === 0) break;
            else {
                n = n.children[0];
                p.push(0);
            }
        }
        return [
            n,
            p
        ];
    },
    /**
   * Get the sliced fragment represented by a range inside a root node.
   */ fragment (root, range) {
        if (Text.isText(root)) throw new Error("Cannot get a fragment starting from a root text node: ".concat(Scrubber.stringify(root)));
        var newRoot = (0, _immer.produce)({
            children: root.children
        }, (r)=>{
            var [start, end] = Range.edges(range);
            var nodeEntries = Node.nodes(r, {
                reverse: true,
                pass: (_ref)=>{
                    var [, path] = _ref;
                    return !Range.includes(range, path);
                }
            });
            for (var [, path] of nodeEntries){
                if (!Range.includes(range, path)) {
                    var parent = Node.parent(r, path);
                    var index = path[path.length - 1];
                    parent.children.splice(index, 1);
                }
                if (Path.equals(path, end.path)) {
                    var leaf = Node.leaf(r, path);
                    leaf.text = leaf.text.slice(0, end.offset);
                }
                if (Path.equals(path, start.path)) {
                    var _leaf = Node.leaf(r, path);
                    _leaf.text = _leaf.text.slice(start.offset);
                }
            }
            if (Editor.isEditor(r)) r.selection = null;
        });
        return newRoot.children;
    },
    /**
   * Get the descendant node referred to by a specific path. If the path is an
   * empty array, it refers to the root node itself.
   */ get (root, path) {
        var node = root;
        for(var i = 0; i < path.length; i++){
            var p = path[i];
            if (Text.isText(node) || !node.children[p]) throw new Error("Cannot find a descendant at path [".concat(path, "] in node: ").concat(Scrubber.stringify(root)));
            node = node.children[p];
        }
        return node;
    },
    /**
   * Check if a descendant node exists at a specific path.
   */ has (root, path) {
        var node = root;
        for(var i = 0; i < path.length; i++){
            var p = path[i];
            if (Text.isText(node) || !node.children[p]) return false;
            node = node.children[p];
        }
        return true;
    },
    /**
   * Check if a value implements the `Node` interface.
   */ isNode (value) {
        return Text.isText(value) || Element.isElement(value) || Editor.isEditor(value);
    },
    /**
   * Check if a value is a list of `Node` objects.
   */ isNodeList (value) {
        if (!Array.isArray(value)) return false;
        var cachedResult = IS_NODE_LIST_CACHE.get(value);
        if (cachedResult !== undefined) return cachedResult;
        var isNodeList = value.every((val)=>Node.isNode(val));
        IS_NODE_LIST_CACHE.set(value, isNodeList);
        return isNodeList;
    },
    /**
   * Get the last node entry in a root node from a path.
   */ last (root, path) {
        var p = path.slice();
        var n = Node.get(root, p);
        while(n){
            if (Text.isText(n) || n.children.length === 0) break;
            else {
                var i = n.children.length - 1;
                n = n.children[i];
                p.push(i);
            }
        }
        return [
            n,
            p
        ];
    },
    /**
   * Get the node at a specific path, ensuring it's a leaf text node.
   */ leaf (root, path) {
        var node = Node.get(root, path);
        if (!Text.isText(node)) throw new Error("Cannot get the leaf node at path [".concat(path, "] because it refers to a non-leaf node: ").concat(Scrubber.stringify(node)));
        return node;
    },
    /**
   * Return a generator of the in a branch of the tree, from a specific path.
   *
   * By default the order is top-down, from highest to lowest node in the tree,
   * but you can pass the `reverse: true` option to go bottom-up.
   */ *levels (root, path) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        for (var p of Path.levels(path, options)){
            var n = Node.get(root, p);
            yield [
                n,
                p
            ];
        }
    },
    /**
   * Check if a node matches a set of props.
   */ matches (node, props) {
        return Element.isElement(node) && Element.isElementProps(props) && Element.matches(node, props) || Text.isText(node) && Text.isTextProps(props) && Text.matches(node, props);
    },
    /**
   * Return a generator of all the node entries of a root node. Each entry is
   * returned as a `[Node, Path]` tuple, with the path referring to the node's
   * position inside the root node.
   */ *nodes (root) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { pass, reverse = false } = options;
        var { from = [], to } = options;
        var visited = new Set();
        var p = [];
        var n = root;
        while(true){
            if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) break;
            if (!visited.has(n)) yield [
                n,
                p
            ];
             // If we're allowed to go downward and we haven't descended yet, do.
            if (!visited.has(n) && !Text.isText(n) && n.children.length !== 0 && (pass == null || pass([
                n,
                p
            ]) === false)) {
                visited.add(n);
                var nextIndex = reverse ? n.children.length - 1 : 0;
                if (Path.isAncestor(p, from)) nextIndex = from[p.length];
                p = p.concat(nextIndex);
                n = Node.get(root, p);
                continue;
            } // If we're at the root and we can't go down, we're done.
            if (p.length === 0) break;
             // If we're going forward...
            if (!reverse) {
                var newPath = Path.next(p);
                if (Node.has(root, newPath)) {
                    p = newPath;
                    n = Node.get(root, p);
                    continue;
                }
            } // If we're going backward...
            if (reverse && p[p.length - 1] !== 0) {
                var _newPath = Path.previous(p);
                p = _newPath;
                n = Node.get(root, p);
                continue;
            } // Otherwise we're going upward...
            p = Path.parent(p);
            n = Node.get(root, p);
            visited.add(n);
        }
    },
    /**
   * Get the parent of a node at a specific path.
   */ parent (root, path) {
        var parentPath = Path.parent(path);
        var p = Node.get(root, parentPath);
        if (Text.isText(p)) throw new Error("Cannot get the parent of path [".concat(path, "] because it does not exist in the root."));
        return p;
    },
    /**
   * Get the concatenated text string of a node's content.
   *
   * Note that this will not include spaces or line breaks between block nodes.
   * It is not a user-facing string, but a string for performing offset-related
   * computations for a node.
   */ string (node) {
        if (Text.isText(node)) return node.text;
        else return node.children.map(Node.string).join("");
    },
    /**
   * Return a generator of all leaf text nodes in a root node.
   */ *texts (root) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        for (var [node, path] of Node.nodes(root, options))if (Text.isText(node)) yield [
            node,
            path
        ];
    }
};
function ownKeys$7(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$7(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$7(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$7(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var Operation = {
    /**
   * Check of a value is a `NodeOperation` object.
   */ isNodeOperation (value) {
        return Operation.isOperation(value) && value.type.endsWith("_node");
    },
    /**
   * Check of a value is an `Operation` object.
   */ isOperation (value) {
        if (!(0, _isPlainObject.isPlainObject)(value)) return false;
        switch(value.type){
            case "insert_node":
                return Path.isPath(value.path) && Node.isNode(value.node);
            case "insert_text":
                return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
            case "merge_node":
                return typeof value.position === "number" && Path.isPath(value.path) && (0, _isPlainObject.isPlainObject)(value.properties);
            case "move_node":
                return Path.isPath(value.path) && Path.isPath(value.newPath);
            case "remove_node":
                return Path.isPath(value.path) && Node.isNode(value.node);
            case "remove_text":
                return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
            case "set_node":
                return Path.isPath(value.path) && (0, _isPlainObject.isPlainObject)(value.properties) && (0, _isPlainObject.isPlainObject)(value.newProperties);
            case "set_selection":
                return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || (0, _isPlainObject.isPlainObject)(value.properties) && (0, _isPlainObject.isPlainObject)(value.newProperties);
            case "split_node":
                return Path.isPath(value.path) && typeof value.position === "number" && (0, _isPlainObject.isPlainObject)(value.properties);
            default:
                return false;
        }
    },
    /**
   * Check if a value is a list of `Operation` objects.
   */ isOperationList (value) {
        return Array.isArray(value) && value.every((val)=>Operation.isOperation(val));
    },
    /**
   * Check of a value is a `SelectionOperation` object.
   */ isSelectionOperation (value) {
        return Operation.isOperation(value) && value.type.endsWith("_selection");
    },
    /**
   * Check of a value is a `TextOperation` object.
   */ isTextOperation (value) {
        return Operation.isOperation(value) && value.type.endsWith("_text");
    },
    /**
   * Invert an operation, returning a new operation that will exactly undo the
   * original when applied.
   */ inverse (op) {
        switch(op.type){
            case "insert_node":
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    type: "remove_node"
                });
            case "insert_text":
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    type: "remove_text"
                });
            case "merge_node":
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    type: "split_node",
                    path: Path.previous(op.path)
                });
            case "move_node":
                var { newPath, path } = op; // PERF: in this case the move operation is a no-op anyways.
                if (Path.equals(newPath, path)) return op;
                 // If the move happens completely within a single parent the path and
                // newPath are stable with respect to each other.
                if (Path.isSibling(path, newPath)) return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    path: newPath,
                    newPath: path
                });
                 // If the move does not happen within a single parent it is possible
                // for the move to impact the true path to the location where the node
                // was removed from and where it was inserted. We have to adjust for this
                // and find the original path. We can accomplish this (only in non-sibling)
                // moves by looking at the impact of the move operation on the node
                // after the original move path.
                var inversePath = Path.transform(path, op);
                var inverseNewPath = Path.transform(Path.next(path), op);
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    path: inversePath,
                    newPath: inverseNewPath
                });
            case "remove_node":
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    type: "insert_node"
                });
            case "remove_text":
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    type: "insert_text"
                });
            case "set_node":
                var { properties, newProperties } = op;
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    properties: newProperties,
                    newProperties: properties
                });
            case "set_selection":
                var { properties: _properties, newProperties: _newProperties } = op;
                if (_properties == null) return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    properties: _newProperties,
                    newProperties: null
                });
                else if (_newProperties == null) return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    properties: null,
                    newProperties: _properties
                });
                else return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    properties: _newProperties,
                    newProperties: _properties
                });
            case "split_node":
                return _objectSpread$7(_objectSpread$7({}, op), {}, {
                    type: "merge_node",
                    path: Path.next(op.path)
                });
        }
    }
};
// eslint-disable-next-line no-redeclare
var Path = {
    /**
   * Get a list of ancestor paths for a given path.
   *
   * The paths are sorted from shallowest to deepest ancestor. However, if the
   * `reverse: true` option is passed, they are reversed.
   */ ancestors (path) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { reverse = false } = options;
        var paths = Path.levels(path, options);
        if (reverse) paths = paths.slice(1);
        else paths = paths.slice(0, -1);
        return paths;
    },
    /**
   * Get the common ancestor path of two paths.
   */ common (path, another) {
        var common = [];
        for(var i = 0; i < path.length && i < another.length; i++){
            var av = path[i];
            var bv = another[i];
            if (av !== bv) break;
            common.push(av);
        }
        return common;
    },
    /**
   * Compare a path to another, returning an integer indicating whether the path
   * was before, at, or after the other.
   *
   * Note: Two paths of unequal length can still receive a `0` result if one is
   * directly above or below the other. If you want exact matching, use
   * [[Path.equals]] instead.
   */ compare (path, another) {
        var min = Math.min(path.length, another.length);
        for(var i = 0; i < min; i++){
            if (path[i] < another[i]) return -1;
            if (path[i] > another[i]) return 1;
        }
        return 0;
    },
    /**
   * Check if a path ends after one of the indexes in another.
   */ endsAfter (path, another) {
        var i = path.length - 1;
        var as = path.slice(0, i);
        var bs = another.slice(0, i);
        var av = path[i];
        var bv = another[i];
        return Path.equals(as, bs) && av > bv;
    },
    /**
   * Check if a path ends at one of the indexes in another.
   */ endsAt (path, another) {
        var i = path.length;
        var as = path.slice(0, i);
        var bs = another.slice(0, i);
        return Path.equals(as, bs);
    },
    /**
   * Check if a path ends before one of the indexes in another.
   */ endsBefore (path, another) {
        var i = path.length - 1;
        var as = path.slice(0, i);
        var bs = another.slice(0, i);
        var av = path[i];
        var bv = another[i];
        return Path.equals(as, bs) && av < bv;
    },
    /**
   * Check if a path is exactly equal to another.
   */ equals (path, another) {
        return path.length === another.length && path.every((n, i)=>n === another[i]);
    },
    /**
   * Check if the path of previous sibling node exists
   */ hasPrevious (path) {
        return path[path.length - 1] > 0;
    },
    /**
   * Check if a path is after another.
   */ isAfter (path, another) {
        return Path.compare(path, another) === 1;
    },
    /**
   * Check if a path is an ancestor of another.
   */ isAncestor (path, another) {
        return path.length < another.length && Path.compare(path, another) === 0;
    },
    /**
   * Check if a path is before another.
   */ isBefore (path, another) {
        return Path.compare(path, another) === -1;
    },
    /**
   * Check if a path is a child of another.
   */ isChild (path, another) {
        return path.length === another.length + 1 && Path.compare(path, another) === 0;
    },
    /**
   * Check if a path is equal to or an ancestor of another.
   */ isCommon (path, another) {
        return path.length <= another.length && Path.compare(path, another) === 0;
    },
    /**
   * Check if a path is a descendant of another.
   */ isDescendant (path, another) {
        return path.length > another.length && Path.compare(path, another) === 0;
    },
    /**
   * Check if a path is the parent of another.
   */ isParent (path, another) {
        return path.length + 1 === another.length && Path.compare(path, another) === 0;
    },
    /**
   * Check is a value implements the `Path` interface.
   */ isPath (value) {
        return Array.isArray(value) && (value.length === 0 || typeof value[0] === "number");
    },
    /**
   * Check if a path is a sibling of another.
   */ isSibling (path, another) {
        if (path.length !== another.length) return false;
        var as = path.slice(0, -1);
        var bs = another.slice(0, -1);
        var al = path[path.length - 1];
        var bl = another[another.length - 1];
        return al !== bl && Path.equals(as, bs);
    },
    /**
   * Get a list of paths at every level down to a path. Note: this is the same
   * as `Path.ancestors`, but including the path itself.
   *
   * The paths are sorted from shallowest to deepest. However, if the `reverse:
   * true` option is passed, they are reversed.
   */ levels (path) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { reverse = false } = options;
        var list = [];
        for(var i = 0; i <= path.length; i++)list.push(path.slice(0, i));
        if (reverse) list.reverse();
        return list;
    },
    /**
   * Given a path, get the path to the next sibling node.
   */ next (path) {
        if (path.length === 0) throw new Error("Cannot get the next path of a root path [".concat(path, "], because it has no next index."));
        var last = path[path.length - 1];
        return path.slice(0, -1).concat(last + 1);
    },
    /**
   * Returns whether this operation can affect paths or not. Used as an
   * optimization when updating dirty paths during normalization
   *
   * NOTE: This *must* be kept in sync with the implementation of 'transform'
   * below
   */ operationCanTransformPath (operation) {
        switch(operation.type){
            case "insert_node":
            case "remove_node":
            case "merge_node":
            case "split_node":
            case "move_node":
                return true;
            default:
                return false;
        }
    },
    /**
   * Given a path, return a new path referring to the parent node above it.
   */ parent (path) {
        if (path.length === 0) throw new Error("Cannot get the parent path of the root path [".concat(path, "]."));
        return path.slice(0, -1);
    },
    /**
   * Given a path, get the path to the previous sibling node.
   */ previous (path) {
        if (path.length === 0) throw new Error("Cannot get the previous path of a root path [".concat(path, "], because it has no previous index."));
        var last = path[path.length - 1];
        if (last <= 0) throw new Error("Cannot get the previous path of a first child path [".concat(path, "] because it would result in a negative index."));
        return path.slice(0, -1).concat(last - 1);
    },
    /**
   * Get a path relative to an ancestor.
   */ relative (path, ancestor) {
        if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) throw new Error("Cannot get the relative path of [".concat(path, "] inside ancestor [").concat(ancestor, "], because it is not above or equal to the path."));
        return path.slice(ancestor.length);
    },
    /**
   * Transform a path by an operation.
   */ transform (path, operation) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (!path) return null; // PERF: use destructing instead of immer
        var p = [
            ...path
        ];
        var { affinity = "forward" } = options; // PERF: Exit early if the operation is guaranteed not to have an effect.
        if (path.length === 0) return p;
        switch(operation.type){
            case "insert_node":
                var { path: op } = operation;
                if (Path.equals(op, p) || Path.endsBefore(op, p) || Path.isAncestor(op, p)) p[op.length - 1] += 1;
                break;
            case "remove_node":
                var { path: _op } = operation;
                if (Path.equals(_op, p) || Path.isAncestor(_op, p)) return null;
                else if (Path.endsBefore(_op, p)) p[_op.length - 1] -= 1;
                break;
            case "merge_node":
                var { path: _op2, position } = operation;
                if (Path.equals(_op2, p) || Path.endsBefore(_op2, p)) p[_op2.length - 1] -= 1;
                else if (Path.isAncestor(_op2, p)) {
                    p[_op2.length - 1] -= 1;
                    p[_op2.length] += position;
                }
                break;
            case "split_node":
                var { path: _op3, position: _position } = operation;
                if (Path.equals(_op3, p)) {
                    if (affinity === "forward") p[p.length - 1] += 1;
                    else if (affinity === "backward") ;
                    else return null;
                } else if (Path.endsBefore(_op3, p)) p[_op3.length - 1] += 1;
                else if (Path.isAncestor(_op3, p) && path[_op3.length] >= _position) {
                    p[_op3.length - 1] += 1;
                    p[_op3.length] -= _position;
                }
                break;
            case "move_node":
                var { path: _op4, newPath: onp } = operation; // If the old and new path are the same, it's a no-op.
                if (Path.equals(_op4, onp)) return p;
                if (Path.isAncestor(_op4, p) || Path.equals(_op4, p)) {
                    var copy = onp.slice();
                    if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) copy[_op4.length - 1] -= 1;
                    return copy.concat(p.slice(_op4.length));
                } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p) || Path.equals(onp, p))) {
                    if (Path.endsBefore(_op4, p)) p[_op4.length - 1] -= 1;
                    else p[_op4.length - 1] += 1;
                } else if (Path.endsBefore(onp, p) || Path.equals(onp, p) || Path.isAncestor(onp, p)) {
                    if (Path.endsBefore(_op4, p)) p[_op4.length - 1] -= 1;
                    p[onp.length - 1] += 1;
                } else if (Path.endsBefore(_op4, p)) {
                    if (Path.equals(onp, p)) p[onp.length - 1] += 1;
                    p[_op4.length - 1] -= 1;
                }
                break;
        }
        return p;
    }
};
var PathRef = {
    /**
   * Transform the path ref's current value by an operation.
   */ transform (ref, op) {
        var { current, affinity } = ref;
        if (current == null) return;
        var path = Path.transform(current, op, {
            affinity
        });
        ref.current = path;
        if (path == null) ref.unref();
    }
};
function ownKeys$6(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$6(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$6(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$6(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var Point = {
    /**
   * Compare a point to another, returning an integer indicating whether the
   * point was before, at, or after the other.
   */ compare (point, another) {
        var result = Path.compare(point.path, another.path);
        if (result === 0) {
            if (point.offset < another.offset) return -1;
            if (point.offset > another.offset) return 1;
            return 0;
        }
        return result;
    },
    /**
   * Check if a point is after another.
   */ isAfter (point, another) {
        return Point.compare(point, another) === 1;
    },
    /**
   * Check if a point is before another.
   */ isBefore (point, another) {
        return Point.compare(point, another) === -1;
    },
    /**
   * Check if a point is exactly equal to another.
   */ equals (point, another) {
        // PERF: ensure the offsets are equal first since they are cheaper to check.
        return point.offset === another.offset && Path.equals(point.path, another.path);
    },
    /**
   * Check if a value implements the `Point` interface.
   */ isPoint (value) {
        return (0, _isPlainObject.isPlainObject)(value) && typeof value.offset === "number" && Path.isPath(value.path);
    },
    /**
   * Transform a point by an operation.
   */ transform (point, op) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return (0, _immer.produce)(point, (p)=>{
            if (p === null) return null;
            var { affinity = "forward" } = options;
            var { path, offset } = p;
            switch(op.type){
                case "insert_node":
                case "move_node":
                    p.path = Path.transform(path, op, options);
                    break;
                case "insert_text":
                    if (Path.equals(op.path, path) && (op.offset < offset || op.offset === offset && affinity === "forward")) p.offset += op.text.length;
                    break;
                case "merge_node":
                    if (Path.equals(op.path, path)) p.offset += op.position;
                    p.path = Path.transform(path, op, options);
                    break;
                case "remove_text":
                    if (Path.equals(op.path, path) && op.offset <= offset) p.offset -= Math.min(offset - op.offset, op.text.length);
                    break;
                case "remove_node":
                    if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) return null;
                    p.path = Path.transform(path, op, options);
                    break;
                case "split_node":
                    if (Path.equals(op.path, path)) {
                        if (op.position === offset && affinity == null) return null;
                        else if (op.position < offset || op.position === offset && affinity === "forward") {
                            p.offset -= op.position;
                            p.path = Path.transform(path, op, _objectSpread$6(_objectSpread$6({}, options), {}, {
                                affinity: "forward"
                            }));
                        }
                    } else p.path = Path.transform(path, op, options);
                    break;
            }
        });
    }
};
var PointRef = {
    /**
   * Transform the point ref's current value by an operation.
   */ transform (ref, op) {
        var { current, affinity } = ref;
        if (current == null) return;
        var point = Point.transform(current, op, {
            affinity
        });
        ref.current = point;
        if (point == null) ref.unref();
    }
};
var _excluded$2 = [
    "anchor",
    "focus"
];
function ownKeys$5(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$5(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$5(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$5(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var Range = {
    /**
   * Get the start and end points of a range, in the order in which they appear
   * in the document.
   */ edges (range) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { reverse = false } = options;
        var { anchor, focus } = range;
        return Range.isBackward(range) === reverse ? [
            anchor,
            focus
        ] : [
            focus,
            anchor
        ];
    },
    /**
   * Get the end point of a range.
   */ end (range) {
        var [, end] = Range.edges(range);
        return end;
    },
    /**
   * Check if a range is exactly equal to another.
   */ equals (range, another) {
        return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);
    },
    /**
   * Check if a range includes a path, a point or part of another range.
   */ includes (range, target) {
        if (Range.isRange(target)) {
            if (Range.includes(range, target.anchor) || Range.includes(range, target.focus)) return true;
            var [rs, re] = Range.edges(range);
            var [ts, te] = Range.edges(target);
            return Point.isBefore(rs, ts) && Point.isAfter(re, te);
        }
        var [start, end] = Range.edges(range);
        var isAfterStart = false;
        var isBeforeEnd = false;
        if (Point.isPoint(target)) {
            isAfterStart = Point.compare(target, start) >= 0;
            isBeforeEnd = Point.compare(target, end) <= 0;
        } else {
            isAfterStart = Path.compare(target, start.path) >= 0;
            isBeforeEnd = Path.compare(target, end.path) <= 0;
        }
        return isAfterStart && isBeforeEnd;
    },
    /**
   * Get the intersection of a range with another.
   */ intersection (range, another) {
        var rest = _objectWithoutProperties(range, _excluded$2);
        var [s1, e1] = Range.edges(range);
        var [s2, e2] = Range.edges(another);
        var start = Point.isBefore(s1, s2) ? s2 : s1;
        var end = Point.isBefore(e1, e2) ? e1 : e2;
        if (Point.isBefore(end, start)) return null;
        else return _objectSpread$5({
            anchor: start,
            focus: end
        }, rest);
    },
    /**
   * Check if a range is backward, meaning that its anchor point appears in the
   * document _after_ its focus point.
   */ isBackward (range) {
        var { anchor, focus } = range;
        return Point.isAfter(anchor, focus);
    },
    /**
   * Check if a range is collapsed, meaning that both its anchor and focus
   * points refer to the exact same position in the document.
   */ isCollapsed (range) {
        var { anchor, focus } = range;
        return Point.equals(anchor, focus);
    },
    /**
   * Check if a range is expanded.
   *
   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.
   */ isExpanded (range) {
        return !Range.isCollapsed(range);
    },
    /**
   * Check if a range is forward.
   *
   * This is the opposite of [[Range.isBackward]] and is provided for legibility.
   */ isForward (range) {
        return !Range.isBackward(range);
    },
    /**
   * Check if a value implements the [[Range]] interface.
   */ isRange (value) {
        return (0, _isPlainObject.isPlainObject)(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);
    },
    /**
   * Iterate through all of the point entries in a range.
   */ *points (range) {
        yield [
            range.anchor,
            "anchor"
        ];
        yield [
            range.focus,
            "focus"
        ];
    },
    /**
   * Get the start point of a range.
   */ start (range) {
        var [start] = Range.edges(range);
        return start;
    },
    /**
   * Transform a range by an operation.
   */ transform (range, op) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        return (0, _immer.produce)(range, (r)=>{
            if (r === null) return null;
            var { affinity = "inward" } = options;
            var affinityAnchor;
            var affinityFocus;
            if (affinity === "inward") {
                // If the range is collapsed, make sure to use the same affinity to
                // avoid the two points passing each other and expanding in the opposite
                // direction
                var isCollapsed = Range.isCollapsed(r);
                if (Range.isForward(r)) {
                    affinityAnchor = "forward";
                    affinityFocus = isCollapsed ? affinityAnchor : "backward";
                } else {
                    affinityAnchor = "backward";
                    affinityFocus = isCollapsed ? affinityAnchor : "forward";
                }
            } else if (affinity === "outward") {
                if (Range.isForward(r)) {
                    affinityAnchor = "backward";
                    affinityFocus = "forward";
                } else {
                    affinityAnchor = "forward";
                    affinityFocus = "backward";
                }
            } else {
                affinityAnchor = affinity;
                affinityFocus = affinity;
            }
            var anchor = Point.transform(r.anchor, op, {
                affinity: affinityAnchor
            });
            var focus = Point.transform(r.focus, op, {
                affinity: affinityFocus
            });
            if (!anchor || !focus) return null;
            r.anchor = anchor;
            r.focus = focus;
        });
    }
};
var RangeRef = {
    /**
   * Transform the range ref's current value by an operation.
   */ transform (ref, op) {
        var { current, affinity } = ref;
        if (current == null) return;
        var path = Range.transform(current, op, {
            affinity
        });
        ref.current = path;
        if (path == null) ref.unref();
    }
};
var _scrubber = undefined;
/**
 * This interface implements a stringify() function, which is used by Slate
 * internally when generating exceptions containing end user data. Developers
 * using Slate may call Scrubber.setScrubber() to alter the behavior of this
 * stringify() function.
 *
 * For example, to prevent the cleartext logging of 'text' fields within Nodes:
 *
 *    import { Scrubber } from 'slate';
 *    Scrubber.setScrubber((key, val) => {
 *      if (key === 'text') return '...scrubbed...'
 *      return val
 *    });
 *
 */ // eslint-disable-next-line no-redeclare
var Scrubber = {
    setScrubber (scrubber) {
        _scrubber = scrubber;
    },
    stringify (value) {
        return JSON.stringify(value, _scrubber);
    }
};
/*
  Custom deep equal comparison for Slate nodes.

  We don't need general purpose deep equality;
  Slate only supports plain values, Arrays, and nested objects.
  Complex values nested inside Arrays are not supported.

  Slate objects are designed to be serialised, so
  missing keys are deliberately normalised to undefined.
 */ var isDeepEqual = (node, another)=>{
    for(var key in node){
        var a = node[key];
        var b = another[key];
        if ((0, _isPlainObject.isPlainObject)(a) && (0, _isPlainObject.isPlainObject)(b)) {
            if (!isDeepEqual(a, b)) return false;
        } else if (Array.isArray(a) && Array.isArray(b)) {
            if (a.length !== b.length) return false;
            for(var i = 0; i < a.length; i++){
                if (a[i] !== b[i]) return false;
            }
        } else if (a !== b) return false;
    }
    /*
    Deep object equality is only necessary in one direction; in the reverse direction
    we are only looking for keys that are missing.
    As above, undefined keys are normalised to missing.
  */ for(var _key in another){
        if (node[_key] === undefined && another[_key] !== undefined) return false;
    }
    return true;
};
var _excluded$1 = [
    "text"
], _excluded2$1 = [
    "anchor",
    "focus"
];
function ownKeys$4(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$4(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$4(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var Text = {
    /**
   * Check if two text nodes are equal.
   *
   * When loose is set, the text is not compared. This is
   * used to check whether sibling text nodes can be merged.
   */ equals (text, another) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { loose = false } = options;
        function omitText(obj) {
            var rest = _objectWithoutProperties(obj, _excluded$1);
            return rest;
        }
        return isDeepEqual(loose ? omitText(text) : text, loose ? omitText(another) : another);
    },
    /**
   * Check if a value implements the `Text` interface.
   */ isText (value) {
        return (0, _isPlainObject.isPlainObject)(value) && typeof value.text === "string";
    },
    /**
   * Check if a value is a list of `Text` objects.
   */ isTextList (value) {
        return Array.isArray(value) && value.every((val)=>Text.isText(val));
    },
    /**
   * Check if some props are a partial of Text.
   */ isTextProps (props) {
        return props.text !== undefined;
    },
    /**
   * Check if an text matches set of properties.
   *
   * Note: this is for matching custom properties, and it does not ensure that
   * the `text` property are two nodes equal.
   */ matches (text, props) {
        for(var key in props){
            if (key === "text") continue;
            if (!text.hasOwnProperty(key) || text[key] !== props[key]) return false;
        }
        return true;
    },
    /**
   * Get the leaves for a text node given decorations.
   */ decorations (node, decorations) {
        var leaves = [
            _objectSpread$4({}, node)
        ];
        for (var dec of decorations){
            var rest = _objectWithoutProperties(dec, _excluded2$1);
            var [start, end] = Range.edges(dec);
            var next = [];
            var leafEnd = 0;
            var decorationStart = start.offset;
            var decorationEnd = end.offset;
            for (var leaf of leaves){
                var { length } = leaf.text;
                var leafStart = leafEnd;
                leafEnd += length; // If the range encompasses the entire leaf, add the range.
                if (decorationStart <= leafStart && leafEnd <= decorationEnd) {
                    Object.assign(leaf, rest);
                    next.push(leaf);
                    continue;
                } // If the range expanded and match the leaf, or starts after, or ends before it, continue.
                if (decorationStart !== decorationEnd && (decorationStart === leafEnd || decorationEnd === leafStart) || decorationStart > leafEnd || decorationEnd < leafStart || decorationEnd === leafStart && leafStart !== 0) {
                    next.push(leaf);
                    continue;
                } // Otherwise we need to split the leaf, at the start, end, or both,
                // and add the range to the middle intersecting section. Do the end
                // split first since we don't need to update the offset that way.
                var middle = leaf;
                var before = void 0;
                var after = void 0;
                if (decorationEnd < leafEnd) {
                    var off = decorationEnd - leafStart;
                    after = _objectSpread$4(_objectSpread$4({}, middle), {}, {
                        text: middle.text.slice(off)
                    });
                    middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {
                        text: middle.text.slice(0, off)
                    });
                }
                if (decorationStart > leafStart) {
                    var _off = decorationStart - leafStart;
                    before = _objectSpread$4(_objectSpread$4({}, middle), {}, {
                        text: middle.text.slice(0, _off)
                    });
                    middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {
                        text: middle.text.slice(_off)
                    });
                }
                Object.assign(middle, rest);
                if (before) next.push(before);
                next.push(middle);
                if (after) next.push(after);
            }
            leaves = next;
        }
        return leaves;
    }
};
function ownKeys$3(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$3(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$3(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var applyToDraft = (editor, selection, op)=>{
    switch(op.type){
        case "insert_node":
            var { path, node } = op;
            var parent = Node.parent(editor, path);
            var index = path[path.length - 1];
            if (index > parent.children.length) throw new Error('Cannot apply an "insert_node" operation at path ['.concat(path, "] because the destination is past the end of the node."));
            parent.children.splice(index, 0, node);
            if (selection) for (var [point, key] of Range.points(selection))selection[key] = Point.transform(point, op);
            break;
        case "insert_text":
            var { path: _path, offset, text } = op;
            if (text.length === 0) break;
            var _node = Node.leaf(editor, _path);
            var before = _node.text.slice(0, offset);
            var after = _node.text.slice(offset);
            _node.text = before + text + after;
            if (selection) for (var [_point, _key] of Range.points(selection))selection[_key] = Point.transform(_point, op);
            break;
        case "merge_node":
            var { path: _path2 } = op;
            var _node2 = Node.get(editor, _path2);
            var prevPath = Path.previous(_path2);
            var prev = Node.get(editor, prevPath);
            var _parent = Node.parent(editor, _path2);
            var _index = _path2[_path2.length - 1];
            if (Text.isText(_node2) && Text.isText(prev)) prev.text += _node2.text;
            else if (!Text.isText(_node2) && !Text.isText(prev)) prev.children.push(..._node2.children);
            else throw new Error('Cannot apply a "merge_node" operation at path ['.concat(_path2, "] to nodes of different interfaces: ").concat(Scrubber.stringify(_node2), " ").concat(Scrubber.stringify(prev)));
            _parent.children.splice(_index, 1);
            if (selection) for (var [_point2, _key2] of Range.points(selection))selection[_key2] = Point.transform(_point2, op);
            break;
        case "move_node":
            var { path: _path3, newPath } = op;
            if (Path.isAncestor(_path3, newPath)) throw new Error("Cannot move a path [".concat(_path3, "] to new path [").concat(newPath, "] because the destination is inside itself."));
            var _node3 = Node.get(editor, _path3);
            var _parent2 = Node.parent(editor, _path3);
            var _index2 = _path3[_path3.length - 1]; // This is tricky, but since the `path` and `newPath` both refer to
            // the same snapshot in time, there's a mismatch. After either
            // removing the original position, the second step's path can be out
            // of date. So instead of using the `op.newPath` directly, we
            // transform `op.path` to ascertain what the `newPath` would be after
            // the operation was applied.
            _parent2.children.splice(_index2, 1);
            var truePath = Path.transform(_path3, op);
            var newParent = Node.get(editor, Path.parent(truePath));
            var newIndex = truePath[truePath.length - 1];
            newParent.children.splice(newIndex, 0, _node3);
            if (selection) for (var [_point3, _key3] of Range.points(selection))selection[_key3] = Point.transform(_point3, op);
            break;
        case "remove_node":
            var { path: _path4 } = op;
            var _index3 = _path4[_path4.length - 1];
            var _parent3 = Node.parent(editor, _path4);
            _parent3.children.splice(_index3, 1); // Transform all of the points in the value, but if the point was in the
            // node that was removed we need to update the range or remove it.
            if (selection) for (var [_point4, _key4] of Range.points(selection)){
                var result = Point.transform(_point4, op);
                if (selection != null && result != null) selection[_key4] = result;
                else {
                    var _prev = void 0;
                    var next = void 0;
                    for (var [n, p] of Node.texts(editor))if (Path.compare(p, _path4) === -1) _prev = [
                        n,
                        p
                    ];
                    else {
                        next = [
                            n,
                            p
                        ];
                        break;
                    }
                    var preferNext = false;
                    if (_prev && next) {
                        if (Path.equals(next[1], _path4)) preferNext = !Path.hasPrevious(next[1]);
                        else preferNext = Path.common(_prev[1], _path4).length < Path.common(next[1], _path4).length;
                    }
                    if (_prev && !preferNext) {
                        _point4.path = _prev[1];
                        _point4.offset = _prev[0].text.length;
                    } else if (next) {
                        _point4.path = next[1];
                        _point4.offset = 0;
                    } else selection = null;
                }
            }
            break;
        case "remove_text":
            var { path: _path5, offset: _offset, text: _text } = op;
            if (_text.length === 0) break;
            var _node4 = Node.leaf(editor, _path5);
            var _before = _node4.text.slice(0, _offset);
            var _after = _node4.text.slice(_offset + _text.length);
            _node4.text = _before + _after;
            if (selection) for (var [_point5, _key5] of Range.points(selection))selection[_key5] = Point.transform(_point5, op);
            break;
        case "set_node":
            var { path: _path6, properties, newProperties } = op;
            if (_path6.length === 0) throw new Error("Cannot set properties on the root node!");
            var _node5 = Node.get(editor, _path6);
            for(var _key6 in newProperties){
                if (_key6 === "children" || _key6 === "text") throw new Error('Cannot set the "'.concat(_key6, '" property of nodes!'));
                var value = newProperties[_key6];
                if (value == null) delete _node5[_key6];
                else _node5[_key6] = value;
            } // properties that were previously defined, but are now missing, must be deleted
            for(var _key7 in properties)if (!newProperties.hasOwnProperty(_key7)) delete _node5[_key7];
            break;
        case "set_selection":
            var { newProperties: _newProperties } = op;
            if (_newProperties == null) selection = _newProperties;
            else {
                if (selection == null) {
                    if (!Range.isRange(_newProperties)) throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(Scrubber.stringify(_newProperties), " when there is no current selection."));
                    selection = _objectSpread$3({}, _newProperties);
                }
                for(var _key8 in _newProperties){
                    var _value = _newProperties[_key8];
                    if (_value == null) {
                        if (_key8 === "anchor" || _key8 === "focus") throw new Error('Cannot remove the "'.concat(_key8, '" selection property'));
                        delete selection[_key8];
                    } else selection[_key8] = _value;
                }
            }
            break;
        case "split_node":
            var { path: _path7, position, properties: _properties } = op;
            if (_path7.length === 0) throw new Error('Cannot apply a "split_node" operation at path ['.concat(_path7, "] because the root node cannot be split."));
            var _node6 = Node.get(editor, _path7);
            var _parent4 = Node.parent(editor, _path7);
            var _index4 = _path7[_path7.length - 1];
            var newNode;
            if (Text.isText(_node6)) {
                var _before2 = _node6.text.slice(0, position);
                var _after2 = _node6.text.slice(position);
                _node6.text = _before2;
                newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {
                    text: _after2
                });
            } else {
                var _before3 = _node6.children.slice(0, position);
                var _after3 = _node6.children.slice(position);
                _node6.children = _before3;
                newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {
                    children: _after3
                });
            }
            _parent4.children.splice(_index4 + 1, 0, newNode);
            if (selection) for (var [_point6, _key9] of Range.points(selection))selection[_key9] = Point.transform(_point6, op);
            break;
    }
    return selection;
}; // eslint-disable-next-line no-redeclare
var GeneralTransforms = {
    /**
   * Transform the editor by an operation.
   */ transform (editor, op) {
        editor.children = (0, _immer.createDraft)(editor.children);
        var selection = editor.selection && (0, _immer.createDraft)(editor.selection);
        try {
            selection = applyToDraft(editor, selection, op);
        } finally{
            editor.children = (0, _immer.finishDraft)(editor.children);
            if (selection) editor.selection = (0, _immer.isDraft)(selection) ? (0, _immer.finishDraft)(selection) : selection;
            else editor.selection = null;
        }
    }
};
var _excluded = [
    "text"
], _excluded2 = [
    "children"
];
function ownKeys$2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$2(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var NodeTransforms = {
    /**
   * Insert nodes at a specific location in the Editor.
   */ insertNodes (editor, nodes) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { hanging = false, voids = false, mode = "lowest" } = options;
            var { at, match, select } = options;
            if (Node.isNode(nodes)) nodes = [
                nodes
            ];
            if (nodes.length === 0) return;
            var [node] = nodes; // By default, use the selection as the target location. But if there is
            // no selection, insert at the end of the document since that is such a
            // common use case when inserting from a non-selected state.
            if (!at) {
                if (editor.selection) at = editor.selection;
                else if (editor.children.length > 0) at = Editor.end(editor, []);
                else at = [
                    0
                ];
                select = true;
            }
            if (select == null) select = false;
            if (Range.isRange(at)) {
                if (!hanging) at = Editor.unhangRange(editor, at);
                if (Range.isCollapsed(at)) at = at.anchor;
                else {
                    var [, end] = Range.edges(at);
                    var pointRef = Editor.pointRef(editor, end);
                    Transforms.delete(editor, {
                        at
                    });
                    at = pointRef.unref();
                }
            }
            if (Point.isPoint(at)) {
                if (match == null) {
                    if (Text.isText(node)) match = (n)=>Text.isText(n);
                    else if (editor.isInline(node)) match = (n)=>Text.isText(n) || Editor.isInline(editor, n);
                    else match = (n)=>Editor.isBlock(editor, n);
                }
                var [entry] = Editor.nodes(editor, {
                    at: at.path,
                    match,
                    mode,
                    voids
                });
                if (entry) {
                    var [, _matchPath] = entry;
                    var pathRef = Editor.pathRef(editor, _matchPath);
                    var isAtEnd = Editor.isEnd(editor, at, _matchPath);
                    Transforms.splitNodes(editor, {
                        at,
                        match,
                        mode,
                        voids
                    });
                    var path = pathRef.unref();
                    at = isAtEnd ? Path.next(path) : path;
                } else return;
            }
            var parentPath = Path.parent(at);
            var index = at[at.length - 1];
            if (!voids && Editor.void(editor, {
                at: parentPath
            })) return;
            for (var _node of nodes){
                var _path = parentPath.concat(index);
                index++;
                editor.apply({
                    type: "insert_node",
                    path: _path,
                    node: _node
                });
                at = Path.next(at);
            }
            at = Path.previous(at);
            if (select) {
                var point = Editor.end(editor, at);
                if (point) Transforms.select(editor, point);
            }
        });
    },
    /**
   * Lift nodes at a specific location upwards in the document tree, splitting
   * their parent in two if necessary.
   */ liftNodes (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { at = editor.selection, mode = "lowest", voids = false } = options;
            var { match } = options;
            if (match == null) match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Editor.isBlock(editor, n);
            if (!at) return;
            var matches = Editor.nodes(editor, {
                at,
                match,
                mode,
                voids
            });
            var pathRefs = Array.from(matches, (_ref)=>{
                var [, p] = _ref;
                return Editor.pathRef(editor, p);
            });
            for (var pathRef of pathRefs){
                var path = pathRef.unref();
                if (path.length < 2) throw new Error("Cannot lift node at a path [".concat(path, "] because it has a depth of less than `2`."));
                var parentNodeEntry = Editor.node(editor, Path.parent(path));
                var [parent, parentPath] = parentNodeEntry;
                var index = path[path.length - 1];
                var { length } = parent.children;
                if (length === 1) {
                    var toPath = Path.next(parentPath);
                    Transforms.moveNodes(editor, {
                        at: path,
                        to: toPath,
                        voids
                    });
                    Transforms.removeNodes(editor, {
                        at: parentPath,
                        voids
                    });
                } else if (index === 0) Transforms.moveNodes(editor, {
                    at: path,
                    to: parentPath,
                    voids
                });
                else if (index === length - 1) {
                    var _toPath = Path.next(parentPath);
                    Transforms.moveNodes(editor, {
                        at: path,
                        to: _toPath,
                        voids
                    });
                } else {
                    var splitPath = Path.next(path);
                    var _toPath2 = Path.next(parentPath);
                    Transforms.splitNodes(editor, {
                        at: splitPath,
                        voids
                    });
                    Transforms.moveNodes(editor, {
                        at: path,
                        to: _toPath2,
                        voids
                    });
                }
            }
        });
    },
    /**
   * Merge a node at a location with the previous node of the same depth,
   * removing any empty containing nodes after the merge if necessary.
   */ mergeNodes (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { match, at = editor.selection } = options;
            var { hanging = false, voids = false, mode = "lowest" } = options;
            if (!at) return;
            if (match == null) {
                if (Path.isPath(at)) {
                    var [parent] = Editor.parent(editor, at);
                    match = (n)=>parent.children.includes(n);
                } else match = (n)=>Editor.isBlock(editor, n);
            }
            if (!hanging && Range.isRange(at)) at = Editor.unhangRange(editor, at);
            if (Range.isRange(at)) {
                if (Range.isCollapsed(at)) at = at.anchor;
                else {
                    var [, end] = Range.edges(at);
                    var pointRef = Editor.pointRef(editor, end);
                    Transforms.delete(editor, {
                        at
                    });
                    at = pointRef.unref();
                    if (options.at == null) Transforms.select(editor, at);
                }
            }
            var [current] = Editor.nodes(editor, {
                at,
                match,
                voids,
                mode
            });
            var prev = Editor.previous(editor, {
                at,
                match,
                voids,
                mode
            });
            if (!current || !prev) return;
            var [node, path] = current;
            var [prevNode, prevPath] = prev;
            if (path.length === 0 || prevPath.length === 0) return;
            var newPath = Path.next(prevPath);
            var commonPath = Path.common(path, prevPath);
            var isPreviousSibling = Path.isSibling(path, prevPath);
            var levels = Array.from(Editor.levels(editor, {
                at: path
            }), (_ref2)=>{
                var [n] = _ref2;
                return n;
            }).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a
            // result, in which case we'll want to remove it after merging.
            var emptyAncestor = Editor.above(editor, {
                at: path,
                mode: "highest",
                match: (n)=>levels.includes(n) && hasSingleChildNest(editor, n)
            });
            var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);
            var properties;
            var position; // Ensure that the nodes are equivalent, and figure out what the position
            // and extra properties of the merge will be.
            if (Text.isText(node) && Text.isText(prevNode)) {
                var rest = _objectWithoutProperties(node, _excluded);
                position = prevNode.text.length;
                properties = rest;
            } else if (Element.isElement(node) && Element.isElement(prevNode)) {
                var rest = _objectWithoutProperties(node, _excluded2);
                position = prevNode.children.length;
                properties = rest;
            } else throw new Error("Cannot merge the node at path [".concat(path, "] with the previous sibling because it is not the same kind: ").concat(Scrubber.stringify(node), " ").concat(Scrubber.stringify(prevNode)));
             // If the node isn't already the next sibling of the previous node, move
            // it so that it is before merging.
            if (!isPreviousSibling) Transforms.moveNodes(editor, {
                at: path,
                to: newPath,
                voids
            });
             // If there was going to be an empty ancestor of the node that was merged,
            // we remove it from the tree.
            if (emptyRef) Transforms.removeNodes(editor, {
                at: emptyRef.current,
                voids
            });
             // If the target node that we're merging with is empty, remove it instead
            // of merging the two. This is a common rich text editor behavior to
            // prevent losing formatting when deleting entire nodes when you have a
            // hanging selection.
            // if prevNode is first child in parent,don't remove it.
            if (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === "" && prevPath[prevPath.length - 1] !== 0) Transforms.removeNodes(editor, {
                at: prevPath,
                voids
            });
            else editor.apply({
                type: "merge_node",
                path: newPath,
                position,
                properties
            });
            if (emptyRef) emptyRef.unref();
        });
    },
    /**
   * Move the nodes at a location to a new location.
   */ moveNodes (editor, options) {
        Editor.withoutNormalizing(editor, ()=>{
            var { to, at = editor.selection, mode = "lowest", voids = false } = options;
            var { match } = options;
            if (!at) return;
            if (match == null) match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Editor.isBlock(editor, n);
            var toRef = Editor.pathRef(editor, to);
            var targets = Editor.nodes(editor, {
                at,
                match,
                mode,
                voids
            });
            var pathRefs = Array.from(targets, (_ref3)=>{
                var [, p] = _ref3;
                return Editor.pathRef(editor, p);
            });
            for (var pathRef of pathRefs){
                var path = pathRef.unref();
                var newPath = toRef.current;
                if (path.length !== 0) editor.apply({
                    type: "move_node",
                    path,
                    newPath
                });
                if (toRef.current && Path.isSibling(newPath, path) && Path.isAfter(newPath, path)) // When performing a sibling move to a later index, the path at the destination is shifted
                // to before the insertion point instead of after. To ensure our group of nodes are inserted
                // in the correct order we increment toRef to account for that
                toRef.current = Path.next(toRef.current);
            }
            toRef.unref();
        });
    },
    /**
   * Remove the nodes at a specific location in the document.
   */ removeNodes (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { hanging = false, voids = false, mode = "lowest" } = options;
            var { at = editor.selection, match } = options;
            if (!at) return;
            if (match == null) match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Editor.isBlock(editor, n);
            if (!hanging && Range.isRange(at)) at = Editor.unhangRange(editor, at);
            var depths = Editor.nodes(editor, {
                at,
                match,
                mode,
                voids
            });
            var pathRefs = Array.from(depths, (_ref4)=>{
                var [, p] = _ref4;
                return Editor.pathRef(editor, p);
            });
            for (var pathRef of pathRefs){
                var path = pathRef.unref();
                if (path) {
                    var [node] = Editor.node(editor, path);
                    editor.apply({
                        type: "remove_node",
                        path,
                        node
                    });
                }
            }
        });
    },
    /**
   * Set new properties on the nodes at a location.
   */ setNodes (editor, props) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { match, at = editor.selection, compare, merge } = options;
            var { hanging = false, mode = "lowest", split = false, voids = false } = options;
            if (!at) return;
            if (match == null) match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Editor.isBlock(editor, n);
            if (!hanging && Range.isRange(at)) at = Editor.unhangRange(editor, at);
            if (split && Range.isRange(at)) {
                if (Range.isCollapsed(at) && Editor.leaf(editor, at.anchor)[0].text.length > 0) // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to
                // set that won't get normalized away
                return;
                var rangeRef = Editor.rangeRef(editor, at, {
                    affinity: "inward"
                });
                var [start, end] = Range.edges(at);
                var splitMode = mode === "lowest" ? "lowest" : "highest";
                var endAtEndOfNode = Editor.isEnd(editor, end, end.path);
                Transforms.splitNodes(editor, {
                    at: end,
                    match,
                    mode: splitMode,
                    voids,
                    always: !endAtEndOfNode
                });
                var startAtStartOfNode = Editor.isStart(editor, start, start.path);
                Transforms.splitNodes(editor, {
                    at: start,
                    match,
                    mode: splitMode,
                    voids,
                    always: !startAtStartOfNode
                });
                at = rangeRef.unref();
                if (options.at == null) Transforms.select(editor, at);
            }
            if (!compare) compare = (prop, nodeProp)=>prop !== nodeProp;
            for (var [node, path] of Editor.nodes(editor, {
                at,
                match,
                mode,
                voids
            })){
                var properties = {};
                var newProperties = {}; // You can't set properties on the editor node.
                if (path.length === 0) continue;
                var hasChanges = false;
                for(var k in props){
                    if (k === "children" || k === "text") continue;
                    if (compare(props[k], node[k])) {
                        hasChanges = true; // Omit new properties from the old properties list
                        if (node.hasOwnProperty(k)) properties[k] = node[k]; // Omit properties that have been removed from the new properties list
                        if (merge) {
                            if (props[k] != null) newProperties[k] = merge(node[k], props[k]);
                        } else if (props[k] != null) newProperties[k] = props[k];
                    }
                }
                if (hasChanges) editor.apply({
                    type: "set_node",
                    path,
                    properties,
                    newProperties
                });
            }
        });
    },
    /**
   * Split the nodes at a specific location.
   */ splitNodes (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { mode = "lowest", voids = false } = options;
            var { match, at = editor.selection, height = 0, always = false } = options;
            if (match == null) match = (n)=>Editor.isBlock(editor, n);
            if (Range.isRange(at)) at = deleteRange(editor, at);
             // If the target is a path, the default height-skipping and position
            // counters need to account for us potentially splitting at a non-leaf.
            if (Path.isPath(at)) {
                var path = at;
                var point = Editor.point(editor, path);
                var [parent] = Editor.parent(editor, path);
                match = (n)=>n === parent;
                height = point.path.length - path.length + 1;
                at = point;
                always = true;
            }
            if (!at) return;
            var beforeRef = Editor.pointRef(editor, at, {
                affinity: "backward"
            });
            var afterRef;
            try {
                var [highest] = Editor.nodes(editor, {
                    at,
                    match,
                    mode,
                    voids
                });
                if (!highest) return;
                var voidMatch = Editor.void(editor, {
                    at,
                    mode: "highest"
                });
                var nudge = 0;
                if (!voids && voidMatch) {
                    var [voidNode, voidPath] = voidMatch;
                    if (Element.isElement(voidNode) && editor.isInline(voidNode)) {
                        var after = Editor.after(editor, voidPath);
                        if (!after) {
                            var text = {
                                text: ""
                            };
                            var afterPath = Path.next(voidPath);
                            Transforms.insertNodes(editor, text, {
                                at: afterPath,
                                voids
                            });
                            after = Editor.point(editor, afterPath);
                        }
                        at = after;
                        always = true;
                    }
                    var siblingHeight = at.path.length - voidPath.length;
                    height = siblingHeight + 1;
                    always = true;
                }
                afterRef = Editor.pointRef(editor, at);
                var depth = at.path.length - height;
                var [, highestPath] = highest;
                var lowestPath = at.path.slice(0, depth);
                var position = height === 0 ? at.offset : at.path[depth] + nudge;
                for (var [node, _path2] of Editor.levels(editor, {
                    at: lowestPath,
                    reverse: true,
                    voids
                })){
                    var split = false;
                    if (_path2.length < highestPath.length || _path2.length === 0 || !voids && Editor.isVoid(editor, node)) break;
                    var _point = beforeRef.current;
                    var isEnd = Editor.isEnd(editor, _point, _path2);
                    if (always || !beforeRef || !Editor.isEdge(editor, _point, _path2)) {
                        split = true;
                        var properties = Node.extractProps(node);
                        editor.apply({
                            type: "split_node",
                            path: _path2,
                            position,
                            properties
                        });
                    }
                    position = _path2[_path2.length - 1] + (split || isEnd ? 1 : 0);
                }
                if (options.at == null) {
                    var _point2 = afterRef.current || Editor.end(editor, []);
                    Transforms.select(editor, _point2);
                }
            } finally{
                var _afterRef;
                beforeRef.unref();
                (_afterRef = afterRef) === null || _afterRef === void 0 || _afterRef.unref();
            }
        });
    },
    /**
   * Unset properties on the nodes at a location.
   */ unsetNodes (editor, props) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (!Array.isArray(props)) props = [
            props
        ];
        var obj = {};
        for (var key of props)obj[key] = null;
        Transforms.setNodes(editor, obj, options);
    },
    /**
   * Unwrap the nodes at a location from a parent node, splitting the parent if
   * necessary to ensure that only the content in the range is unwrapped.
   */ unwrapNodes (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { mode = "lowest", split = false, voids = false } = options;
            var { at = editor.selection, match } = options;
            if (!at) return;
            if (match == null) match = Path.isPath(at) ? matchPath(editor, at) : (n)=>Editor.isBlock(editor, n);
            if (Path.isPath(at)) at = Editor.range(editor, at);
            var rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null;
            var matches = Editor.nodes(editor, {
                at,
                match,
                mode,
                voids
            });
            var pathRefs = Array.from(matches, (_ref5)=>{
                var [, p] = _ref5;
                return Editor.pathRef(editor, p);
            } // unwrapNode will call liftNode which does not support splitting the node when nested.
            ).reverse();
            var _loop = function _loop(pathRef) {
                var path = pathRef.unref();
                var [node] = Editor.node(editor, path);
                var range = Editor.range(editor, path);
                if (split && rangeRef) range = Range.intersection(rangeRef.current, range);
                Transforms.liftNodes(editor, {
                    at: range,
                    match: (n)=>Element.isAncestor(node) && node.children.includes(n),
                    voids
                });
            };
            for (var pathRef of pathRefs)_loop(pathRef);
            if (rangeRef) rangeRef.unref();
        });
    },
    /**
   * Wrap the nodes at a location in a new container node, splitting the edges
   * of the range first to ensure that only the content in the range is wrapped.
   */ wrapNodes (editor, element) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { mode = "lowest", split = false, voids = false } = options;
            var { match, at = editor.selection } = options;
            if (!at) return;
            if (match == null) {
                if (Path.isPath(at)) match = matchPath(editor, at);
                else if (editor.isInline(element)) match = (n)=>Editor.isInline(editor, n) || Text.isText(n);
                else match = (n)=>Editor.isBlock(editor, n);
            }
            if (split && Range.isRange(at)) {
                var [start, end] = Range.edges(at);
                var rangeRef = Editor.rangeRef(editor, at, {
                    affinity: "inward"
                });
                Transforms.splitNodes(editor, {
                    at: end,
                    match,
                    voids
                });
                Transforms.splitNodes(editor, {
                    at: start,
                    match,
                    voids
                });
                at = rangeRef.unref();
                if (options.at == null) Transforms.select(editor, at);
            }
            var roots = Array.from(Editor.nodes(editor, {
                at,
                match: editor.isInline(element) ? (n)=>Editor.isBlock(editor, n) : (n)=>Editor.isEditor(n),
                mode: "lowest",
                voids
            }));
            for (var [, rootPath] of roots){
                var a = Range.isRange(at) ? Range.intersection(at, Editor.range(editor, rootPath)) : at;
                if (!a) continue;
                var matches = Array.from(Editor.nodes(editor, {
                    at: a,
                    match,
                    mode,
                    voids
                }));
                if (matches.length > 0) {
                    var _ret = function() {
                        var [first] = matches;
                        var last = matches[matches.length - 1];
                        var [, firstPath] = first;
                        var [, lastPath] = last;
                        if (firstPath.length === 0 && lastPath.length === 0) // if there's no matching parent - usually means the node is an editor - don't do anything
                        return "continue";
                        var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);
                        var range = Editor.range(editor, firstPath, lastPath);
                        var commonNodeEntry = Editor.node(editor, commonPath);
                        var [commonNode] = commonNodeEntry;
                        var depth = commonPath.length + 1;
                        var wrapperPath = Path.next(lastPath.slice(0, depth));
                        var wrapper = _objectSpread$2(_objectSpread$2({}, element), {}, {
                            children: []
                        });
                        Transforms.insertNodes(editor, wrapper, {
                            at: wrapperPath,
                            voids
                        });
                        Transforms.moveNodes(editor, {
                            at: range,
                            match: (n)=>Element.isAncestor(commonNode) && commonNode.children.includes(n),
                            to: wrapperPath.concat(0),
                            voids
                        });
                    }();
                    if (_ret === "continue") continue;
                }
            }
        });
    }
};
var hasSingleChildNest = (editor, node)=>{
    if (Element.isElement(node)) {
        var element = node;
        if (Editor.isVoid(editor, node)) return true;
        else if (element.children.length === 1) return hasSingleChildNest(editor, element.children[0]);
        else return false;
    } else if (Editor.isEditor(node)) return false;
    else return true;
};
/**
 * Convert a range into a point by deleting it's content.
 */ var deleteRange = (editor, range)=>{
    if (Range.isCollapsed(range)) return range.anchor;
    else {
        var [, end] = Range.edges(range);
        var pointRef = Editor.pointRef(editor, end);
        Transforms.delete(editor, {
            at: range
        });
        return pointRef.unref();
    }
};
var matchPath = (editor, path)=>{
    var [node] = Editor.node(editor, path);
    return (n)=>n === node;
};
function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$1(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$1(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$1(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var SelectionTransforms = {
    /**
   * Collapse the selection.
   */ collapse (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { edge = "anchor" } = options;
        var { selection } = editor;
        if (!selection) return;
        else if (edge === "anchor") Transforms.select(editor, selection.anchor);
        else if (edge === "focus") Transforms.select(editor, selection.focus);
        else if (edge === "start") {
            var [start] = Range.edges(selection);
            Transforms.select(editor, start);
        } else if (edge === "end") {
            var [, end] = Range.edges(selection);
            Transforms.select(editor, end);
        }
    },
    /**
   * Unset the selection.
   */ deselect (editor) {
        var { selection } = editor;
        if (selection) editor.apply({
            type: "set_selection",
            properties: selection,
            newProperties: null
        });
    },
    /**
   * Move the selection's point forward or backward.
   */ move (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var { selection } = editor;
        var { distance = 1, unit = "character", reverse = false } = options;
        var { edge = null } = options;
        if (!selection) return;
        if (edge === "start") edge = Range.isBackward(selection) ? "focus" : "anchor";
        if (edge === "end") edge = Range.isBackward(selection) ? "anchor" : "focus";
        var { anchor, focus } = selection;
        var opts = {
            distance,
            unit
        };
        var props = {};
        if (edge == null || edge === "anchor") {
            var point = reverse ? Editor.before(editor, anchor, opts) : Editor.after(editor, anchor, opts);
            if (point) props.anchor = point;
        }
        if (edge == null || edge === "focus") {
            var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);
            if (_point) props.focus = _point;
        }
        Transforms.setSelection(editor, props);
    },
    /**
   * Set the selection to a new value.
   */ select (editor, target) {
        var { selection } = editor;
        target = Editor.range(editor, target);
        if (selection) {
            Transforms.setSelection(editor, target);
            return;
        }
        if (!Range.isRange(target)) throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(Scrubber.stringify(target)));
        editor.apply({
            type: "set_selection",
            properties: selection,
            newProperties: target
        });
    },
    /**
   * Set new properties on one of the selection's points.
   */ setPoint (editor, props) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { selection } = editor;
        var { edge = "both" } = options;
        if (!selection) return;
        if (edge === "start") edge = Range.isBackward(selection) ? "focus" : "anchor";
        if (edge === "end") edge = Range.isBackward(selection) ? "anchor" : "focus";
        var { anchor, focus } = selection;
        var point = edge === "anchor" ? anchor : focus;
        Transforms.setSelection(editor, {
            [edge === "anchor" ? "anchor" : "focus"]: _objectSpread$1(_objectSpread$1({}, point), props)
        });
    },
    /**
   * Set new properties on the selection.
   */ setSelection (editor, props) {
        var { selection } = editor;
        var oldProps = {};
        var newProps = {};
        if (!selection) return;
        for(var k in props)if (k === "anchor" && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === "focus" && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== "anchor" && k !== "focus" && props[k] !== selection[k]) {
            oldProps[k] = selection[k];
            newProps[k] = props[k];
        }
        if (Object.keys(oldProps).length > 0) editor.apply({
            type: "set_selection",
            properties: oldProps,
            newProperties: newProps
        });
    }
};
var TextTransforms = {
    /**
   * Delete content in the editor.
   */ delete (editor) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { reverse = false, unit = "character", distance = 1, voids = false } = options;
            var { at = editor.selection, hanging = false } = options;
            if (!at) return;
            var isCollapsed = false;
            if (Range.isRange(at) && Range.isCollapsed(at)) {
                isCollapsed = true;
                at = at.anchor;
            }
            if (Point.isPoint(at)) {
                var furthestVoid = Editor.void(editor, {
                    at,
                    mode: "highest"
                });
                if (!voids && furthestVoid) {
                    var [, voidPath] = furthestVoid;
                    at = voidPath;
                } else {
                    var opts = {
                        unit,
                        distance
                    };
                    var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);
                    at = {
                        anchor: at,
                        focus: target
                    };
                    hanging = true;
                }
            }
            if (Path.isPath(at)) {
                Transforms.removeNodes(editor, {
                    at,
                    voids
                });
                return;
            }
            if (Range.isCollapsed(at)) return;
            if (!hanging) {
                var [, _end] = Range.edges(at);
                var endOfDoc = Editor.end(editor, []);
                if (!Point.equals(_end, endOfDoc)) at = Editor.unhangRange(editor, at, {
                    voids
                });
            }
            var [start, end] = Range.edges(at);
            var startBlock = Editor.above(editor, {
                match: (n)=>Editor.isBlock(editor, n),
                at: start,
                voids
            });
            var endBlock = Editor.above(editor, {
                match: (n)=>Editor.isBlock(editor, n),
                at: end,
                voids
            });
            var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);
            var isSingleText = Path.equals(start.path, end.path);
            var startVoid = voids ? null : Editor.void(editor, {
                at: start,
                mode: "highest"
            });
            var endVoid = voids ? null : Editor.void(editor, {
                at: end,
                mode: "highest"
            }); // If the start or end points are inside an inline void, nudge them out.
            if (startVoid) {
                var before = Editor.before(editor, start);
                if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) start = before;
            }
            if (endVoid) {
                var after = Editor.after(editor, end);
                if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) end = after;
            } // Get the highest nodes that are completely inside the range, as well as
            // the start and end nodes.
            var matches = [];
            var lastPath;
            for (var entry of Editor.nodes(editor, {
                at,
                voids
            })){
                var [node, path] = entry;
                if (lastPath && Path.compare(path, lastPath) === 0) continue;
                if (!voids && Editor.isVoid(editor, node) || !Path.isCommon(path, start.path) && !Path.isCommon(path, end.path)) {
                    matches.push(entry);
                    lastPath = path;
                }
            }
            var pathRefs = Array.from(matches, (_ref)=>{
                var [, p] = _ref;
                return Editor.pathRef(editor, p);
            });
            var startRef = Editor.pointRef(editor, start);
            var endRef = Editor.pointRef(editor, end);
            var removedText = "";
            if (!isSingleText && !startVoid) {
                var _point = startRef.current;
                var [_node] = Editor.leaf(editor, _point);
                var { path: _path } = _point;
                var { offset } = start;
                var text = _node.text.slice(offset);
                if (text.length > 0) {
                    editor.apply({
                        type: "remove_text",
                        path: _path,
                        offset,
                        text
                    });
                    removedText = text;
                }
            }
            pathRefs.reverse().map((r)=>r.unref()).filter((r)=>r !== null).forEach((p)=>Transforms.removeNodes(editor, {
                    at: p,
                    voids
                }));
            if (!endVoid) {
                var _point2 = endRef.current;
                var [_node2] = Editor.leaf(editor, _point2);
                var { path: _path2 } = _point2;
                var _offset = isSingleText ? start.offset : 0;
                var _text = _node2.text.slice(_offset, end.offset);
                if (_text.length > 0) {
                    editor.apply({
                        type: "remove_text",
                        path: _path2,
                        offset: _offset,
                        text: _text
                    });
                    removedText = _text;
                }
            }
            if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) Transforms.mergeNodes(editor, {
                at: endRef.current,
                hanging: true,
                voids
            });
             // For Thai script, deleting N character(s) backward should delete
            // N code point(s) instead of an entire grapheme cluster.
            // Therefore, the remaining code points should be inserted back.
            if (isCollapsed && reverse && unit === "character" && removedText.length > 1 && removedText.match(/[\u0E00-\u0E7F]+/)) Transforms.insertText(editor, removedText.slice(0, removedText.length - distance));
            var startUnref = startRef.unref();
            var endUnref = endRef.unref();
            var point = reverse ? startUnref || endUnref : endUnref || startUnref;
            if (options.at == null && point) Transforms.select(editor, point);
        });
    },
    /**
   * Insert a fragment at a specific location in the editor.
   */ insertFragment (editor, fragment) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { hanging = false, voids = false } = options;
            var { at = editor.selection } = options;
            if (!fragment.length) return;
            if (!at) return;
            else if (Range.isRange(at)) {
                if (!hanging) at = Editor.unhangRange(editor, at);
                if (Range.isCollapsed(at)) at = at.anchor;
                else {
                    var [, end] = Range.edges(at);
                    if (!voids && Editor.void(editor, {
                        at: end
                    })) return;
                    var pointRef = Editor.pointRef(editor, end);
                    Transforms.delete(editor, {
                        at
                    });
                    at = pointRef.unref();
                }
            } else if (Path.isPath(at)) at = Editor.start(editor, at);
            if (!voids && Editor.void(editor, {
                at
            })) return;
             // If the insert point is at the edge of an inline node, move it outside
            // instead since it will need to be split otherwise.
            var inlineElementMatch = Editor.above(editor, {
                at,
                match: (n)=>Editor.isInline(editor, n),
                mode: "highest",
                voids
            });
            if (inlineElementMatch) {
                var [, _inlinePath] = inlineElementMatch;
                if (Editor.isEnd(editor, at, _inlinePath)) {
                    var after = Editor.after(editor, _inlinePath);
                    at = after;
                } else if (Editor.isStart(editor, at, _inlinePath)) {
                    var before = Editor.before(editor, _inlinePath);
                    at = before;
                }
            }
            var blockMatch = Editor.above(editor, {
                match: (n)=>Editor.isBlock(editor, n),
                at,
                voids
            });
            var [, blockPath] = blockMatch;
            var isBlockStart = Editor.isStart(editor, at, blockPath);
            var isBlockEnd = Editor.isEnd(editor, at, blockPath);
            var isBlockEmpty = isBlockStart && isBlockEnd;
            var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;
            var mergeEnd = !isBlockEnd;
            var [, firstPath] = Node.first({
                children: fragment
            }, []);
            var [, lastPath] = Node.last({
                children: fragment
            }, []);
            var matches = [];
            var matcher = (_ref2)=>{
                var [n, p] = _ref2;
                var isRoot = p.length === 0;
                if (isRoot) return false;
                if (isBlockEmpty) return true;
                if (mergeStart && Path.isAncestor(p, firstPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) return false;
                if (mergeEnd && Path.isAncestor(p, lastPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) return false;
                return true;
            };
            for (var entry of Node.nodes({
                children: fragment
            }, {
                pass: matcher
            }))if (matcher(entry)) matches.push(entry);
            var starts = [];
            var middles = [];
            var ends = [];
            var starting = true;
            var hasBlocks = false;
            for (var [node] of matches){
                if (Element.isElement(node) && !editor.isInline(node)) {
                    starting = false;
                    hasBlocks = true;
                    middles.push(node);
                } else if (starting) starts.push(node);
                else ends.push(node);
            }
            var [inlineMatch] = Editor.nodes(editor, {
                at,
                match: (n)=>Text.isText(n) || Editor.isInline(editor, n),
                mode: "highest",
                voids
            });
            var [, inlinePath] = inlineMatch;
            var isInlineStart = Editor.isStart(editor, at, inlinePath);
            var isInlineEnd = Editor.isEnd(editor, at, inlinePath);
            var middleRef = Editor.pathRef(editor, isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath);
            var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);
            Transforms.splitNodes(editor, {
                at,
                match: (n)=>hasBlocks ? Editor.isBlock(editor, n) : Text.isText(n) || Editor.isInline(editor, n),
                mode: hasBlocks ? "lowest" : "highest",
                always: hasBlocks && (!isBlockStart || starts.length > 0) && (!isBlockEnd || ends.length > 0),
                voids
            });
            var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);
            Transforms.insertNodes(editor, starts, {
                at: startRef.current,
                match: (n)=>Text.isText(n) || Editor.isInline(editor, n),
                mode: "highest",
                voids
            });
            if (isBlockEmpty && !starts.length && middles.length && !ends.length) Transforms.delete(editor, {
                at: blockPath,
                voids
            });
            Transforms.insertNodes(editor, middles, {
                at: middleRef.current,
                match: (n)=>Editor.isBlock(editor, n),
                mode: "lowest",
                voids
            });
            Transforms.insertNodes(editor, ends, {
                at: endRef.current,
                match: (n)=>Text.isText(n) || Editor.isInline(editor, n),
                mode: "highest",
                voids
            });
            if (!options.at) {
                var path;
                if (ends.length > 0 && endRef.current) path = Path.previous(endRef.current);
                else if (middles.length > 0 && middleRef.current) path = Path.previous(middleRef.current);
                else if (startRef.current) path = Path.previous(startRef.current);
                if (path) {
                    var _end2 = Editor.end(editor, path);
                    Transforms.select(editor, _end2);
                }
            }
            startRef.unref();
            middleRef.unref();
            endRef.unref();
        });
    },
    /**
   * Insert a string of text in the Editor.
   */ insertText (editor, text) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        Editor.withoutNormalizing(editor, ()=>{
            var { voids = false } = options;
            var { at = editor.selection } = options;
            if (!at) return;
            if (Path.isPath(at)) at = Editor.range(editor, at);
            if (Range.isRange(at)) {
                if (Range.isCollapsed(at)) at = at.anchor;
                else {
                    var end = Range.end(at);
                    if (!voids && Editor.void(editor, {
                        at: end
                    })) return;
                    var start = Range.start(at);
                    var startRef = Editor.pointRef(editor, start);
                    var endRef = Editor.pointRef(editor, end);
                    Transforms.delete(editor, {
                        at,
                        voids
                    });
                    var startPoint = startRef.unref();
                    var endPoint = endRef.unref();
                    at = startPoint || endPoint;
                    Transforms.setSelection(editor, {
                        anchor: at,
                        focus: at
                    });
                }
            }
            if (!voids && Editor.void(editor, {
                at
            })) return;
            var { path, offset } = at;
            if (text.length > 0) editor.apply({
                type: "insert_text",
                path,
                offset,
                text
            });
        });
    }
};
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var Transforms = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);

},{"is-plain-object":"5FM20","immer":"4sfoz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5FM20":[function(require,module,exports) {
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
function isObject(o) {
    return Object.prototype.toString.call(o) === "[object Object]";
}
function isPlainObject(o) {
    var ctor, prot;
    if (isObject(o) === false) return false;
    // If has modified constructor
    ctor = o.constructor;
    if (ctor === undefined) return true;
    // If has modified prototype
    prot = ctor.prototype;
    if (isObject(prot) === false) return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty("isPrototypeOf") === false) return false;
    // Most likely a plain Object
    return true;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"4sfoz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Immer", ()=>un);
parcelHelpers.export(exports, "applyPatches", ()=>pn);
parcelHelpers.export(exports, "castDraft", ()=>K);
parcelHelpers.export(exports, "castImmutable", ()=>$);
parcelHelpers.export(exports, "createDraft", ()=>ln);
parcelHelpers.export(exports, "current", ()=>R);
parcelHelpers.export(exports, "enableAllPlugins", ()=>J);
parcelHelpers.export(exports, "enableES5", ()=>F);
parcelHelpers.export(exports, "enableMapSet", ()=>C);
parcelHelpers.export(exports, "enablePatches", ()=>T);
parcelHelpers.export(exports, "finishDraft", ()=>dn);
parcelHelpers.export(exports, "freeze", ()=>d);
parcelHelpers.export(exports, "immerable", ()=>L);
parcelHelpers.export(exports, "isDraft", ()=>r);
parcelHelpers.export(exports, "isDraftable", ()=>t);
parcelHelpers.export(exports, "nothing", ()=>H);
parcelHelpers.export(exports, "original", ()=>e);
parcelHelpers.export(exports, "produce", ()=>fn);
parcelHelpers.export(exports, "produceWithPatches", ()=>cn);
parcelHelpers.export(exports, "setAutoFreeze", ()=>sn);
parcelHelpers.export(exports, "setUseProxies", ()=>vn);
function n(n) {
    for(var r = arguments.length, t = Array(r > 1 ? r - 1 : 0), e = 1; e < r; e++)t[e - 1] = arguments[e];
    var i = Y[n], o = i ? "function" == typeof i ? i.apply(null, t) : i : "unknown error nr: " + n;
    throw Error("[Immer] " + o);
    throw Error("[Immer] minified error nr: " + n + (t.length ? " " + t.map(function(n) {
        return "'" + n + "'";
    }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r(n) {
    return !!n && !!n[Q];
}
function t(n) {
    var r;
    return !!n && (function(n) {
        if (!n || "object" != typeof n) return !1;
        var r = Object.getPrototypeOf(n);
        if (null === r) return !0;
        var t = Object.hasOwnProperty.call(r, "constructor") && r.constructor;
        return t === Object || "function" == typeof t && Function.toString.call(t) === Z;
    }(n) || Array.isArray(n) || !!n[L] || !!(null === (r = n.constructor) || void 0 === r ? void 0 : r[L]) || s(n) || v(n));
}
function e(t) {
    return r(t) || n(23, t), t[Q].t;
}
function i(n, r, t) {
    void 0 === t && (t = !1), 0 === o(n) ? (t ? Object.keys : nn)(n).forEach(function(e) {
        t && "symbol" == typeof e || r(e, n[e], n);
    }) : n.forEach(function(t, e) {
        return r(e, t, n);
    });
}
function o(n) {
    var r = n[Q];
    return r ? r.i > 3 ? r.i - 4 : r.i : Array.isArray(n) ? 1 : s(n) ? 2 : v(n) ? 3 : 0;
}
function u(n, r) {
    return 2 === o(n) ? n.has(r) : Object.prototype.hasOwnProperty.call(n, r);
}
function a(n, r) {
    return 2 === o(n) ? n.get(r) : n[r];
}
function f(n, r, t) {
    var e = o(n);
    2 === e ? n.set(r, t) : 3 === e ? n.add(t) : n[r] = t;
}
function c(n, r) {
    return n === r ? 0 !== n || 1 / n == 1 / r : n != n && r != r;
}
function s(n) {
    return X && n instanceof Map;
}
function v(n) {
    return q && n instanceof Set;
}
function p(n) {
    return n.o || n.t;
}
function l(n) {
    if (Array.isArray(n)) return Array.prototype.slice.call(n);
    var r = rn(n);
    delete r[Q];
    for(var t = nn(r), e = 0; e < t.length; e++){
        var i = t[e], o = r[i];
        !1 === o.writable && (o.writable = !0, o.configurable = !0), (o.get || o.set) && (r[i] = {
            configurable: !0,
            writable: !0,
            enumerable: o.enumerable,
            value: n[i]
        });
    }
    return Object.create(Object.getPrototypeOf(n), r);
}
function d(n, e) {
    return void 0 === e && (e = !1), y(n) || r(n) || !t(n) || (o(n) > 1 && (n.set = n.add = n.clear = n.delete = h), Object.freeze(n), e && i(n, function(n, r) {
        return d(r, !0);
    }, !0)), n;
}
function h() {
    n(2);
}
function y(n) {
    return null == n || "object" != typeof n || Object.isFrozen(n);
}
function b(r) {
    var t = tn[r];
    return t || n(18, r), t;
}
function m(n, r) {
    tn[n] || (tn[n] = r);
}
function _() {
    return U || n(0), U;
}
function j(n, r) {
    r && (b("Patches"), n.u = [], n.s = [], n.v = r);
}
function g(n) {
    O(n), n.p.forEach(S), n.p = null;
}
function O(n) {
    n === U && (U = n.l);
}
function w(n) {
    return U = {
        p: [],
        l: U,
        h: n,
        m: !0,
        _: 0
    };
}
function S(n) {
    var r = n[Q];
    0 === r.i || 1 === r.i ? r.j() : r.g = !0;
}
function P(r, e) {
    e._ = e.p.length;
    var i = e.p[0], o = void 0 !== r && r !== i;
    return e.h.O || b("ES5").S(e, r, o), o ? (i[Q].P && (g(e), n(4)), t(r) && (r = M(e, r), e.l || x(e, r)), e.u && b("Patches").M(i[Q].t, r, e.u, e.s)) : r = M(e, i, []), g(e), e.u && e.v(e.u, e.s), r !== H ? r : void 0;
}
function M(n, r, t) {
    if (y(r)) return r;
    var e = r[Q];
    if (!e) return i(r, function(i, o) {
        return A(n, e, r, i, o, t);
    }, !0), r;
    if (e.A !== n) return r;
    if (!e.P) return x(n, e.t, !0), e.t;
    if (!e.I) {
        e.I = !0, e.A._--;
        var o = 4 === e.i || 5 === e.i ? e.o = l(e.k) : e.o, u = o, a = !1;
        3 === e.i && (u = new Set(o), o.clear(), a = !0), i(u, function(r, i) {
            return A(n, e, o, r, i, t, a);
        }), x(n, o, !1), t && n.u && b("Patches").N(e, t, n.u, n.s);
    }
    return e.o;
}
function A(e, i, o, a, c, s, v) {
    if (c === o && n(5), r(c)) {
        var p = M(e, c, s && i && 3 !== i.i && !u(i.R, a) ? s.concat(a) : void 0);
        if (f(o, a, p), !r(p)) return;
        e.m = !1;
    } else v && o.add(c);
    if (t(c) && !y(c)) {
        if (!e.h.D && e._ < 1) return;
        M(e, c), i && i.A.l || x(e, c);
    }
}
function x(n, r, t) {
    void 0 === t && (t = !1), !n.l && n.h.D && n.m && d(r, t);
}
function z(n, r) {
    var t = n[Q];
    return (t ? p(t) : n)[r];
}
function I(n, r) {
    if (r in n) for(var t = Object.getPrototypeOf(n); t;){
        var e = Object.getOwnPropertyDescriptor(t, r);
        if (e) return e;
        t = Object.getPrototypeOf(t);
    }
}
function k(n) {
    n.P || (n.P = !0, n.l && k(n.l));
}
function E(n) {
    n.o || (n.o = l(n.t));
}
function N(n, r, t) {
    var e = s(r) ? b("MapSet").F(r, t) : v(r) ? b("MapSet").T(r, t) : n.O ? function(n, r) {
        var t = Array.isArray(n), e = {
            i: t ? 1 : 0,
            A: r ? r.A : _(),
            P: !1,
            I: !1,
            R: {},
            l: r,
            t: n,
            k: null,
            o: null,
            j: null,
            C: !1
        }, i = e, o = en;
        t && (i = [
            e
        ], o = on);
        var u = Proxy.revocable(i, o), a = u.revoke, f = u.proxy;
        return e.k = f, e.j = a, f;
    }(r, t) : b("ES5").J(r, t);
    return (t ? t.A : _()).p.push(e), e;
}
function R(e) {
    return r(e) || n(22, e), function n(r) {
        if (!t(r)) return r;
        var e, u = r[Q], c = o(r);
        if (u) {
            if (!u.P && (u.i < 4 || !b("ES5").K(u))) return u.t;
            u.I = !0, e = D(r, c), u.I = !1;
        } else e = D(r, c);
        return i(e, function(r, t) {
            u && a(u.t, r) === t || f(e, r, n(t));
        }), 3 === c ? new Set(e) : e;
    }(e);
}
function D(n, r) {
    switch(r){
        case 2:
            return new Map(n);
        case 3:
            return Array.from(n);
    }
    return l(n);
}
function F() {
    function t(n, r) {
        var t = s[n];
        return t ? t.enumerable = r : s[n] = t = {
            configurable: !0,
            enumerable: r,
            get: function() {
                var r = this[Q];
                return f(r), en.get(r, n);
            },
            set: function(r) {
                var t = this[Q];
                f(t), en.set(t, n, r);
            }
        }, t;
    }
    function e(n) {
        for(var r = n.length - 1; r >= 0; r--){
            var t = n[r][Q];
            if (!t.P) switch(t.i){
                case 5:
                    a(t) && k(t);
                    break;
                case 4:
                    o(t) && k(t);
            }
        }
    }
    function o(n) {
        for(var r = n.t, t = n.k, e = nn(t), i = e.length - 1; i >= 0; i--){
            var o = e[i];
            if (o !== Q) {
                var a = r[o];
                if (void 0 === a && !u(r, o)) return !0;
                var f = t[o], s = f && f[Q];
                if (s ? s.t !== a : !c(f, a)) return !0;
            }
        }
        var v = !!r[Q];
        return e.length !== nn(r).length + (v ? 0 : 1);
    }
    function a(n) {
        var r = n.k;
        if (r.length !== n.t.length) return !0;
        var t = Object.getOwnPropertyDescriptor(r, r.length - 1);
        if (t && !t.get) return !0;
        for(var e = 0; e < r.length; e++)if (!r.hasOwnProperty(e)) return !0;
        return !1;
    }
    function f(r) {
        r.g && n(3, JSON.stringify(p(r)));
    }
    var s = {};
    m("ES5", {
        J: function(n, r) {
            var e = Array.isArray(n), i = function(n, r) {
                if (n) {
                    for(var e = Array(r.length), i = 0; i < r.length; i++)Object.defineProperty(e, "" + i, t(i, !0));
                    return e;
                }
                var o = rn(r);
                delete o[Q];
                for(var u = nn(o), a = 0; a < u.length; a++){
                    var f = u[a];
                    o[f] = t(f, n || !!o[f].enumerable);
                }
                return Object.create(Object.getPrototypeOf(r), o);
            }(e, n), o = {
                i: e ? 5 : 4,
                A: r ? r.A : _(),
                P: !1,
                I: !1,
                R: {},
                l: r,
                t: n,
                k: i,
                o: null,
                g: !1,
                C: !1
            };
            return Object.defineProperty(i, Q, {
                value: o,
                writable: !0
            }), i;
        },
        S: function(n, t, o) {
            o ? r(t) && t[Q].A === n && e(n.p) : (n.u && function n(r) {
                if (r && "object" == typeof r) {
                    var t = r[Q];
                    if (t) {
                        var e = t.t, o = t.k, f = t.R, c = t.i;
                        if (4 === c) i(o, function(r) {
                            r !== Q && (void 0 !== e[r] || u(e, r) ? f[r] || n(o[r]) : (f[r] = !0, k(t)));
                        }), i(e, function(n) {
                            void 0 !== o[n] || u(o, n) || (f[n] = !1, k(t));
                        });
                        else if (5 === c) {
                            if (a(t) && (k(t), f.length = !0), o.length < e.length) for(var s = o.length; s < e.length; s++)f[s] = !1;
                            else for(var v = e.length; v < o.length; v++)f[v] = !0;
                            for(var p = Math.min(o.length, e.length), l = 0; l < p; l++)o.hasOwnProperty(l) || (f[l] = !0), void 0 === f[l] && n(o[l]);
                        }
                    }
                }
            }(n.p[0]), e(n.p));
        },
        K: function(n) {
            return 4 === n.i ? o(n) : a(n);
        }
    });
}
function T() {
    function e(n) {
        if (!t(n)) return n;
        if (Array.isArray(n)) return n.map(e);
        if (s(n)) return new Map(Array.from(n.entries()).map(function(n) {
            return [
                n[0],
                e(n[1])
            ];
        }));
        if (v(n)) return new Set(Array.from(n).map(e));
        var r = Object.create(Object.getPrototypeOf(n));
        for(var i in n)r[i] = e(n[i]);
        return u(n, L) && (r[L] = n[L]), r;
    }
    function f(n) {
        return r(n) ? e(n) : n;
    }
    var c = "add";
    m("Patches", {
        $: function(r, t) {
            return t.forEach(function(t) {
                for(var i = t.path, u = t.op, f = r, s = 0; s < i.length - 1; s++){
                    var v = o(f), p = i[s];
                    "string" != typeof p && "number" != typeof p && (p = "" + p), 0 !== v && 1 !== v || "__proto__" !== p && "constructor" !== p || n(24), "function" == typeof f && "prototype" === p && n(24), "object" != typeof (f = a(f, p)) && n(15, i.join("/"));
                }
                var l = o(f), d = e(t.value), h = i[i.length - 1];
                switch(u){
                    case "replace":
                        switch(l){
                            case 2:
                                return f.set(h, d);
                            case 3:
                                n(16);
                            default:
                                return f[h] = d;
                        }
                    case c:
                        switch(l){
                            case 1:
                                return "-" === h ? f.push(d) : f.splice(h, 0, d);
                            case 2:
                                return f.set(h, d);
                            case 3:
                                return f.add(d);
                            default:
                                return f[h] = d;
                        }
                    case "remove":
                        switch(l){
                            case 1:
                                return f.splice(h, 1);
                            case 2:
                                return f.delete(h);
                            case 3:
                                return f.delete(t.value);
                            default:
                                return delete f[h];
                        }
                    default:
                        n(17, u);
                }
            }), r;
        },
        N: function(n, r, t, e) {
            switch(n.i){
                case 0:
                case 4:
                case 2:
                    return function(n, r, t, e) {
                        var o = n.t, s = n.o;
                        i(n.R, function(n, i) {
                            var v = a(o, n), p = a(s, n), l = i ? u(o, n) ? "replace" : c : "remove";
                            if (v !== p || "replace" !== l) {
                                var d = r.concat(n);
                                t.push("remove" === l ? {
                                    op: l,
                                    path: d
                                } : {
                                    op: l,
                                    path: d,
                                    value: p
                                }), e.push(l === c ? {
                                    op: "remove",
                                    path: d
                                } : "remove" === l ? {
                                    op: c,
                                    path: d,
                                    value: f(v)
                                } : {
                                    op: "replace",
                                    path: d,
                                    value: f(v)
                                });
                            }
                        });
                    }(n, r, t, e);
                case 5:
                case 1:
                    return function(n, r, t, e) {
                        var i = n.t, o = n.R, u = n.o;
                        if (u.length < i.length) {
                            var a = [
                                u,
                                i
                            ];
                            i = a[0], u = a[1];
                            var s = [
                                e,
                                t
                            ];
                            t = s[0], e = s[1];
                        }
                        for(var v = 0; v < i.length; v++)if (o[v] && u[v] !== i[v]) {
                            var p = r.concat([
                                v
                            ]);
                            t.push({
                                op: "replace",
                                path: p,
                                value: f(u[v])
                            }), e.push({
                                op: "replace",
                                path: p,
                                value: f(i[v])
                            });
                        }
                        for(var l = i.length; l < u.length; l++){
                            var d = r.concat([
                                l
                            ]);
                            t.push({
                                op: c,
                                path: d,
                                value: f(u[l])
                            });
                        }
                        i.length < u.length && e.push({
                            op: "replace",
                            path: r.concat([
                                "length"
                            ]),
                            value: i.length
                        });
                    }(n, r, t, e);
                case 3:
                    return function(n, r, t, e) {
                        var i = n.t, o = n.o, u = 0;
                        i.forEach(function(n) {
                            if (!o.has(n)) {
                                var i = r.concat([
                                    u
                                ]);
                                t.push({
                                    op: "remove",
                                    path: i,
                                    value: n
                                }), e.unshift({
                                    op: c,
                                    path: i,
                                    value: n
                                });
                            }
                            u++;
                        }), u = 0, o.forEach(function(n) {
                            if (!i.has(n)) {
                                var o = r.concat([
                                    u
                                ]);
                                t.push({
                                    op: c,
                                    path: o,
                                    value: n
                                }), e.unshift({
                                    op: "remove",
                                    path: o,
                                    value: n
                                });
                            }
                            u++;
                        });
                    }(n, r, t, e);
            }
        },
        M: function(n, r, t, e) {
            t.push({
                op: "replace",
                path: [],
                value: r === H ? void 0 : r
            }), e.push({
                op: "replace",
                path: [],
                value: n
            });
        }
    });
}
function C() {
    function r(n, r) {
        function t() {
            this.constructor = n;
        }
        a(n, r), n.prototype = (t.prototype = r.prototype, new t);
    }
    function e(n) {
        n.o || (n.R = new Map, n.o = new Map(n.t));
    }
    function o(n) {
        n.o || (n.o = new Set, n.t.forEach(function(r) {
            if (t(r)) {
                var e = N(n.A.h, r, n);
                n.p.set(r, e), n.o.add(e);
            } else n.o.add(r);
        }));
    }
    function u(r) {
        r.g && n(3, JSON.stringify(p(r)));
    }
    var a = function(n, r) {
        return (a = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(n, r) {
            n.__proto__ = r;
        } || function(n, r) {
            for(var t in r)r.hasOwnProperty(t) && (n[t] = r[t]);
        })(n, r);
    }, f = function() {
        function n(n, r) {
            return this[Q] = {
                i: 2,
                l: r,
                A: r ? r.A : _(),
                P: !1,
                I: !1,
                o: void 0,
                R: void 0,
                t: n,
                k: this,
                C: !1,
                g: !1
            }, this;
        }
        r(n, Map);
        var o = n.prototype;
        return Object.defineProperty(o, "size", {
            get: function() {
                return p(this[Q]).size;
            }
        }), o.has = function(n) {
            return p(this[Q]).has(n);
        }, o.set = function(n, r) {
            var t = this[Q];
            return u(t), p(t).has(n) && p(t).get(n) === r || (e(t), k(t), t.R.set(n, !0), t.o.set(n, r), t.R.set(n, !0)), this;
        }, o.delete = function(n) {
            if (!this.has(n)) return !1;
            var r = this[Q];
            return u(r), e(r), k(r), r.t.has(n) ? r.R.set(n, !1) : r.R.delete(n), r.o.delete(n), !0;
        }, o.clear = function() {
            var n = this[Q];
            u(n), p(n).size && (e(n), k(n), n.R = new Map, i(n.t, function(r) {
                n.R.set(r, !1);
            }), n.o.clear());
        }, o.forEach = function(n, r) {
            var t = this;
            p(this[Q]).forEach(function(e, i) {
                n.call(r, t.get(i), i, t);
            });
        }, o.get = function(n) {
            var r = this[Q];
            u(r);
            var i = p(r).get(n);
            if (r.I || !t(i)) return i;
            if (i !== r.t.get(n)) return i;
            var o = N(r.A.h, i, r);
            return e(r), r.o.set(n, o), o;
        }, o.keys = function() {
            return p(this[Q]).keys();
        }, o.values = function() {
            var n, r = this, t = this.keys();
            return (n = {})[V] = function() {
                return r.values();
            }, n.next = function() {
                var n = t.next();
                return n.done ? n : {
                    done: !1,
                    value: r.get(n.value)
                };
            }, n;
        }, o.entries = function() {
            var n, r = this, t = this.keys();
            return (n = {})[V] = function() {
                return r.entries();
            }, n.next = function() {
                var n = t.next();
                if (n.done) return n;
                var e = r.get(n.value);
                return {
                    done: !1,
                    value: [
                        n.value,
                        e
                    ]
                };
            }, n;
        }, o[V] = function() {
            return this.entries();
        }, n;
    }(), c = function() {
        function n(n, r) {
            return this[Q] = {
                i: 3,
                l: r,
                A: r ? r.A : _(),
                P: !1,
                I: !1,
                o: void 0,
                t: n,
                k: this,
                p: new Map,
                g: !1,
                C: !1
            }, this;
        }
        r(n, Set);
        var t = n.prototype;
        return Object.defineProperty(t, "size", {
            get: function() {
                return p(this[Q]).size;
            }
        }), t.has = function(n) {
            var r = this[Q];
            return u(r), r.o ? !!r.o.has(n) || !(!r.p.has(n) || !r.o.has(r.p.get(n))) : r.t.has(n);
        }, t.add = function(n) {
            var r = this[Q];
            return u(r), this.has(n) || (o(r), k(r), r.o.add(n)), this;
        }, t.delete = function(n) {
            if (!this.has(n)) return !1;
            var r = this[Q];
            return u(r), o(r), k(r), r.o.delete(n) || !!r.p.has(n) && r.o.delete(r.p.get(n));
        }, t.clear = function() {
            var n = this[Q];
            u(n), p(n).size && (o(n), k(n), n.o.clear());
        }, t.values = function() {
            var n = this[Q];
            return u(n), o(n), n.o.values();
        }, t.entries = function() {
            var n = this[Q];
            return u(n), o(n), n.o.entries();
        }, t.keys = function() {
            return this.values();
        }, t[V] = function() {
            return this.values();
        }, t.forEach = function(n, r) {
            for(var t = this.values(), e = t.next(); !e.done;)n.call(r, e.value, e.value, this), e = t.next();
        }, n;
    }();
    m("MapSet", {
        F: function(n, r) {
            return new f(n, r);
        },
        T: function(n, r) {
            return new c(n, r);
        }
    });
}
function J() {
    F(), C(), T();
}
function K(n) {
    return n;
}
function $(n) {
    return n;
}
var G, U, W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x"), X = "undefined" != typeof Map, q = "undefined" != typeof Set, B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect, H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = !0, G), L = W ? Symbol.for("immer-draftable") : "__$immer_draftable", Q = W ? Symbol.for("immer-state") : "__$immer_state", V = "undefined" != typeof Symbol && Symbol.iterator || "@@iterator", Y = {
    0: "Illegal state",
    1: "Immer drafts cannot have computed properties",
    2: "This object has been frozen and should not be mutated",
    3: function(n) {
        return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n;
    },
    4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
    5: "Immer forbids circular references",
    6: "The first or second argument to `produce` must be a function",
    7: "The third argument to `produce` must be a function or undefined",
    8: "First argument to `createDraft` must be a plain object, an array, or an immerable object",
    9: "First argument to `finishDraft` must be a draft returned by `createDraft`",
    10: "The given draft is already finalized",
    11: "Object.defineProperty() cannot be used on an Immer draft",
    12: "Object.setPrototypeOf() cannot be used on an Immer draft",
    13: "Immer only supports deleting array indices",
    14: "Immer only supports setting array indices and the 'length' property",
    15: function(n) {
        return "Cannot apply patch, path doesn't resolve: " + n;
    },
    16: 'Sets cannot have "replace" patches.',
    17: function(n) {
        return "Unsupported patch operation: " + n;
    },
    18: function(n) {
        return "The plugin for '" + n + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n + "()` when initializing your application.";
    },
    20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",
    21: function(n) {
        return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n + "'";
    },
    22: function(n) {
        return "'current' expects a draft, got: " + n;
    },
    23: function(n) {
        return "'original' expects a draft, got: " + n;
    },
    24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed"
}, Z = "" + Object.prototype.constructor, nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n) {
    return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n));
} : Object.getOwnPropertyNames, rn = Object.getOwnPropertyDescriptors || function(n) {
    var r = {};
    return nn(n).forEach(function(t) {
        r[t] = Object.getOwnPropertyDescriptor(n, t);
    }), r;
}, tn = {}, en = {
    get: function(n, r) {
        if (r === Q) return n;
        var e = p(n);
        if (!u(e, r)) return function(n, r, t) {
            var e, i = I(r, t);
            return i ? "value" in i ? i.value : null === (e = i.get) || void 0 === e ? void 0 : e.call(n.k) : void 0;
        }(n, e, r);
        var i = e[r];
        return n.I || !t(i) ? i : i === z(n.t, r) ? (E(n), n.o[r] = N(n.A.h, i, n)) : i;
    },
    has: function(n, r) {
        return r in p(n);
    },
    ownKeys: function(n) {
        return Reflect.ownKeys(p(n));
    },
    set: function(n, r, t) {
        var e = I(p(n), r);
        if (null == e ? void 0 : e.set) return e.set.call(n.k, t), !0;
        if (!n.P) {
            var i = z(p(n), r), o = null == i ? void 0 : i[Q];
            if (o && o.t === t) return n.o[r] = t, n.R[r] = !1, !0;
            if (c(t, i) && (void 0 !== t || u(n.t, r))) return !0;
            E(n), k(n);
        }
        return n.o[r] === t && (void 0 !== t || r in n.o) || Number.isNaN(t) && Number.isNaN(n.o[r]) || (n.o[r] = t, n.R[r] = !0), !0;
    },
    deleteProperty: function(n, r) {
        return void 0 !== z(n.t, r) || r in n.t ? (n.R[r] = !1, E(n), k(n)) : delete n.R[r], n.o && delete n.o[r], !0;
    },
    getOwnPropertyDescriptor: function(n, r) {
        var t = p(n), e = Reflect.getOwnPropertyDescriptor(t, r);
        return e ? {
            writable: !0,
            configurable: 1 !== n.i || "length" !== r,
            enumerable: e.enumerable,
            value: t[r]
        } : e;
    },
    defineProperty: function() {
        n(11);
    },
    getPrototypeOf: function(n) {
        return Object.getPrototypeOf(n.t);
    },
    setPrototypeOf: function() {
        n(12);
    }
}, on = {};
i(en, function(n, r) {
    on[n] = function() {
        return arguments[0] = arguments[0][0], r.apply(this, arguments);
    };
}), on.deleteProperty = function(r, t) {
    return isNaN(parseInt(t)) && n(13), on.set.call(this, r, t, void 0);
}, on.set = function(r, t, e) {
    return "length" !== t && isNaN(parseInt(t)) && n(14), en.set.call(this, r[0], t, e, r[0]);
};
var un = function() {
    function e(r) {
        var e = this;
        this.O = B, this.D = !0, this.produce = function(r, i, o) {
            if ("function" == typeof r && "function" != typeof i) {
                var u = i;
                i = r;
                var a = e;
                return function(n) {
                    var r = this;
                    void 0 === n && (n = u);
                    for(var t = arguments.length, e = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)e[o - 1] = arguments[o];
                    return a.produce(n, function(n) {
                        var t;
                        return (t = i).call.apply(t, [
                            r,
                            n
                        ].concat(e));
                    });
                };
            }
            var f;
            if ("function" != typeof i && n(6), void 0 !== o && "function" != typeof o && n(7), t(r)) {
                var c = w(e), s = N(e, r, void 0), v = !0;
                try {
                    f = i(s), v = !1;
                } finally{
                    v ? g(c) : O(c);
                }
                return "undefined" != typeof Promise && f instanceof Promise ? f.then(function(n) {
                    return j(c, o), P(n, c);
                }, function(n) {
                    throw g(c), n;
                }) : (j(c, o), P(f, c));
            }
            if (!r || "object" != typeof r) {
                if (void 0 === (f = i(r)) && (f = r), f === H && (f = void 0), e.D && d(f, !0), o) {
                    var p = [], l = [];
                    b("Patches").M(r, f, p, l), o(p, l);
                }
                return f;
            }
            n(21, r);
        }, this.produceWithPatches = function(n, r) {
            if ("function" == typeof n) return function(r) {
                for(var t = arguments.length, i = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)i[o - 1] = arguments[o];
                return e.produceWithPatches(r, function(r) {
                    return n.apply(void 0, [
                        r
                    ].concat(i));
                });
            };
            var t, i, o = e.produce(n, r, function(n, r) {
                t = n, i = r;
            });
            return "undefined" != typeof Promise && o instanceof Promise ? o.then(function(n) {
                return [
                    n,
                    t,
                    i
                ];
            }) : [
                o,
                t,
                i
            ];
        }, "boolean" == typeof (null == r ? void 0 : r.useProxies) && this.setUseProxies(r.useProxies), "boolean" == typeof (null == r ? void 0 : r.autoFreeze) && this.setAutoFreeze(r.autoFreeze);
    }
    var i = e.prototype;
    return i.createDraft = function(e) {
        t(e) || n(8), r(e) && (e = R(e));
        var i = w(this), o = N(this, e, void 0);
        return o[Q].C = !0, O(i), o;
    }, i.finishDraft = function(r, t) {
        var e = r && r[Q];
        e && e.C || n(9), e.I && n(10);
        var i = e.A;
        return j(i, t), P(void 0, i);
    }, i.setAutoFreeze = function(n) {
        this.D = n;
    }, i.setUseProxies = function(r) {
        r && !B && n(20), this.O = r;
    }, i.applyPatches = function(n, t) {
        var e;
        for(e = t.length - 1; e >= 0; e--){
            var i = t[e];
            if (0 === i.path.length && "replace" === i.op) {
                n = i.value;
                break;
            }
        }
        e > -1 && (t = t.slice(e + 1));
        var o = b("Patches").$;
        return r(n) ? o(n, t) : this.produce(n, function(n) {
            return o(n, t);
        });
    }, e;
}(), an = new un, fn = an.produce, cn = an.produceWithPatches.bind(an), sn = an.setAutoFreeze.bind(an), vn = an.setUseProxies.bind(an), pn = an.applyPatches.bind(an), ln = an.createDraft.bind(an), dn = an.finishDraft.bind(an);
exports.default = fn;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4vqEy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultElement", ()=>DefaultElement);
parcelHelpers.export(exports, "DefaultLeaf", ()=>DefaultLeaf);
parcelHelpers.export(exports, "DefaultPlaceholder", ()=>DefaultPlaceholder);
parcelHelpers.export(exports, "Editable", ()=>Editable);
parcelHelpers.export(exports, "ReactEditor", ()=>ReactEditor);
parcelHelpers.export(exports, "Slate", ()=>Slate);
parcelHelpers.export(exports, "useEditor", ()=>useEditor);
parcelHelpers.export(exports, "useFocused", ()=>useFocused);
parcelHelpers.export(exports, "useReadOnly", ()=>useReadOnly);
parcelHelpers.export(exports, "useSelected", ()=>useSelected);
parcelHelpers.export(exports, "useSlate", ()=>useSlate);
parcelHelpers.export(exports, "useSlateSelection", ()=>useSlateSelection);
parcelHelpers.export(exports, "useSlateSelector", ()=>useSlateSelector);
parcelHelpers.export(exports, "useSlateStatic", ()=>useSlateStatic);
parcelHelpers.export(exports, "useSlateWithV", ()=>useSlateWithV);
parcelHelpers.export(exports, "withReact", ()=>withReact);
var _direction = require("direction");
var _directionDefault = parcelHelpers.interopDefault(_direction);
var _debounce = require("lodash/debounce");
var _debounceDefault = parcelHelpers.interopDefault(_debounce);
var _throttle = require("lodash/throttle");
var _throttleDefault = parcelHelpers.interopDefault(_throttle);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _scrollIntoViewIfNeeded = require("scroll-into-view-if-needed");
var _scrollIntoViewIfNeededDefault = parcelHelpers.interopDefault(_scrollIntoViewIfNeeded);
var _slate = require("slate");
var _isHotkey = require("is-hotkey");
var _reactDom = require("react-dom");
var _reactDomDefault = parcelHelpers.interopDefault(_reactDom);
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
/**
 * An auto-incrementing identifier for keys.
 */ var n = 0;
/**
 * A class that keeps track of a key string. We use a full class here because we
 * want to be able to use them as keys in `WeakMap` objects.
 */ class Key {
    constructor(){
        this.id = "".concat(n++);
    }
}
/**
 * Two weak maps that allow us rebuild a path given a node. They are populated
 * at render time such that after a render occurs we can always backtrack.
 */ var NODE_TO_INDEX = new WeakMap();
var NODE_TO_PARENT = new WeakMap();
/**
 * Weak maps that allow us to go between Slate nodes and DOM nodes. These
 * are used to resolve DOM event-related logic into Slate actions.
 */ var EDITOR_TO_WINDOW = new WeakMap();
var EDITOR_TO_ELEMENT = new WeakMap();
var EDITOR_TO_PLACEHOLDER_ELEMENT = new WeakMap();
var ELEMENT_TO_NODE = new WeakMap();
var NODE_TO_ELEMENT = new WeakMap();
var NODE_TO_KEY = new WeakMap();
var EDITOR_TO_KEY_TO_ELEMENT = new WeakMap();
/**
 * Weak maps for storing editor-related state.
 */ var IS_READ_ONLY = new WeakMap();
var IS_FOCUSED = new WeakMap();
var IS_COMPOSING = new WeakMap();
var EDITOR_TO_USER_SELECTION = new WeakMap();
/**
 * Weak map for associating the context `onChange` context with the plugin.
 */ var EDITOR_TO_ON_CHANGE = new WeakMap();
/**
 * Weak maps for saving pending state on composition stage.
 */ var EDITOR_TO_SCHEDULE_FLUSH = new WeakMap();
var EDITOR_TO_PENDING_INSERTION_MARKS = new WeakMap();
var EDITOR_TO_USER_MARKS = new WeakMap();
/**
 * Android input handling specific weak-maps
 */ var EDITOR_TO_PENDING_DIFFS = new WeakMap();
var EDITOR_TO_PENDING_ACTION = new WeakMap();
var EDITOR_TO_PENDING_SELECTION = new WeakMap();
var EDITOR_TO_FORCE_RENDER = new WeakMap();
/**
 * Symbols.
 */ var PLACEHOLDER_SYMBOL = Symbol("placeholder");
var MARK_PLACEHOLDER_SYMBOL = Symbol("mark-placeholder");
/**
 * Types.
 */ var DOMText = globalThis.Text;
/**
 * Returns the host window of a DOM node
 */ var getDefaultView = (value)=>{
    return value && value.ownerDocument && value.ownerDocument.defaultView || null;
};
/**
 * Check if a DOM node is a comment node.
 */ var isDOMComment = (value)=>{
    return isDOMNode(value) && value.nodeType === 8;
};
/**
 * Check if a DOM node is an element node.
 */ var isDOMElement = (value)=>{
    return isDOMNode(value) && value.nodeType === 1;
};
/**
 * Check if a value is a DOM node.
 */ var isDOMNode = (value)=>{
    var window1 = getDefaultView(value);
    return !!window1 && value instanceof window1.Node;
};
/**
 * Check if a value is a DOM selection.
 */ var isDOMSelection = (value)=>{
    var window1 = value && value.anchorNode && getDefaultView(value.anchorNode);
    return !!window1 && value instanceof window1.Selection;
};
/**
 * Check if a DOM node is an element node.
 */ var isDOMText = (value)=>{
    return isDOMNode(value) && value.nodeType === 3;
};
/**
 * Checks whether a paste event is a plaintext-only event.
 */ var isPlainTextOnlyPaste = (event)=>{
    return event.clipboardData && event.clipboardData.getData("text/plain") !== "" && event.clipboardData.types.length === 1;
};
/**
 * Normalize a DOM point so that it always refers to a text node.
 */ var normalizeDOMPoint = (domPoint)=>{
    var [node, offset] = domPoint; // If it's an element node, its offset refers to the index of its children
    // including comment nodes, so try to find the right text child node.
    if (isDOMElement(node) && node.childNodes.length) {
        var isLast = offset === node.childNodes.length;
        var index = isLast ? offset - 1 : offset;
        [node, index] = getEditableChildAndIndex(node, index, isLast ? "backward" : "forward"); // If the editable child found is in front of input offset, we instead seek to its end
        isLast = index < offset; // If the node has children, traverse until we have a leaf node. Leaf nodes
        // can be either text nodes, or other void DOM nodes.
        while(isDOMElement(node) && node.childNodes.length){
            var i = isLast ? node.childNodes.length - 1 : 0;
            node = getEditableChild(node, i, isLast ? "backward" : "forward");
        } // Determine the new offset inside the text node.
        offset = isLast && node.textContent != null ? node.textContent.length : 0;
    } // Return the node and offset.
    return [
        node,
        offset
    ];
};
/**
 * Determines wether the active element is nested within a shadowRoot
 */ var hasShadowRoot = ()=>{
    return !!(window.document.activeElement && window.document.activeElement.shadowRoot);
};
/**
 * Get the nearest editable child and index at `index` in a `parent`, preferring
 * `direction`.
 */ var getEditableChildAndIndex = (parent, index, direction)=>{
    var { childNodes } = parent;
    var child = childNodes[index];
    var i = index;
    var triedForward = false;
    var triedBackward = false; // While the child is a comment node, or an element node with no children,
    // keep iterating to find a sibling non-void, non-comment node.
    while(isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute("contenteditable") === "false"){
        if (triedForward && triedBackward) break;
        if (i >= childNodes.length) {
            triedForward = true;
            i = index - 1;
            direction = "backward";
            continue;
        }
        if (i < 0) {
            triedBackward = true;
            i = index + 1;
            direction = "forward";
            continue;
        }
        child = childNodes[i];
        index = i;
        i += direction === "forward" ? 1 : -1;
    }
    return [
        child,
        index
    ];
};
/**
 * Get the nearest editable child at `index` in a `parent`, preferring
 * `direction`.
 */ var getEditableChild = (parent, index, direction)=>{
    var [child] = getEditableChildAndIndex(parent, index, direction);
    return child;
};
/**
 * Get a plaintext representation of the content of a node, accounting for block
 * elements which get a newline appended.
 *
 * The domNode must be attached to the DOM.
 */ var getPlainText = (domNode)=>{
    var text = "";
    if (isDOMText(domNode) && domNode.nodeValue) return domNode.nodeValue;
    if (isDOMElement(domNode)) {
        for (var childNode of Array.from(domNode.childNodes))text += getPlainText(childNode);
        var display = getComputedStyle(domNode).getPropertyValue("display");
        if (display === "block" || display === "list" || domNode.tagName === "BR") text += "\n";
    }
    return text;
};
/**
 * Get x-slate-fragment attribute from data-slate-fragment
 */ var catchSlateFragment = /data-slate-fragment="(.+?)"/m;
var getSlateFragmentAttribute = (dataTransfer)=>{
    var htmlData = dataTransfer.getData("text/html");
    var [, fragment] = htmlData.match(catchSlateFragment) || [];
    return fragment;
};
/**
 * Check whether a mutation originates from a editable element inside the editor.
 */ var isTrackedMutation = (editor, mutation, batch)=>{
    var { target } = mutation;
    if (isDOMElement(target) && target.matches('[contentEditable="false"]')) return false;
    var { document: document1 } = ReactEditor.getWindow(editor);
    if (document1.contains(target)) return ReactEditor.hasDOMNode(editor, target, {
        editable: true
    });
    var parentMutation = batch.find((_ref)=>{
        var { addedNodes, removedNodes } = _ref;
        for (var node of addedNodes){
            if (node === target || node.contains(target)) return true;
        }
        for (var _node of removedNodes){
            if (_node === target || _node.contains(target)) return true;
        }
    });
    if (!parentMutation || parentMutation === mutation) return false;
     // Target add/remove is tracked. Track the mutation if we track the parent mutation.
    return isTrackedMutation(editor, parentMutation, batch);
};
var IS_REACT_VERSION_17_OR_ABOVE = parseInt((0, _reactDefault.default).version.split(".")[0], 10) >= 17;
var IS_IOS = typeof navigator !== "undefined" && typeof window !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
var IS_APPLE = typeof navigator !== "undefined" && /Mac OS X/.test(navigator.userAgent);
var IS_ANDROID = typeof navigator !== "undefined" && /Android/.test(navigator.userAgent);
var IS_FIREFOX = typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);
var IS_SAFARI = typeof navigator !== "undefined" && /Version\/[\d\.]+.*Safari/.test(navigator.userAgent); // "modern" Edge was released at 79.x
var IS_EDGE_LEGACY = typeof navigator !== "undefined" && /Edge?\/(?:[0-6][0-9]|[0-7][0-8])(?:\.)/i.test(navigator.userAgent);
var IS_CHROME = typeof navigator !== "undefined" && /Chrome/i.test(navigator.userAgent); // Native `beforeInput` events don't work well with react on Chrome 75
// and older, Chrome 76+ can use `beforeInput` though.
var IS_CHROME_LEGACY = typeof navigator !== "undefined" && /Chrome?\/(?:[0-7][0-5]|[0-6][0-9])(?:\.)/i.test(navigator.userAgent); // Firefox did not support `beforeInput` until `v87`.
var IS_FIREFOX_LEGACY = typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox\/(?:[0-7][0-9]|[0-8][0-6])(?:\.)).*/i.test(navigator.userAgent); // qq browser
var IS_QQBROWSER = typeof navigator !== "undefined" && /.*QQBrowser/.test(navigator.userAgent); // UC mobile browser
var IS_UC_MOBILE = typeof navigator !== "undefined" && /.*UCBrowser/.test(navigator.userAgent); // Wechat browser
var IS_WECHATBROWSER = typeof navigator !== "undefined" && /.*Wechat/.test(navigator.userAgent); // Check if DOM is available as React does internally.
// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js
var CAN_USE_DOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined"); // COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event
// Chrome Legacy doesn't support `beforeinput` correctly
var HAS_BEFORE_INPUT_SUPPORT = !IS_CHROME_LEGACY && !IS_EDGE_LEGACY && // globalThis is undefined in older browsers
typeof globalThis !== "undefined" && globalThis.InputEvent && // @ts-ignore The `getTargetRanges` property isn't recognized.
typeof globalThis.InputEvent.prototype.getTargetRanges === "function";
var ReactEditor = {
    /**
   * Check if the user is currently composing inside the editor.
   */ isComposing (editor) {
        return !!IS_COMPOSING.get(editor);
    },
    /**
   * Return the host window of the current editor.
   */ getWindow (editor) {
        var window1 = EDITOR_TO_WINDOW.get(editor);
        if (!window1) throw new Error("Unable to find a host window element for this editor");
        return window1;
    },
    /**
   * Find a key for a Slate node.
   */ findKey (editor, node) {
        var key = NODE_TO_KEY.get(node);
        if (!key) {
            key = new Key();
            NODE_TO_KEY.set(node, key);
        }
        return key;
    },
    /**
   * Find the path of Slate node.
   */ findPath (editor, node) {
        var path = [];
        var child = node;
        while(true){
            var parent = NODE_TO_PARENT.get(child);
            if (parent == null) {
                if ((0, _slate.Editor).isEditor(child)) return path;
                else break;
            }
            var i = NODE_TO_INDEX.get(child);
            if (i == null) break;
            path.unshift(i);
            child = parent;
        }
        throw new Error("Unable to find the path for Slate node: ".concat((0, _slate.Scrubber).stringify(node)));
    },
    /**
   * Find the DOM node that implements DocumentOrShadowRoot for the editor.
   */ findDocumentOrShadowRoot (editor) {
        var el = ReactEditor.toDOMNode(editor, editor);
        var root = el.getRootNode();
        if ((root instanceof Document || root instanceof ShadowRoot) && root.getSelection != null) return root;
        return el.ownerDocument;
    },
    /**
   * Check if the editor is focused.
   */ isFocused (editor) {
        return !!IS_FOCUSED.get(editor);
    },
    /**
   * Check if the editor is in read-only mode.
   */ isReadOnly (editor) {
        return !!IS_READ_ONLY.get(editor);
    },
    /**
   * Blur the editor.
   */ blur (editor) {
        var el = ReactEditor.toDOMNode(editor, editor);
        var root = ReactEditor.findDocumentOrShadowRoot(editor);
        IS_FOCUSED.set(editor, false);
        if (root.activeElement === el) el.blur();
    },
    /**
   * Focus the editor.
   */ focus (editor) {
        var el = ReactEditor.toDOMNode(editor, editor);
        var root = ReactEditor.findDocumentOrShadowRoot(editor);
        IS_FOCUSED.set(editor, true);
        if (root.activeElement !== el) el.focus({
            preventScroll: true
        });
    },
    /**
   * Deselect the editor.
   */ deselect (editor) {
        var { selection } = editor;
        var root = ReactEditor.findDocumentOrShadowRoot(editor);
        var domSelection = root.getSelection();
        if (domSelection && domSelection.rangeCount > 0) domSelection.removeAllRanges();
        if (selection) (0, _slate.Transforms).deselect(editor);
    },
    /**
   * Check if a DOM node is within the editor.
   */ hasDOMNode (editor, target) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var { editable = false } = options;
        var editorEl = ReactEditor.toDOMNode(editor, editor);
        var targetEl; // COMPAT: In Firefox, reading `target.nodeType` will throw an error if
        // target is originating from an internal "restricted" element (e.g. a
        // stepper arrow on a number input). (2018/05/04)
        // https://github.com/ianstormtaylor/slate/issues/1819
        try {
            targetEl = isDOMElement(target) ? target : target.parentElement;
        } catch (err) {
            if (!err.message.includes('Permission denied to access property "nodeType"')) throw err;
        }
        if (!targetEl) return false;
        return targetEl.closest("[data-slate-editor]") === editorEl && (!editable || targetEl.isContentEditable ? true : typeof targetEl.isContentEditable === "boolean" && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined
        // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable="false"(readOnly)
        targetEl.closest('[contenteditable="false"]') === editorEl || !!targetEl.getAttribute("data-slate-zero-width"));
    },
    /**
   * Insert data from a `DataTransfer` into the editor.
   */ insertData (editor, data) {
        editor.insertData(data);
    },
    /**
   * Insert fragment data from a `DataTransfer` into the editor.
   */ insertFragmentData (editor, data) {
        return editor.insertFragmentData(data);
    },
    /**
   * Insert text data from a `DataTransfer` into the editor.
   */ insertTextData (editor, data) {
        return editor.insertTextData(data);
    },
    /**
   * Sets data from the currently selected fragment on a `DataTransfer`.
   */ setFragmentData (editor, data, originEvent) {
        editor.setFragmentData(data, originEvent);
    },
    /**
   * Find the native DOM element from a Slate node.
   */ toDOMNode (editor, node) {
        var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
        var domNode = (0, _slate.Editor).isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));
        if (!domNode) throw new Error("Cannot resolve a DOM node from Slate node: ".concat((0, _slate.Scrubber).stringify(node)));
        return domNode;
    },
    /**
   * Find a native DOM selection point from a Slate point.
   */ toDOMPoint (editor, point) {
        var [node] = (0, _slate.Editor).node(editor, point.path);
        var el = ReactEditor.toDOMNode(editor, node);
        var domPoint; // If we're inside a void node, force the offset to 0, otherwise the zero
        // width spacing character will result in an incorrect offset of 1
        if ((0, _slate.Editor).void(editor, {
            at: point
        })) point = {
            path: point.path,
            offset: 0
        };
         // For each leaf, we need to isolate its content, which means filtering
        // to its direct text and zero-width spans. (We have to filter out any
        // other siblings that may have been rendered alongside them.)
        var selector = "[data-slate-string], [data-slate-zero-width]";
        var texts = Array.from(el.querySelectorAll(selector));
        var start = 0;
        for(var i = 0; i < texts.length; i++){
            var text = texts[i];
            var domNode = text.childNodes[0];
            if (domNode == null || domNode.textContent == null) continue;
            var { length } = domNode.textContent;
            var attr = text.getAttribute("data-slate-length");
            var trueLength = attr == null ? length : parseInt(attr, 10);
            var end = start + trueLength; // Prefer putting the selection inside the mark placeholder to ensure
            // composed text is displayed with the correct marks.
            var nextText = texts[i + 1];
            if (point.offset === end && nextText !== null && nextText !== void 0 && nextText.hasAttribute("data-slate-mark-placeholder")) {
                var _nextText$textContent;
                var domText = nextText.childNodes[0];
                domPoint = [
                    // dom text element, chrome will put the selection behind the actual dom
                    // text element, causing domRange.getBoundingClientRect() calls on a collapsed
                    // selection to return incorrect zero values (https://bugs.chromium.org/p/chromium/issues/detail?id=435438)
                    // which will cause issues when scrolling to it.
                    domText instanceof DOMText ? domText : nextText,
                    (_nextText$textContent = nextText.textContent) !== null && _nextText$textContent !== void 0 && _nextText$textContent.startsWith("\uFEFF") ? 1 : 0
                ];
                break;
            }
            if (point.offset <= end) {
                var offset = Math.min(length, Math.max(0, point.offset - start));
                domPoint = [
                    domNode,
                    offset
                ];
                break;
            }
            start = end;
        }
        if (!domPoint) throw new Error("Cannot resolve a DOM point from Slate point: ".concat((0, _slate.Scrubber).stringify(point)));
        return domPoint;
    },
    /**
   * Find a native DOM range from a Slate `range`.
   *
   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.
   *
   * there is no way to create a reverse DOM Range using Range.setStart/setEnd
   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.
   */ toDOMRange (editor, range) {
        var { anchor, focus } = range;
        var isBackward = (0, _slate.Range).isBackward(range);
        var domAnchor = ReactEditor.toDOMPoint(editor, anchor);
        var domFocus = (0, _slate.Range).isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);
        var window1 = ReactEditor.getWindow(editor);
        var domRange = window1.document.createRange();
        var [startNode, startOffset] = isBackward ? domFocus : domAnchor;
        var [endNode, endOffset] = isBackward ? domAnchor : domFocus; // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at
        // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and
        // adjust the offset accordingly.
        var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;
        var isStartAtZeroWidth = !!startEl.getAttribute("data-slate-zero-width");
        var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;
        var isEndAtZeroWidth = !!endEl.getAttribute("data-slate-zero-width");
        domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);
        domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);
        return domRange;
    },
    /**
   * Find a Slate node from a native DOM `element`.
   */ toSlateNode (editor, domNode) {
        var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;
        if (domEl && !domEl.hasAttribute("data-slate-node")) domEl = domEl.closest("[data-slate-node]");
        var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;
        if (!node) throw new Error("Cannot resolve a Slate node from DOM node: ".concat(domEl));
        return node;
    },
    /**
   * Get the target range from a DOM `event`.
   */ findEventRange (editor, event) {
        if ("nativeEvent" in event) event = event.nativeEvent;
        var { clientX: x, clientY: y, target } = event;
        if (x == null || y == null) throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
        var node = ReactEditor.toSlateNode(editor, event.target);
        var path = ReactEditor.findPath(editor, node); // If the drop target is inside a void node, move it into either the
        // next or previous node, depending on which side the `x` and `y`
        // coordinates are closest to.
        if ((0, _slate.Editor).isVoid(editor, node)) {
            var rect = target.getBoundingClientRect();
            var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;
            var edge = (0, _slate.Editor).point(editor, path, {
                edge: isPrev ? "start" : "end"
            });
            var point = isPrev ? (0, _slate.Editor).before(editor, edge) : (0, _slate.Editor).after(editor, edge);
            if (point) {
                var _range = (0, _slate.Editor).range(editor, point);
                return _range;
            }
        } // Else resolve a range from the caret position where the drop occured.
        var domRange;
        var { document: document1 } = ReactEditor.getWindow(editor); // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)
        if (document1.caretRangeFromPoint) domRange = document1.caretRangeFromPoint(x, y);
        else {
            var position = document1.caretPositionFromPoint(x, y);
            if (position) {
                domRange = document1.createRange();
                domRange.setStart(position.offsetNode, position.offset);
                domRange.setEnd(position.offsetNode, position.offset);
            }
        }
        if (!domRange) throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
         // Resolve a Slate range from the DOM range.
        var range = ReactEditor.toSlateRange(editor, domRange, {
            exactMatch: false,
            suppressThrow: false
        });
        return range;
    },
    /**
   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.
   */ toSlatePoint (editor, domPoint, options) {
        var { exactMatch, suppressThrow } = options;
        var [nearestNode, nearestOffset] = exactMatch ? domPoint : normalizeDOMPoint(domPoint);
        var parentNode = nearestNode.parentNode;
        var textNode = null;
        var offset = 0;
        if (parentNode) {
            var _domNode$textContent, _domNode$textContent2;
            var editorEl = ReactEditor.toDOMNode(editor, editor);
            var potentialVoidNode = parentNode.closest('[data-slate-void="true"]'); // Need to ensure that the closest void node is actually a void node
            // within this editor, and not a void node within some parent editor. This can happen
            // if this editor is within a void node of another editor ("nested editors", like in
            // the "Editable Voids" example on the docs site).
            var voidNode = potentialVoidNode && editorEl.contains(potentialVoidNode) ? potentialVoidNode : null;
            var leafNode = parentNode.closest("[data-slate-leaf]");
            var domNode = null; // Calculate how far into the text node the `nearestNode` is, so that we
            // can determine what the offset relative to the text node is.
            if (leafNode) {
                textNode = leafNode.closest('[data-slate-node="text"]');
                if (textNode) {
                    var window1 = ReactEditor.getWindow(editor);
                    var range = window1.document.createRange();
                    range.setStart(textNode, 0);
                    range.setEnd(nearestNode, nearestOffset);
                    var contents = range.cloneContents();
                    var removals = [
                        ...Array.prototype.slice.call(contents.querySelectorAll("[data-slate-zero-width]")),
                        ...Array.prototype.slice.call(contents.querySelectorAll("[contenteditable=false]"))
                    ];
                    removals.forEach((el)=>{
                        // COMPAT: While composing at the start of a text node, some keyboards put
                        // the text content inside the zero width space.
                        if (IS_ANDROID && !exactMatch && el.hasAttribute("data-slate-zero-width") && el.textContent.length > 0 && el.textContext !== "\uFEFF") {
                            if (el.textContent.startsWith("\uFEFF")) el.textContent = el.textContent.slice(1);
                            return;
                        }
                        el.parentNode.removeChild(el);
                    }); // COMPAT: Edge has a bug where Range.prototype.toString() will
                    // convert \n into \r\n. The bug causes a loop when slate-react
                    // attempts to reposition its cursor to match the native position. Use
                    // textContent.length instead.
                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/
                    offset = contents.textContent.length;
                    domNode = textNode;
                }
            } else if (voidNode) {
                // For void nodes, the element with the offset key will be a cousin, not an
                // ancestor, so find it by going down from the nearest void parent and taking the
                // first one that isn't inside a nested editor.
                var leafNodes = voidNode.querySelectorAll("[data-slate-leaf]");
                for(var index = 0; index < leafNodes.length; index++){
                    var current = leafNodes[index];
                    if (ReactEditor.hasDOMNode(editor, current)) {
                        leafNode = current;
                        break;
                    }
                } // COMPAT: In read-only editors the leaf is not rendered.
                if (!leafNode) offset = 1;
                else {
                    textNode = leafNode.closest('[data-slate-node="text"]');
                    domNode = leafNode;
                    offset = domNode.textContent.length;
                    domNode.querySelectorAll("[data-slate-zero-width]").forEach((el)=>{
                        offset -= el.textContent.length;
                    });
                }
            }
            if (domNode && offset === domNode.textContent.length && // COMPAT: Android IMEs might remove the zero width space while composing,
            // and we don't add it for line-breaks.
            IS_ANDROID && domNode.getAttribute("data-slate-zero-width") === "z" && (_domNode$textContent = domNode.textContent) !== null && _domNode$textContent !== void 0 && _domNode$textContent.startsWith("\uFEFF") && (parentNode.hasAttribute("data-slate-zero-width") || IS_FIREFOX && (_domNode$textContent2 = domNode.textContent) !== null && _domNode$textContent2 !== void 0 && _domNode$textContent2.endsWith("\n\n"))) offset--;
        }
        if (IS_ANDROID && !textNode && !exactMatch) {
            var node = parentNode.hasAttribute("data-slate-node") ? parentNode : parentNode.closest("[data-slate-node]");
            if (node && ReactEditor.hasDOMNode(editor, node, {
                editable: true
            })) {
                var _slateNode = ReactEditor.toSlateNode(editor, node);
                var { path: _path, offset: _offset } = (0, _slate.Editor).start(editor, ReactEditor.findPath(editor, _slateNode));
                if (!node.querySelector("[data-slate-leaf]")) _offset = nearestOffset;
                return {
                    path: _path,
                    offset: _offset
                };
            }
        }
        if (!textNode) {
            if (suppressThrow) return null;
            throw new Error("Cannot resolve a Slate point from DOM point: ".concat(domPoint));
        } // COMPAT: If someone is clicking from one Slate editor into another,
        // the select event fires twice, once for the old editor's `element`
        // first, and then afterwards for the correct `element`. (2017/03/03)
        var slateNode = ReactEditor.toSlateNode(editor, textNode);
        var path = ReactEditor.findPath(editor, slateNode);
        return {
            path,
            offset
        };
    },
    /**
   * Find a Slate range from a DOM range or selection.
   */ toSlateRange (editor, domRange, options) {
        var { exactMatch, suppressThrow } = options;
        var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;
        var anchorNode;
        var anchorOffset;
        var focusNode;
        var focusOffset;
        var isCollapsed;
        if (el) {
            if (isDOMSelection(domRange)) {
                anchorNode = domRange.anchorNode;
                anchorOffset = domRange.anchorOffset;
                focusNode = domRange.focusNode;
                focusOffset = domRange.focusOffset; // COMPAT: There's a bug in chrome that always returns `true` for
                // `isCollapsed` for a Selection that comes from a ShadowRoot.
                // (2020/08/08)
                // https://bugs.chromium.org/p/chromium/issues/detail?id=447523
                if (IS_CHROME && hasShadowRoot()) isCollapsed = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;
                else isCollapsed = domRange.isCollapsed;
            } else {
                anchorNode = domRange.startContainer;
                anchorOffset = domRange.startOffset;
                focusNode = domRange.endContainer;
                focusOffset = domRange.endOffset;
                isCollapsed = domRange.collapsed;
            }
        }
        if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) throw new Error("Cannot resolve a Slate range from DOM range: ".concat(domRange));
        var anchor = ReactEditor.toSlatePoint(editor, [
            anchorNode,
            anchorOffset
        ], {
            exactMatch,
            suppressThrow
        });
        if (!anchor) return null;
        var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [
            focusNode,
            focusOffset
        ], {
            exactMatch,
            suppressThrow
        });
        if (!focus) return null;
        var range = {
            anchor: anchor,
            focus: focus
        }; // if the selection is a hanging range that ends in a void
        // and the DOM focus is an Element
        // (meaning that the selection ends before the element)
        // unhang the range to avoid mistakenly including the void
        if ((0, _slate.Range).isExpanded(range) && (0, _slate.Range).isForward(range) && isDOMElement(focusNode) && (0, _slate.Editor).void(editor, {
            at: range.focus,
            mode: "highest"
        })) range = (0, _slate.Editor).unhangRange(editor, range, {
            voids: true
        });
        return range;
    },
    hasRange (editor, range) {
        var { anchor, focus } = range;
        return (0, _slate.Editor).hasPath(editor, anchor.path) && (0, _slate.Editor).hasPath(editor, focus.path);
    },
    /**
   * Experimental and android specific: Flush all pending diffs and cancel composition at the next possible time.
   */ androidScheduleFlush (editor) {
        var _EDITOR_TO_SCHEDULE_F;
        (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(editor)) === null || _EDITOR_TO_SCHEDULE_F === void 0 || _EDITOR_TO_SCHEDULE_F();
    },
    /**
   * Experimental and android specific: Get pending diffs
   */ androidPendingDiffs (editor) {
        return EDITOR_TO_PENDING_DIFFS.get(editor);
    }
};
/**
 * Prevent warning on SSR by falling back to useEffect when DOM isn't available
 */ var useIsomorphicLayoutEffect = CAN_USE_DOM ? (0, _react.useLayoutEffect) : (0, _react.useEffect);
var _excluded$3 = [
    "anchor",
    "focus"
], _excluded2$1 = [
    "anchor",
    "focus"
];
var shallowCompare = (obj1, obj2)=>Object.keys(obj1).length === Object.keys(obj2).length && Object.keys(obj1).every((key)=>obj2.hasOwnProperty(key) && obj1[key] === obj2[key]);
/**
 * Check if a list of decorator ranges are equal to another.
 *
 * PERF: this requires the two lists to also have the ranges inside them in the
 * same order, but this is an okay constraint for us since decorations are
 * kept in order, and the odd case where they aren't is okay to re-render for.
 */ var isDecoratorRangeListEqual = (list, another)=>{
    if (list.length !== another.length) return false;
    for(var i = 0; i < list.length; i++){
        var range = list[i];
        var other = another[i];
        var rangeOwnProps = _objectWithoutProperties(range, _excluded$3);
        var otherOwnProps = _objectWithoutProperties(other, _excluded2$1);
        if (!(0, _slate.Range).equals(range, other) || range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] || !shallowCompare(rangeOwnProps, otherOwnProps)) return false;
    }
    return true;
};
/**
 * Leaf content strings.
 */ var String = (props)=>{
    var { isLast, leaf, parent, text } = props;
    var editor = useSlateStatic();
    var path = ReactEditor.findPath(editor, text);
    var parentPath = (0, _slate.Path).parent(path);
    var isMarkPlaceholder = leaf[MARK_PLACEHOLDER_SYMBOL] === true; // COMPAT: Render text inside void nodes with a zero-width space.
    // So the node can contain selection but the text is not visible.
    if (editor.isVoid(parent)) return /*#__PURE__*/ (0, _reactDefault.default).createElement(ZeroWidthString, {
        length: (0, _slate.Node).string(parent).length
    });
     // COMPAT: If this is the last text node in an empty block, render a zero-
    // width space that will convert into a line break when copying and pasting
    // to support expected plain text.
    if (leaf.text === "" && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && (0, _slate.Editor).string(editor, parentPath) === "") return /*#__PURE__*/ (0, _reactDefault.default).createElement(ZeroWidthString, {
        isLineBreak: true,
        isMarkPlaceholder: isMarkPlaceholder
    });
     // COMPAT: If the text is empty, it's because it's on the edge of an inline
    // node, so we render a zero-width space so that the selection can be
    // inserted next to it still.
    if (leaf.text === "") return /*#__PURE__*/ (0, _reactDefault.default).createElement(ZeroWidthString, {
        isMarkPlaceholder: isMarkPlaceholder
    });
     // COMPAT: Browsers will collapse trailing new lines at the end of blocks,
    // so we need to add an extra trailing new lines to prevent that.
    if (isLast && leaf.text.slice(-1) === "\n") return /*#__PURE__*/ (0, _reactDefault.default).createElement(TextString, {
        isTrailing: true,
        text: leaf.text
    });
    return /*#__PURE__*/ (0, _reactDefault.default).createElement(TextString, {
        text: leaf.text
    });
};
/**
 * Leaf strings with text in them.
 */ var TextString = (props)=>{
    var { text, isTrailing = false } = props;
    var ref = (0, _react.useRef)(null);
    var getTextContent = ()=>{
        return "".concat(text !== null && text !== void 0 ? text : "").concat(isTrailing ? "\n" : "");
    }; // This is the actual text rendering boundary where we interface with the DOM
    // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,
    // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing
    // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content
    // exactly if and only if its current content does not match our current virtual DOM.
    // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,
    // eg makes native spellcheck opt out from checking the text node.
    // useLayoutEffect: updating our span before browser paint
    useIsomorphicLayoutEffect(()=>{
        // null coalescing text to make sure we're not outputing "null" as a string in the extreme case it is nullish at runtime
        var textWithTrailing = getTextContent();
        if (ref.current && ref.current.textContent !== textWithTrailing) ref.current.textContent = textWithTrailing;
         // intentionally not specifying dependencies, so that this effect runs on every render
    // as this effectively replaces "specifying the text in the virtual DOM under the <span> below" on each render
    }); // Render text content immediately if it's the first-time render
    // Ensure that text content is rendered on server-side rendering
    if (!ref.current) return /*#__PURE__*/ (0, _reactDefault.default).createElement("span", {
        "data-slate-string": true,
        ref: ref
    }, getTextContent());
     // the span is intentionally same on every render in virtual DOM, actual rendering happens in the layout effect above
    return /*#__PURE__*/ (0, _reactDefault.default).createElement("span", {
        "data-slate-string": true,
        ref: ref
    });
};
/**
 * Leaf strings without text, render as zero-width strings.
 */ var ZeroWidthString = (props)=>{
    var { length = 0, isLineBreak = false, isMarkPlaceholder = false } = props;
    var attributes = {
        "data-slate-zero-width": isLineBreak ? "n" : "z",
        "data-slate-length": length
    };
    if (isMarkPlaceholder) attributes["data-slate-mark-placeholder"] = true;
    return /*#__PURE__*/ (0, _reactDefault.default).createElement("span", Object.assign({}, attributes), !IS_ANDROID || !isLineBreak ? "\uFEFF" : null, isLineBreak ? /*#__PURE__*/ (0, _reactDefault.default).createElement("br", null) : null);
};
/**
 * A React context for sharing the editor object.
 */ var EditorContext = /*#__PURE__*/ (0, _react.createContext)(null);
/**
 * Get the current editor object from the React context.
 */ var useSlateStatic = ()=>{
    var editor = (0, _react.useContext)(EditorContext);
    if (!editor) throw new Error("The `useSlateStatic` hook must be used inside the <Slate> component's context.");
    return editor;
};
/**
 * Individual leaves in a text node with unique formatting.
 */ var Leaf = (props)=>{
    var { leaf, isLast, text, parent, renderPlaceholder, renderLeaf = (props)=>/*#__PURE__*/ (0, _reactDefault.default).createElement(DefaultLeaf, Object.assign({}, props)) } = props;
    var placeholderRef = (0, _react.useRef)(null);
    var editor = useSlateStatic();
    (0, _react.useEffect)(()=>{
        var placeholderEl = placeholderRef === null || placeholderRef === void 0 ? void 0 : placeholderRef.current;
        var editorEl = ReactEditor.toDOMNode(editor, editor);
        if (!placeholderEl || !editorEl) return;
        editorEl.style.minHeight = "".concat(placeholderEl.clientHeight, "px");
        EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);
        return ()=>{
            editorEl.style.minHeight = "auto";
            EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);
        };
    }, [
        placeholderRef,
        leaf
    ]);
    var children = /*#__PURE__*/ (0, _reactDefault.default).createElement(String, {
        isLast: isLast,
        leaf: leaf,
        parent: parent,
        text: text
    });
    if (leaf[PLACEHOLDER_SYMBOL]) {
        var placeholderProps = {
            children: leaf.placeholder,
            attributes: {
                "data-slate-placeholder": true,
                style: {
                    position: "absolute",
                    pointerEvents: "none",
                    width: "100%",
                    maxWidth: "100%",
                    display: "block",
                    opacity: "0.333",
                    userSelect: "none",
                    textDecoration: "none"
                },
                contentEditable: false,
                ref: placeholderRef
            }
        };
        children = /*#__PURE__*/ (0, _reactDefault.default).createElement((0, _reactDefault.default).Fragment, null, renderPlaceholder(placeholderProps), children);
    } // COMPAT: Having the `data-` attributes on these leaf elements ensures that
    // in certain misbehaving browsers they aren't weirdly cloned/destroyed by
    // contenteditable behaviors. (2019/05/08)
    var attributes = {
        "data-slate-leaf": true
    };
    return renderLeaf({
        attributes,
        children,
        leaf,
        text
    });
};
var MemoizedLeaf = /*#__PURE__*/ (0, _reactDefault.default).memo(Leaf, (prev, next)=>{
    return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && (0, _slate.Text).equals(next.leaf, prev.leaf) && next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL];
});
var DefaultLeaf = (props)=>{
    var { attributes, children } = props;
    return /*#__PURE__*/ (0, _reactDefault.default).createElement("span", Object.assign({}, attributes), children);
};
/**
 * Text.
 */ var Text = (props)=>{
    var { decorations, isLast, parent, renderPlaceholder, renderLeaf, text } = props;
    var editor = useSlateStatic();
    var ref = (0, _react.useRef)(null);
    var leaves = (0, _slate.Text).decorations(text, decorations);
    var key = ReactEditor.findKey(editor, text);
    var children = [];
    for(var i = 0; i < leaves.length; i++){
        var leaf = leaves[i];
        children.push(/*#__PURE__*/ (0, _reactDefault.default).createElement(MemoizedLeaf, {
            isLast: isLast && i === leaves.length - 1,
            key: "".concat(key.id, "-").concat(i),
            renderPlaceholder: renderPlaceholder,
            leaf: leaf,
            text: text,
            parent: parent,
            renderLeaf: renderLeaf
        }));
    } // Update element-related weak maps with the DOM element ref.
    useIsomorphicLayoutEffect(()=>{
        var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
        if (ref.current) {
            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref.current);
            NODE_TO_ELEMENT.set(text, ref.current);
            ELEMENT_TO_NODE.set(ref.current, text);
        } else {
            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);
            NODE_TO_ELEMENT.delete(text);
        }
    });
    return /*#__PURE__*/ (0, _reactDefault.default).createElement("span", {
        "data-slate-node": "text",
        ref: ref
    }, children);
};
var MemoizedText = /*#__PURE__*/ (0, _reactDefault.default).memo(Text, (prev, next)=>{
    return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text && isDecoratorRangeListEqual(next.decorations, prev.decorations);
});
/**
 * Element.
 */ var Element = (props)=>{
    var { decorations, element, renderElement = (p)=>/*#__PURE__*/ (0, _reactDefault.default).createElement(DefaultElement, Object.assign({}, p)), renderPlaceholder, renderLeaf, selection } = props;
    var editor = useSlateStatic();
    var readOnly = useReadOnly();
    var isInline = editor.isInline(element);
    var key = ReactEditor.findKey(editor, element);
    var ref = (0, _react.useCallback)((ref)=>{
        // Update element-related weak maps with the DOM element ref.
        var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);
        if (ref) {
            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);
            NODE_TO_ELEMENT.set(element, ref);
            ELEMENT_TO_NODE.set(ref, element);
        } else {
            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);
            NODE_TO_ELEMENT.delete(element);
        }
    }, [
        editor,
        key,
        element
    ]);
    var children = useChildren({
        decorations,
        node: element,
        renderElement,
        renderPlaceholder,
        renderLeaf,
        selection
    }); // Attributes that the developer must mix into the element in their
    // custom node renderer component.
    var attributes = {
        "data-slate-node": "element",
        ref
    };
    if (isInline) attributes["data-slate-inline"] = true;
     // If it's a block node with inline children, add the proper `dir` attribute
    // for text direction.
    if (!isInline && (0, _slate.Editor).hasInlines(editor, element)) {
        var text = (0, _slate.Node).string(element);
        var dir = (0, _directionDefault.default)(text);
        if (dir === "rtl") attributes.dir = dir;
    } // If it's a void node, wrap the children in extra void-specific elements.
    if ((0, _slate.Editor).isVoid(editor, element)) {
        attributes["data-slate-void"] = true;
        if (!readOnly && isInline) attributes.contentEditable = false;
        var Tag = isInline ? "span" : "div";
        var [[_text]] = (0, _slate.Node).texts(element);
        children = /*#__PURE__*/ (0, _reactDefault.default).createElement(Tag, {
            "data-slate-spacer": true,
            style: {
                height: "0",
                color: "transparent",
                outline: "none",
                position: "absolute"
            }
        }, /*#__PURE__*/ (0, _reactDefault.default).createElement(MemoizedText, {
            renderPlaceholder: renderPlaceholder,
            decorations: [],
            isLast: false,
            parent: element,
            text: _text
        }));
        NODE_TO_INDEX.set(_text, 0);
        NODE_TO_PARENT.set(_text, element);
    }
    return renderElement({
        attributes,
        children,
        element
    });
};
var MemoizedElement = /*#__PURE__*/ (0, _reactDefault.default).memo(Element, (prev, next)=>{
    return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && isDecoratorRangeListEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && (0, _slate.Range).equals(prev.selection, next.selection));
});
/**
 * The default element renderer.
 */ var DefaultElement = (props)=>{
    var { attributes, children, element } = props;
    var editor = useSlateStatic();
    var Tag = editor.isInline(element) ? "span" : "div";
    return /*#__PURE__*/ (0, _reactDefault.default).createElement(Tag, Object.assign({}, attributes, {
        style: {
            position: "relative"
        }
    }), children);
};
/**
 * A React context for sharing the `decorate` prop of the editable.
 */ var DecorateContext = /*#__PURE__*/ (0, _react.createContext)(()=>[]);
/**
 * Get the current `decorate` prop of the editable.
 */ var useDecorate = ()=>{
    return (0, _react.useContext)(DecorateContext);
};
/**
 * A React context for sharing the `selected` state of an element.
 */ var SelectedContext = /*#__PURE__*/ (0, _react.createContext)(false);
/**
 * Get the current `selected` state of an element.
 */ var useSelected = ()=>{
    return (0, _react.useContext)(SelectedContext);
};
/**
 * Children.
 */ var useChildren = (props)=>{
    var { decorations, node, renderElement, renderPlaceholder, renderLeaf, selection } = props;
    var decorate = useDecorate();
    var editor = useSlateStatic();
    var path = ReactEditor.findPath(editor, node);
    var children = [];
    var isLeafBlock = (0, _slate.Element).isElement(node) && !editor.isInline(node) && (0, _slate.Editor).hasInlines(editor, node);
    for(var i = 0; i < node.children.length; i++){
        var p = path.concat(i);
        var n = node.children[i];
        var key = ReactEditor.findKey(editor, n);
        var range = (0, _slate.Editor).range(editor, p);
        var sel = selection && (0, _slate.Range).intersection(range, selection);
        var ds = decorate([
            n,
            p
        ]);
        for (var dec of decorations){
            var d = (0, _slate.Range).intersection(dec, range);
            if (d) ds.push(d);
        }
        if ((0, _slate.Element).isElement(n)) children.push(/*#__PURE__*/ (0, _reactDefault.default).createElement(SelectedContext.Provider, {
            key: "provider-".concat(key.id),
            value: !!sel
        }, /*#__PURE__*/ (0, _reactDefault.default).createElement(MemoizedElement, {
            decorations: ds,
            element: n,
            key: key.id,
            renderElement: renderElement,
            renderPlaceholder: renderPlaceholder,
            renderLeaf: renderLeaf,
            selection: sel
        })));
        else children.push(/*#__PURE__*/ (0, _reactDefault.default).createElement(MemoizedText, {
            decorations: ds,
            key: key.id,
            isLast: isLeafBlock && i === node.children.length - 1,
            parent: node,
            renderPlaceholder: renderPlaceholder,
            renderLeaf: renderLeaf,
            text: n
        }));
        NODE_TO_INDEX.set(n, i);
        NODE_TO_PARENT.set(n, node);
    }
    return children;
};
/**
 * A React context for sharing the `readOnly` state of the editor.
 */ var ReadOnlyContext = /*#__PURE__*/ (0, _react.createContext)(false);
/**
 * Get the current `readOnly` state of the editor.
 */ var useReadOnly = ()=>{
    return (0, _react.useContext)(ReadOnlyContext);
};
var SlateContext = /*#__PURE__*/ (0, _react.createContext)(null);
/**
 * Get the current editor object from the React context.
 */ var useSlate = ()=>{
    var context = (0, _react.useContext)(SlateContext);
    if (!context) throw new Error("The `useSlate` hook must be used inside the <Slate> component's context.");
    var { editor } = context;
    return editor;
};
var useSlateWithV = ()=>{
    var context = (0, _react.useContext)(SlateContext);
    if (!context) throw new Error("The `useSlate` hook must be used inside the <Slate> component's context.");
    return context;
};
var TRIPLE_CLICK = 3;
/**
 * Hotkey mappings for each platform.
 */ var HOTKEYS = {
    bold: "mod+b",
    compose: [
        "down",
        "left",
        "right",
        "up",
        "backspace",
        "enter"
    ],
    moveBackward: "left",
    moveForward: "right",
    moveWordBackward: "ctrl+left",
    moveWordForward: "ctrl+right",
    deleteBackward: "shift?+backspace",
    deleteForward: "shift?+delete",
    extendBackward: "shift+left",
    extendForward: "shift+right",
    italic: "mod+i",
    insertSoftBreak: "shift+enter",
    splitBlock: "enter",
    undo: "mod+z"
};
var APPLE_HOTKEYS = {
    moveLineBackward: "opt+up",
    moveLineForward: "opt+down",
    moveWordBackward: "opt+left",
    moveWordForward: "opt+right",
    deleteBackward: [
        "ctrl+backspace",
        "ctrl+h"
    ],
    deleteForward: [
        "ctrl+delete",
        "ctrl+d"
    ],
    deleteLineBackward: "cmd+shift?+backspace",
    deleteLineForward: [
        "cmd+shift?+delete",
        "ctrl+k"
    ],
    deleteWordBackward: "opt+shift?+backspace",
    deleteWordForward: "opt+shift?+delete",
    extendLineBackward: "opt+shift+up",
    extendLineForward: "opt+shift+down",
    redo: "cmd+shift+z",
    transposeCharacter: "ctrl+t"
};
var WINDOWS_HOTKEYS = {
    deleteWordBackward: "ctrl+shift?+backspace",
    deleteWordForward: "ctrl+shift?+delete",
    redo: [
        "ctrl+y",
        "ctrl+shift+z"
    ]
};
/**
 * Create a platform-aware hotkey checker.
 */ var create = (key)=>{
    var generic = HOTKEYS[key];
    var apple = APPLE_HOTKEYS[key];
    var windows = WINDOWS_HOTKEYS[key];
    var isGeneric = generic && (0, _isHotkey.isKeyHotkey)(generic);
    var isApple = apple && (0, _isHotkey.isKeyHotkey)(apple);
    var isWindows = windows && (0, _isHotkey.isKeyHotkey)(windows);
    return (event)=>{
        if (isGeneric && isGeneric(event)) return true;
        if (IS_APPLE && isApple && isApple(event)) return true;
        if (!IS_APPLE && isWindows && isWindows(event)) return true;
        return false;
    };
};
/**
 * Hotkeys.
 */ var Hotkeys = {
    isBold: create("bold"),
    isCompose: create("compose"),
    isMoveBackward: create("moveBackward"),
    isMoveForward: create("moveForward"),
    isDeleteBackward: create("deleteBackward"),
    isDeleteForward: create("deleteForward"),
    isDeleteLineBackward: create("deleteLineBackward"),
    isDeleteLineForward: create("deleteLineForward"),
    isDeleteWordBackward: create("deleteWordBackward"),
    isDeleteWordForward: create("deleteWordForward"),
    isExtendBackward: create("extendBackward"),
    isExtendForward: create("extendForward"),
    isExtendLineBackward: create("extendLineBackward"),
    isExtendLineForward: create("extendLineForward"),
    isItalic: create("italic"),
    isMoveLineBackward: create("moveLineBackward"),
    isMoveLineForward: create("moveLineForward"),
    isMoveWordBackward: create("moveWordBackward"),
    isMoveWordForward: create("moveWordForward"),
    isRedo: create("redo"),
    isSoftBreak: create("insertSoftBreak"),
    isSplitBlock: create("splitBlock"),
    isTransposeCharacter: create("transposeCharacter"),
    isUndo: create("undo")
};
var createRestoreDomManager = (editor, receivedUserInput)=>{
    var bufferedMutations = [];
    var clear = ()=>{
        bufferedMutations = [];
    };
    var registerMutations = (mutations)=>{
        if (!receivedUserInput.current) return;
        var trackedMutations = mutations.filter((mutation)=>isTrackedMutation(editor, mutation, mutations));
        bufferedMutations.push(...trackedMutations);
    };
    function restoreDOM() {
        bufferedMutations.reverse().forEach((mutation)=>{
            if (mutation.type === "characterData") {
                mutation.target.textContent = mutation.oldValue;
                return;
            }
            mutation.removedNodes.forEach((node)=>{
                mutation.target.insertBefore(node, mutation.nextSibling);
            });
            mutation.addedNodes.forEach((node)=>{
                mutation.target.removeChild(node);
            });
        }); // Clear buffered mutations to ensure we don't undo them twice
        clear();
    }
    return {
        registerMutations,
        restoreDOM,
        clear
    };
};
var MUTATION_OBSERVER_CONFIG$1 = {
    subtree: true,
    childList: true,
    characterData: true,
    characterDataOldValue: true
}; // We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent
// to run code synchronously immediately before react commits the component update to the DOM.
class RestoreDOMComponent extends (0, _react.Component) {
    constructor(){
        super(...arguments);
        this.context = null;
        this.manager = null;
        this.mutationObserver = null;
    }
    observe() {
        var _this$mutationObserve;
        var { node } = this.props;
        if (!node.current) throw new Error("Failed to attach MutationObserver, `node` is undefined");
        (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG$1);
    }
    componentDidMount() {
        var { receivedUserInput } = this.props;
        var editor = this.context;
        this.manager = createRestoreDomManager(editor, receivedUserInput);
        this.mutationObserver = new MutationObserver(this.manager.registerMutations);
        this.observe();
    }
    getSnapshotBeforeUpdate() {
        var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;
        var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();
        if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {
            var _this$manager;
            (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);
        }
        (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();
        (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();
        return null;
    }
    componentDidUpdate() {
        var _this$manager3;
        (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();
        this.observe();
    }
    componentWillUnmount() {
        var _this$mutationObserve4;
        (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();
    }
    render() {
        return this.props.children;
    }
}
RestoreDOMComponent.contextType = EditorContext;
var RestoreDOM = IS_ANDROID ? RestoreDOMComponent : (_ref)=>{
    var { children } = _ref;
    return /*#__PURE__*/ (0, _reactDefault.default).createElement((0, _reactDefault.default).Fragment, null, children);
};
/**
 * Check whether a text diff was applied in a way we can perform the pending action on /
 * recover the pending selection.
 */ function verifyDiffState(editor, textDiff) {
    var { path, diff } = textDiff;
    if (!(0, _slate.Editor).hasPath(editor, path)) return false;
    var node = (0, _slate.Node).get(editor, path);
    if (!(0, _slate.Text).isText(node)) return false;
    if (diff.start !== node.text.length || diff.text.length === 0) return node.text.slice(diff.start, diff.start + diff.text.length) === diff.text;
    var nextPath = (0, _slate.Path).next(path);
    if (!(0, _slate.Editor).hasPath(editor, nextPath)) return false;
    var nextNode = (0, _slate.Node).get(editor, nextPath);
    return (0, _slate.Text).isText(nextNode) && nextNode.text.startsWith(diff.text);
}
function applyStringDiff(text) {
    for(var _len = arguments.length, diffs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)diffs[_key - 1] = arguments[_key];
    return diffs.reduce((text, diff)=>text.slice(0, diff.start) + diff.text + text.slice(diff.end), text);
}
function longestCommonPrefixLength(str, another) {
    var length = Math.min(str.length, another.length);
    for(var i = 0; i < length; i++){
        if (str.charAt(i) !== another.charAt(i)) return i;
    }
    return length;
}
function longestCommonSuffixLength(str, another, max) {
    var length = Math.min(str.length, another.length, max);
    for(var i = 0; i < length; i++){
        if (str.charAt(str.length - i - 1) !== another.charAt(another.length - i - 1)) return i;
    }
    return length;
}
/**
 * Remove redundant changes from the diff so that it spans the minimal possible range
 */ function normalizeStringDiff(targetText, diff) {
    var { start, end, text } = diff;
    var removedText = targetText.slice(start, end);
    var prefixLength = longestCommonPrefixLength(removedText, text);
    var max = Math.min(removedText.length - prefixLength, text.length - prefixLength);
    var suffixLength = longestCommonSuffixLength(removedText, text, max);
    var normalized = {
        start: start + prefixLength,
        end: end - suffixLength,
        text: text.slice(prefixLength, text.length - suffixLength)
    };
    if (normalized.start === normalized.end && normalized.text.length === 0) return null;
    return normalized;
}
/**
 * Return a string diff that is equivalent to applying b after a spanning the range of
 * both changes
 */ function mergeStringDiffs(targetText, a, b) {
    var start = Math.min(a.start, b.start);
    var overlap = Math.max(0, Math.min(a.start + a.text.length, b.end) - b.start);
    var applied = applyStringDiff(targetText, a, b);
    var sliceEnd = Math.max(b.start + b.text.length, a.start + a.text.length + (a.start + a.text.length > b.start ? b.text.length : 0) - overlap);
    var text = applied.slice(start, sliceEnd);
    var end = Math.max(a.end, b.end - a.text.length + (a.end - a.start));
    return normalizeStringDiff(targetText, {
        start,
        end,
        text
    });
}
/**
 * Get the slate range the text diff spans.
 */ function targetRange(textDiff) {
    var { path, diff } = textDiff;
    return {
        anchor: {
            path,
            offset: diff.start
        },
        focus: {
            path,
            offset: diff.end
        }
    };
}
/**
 * Normalize a 'pending point' a.k.a a point based on the dom state before applying
 * the pending diffs. Since the pending diffs might have been inserted with different
 * marks we have to 'walk' the offset from the starting position to ensure we still
 * have a valid point inside the document
 */ function normalizePoint(editor, point) {
    var { path, offset } = point;
    if (!(0, _slate.Editor).hasPath(editor, path)) return null;
    var leaf = (0, _slate.Node).get(editor, path);
    if (!(0, _slate.Text).isText(leaf)) return null;
    var parentBlock = (0, _slate.Editor).above(editor, {
        match: (n)=>(0, _slate.Editor).isBlock(editor, n),
        at: path
    });
    if (!parentBlock) return null;
    while(offset > leaf.text.length){
        var entry = (0, _slate.Editor).next(editor, {
            at: path,
            match: (0, _slate.Text).isText
        });
        if (!entry || !(0, _slate.Path).isDescendant(entry[1], parentBlock[1])) return null;
        offset -= leaf.text.length;
        leaf = entry[0];
        path = entry[1];
    }
    return {
        path,
        offset
    };
}
/**
 * Normalize a 'pending selection' to ensure it's valid in the current document state.
 */ function normalizeRange(editor, range) {
    var anchor = normalizePoint(editor, range.anchor);
    if (!anchor) return null;
    if ((0, _slate.Range).isCollapsed(range)) return {
        anchor,
        focus: anchor
    };
    var focus = normalizePoint(editor, range.focus);
    if (!focus) return null;
    return {
        anchor,
        focus
    };
}
function transformPendingPoint(editor, point, op) {
    var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);
    var textDiff = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((_ref)=>{
        var { path } = _ref;
        return (0, _slate.Path).equals(path, point.path);
    });
    if (!textDiff || point.offset <= textDiff.diff.start) return (0, _slate.Point).transform(point, op, {
        affinity: "backward"
    });
    var { diff } = textDiff; // Point references location inside the diff => transform the point based on the location
    // the diff will be applied to and add the offset inside the diff.
    if (point.offset <= diff.start + diff.text.length) {
        var _anchor = {
            path: point.path,
            offset: diff.start
        };
        var _transformed = (0, _slate.Point).transform(_anchor, op, {
            affinity: "backward"
        });
        if (!_transformed) return null;
        return {
            path: _transformed.path,
            offset: _transformed.offset + point.offset - diff.start
        };
    } // Point references location after the diff
    var anchor = {
        path: point.path,
        offset: point.offset - diff.text.length + diff.end - diff.start
    };
    var transformed = (0, _slate.Point).transform(anchor, op, {
        affinity: "backward"
    });
    if (!transformed) return null;
    if (op.type === "split_node" && (0, _slate.Path).equals(op.path, point.path) && anchor.offset < op.position && diff.start < op.position) return transformed;
    return {
        path: transformed.path,
        offset: transformed.offset + diff.text.length - diff.end + diff.start
    };
}
function transformPendingRange(editor, range, op) {
    var anchor = transformPendingPoint(editor, range.anchor, op);
    if (!anchor) return null;
    if ((0, _slate.Range).isCollapsed(range)) return {
        anchor,
        focus: anchor
    };
    var focus = transformPendingPoint(editor, range.focus, op);
    if (!focus) return null;
    return {
        anchor,
        focus
    };
}
function transformTextDiff(textDiff, op) {
    var { path, diff, id } = textDiff;
    switch(op.type){
        case "insert_text":
            if (!(0, _slate.Path).equals(op.path, path) || op.offset >= diff.end) return textDiff;
            if (op.offset <= diff.start) return {
                diff: {
                    start: op.text.length + diff.start,
                    end: op.text.length + diff.end,
                    text: diff.text
                },
                id,
                path
            };
            return {
                diff: {
                    start: diff.start,
                    end: diff.end + op.text.length,
                    text: diff.text
                },
                id,
                path
            };
        case "remove_text":
            if (!(0, _slate.Path).equals(op.path, path) || op.offset >= diff.end) return textDiff;
            if (op.offset + op.text.length <= diff.start) return {
                diff: {
                    start: diff.start - op.text.length,
                    end: diff.end - op.text.length,
                    text: diff.text
                },
                id,
                path
            };
            return {
                diff: {
                    start: diff.start,
                    end: diff.end - op.text.length,
                    text: diff.text
                },
                id,
                path
            };
        case "split_node":
            if (!(0, _slate.Path).equals(op.path, path) || op.position >= diff.end) return {
                diff,
                id,
                path: (0, _slate.Path).transform(path, op, {
                    affinity: "backward"
                })
            };
            if (op.position > diff.start) return {
                diff: {
                    start: diff.start,
                    end: Math.min(op.position, diff.end),
                    text: diff.text
                },
                id,
                path
            };
            return {
                diff: {
                    start: diff.start - op.position,
                    end: diff.end - op.position,
                    text: diff.text
                },
                id,
                path: (0, _slate.Path).transform(path, op, {
                    affinity: "forward"
                })
            };
        case "merge_node":
            if (!(0, _slate.Path).equals(op.path, path)) return {
                diff,
                id,
                path: (0, _slate.Path).transform(path, op)
            };
            return {
                diff: {
                    start: diff.start + op.position,
                    end: diff.end + op.position,
                    text: diff.text
                },
                id,
                path: (0, _slate.Path).transform(path, op)
            };
    }
    var newPath = (0, _slate.Path).transform(path, op);
    if (!newPath) return null;
    return {
        diff,
        path: newPath,
        id
    };
}
function ownKeys$3(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$3(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$3(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.
var RESOLVE_DELAY = 25; // Time with no user interaction before the current user action is considered as done.
var FLUSH_DELAY = 200; // Replace with `const debug = console.log` to debug
var debug = function debug() {};
function createAndroidInputManager(_ref) {
    var { editor, scheduleOnDOMSelectionChange, onDOMSelectionChange } = _ref;
    var flushing = false;
    var compositionEndTimeoutId = null;
    var flushTimeoutId = null;
    var actionTimeoutId = null;
    var idCounter = 0;
    var insertPositionHint = false;
    var applyPendingSelection = ()=>{
        var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(editor);
        EDITOR_TO_PENDING_SELECTION.delete(editor);
        if (pendingSelection) {
            var { selection } = editor;
            var normalized = normalizeRange(editor, pendingSelection);
            if (normalized && (!selection || !(0, _slate.Range).equals(normalized, selection))) (0, _slate.Transforms).select(editor, normalized);
        }
    };
    var performAction = ()=>{
        var action = EDITOR_TO_PENDING_ACTION.get(editor);
        EDITOR_TO_PENDING_ACTION.delete(editor);
        if (!action) return;
        if (action.at) {
            var target = (0, _slate.Point).isPoint(action.at) ? normalizePoint(editor, action.at) : normalizeRange(editor, action.at);
            if (!target) return;
            var _targetRange = (0, _slate.Editor).range(editor, target);
            if (!editor.selection || !(0, _slate.Range).equals(editor.selection, _targetRange)) (0, _slate.Transforms).select(editor, target);
        }
        action.run();
    };
    var flush = ()=>{
        var _EDITOR_TO_PENDING_DI;
        if (flushTimeoutId) {
            clearTimeout(flushTimeoutId);
            flushTimeoutId = null;
        }
        if (actionTimeoutId) {
            clearTimeout(actionTimeoutId);
            actionTimeoutId = null;
        }
        if (!hasPendingDiffs() && !hasPendingAction()) {
            applyPendingSelection();
            return;
        }
        if (!flushing) {
            flushing = true;
            setTimeout(()=>flushing = false);
        }
        if (hasPendingAction()) flushing = "action";
        var selectionRef = editor.selection && (0, _slate.Editor).rangeRef(editor, editor.selection, {
            affinity: "forward"
        });
        EDITOR_TO_USER_MARKS.set(editor, editor.marks);
        debug("flush", EDITOR_TO_PENDING_ACTION.get(editor), EDITOR_TO_PENDING_DIFFS.get(editor));
        var scheduleSelectionChange = !!((_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI !== void 0 && _EDITOR_TO_PENDING_DI.length);
        var diff;
        while(diff = (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2[0]){
            var _EDITOR_TO_PENDING_DI2, _EDITOR_TO_PENDING_DI3;
            var pendingMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);
            if (pendingMarks !== undefined) {
                EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);
                editor.marks = pendingMarks;
            }
            if (pendingMarks && insertPositionHint === false) insertPositionHint = null;
            var range = targetRange(diff);
            if (!editor.selection || !(0, _slate.Range).equals(editor.selection, range)) (0, _slate.Transforms).select(editor, range);
            if (diff.diff.text) (0, _slate.Editor).insertText(editor, diff.diff.text);
            else (0, _slate.Editor).deleteFragment(editor);
             // Remove diff only after we have applied it to account for it when transforming
            // pending ranges.
            EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI3 = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI3 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI3.filter((_ref2)=>{
                var { id } = _ref2;
                return id !== diff.id;
            }));
            if (!verifyDiffState(editor, diff)) {
                scheduleSelectionChange = false;
                EDITOR_TO_PENDING_ACTION.delete(editor);
                EDITOR_TO_USER_MARKS.delete(editor);
                flushing = "action"; // Ensure we don't restore the pending user (dom) selection
                // since the document and dom state do not match.
                EDITOR_TO_PENDING_SELECTION.delete(editor);
                scheduleOnDOMSelectionChange.cancel();
                onDOMSelectionChange.cancel();
                selectionRef === null || selectionRef === void 0 || selectionRef.unref();
            }
        }
        var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();
        if (selection && !EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !(0, _slate.Range).equals(selection, editor.selection))) (0, _slate.Transforms).select(editor, selection);
        if (hasPendingAction()) {
            performAction();
            return;
        } // COMPAT: The selectionChange event is fired after the action is performed,
        // so we have to manually schedule it to ensure we don't 'throw away' the selection
        // while rendering if we have pending changes.
        if (scheduleSelectionChange) scheduleOnDOMSelectionChange();
        scheduleOnDOMSelectionChange.flush();
        onDOMSelectionChange.flush();
        applyPendingSelection();
        var userMarks = EDITOR_TO_USER_MARKS.get(editor);
        EDITOR_TO_USER_MARKS.delete(editor);
        if (userMarks !== undefined) {
            editor.marks = userMarks;
            editor.onChange();
        }
    };
    var handleCompositionEnd = (_event)=>{
        if (compositionEndTimeoutId) clearTimeout(compositionEndTimeoutId);
        compositionEndTimeoutId = setTimeout(()=>{
            IS_COMPOSING.set(editor, false);
            flush();
        }, RESOLVE_DELAY);
    };
    var handleCompositionStart = (_event)=>{
        IS_COMPOSING.set(editor, true);
        if (compositionEndTimeoutId) {
            clearTimeout(compositionEndTimeoutId);
            compositionEndTimeoutId = null;
        }
    };
    var updatePlaceholderVisibility = function updatePlaceholderVisibility() {
        var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var placeholderElement = EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);
        if (!placeholderElement) return;
        if (hasPendingDiffs() || forceHide) {
            placeholderElement.style.display = "none";
            return;
        }
        placeholderElement.style.removeProperty("display");
    };
    var storeDiff = (path, diff)=>{
        var _EDITOR_TO_PENDING_DI4;
        var pendingDiffs = (_EDITOR_TO_PENDING_DI4 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 ? _EDITOR_TO_PENDING_DI4 : [];
        EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);
        var target = (0, _slate.Node).leaf(editor, path);
        var idx = pendingDiffs.findIndex((change)=>(0, _slate.Path).equals(change.path, path));
        if (idx < 0) {
            var normalized = normalizeStringDiff(target.text, diff);
            if (normalized) pendingDiffs.push({
                path,
                diff,
                id: idCounter++
            });
            updatePlaceholderVisibility();
            return;
        }
        var merged = mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff);
        if (!merged) {
            pendingDiffs.splice(idx, 1);
            updatePlaceholderVisibility();
            return;
        }
        pendingDiffs[idx] = _objectSpread$3(_objectSpread$3({}, pendingDiffs[idx]), {}, {
            diff: merged
        });
    };
    var scheduleAction = function scheduleAction(run) {
        var { at } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        insertPositionHint = false;
        EDITOR_TO_PENDING_SELECTION.delete(editor);
        scheduleOnDOMSelectionChange.cancel();
        onDOMSelectionChange.cancel();
        if (hasPendingAction()) flush();
        EDITOR_TO_PENDING_ACTION.set(editor, {
            at,
            run
        }); // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,
        // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush
        // in this case and thus never actually perform the action.
        actionTimeoutId = setTimeout(flush);
    };
    var handleDOMBeforeInput = (event)=>{
        var _targetRange2;
        if (flushTimeoutId) {
            clearTimeout(flushTimeoutId);
            flushTimeoutId = null;
        }
        var { inputType: type } = event;
        var targetRange = null;
        var data = event.dataTransfer || event.data || undefined;
        if (insertPositionHint !== false && type !== "insertText" && type !== "insertCompositionText") insertPositionHint = false;
        var [nativeTargetRange] = event.getTargetRanges();
        if (nativeTargetRange) targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {
            exactMatch: false,
            suppressThrow: true
        });
         // COMPAT: SelectionChange event is fired after the action is performed, so we
        // have to manually get the selection here to ensure it's up-to-date.
        var window1 = ReactEditor.getWindow(editor);
        var domSelection = window1.getSelection();
        if (!targetRange && domSelection) {
            nativeTargetRange = domSelection;
            targetRange = ReactEditor.toSlateRange(editor, domSelection, {
                exactMatch: false,
                suppressThrow: true
            });
        }
        targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;
        if (!targetRange) return;
        if ((0, _slate.Range).isExpanded(targetRange) && type.startsWith("delete")) {
            var [start, end] = (0, _slate.Range).edges(targetRange);
            var leaf = (0, _slate.Node).leaf(editor, start.path);
            if (leaf.text.length === start.offset && end.offset === 0) {
                var next = (0, _slate.Editor).next(editor, {
                    at: start.path,
                    match: (0, _slate.Text).isText
                });
                if (next && (0, _slate.Path).equals(next[1], end.path)) targetRange = {
                    anchor: end,
                    focus: end
                };
            }
        }
        if ((0, _slate.Range).isExpanded(targetRange) && type.startsWith("delete")) {
            if ((0, _slate.Path).equals(targetRange.anchor.path, targetRange.focus.path)) {
                var [_start, _end] = (0, _slate.Range).edges(targetRange);
                return storeDiff(targetRange.anchor.path, {
                    text: "",
                    end: _end.offset,
                    start: _start.offset
                });
            }
            var direction = type.endsWith("Backward") ? "backward" : "forward";
            return scheduleAction(()=>(0, _slate.Editor).deleteFragment(editor, {
                    direction
                }), {
                at: targetRange
            });
        }
        switch(type){
            case "deleteByComposition":
            case "deleteByCut":
            case "deleteByDrag":
                return scheduleAction(()=>(0, _slate.Editor).deleteFragment(editor), {
                    at: targetRange
                });
            case "deleteContent":
            case "deleteContentForward":
                var { anchor } = targetRange;
                if ((0, _slate.Range).isCollapsed(targetRange)) {
                    var targetNode = (0, _slate.Node).leaf(editor, anchor.path);
                    if (anchor.offset < targetNode.text.length) return storeDiff(anchor.path, {
                        text: "",
                        start: anchor.offset,
                        end: anchor.offset + 1
                    });
                }
                return scheduleAction(()=>(0, _slate.Editor).deleteForward(editor), {
                    at: targetRange
                });
            case "deleteContentBackward":
                var _nativeTargetRange;
                var { anchor: _anchor } = targetRange; // If we have a mismatch between the native and slate selection being collapsed
                // we are most likely deleting a zero-width placeholder and thus should perform it
                // as an action to ensure correct behavior (mostly happens with mark placeholders)
                var nativeCollapsed = isDOMSelection(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);
                if (nativeCollapsed && (0, _slate.Range).isCollapsed(targetRange) && _anchor.offset > 0) return storeDiff(_anchor.path, {
                    text: "",
                    start: _anchor.offset - 1,
                    end: _anchor.offset
                });
                return scheduleAction(()=>(0, _slate.Editor).deleteBackward(editor), {
                    at: targetRange
                });
            case "deleteEntireSoftLine":
                return scheduleAction(()=>{
                    (0, _slate.Editor).deleteBackward(editor, {
                        unit: "line"
                    });
                    (0, _slate.Editor).deleteForward(editor, {
                        unit: "line"
                    });
                }, {
                    at: targetRange
                });
            case "deleteHardLineBackward":
                return scheduleAction(()=>(0, _slate.Editor).deleteBackward(editor, {
                        unit: "block"
                    }), {
                    at: targetRange
                });
            case "deleteSoftLineBackward":
                return scheduleAction(()=>(0, _slate.Editor).deleteBackward(editor, {
                        unit: "line"
                    }), {
                    at: targetRange
                });
            case "deleteHardLineForward":
                return scheduleAction(()=>(0, _slate.Editor).deleteForward(editor, {
                        unit: "block"
                    }), {
                    at: targetRange
                });
            case "deleteSoftLineForward":
                return scheduleAction(()=>(0, _slate.Editor).deleteForward(editor, {
                        unit: "line"
                    }), {
                    at: targetRange
                });
            case "deleteWordBackward":
                return scheduleAction(()=>(0, _slate.Editor).deleteBackward(editor, {
                        unit: "word"
                    }), {
                    at: targetRange
                });
            case "deleteWordForward":
                return scheduleAction(()=>(0, _slate.Editor).deleteForward(editor, {
                        unit: "word"
                    }), {
                    at: targetRange
                });
            case "insertLineBreak":
                return scheduleAction(()=>(0, _slate.Editor).insertSoftBreak(editor), {
                    at: targetRange
                });
            case "insertParagraph":
                return scheduleAction(()=>(0, _slate.Editor).insertBreak(editor), {
                    at: targetRange
                });
            case "insertCompositionText":
            case "deleteCompositionText":
            case "insertFromComposition":
            case "insertFromDrop":
            case "insertFromPaste":
            case "insertFromYank":
            case "insertReplacementText":
            case "insertText":
                if ((data === null || data === void 0 ? void 0 : data.constructor.name) === "DataTransfer") return scheduleAction(()=>ReactEditor.insertData(editor, data), {
                    at: targetRange
                });
                if (typeof data === "string" && data.includes("\n")) return scheduleAction(()=>(0, _slate.Editor).insertSoftBreak(editor), {
                    at: (0, _slate.Range).end(targetRange)
                });
                var text = data !== null && data !== void 0 ? data : ""; // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside
                // the placeholder itself and thus includes the zero-width space inside edit events.
                if (EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) text = text.replace("\uFEFF", "");
                if ((0, _slate.Path).equals(targetRange.anchor.path, targetRange.focus.path)) {
                    var [_start2, _end2] = (0, _slate.Range).edges(targetRange);
                    var diff = {
                        start: _start2.offset,
                        end: _end2.offset,
                        text
                    }; // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word
                    // inserted after a mark placeholder is inserted with an anchor offset off by 1.
                    // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert
                    // text events are fired with the correct target ranges, only the final 'insertComposition'
                    // isn't, so we can adjust the target range start offset if we are confident this is the
                    // swiftkey insert causing the issue.
                    if (text && insertPositionHint && type === "insertCompositionText") {
                        var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\S|$/);
                        var diffPosition = diff.start + diff.text.search(/\S|$/);
                        if (diffPosition === hintPosition + 1 && diff.end === insertPositionHint.start + insertPositionHint.text.length) {
                            diff.start -= 1;
                            insertPositionHint = null;
                            scheduleFlush();
                        } else insertPositionHint = false;
                    } else if (type === "insertText") {
                        if (insertPositionHint === null) insertPositionHint = diff;
                        else if (insertPositionHint && (0, _slate.Range).isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) insertPositionHint = _objectSpread$3(_objectSpread$3({}, insertPositionHint), {}, {
                            text: insertPositionHint.text + text
                        });
                        else insertPositionHint = false;
                    } else insertPositionHint = false;
                    storeDiff(_start2.path, diff);
                    return;
                }
                return scheduleAction(()=>(0, _slate.Editor).insertText(editor, text), {
                    at: targetRange
                });
        }
    };
    var hasPendingAction = ()=>{
        return !!EDITOR_TO_PENDING_ACTION.get(editor);
    };
    var hasPendingDiffs = ()=>{
        var _EDITOR_TO_PENDING_DI5;
        return !!((_EDITOR_TO_PENDING_DI5 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI5 !== void 0 && _EDITOR_TO_PENDING_DI5.length);
    };
    var hasPendingChanges = ()=>{
        return hasPendingAction() || hasPendingDiffs();
    };
    var isFlushing = ()=>{
        return flushing;
    };
    var handleUserSelect = (range)=>{
        EDITOR_TO_PENDING_SELECTION.set(editor, range);
        if (flushTimeoutId) {
            clearTimeout(flushTimeoutId);
            flushTimeoutId = null;
        }
        var { selection } = editor;
        if (!range) return;
        var pathChanged = !selection || !(0, _slate.Path).equals(selection.anchor.path, range.anchor.path);
        var parentPathChanged = !selection || !(0, _slate.Path).equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));
        if (pathChanged && insertPositionHint || parentPathChanged) insertPositionHint = false;
        if (pathChanged || !hasPendingDiffs()) flushTimeoutId = setTimeout(flush, FLUSH_DELAY);
    };
    var handleInput = ()=>{
        if (hasPendingAction() || !hasPendingDiffs()) flush();
    };
    var handleKeyDown = (_)=>{
        // COMPAT: Swiftkey closes the keyboard when typing inside a empty node
        // directly next to a non-contenteditable element (= the placeholder).
        // The only event fired soon enough for us to allow hiding the placeholder
        // without swiftkey picking it up is the keydown event, so we have to hide it
        // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535
        if (!hasPendingDiffs()) {
            updatePlaceholderVisibility(true);
            setTimeout(updatePlaceholderVisibility);
        }
    };
    var scheduleFlush = ()=>{
        if (!hasPendingAction()) actionTimeoutId = setTimeout(flush);
    };
    var handleDomMutations = (mutations)=>{
        if (hasPendingDiffs() || hasPendingAction()) return;
        if (mutations.some((mutation)=>isTrackedMutation(editor, mutation, mutations))) {
            var _EDITOR_TO_FORCE_REND;
            // Cause a re-render to restore the dom state if we encounter tracked mutations without
            // a corresponding pending action.
            (_EDITOR_TO_FORCE_REND = EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();
        }
    };
    return {
        flush,
        scheduleFlush,
        hasPendingDiffs,
        hasPendingAction,
        hasPendingChanges,
        isFlushing,
        handleUserSelect,
        handleCompositionEnd,
        handleCompositionStart,
        handleDOMBeforeInput,
        handleKeyDown,
        handleDomMutations,
        handleInput
    };
}
function useIsMounted() {
    var isMountedRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(()=>{
        isMountedRef.current = true;
        return ()=>{
            isMountedRef.current = false;
        };
    }, []);
    return isMountedRef.current;
}
function useMutationObserver(node, callback, options) {
    var [mutationObserver] = (0, _react.useState)(()=>new MutationObserver(callback));
    useIsomorphicLayoutEffect(()=>{
        // Discard mutations caused during render phase. This works due to react calling
        // useLayoutEffect synchronously after the render phase before the next tick.
        mutationObserver.takeRecords();
    });
    (0, _react.useEffect)(()=>{
        if (!node.current) throw new Error("Failed to attach MutationObserver, `node` is undefined");
        mutationObserver.observe(node.current, options);
        return ()=>mutationObserver.disconnect();
    }, []);
}
var _excluded$2 = [
    "node"
];
function ownKeys$2(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$2(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var MUTATION_OBSERVER_CONFIG = {
    subtree: true,
    childList: true,
    characterData: true
};
function useAndroidInputManager(_ref) {
    var { node } = _ref, options = _objectWithoutProperties(_ref, _excluded$2);
    if (!IS_ANDROID) return null;
    var editor = useSlateStatic();
    var isMounted = useIsMounted();
    var [inputManager] = (0, _react.useState)(()=>createAndroidInputManager(_objectSpread$2({
            editor
        }, options)));
    useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG);
    EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);
    if (isMounted) inputManager.flush();
    return inputManager;
}
function useTrackUserInput() {
    var editor = useSlateStatic();
    var receivedUserInput = (0, _react.useRef)(false);
    var animationFrameIdRef = (0, _react.useRef)(0);
    var onUserInput = (0, _react.useCallback)(()=>{
        if (receivedUserInput.current) return;
        receivedUserInput.current = true;
        var window1 = ReactEditor.getWindow(editor);
        window1.cancelAnimationFrame(animationFrameIdRef.current);
        animationFrameIdRef.current = window1.requestAnimationFrame(()=>{
            receivedUserInput.current = false;
        });
    }, []);
    (0, _react.useEffect)(()=>()=>cancelAnimationFrame(animationFrameIdRef.current), []);
    return {
        receivedUserInput,
        onUserInput
    };
}
var _excluded$1 = [
    "autoFocus",
    "decorate",
    "onDOMBeforeInput",
    "placeholder",
    "readOnly",
    "renderElement",
    "renderLeaf",
    "renderPlaceholder",
    "scrollSelectionIntoView",
    "style",
    "as"
], _excluded2 = [
    "text"
];
function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread$1(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys$1(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys$1(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var Children = (props)=>/*#__PURE__*/ (0, _reactDefault.default).createElement((0, _reactDefault.default).Fragment, null, useChildren(props));
/**
 * Editable.
 */ var Editable = (props)=>{
    var { autoFocus, decorate = defaultDecorate, onDOMBeforeInput: propsOnDOMBeforeInput, placeholder, readOnly = false, renderElement, renderLeaf, renderPlaceholder = (props)=>/*#__PURE__*/ (0, _reactDefault.default).createElement(DefaultPlaceholder, Object.assign({}, props)), scrollSelectionIntoView = defaultScrollSelectionIntoView, style = {}, as: Component = "div" } = props, attributes = _objectWithoutProperties(props, _excluded$1);
    var editor = useSlate(); // Rerender editor when composition status changed
    var [isComposing, setIsComposing] = (0, _react.useState)(false);
    var ref = (0, _react.useRef)(null);
    var deferredOperations = (0, _react.useRef)([]);
    var { onUserInput, receivedUserInput } = useTrackUserInput();
    var [, forceRender] = (0, _react.useReducer)((s)=>s + 1, 0);
    EDITOR_TO_FORCE_RENDER.set(editor, forceRender); // Update internal state on each render.
    IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.
    var state = (0, _react.useMemo)(()=>({
            isDraggingInternally: false,
            isUpdatingSelection: false,
            latestElement: null,
            hasMarkPlaceholder: false
        }), []); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it
    // needs to be manually focused.
    (0, _react.useEffect)(()=>{
        if (ref.current && autoFocus) ref.current.focus();
    }, [
        autoFocus
    ]); // Listen on the native `selectionchange` event to be able to update any time
    // the selection changes. This is required because React's `onSelect` is leaky
    // and non-standard so it doesn't fire until after a selection has been
    // released. This causes issues in situations where another change happens
    // while a selection is being dragged.
    var onDOMSelectionChange = (0, _react.useCallback)((0, _throttleDefault.default)(()=>{
        if ((IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {
            var root = ReactEditor.findDocumentOrShadowRoot(editor);
            var { activeElement } = root;
            var el = ReactEditor.toDOMNode(editor, editor);
            var domSelection = root.getSelection();
            if (activeElement === el) {
                state.latestElement = activeElement;
                IS_FOCUSED.set(editor, true);
            } else IS_FOCUSED.delete(editor);
            if (!domSelection) return (0, _slate.Transforms).deselect(editor);
            var { anchorNode, focusNode } = domSelection;
            var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideNonReadonlyVoid(editor, anchorNode);
            var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideNonReadonlyVoid(editor, focusNode);
            if (anchorNodeSelectable && focusNodeSelectable) {
                var range = ReactEditor.toSlateRange(editor, domSelection, {
                    exactMatch: false,
                    suppressThrow: true
                });
                if (range) {
                    if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) (0, _slate.Transforms).select(editor, range);
                    else androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);
                }
            } // Deselect the editor if the dom selection is not selectable in readonly mode
            if (readOnly && (!anchorNodeSelectable || !focusNodeSelectable)) (0, _slate.Transforms).deselect(editor);
        }
    }, 100), [
        readOnly
    ]);
    var scheduleOnDOMSelectionChange = (0, _react.useMemo)(()=>(0, _debounceDefault.default)(onDOMSelectionChange, 0), [
        onDOMSelectionChange
    ]);
    var androidInputManager = useAndroidInputManager({
        node: ref,
        onDOMSelectionChange,
        scheduleOnDOMSelectionChange
    });
    useIsomorphicLayoutEffect(()=>{
        // Update element-related weak maps with the DOM element ref.
        var window1;
        if (ref.current && (window1 = getDefaultView(ref.current))) {
            EDITOR_TO_WINDOW.set(editor, window1);
            EDITOR_TO_ELEMENT.set(editor, ref.current);
            NODE_TO_ELEMENT.set(editor, ref.current);
            ELEMENT_TO_NODE.set(ref.current, editor);
        } else NODE_TO_ELEMENT.delete(editor);
         // Make sure the DOM selection state is in sync.
        var { selection } = editor;
        var root = ReactEditor.findDocumentOrShadowRoot(editor);
        var domSelection = root.getSelection();
        if (!domSelection || !ReactEditor.isFocused(editor) || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingAction()) return;
        var setDomSelection = (forceChange)=>{
            var hasDomSelection = domSelection.type !== "None"; // If the DOM selection is properly unset, we're done.
            if (!selection && !hasDomSelection) return;
             // verify that the dom selection is in the editor
            var editorElement = EDITOR_TO_ELEMENT.get(editor);
            var hasDomSelectionInEditor = false;
            if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) hasDomSelectionInEditor = true;
             // If the DOM selection is in the editor and the editor selection is already correct, we're done.
            if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {
                var slateRange = ReactEditor.toSlateRange(editor, domSelection, {
                    exactMatch: true,
                    // domSelection is not necessarily a valid Slate range
                    // (e.g. when clicking on contentEditable:false element)
                    suppressThrow: true
                });
                if (slateRange && (0, _slate.Range).equals(slateRange, selection)) {
                    var _anchorNode$parentEle;
                    if (!state.hasMarkPlaceholder) return;
                     // Ensure selection is inside the mark placeholder
                    var { anchorNode } = domSelection;
                    if (anchorNode !== null && anchorNode !== void 0 && (_anchorNode$parentEle = anchorNode.parentElement) !== null && _anchorNode$parentEle !== void 0 && _anchorNode$parentEle.hasAttribute("data-slate-mark-placeholder")) return;
                }
            } // when <Editable/> is being controlled through external value
            // then its children might just change - DOM responds to it on its own
            // but Slate's value is not being updated through any operation
            // and thus it doesn't transform selection on its own
            if (selection && !ReactEditor.hasRange(editor, selection)) {
                editor.selection = ReactEditor.toSlateRange(editor, domSelection, {
                    exactMatch: false,
                    suppressThrow: true
                });
                return;
            } // Otherwise the DOM selection is out of sync, so update it.
            state.isUpdatingSelection = true;
            var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);
            if (newDomRange) {
                if ((0, _slate.Range).isBackward(selection)) domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);
                else domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);
                scrollSelectionIntoView(editor, newDomRange);
            } else domSelection.removeAllRanges();
            return newDomRange;
        };
        var newDomRange = setDomSelection();
        var ensureSelection = (androidInputManager === null || androidInputManager === void 0 ? void 0 : androidInputManager.isFlushing()) === "action";
        if (!IS_ANDROID || !ensureSelection) {
            setTimeout(()=>{
                // COMPAT: In Firefox, it's not enough to create a range, you also need
                // to focus the contenteditable element too. (2016/11/16)
                if (newDomRange && IS_FIREFOX) {
                    var el = ReactEditor.toDOMNode(editor, editor);
                    el.focus();
                }
                state.isUpdatingSelection = false;
            });
            return;
        }
        var timeoutId = null;
        var animationFrameId = requestAnimationFrame(()=>{
            if (ensureSelection) {
                var ensureDomSelection = (forceChange)=>{
                    try {
                        var el = ReactEditor.toDOMNode(editor, editor);
                        el.focus();
                        setDomSelection(forceChange);
                    } catch (e) {}
                }; // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.
                // This essentially would make setting the slate selection during an update meaningless, so we force it
                // again here. We can't only do it in the setTimeout after the animation frame since that would cause a
                // visible flicker.
                ensureDomSelection();
                timeoutId = setTimeout(()=>{
                    // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,
                    // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after
                    // the animation frame to ensure it displays the correct state.
                    ensureDomSelection(true);
                    state.isUpdatingSelection = false;
                });
            }
        });
        return ()=>{
            cancelAnimationFrame(animationFrameId);
            if (timeoutId) clearTimeout(timeoutId);
        };
    }); // Listen on the native `beforeinput` event to get real "Level 2" events. This
    // is required because React's `beforeinput` is fake and never really attaches
    // to the real event sadly. (2019/11/01)
    // https://github.com/facebook/react/issues/11211
    var onDOMBeforeInput = (0, _react.useCallback)((event)=>{
        onUserInput();
        if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {
            var _EDITOR_TO_USER_SELEC;
            // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.
            if (androidInputManager) return androidInputManager.handleDOMBeforeInput(event);
             // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before
            // triggering a `beforeinput` expecting the change to be applied to the immediately before
            // set selection.
            scheduleOnDOMSelectionChange.flush();
            onDOMSelectionChange.flush();
            var { selection } = editor;
            var { inputType: type } = event;
            var data = event.dataTransfer || event.data || undefined;
            var isCompositionChange = type === "insertCompositionText" || type === "deleteCompositionText"; // COMPAT: use composition change events as a hint to where we should insert
            // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038
            if (isCompositionChange && ReactEditor.isComposing(editor)) return;
            var native = false;
            if (type === "insertText" && selection && (0, _slate.Range).isCollapsed(selection) && // Only use native character insertion for single characters a-z or space for now.
            // Long-press events (hold a + press 4 = ä) to choose a special character otherwise
            // causes duplicate inserts.
            event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) && // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405
            // When there is an inline element, e.g. a link, and you select
            // right after it (the start of the next node).
            selection.anchor.offset !== 0) {
                var _node$parentElement, _window$getComputedSt;
                native = true; // Skip native if there are marks, as
                // `insertText` will insert a node, not just text.
                if (editor.marks) native = false;
                 // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100
                // Therefore we don't allow native events to insert text at the end of anchor nodes.
                var { anchor } = selection;
                var [node, offset] = ReactEditor.toDOMPoint(editor, anchor);
                var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest("a");
                var window1 = ReactEditor.getWindow(editor);
                if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {
                    var _lastText$textContent;
                    // Find the last text node inside the anchor.
                    var lastText = window1 === null || window1 === void 0 ? void 0 : window1.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();
                    if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) native = false;
                } // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'
                // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139
                if (native && node.parentElement && (window1 === null || window1 === void 0 ? void 0 : (_window$getComputedSt = window1.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === "pre") {
                    var block = (0, _slate.Editor).above(editor, {
                        at: anchor.path,
                        match: (n)=>(0, _slate.Editor).isBlock(editor, n)
                    });
                    if (block && (0, _slate.Node).string(block[0]).includes("	")) native = false;
                }
            } // COMPAT: For the deleting forward/backward input types we don't want
            // to change the selection because it is the range that will be deleted,
            // and those commands determine that for themselves.
            if (!type.startsWith("delete") || type.startsWith("deleteBy")) {
                var [targetRange] = event.getTargetRanges();
                if (targetRange) {
                    var range = ReactEditor.toSlateRange(editor, targetRange, {
                        exactMatch: false,
                        suppressThrow: false
                    });
                    if (!selection || !(0, _slate.Range).equals(selection, range)) {
                        native = false;
                        var selectionRef = !isCompositionChange && editor.selection && (0, _slate.Editor).rangeRef(editor, editor.selection);
                        (0, _slate.Transforms).select(editor, range);
                        if (selectionRef) EDITOR_TO_USER_SELECTION.set(editor, selectionRef);
                    }
                }
            } // Composition change types occur while a user is composing text and can't be
            // cancelled. Let them through and wait for the composition to end.
            if (isCompositionChange) return;
            if (!native) event.preventDefault();
             // COMPAT: If the selection is expanded, even if the command seems like
            // a delete forward/backward command it should delete the selection.
            if (selection && (0, _slate.Range).isExpanded(selection) && type.startsWith("delete")) {
                var direction = type.endsWith("Backward") ? "backward" : "forward";
                (0, _slate.Editor).deleteFragment(editor, {
                    direction
                });
                return;
            }
            switch(type){
                case "deleteByComposition":
                case "deleteByCut":
                case "deleteByDrag":
                    (0, _slate.Editor).deleteFragment(editor);
                    break;
                case "deleteContent":
                case "deleteContentForward":
                    (0, _slate.Editor).deleteForward(editor);
                    break;
                case "deleteContentBackward":
                    (0, _slate.Editor).deleteBackward(editor);
                    break;
                case "deleteEntireSoftLine":
                    (0, _slate.Editor).deleteBackward(editor, {
                        unit: "line"
                    });
                    (0, _slate.Editor).deleteForward(editor, {
                        unit: "line"
                    });
                    break;
                case "deleteHardLineBackward":
                    (0, _slate.Editor).deleteBackward(editor, {
                        unit: "block"
                    });
                    break;
                case "deleteSoftLineBackward":
                    (0, _slate.Editor).deleteBackward(editor, {
                        unit: "line"
                    });
                    break;
                case "deleteHardLineForward":
                    (0, _slate.Editor).deleteForward(editor, {
                        unit: "block"
                    });
                    break;
                case "deleteSoftLineForward":
                    (0, _slate.Editor).deleteForward(editor, {
                        unit: "line"
                    });
                    break;
                case "deleteWordBackward":
                    (0, _slate.Editor).deleteBackward(editor, {
                        unit: "word"
                    });
                    break;
                case "deleteWordForward":
                    (0, _slate.Editor).deleteForward(editor, {
                        unit: "word"
                    });
                    break;
                case "insertLineBreak":
                    (0, _slate.Editor).insertSoftBreak(editor);
                    break;
                case "insertParagraph":
                    (0, _slate.Editor).insertBreak(editor);
                    break;
                case "insertFromComposition":
                case "insertFromDrop":
                case "insertFromPaste":
                case "insertFromYank":
                case "insertReplacementText":
                case "insertText":
                    if (type === "insertFromComposition") // COMPAT: in Safari, `compositionend` is dispatched after the
                    // `beforeinput` for "insertFromComposition". But if we wait for it
                    // then we will abort because we're still composing and the selection
                    // won't be updated properly.
                    // https://www.w3.org/TR/input-events-2/
                    {
                        if (ReactEditor.isComposing(editor)) {
                            setIsComposing(false);
                            IS_COMPOSING.set(editor, false);
                        }
                    } // use a weak comparison instead of 'instanceof' to allow
                    // programmatic access of paste events coming from external windows
                    // like cypress where cy.window does not work realibly
                    if ((data === null || data === void 0 ? void 0 : data.constructor.name) === "DataTransfer") ReactEditor.insertData(editor, data);
                    else if (typeof data === "string") {
                        // Only insertText operations use the native functionality, for now.
                        // Potentially expand to single character deletes, as well.
                        if (native) deferredOperations.current.push(()=>(0, _slate.Editor).insertText(editor, data));
                        else (0, _slate.Editor).insertText(editor, data);
                    }
                    break;
            } // Restore the actual user section if nothing manually set it.
            var toRestore = (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();
            EDITOR_TO_USER_SELECTION.delete(editor);
            if (toRestore && (!editor.selection || !(0, _slate.Range).equals(editor.selection, toRestore))) (0, _slate.Transforms).select(editor, toRestore);
        }
    }, [
        readOnly,
        propsOnDOMBeforeInput
    ]); // Attach a native DOM event handler for `beforeinput` events, because React's
    // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose
    // real `beforeinput` events sadly... (2019/11/04)
    // https://github.com/facebook/react/issues/11211
    useIsomorphicLayoutEffect(()=>{
        if (ref.current && HAS_BEFORE_INPUT_SUPPORT) // @ts-ignore The `beforeinput` event isn't recognized.
        ref.current.addEventListener("beforeinput", onDOMBeforeInput);
        return ()=>{
            if (ref.current && HAS_BEFORE_INPUT_SUPPORT) // @ts-ignore The `beforeinput` event isn't recognized.
            ref.current.removeEventListener("beforeinput", onDOMBeforeInput);
        };
    }, [
        onDOMBeforeInput
    ]); // Attach a native DOM event handler for `selectionchange`, because React's
    // built-in `onSelect` handler doesn't fire for all selection changes. It's a
    // leaky polyfill that only fires on keypresses or clicks. Instead, we want to
    // fire for any change to the selection inside the editor. (2019/11/04)
    // https://github.com/facebook/react/issues/5785
    useIsomorphicLayoutEffect(()=>{
        var window1 = ReactEditor.getWindow(editor);
        window1.document.addEventListener("selectionchange", scheduleOnDOMSelectionChange);
        return ()=>{
            window1.document.removeEventListener("selectionchange", scheduleOnDOMSelectionChange);
        };
    }, [
        scheduleOnDOMSelectionChange
    ]);
    var decorations = decorate([
        editor,
        []
    ]);
    if (placeholder && editor.children.length === 1 && Array.from((0, _slate.Node).texts(editor)).length === 1 && (0, _slate.Node).string(editor) === "" && !isComposing) {
        var start = (0, _slate.Editor).start(editor, []);
        decorations.push({
            [PLACEHOLDER_SYMBOL]: true,
            placeholder,
            anchor: start,
            focus: start
        });
    }
    var { marks } = editor;
    state.hasMarkPlaceholder = false;
    if (editor.selection && (0, _slate.Range).isCollapsed(editor.selection) && marks) {
        var { anchor } = editor.selection;
        var leaf = (0, _slate.Node).leaf(editor, anchor.path);
        var rest = _objectWithoutProperties(leaf, _excluded2); // While marks isn't a 'complete' text, we can still use loose Text.equals
        // here which only compares marks anyway.
        if (!(0, _slate.Text).equals(leaf, marks, {
            loose: true
        })) {
            state.hasMarkPlaceholder = true;
            var unset = Object.fromEntries(Object.keys(rest).map((mark)=>[
                    mark,
                    null
                ]));
            decorations.push(_objectSpread$1(_objectSpread$1(_objectSpread$1({
                [MARK_PLACEHOLDER_SYMBOL]: true
            }, unset), marks), {}, {
                anchor,
                focus: anchor
            }));
        }
    } // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it
    // before we receive the composition end event.
    (0, _react.useEffect)(()=>{
        setTimeout(()=>{
            var { selection } = editor;
            if (selection) {
                var { anchor: _anchor } = selection;
                var _text = (0, _slate.Node).leaf(editor, _anchor.path); // While marks isn't a 'complete' text, we can still use loose Text.equals
                // here which only compares marks anyway.
                if (marks && !(0, _slate.Text).equals(_text, marks, {
                    loose: true
                })) {
                    EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);
                    return;
                }
            }
            EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);
        });
    });
    return /*#__PURE__*/ (0, _reactDefault.default).createElement(ReadOnlyContext.Provider, {
        value: readOnly
    }, /*#__PURE__*/ (0, _reactDefault.default).createElement(DecorateContext.Provider, {
        value: decorate
    }, /*#__PURE__*/ (0, _reactDefault.default).createElement(RestoreDOM, {
        node: ref,
        receivedUserInput: receivedUserInput
    }, /*#__PURE__*/ (0, _reactDefault.default).createElement(Component, Object.assign({
        role: readOnly ? undefined : "textbox",
        "aria-multiline": readOnly ? undefined : true
    }, attributes, {
        // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd
        // have to use hacks to make these replacement-based features work.
        // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop
        // mismatch warning app moves to browser. Pass-through consumer props when
        // not CAN_USE_DOM (SSR) and default to falsy value
        spellCheck: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.spellCheck : false,
        autoCorrect: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCorrect : "false",
        autoCapitalize: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCapitalize : "false",
        "data-slate-editor": true,
        "data-slate-node": "value",
        // explicitly set this
        contentEditable: !readOnly,
        // in some cases, a decoration needs access to the range / selection to decorate a text node,
        // then you will select the whole text node when you select part the of text
        // this magic zIndex="-1" will fix it
        zindex: -1,
        suppressContentEditableWarning: true,
        ref: ref,
        style: _objectSpread$1({
            // Allow positioning relative to the editable element.
            position: "relative",
            // Prevent the default outline styles.
            outline: "none",
            // Preserve adjacent whitespace and new lines.
            whiteSpace: "pre-wrap",
            // Allow words to break if they are too long.
            wordWrap: "break-word"
        }, style),
        onBeforeInput: (0, _react.useCallback)((event)=>{
            // COMPAT: Certain browsers don't support the `beforeinput` event, so we
            // fall back to React's leaky polyfill instead just for it. It
            // only works for the `insertText` input type.
            if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && hasEditableTarget(editor, event.target)) {
                event.preventDefault();
                if (!ReactEditor.isComposing(editor)) {
                    var _text2 = event.data;
                    (0, _slate.Editor).insertText(editor, _text2);
                }
            }
        }, [
            readOnly
        ]),
        onInput: (0, _react.useCallback)((event)=>{
            if (androidInputManager) {
                androidInputManager.handleInput();
                return;
            } // Flush native operations, as native events will have propogated
            // and we can correctly compare DOM text values in components
            // to stop rendering, so that browser functions like autocorrect
            // and spellcheck work as expected.
            for (var op of deferredOperations.current)op();
            deferredOperations.current = [];
        }, []),
        onBlur: (0, _react.useCallback)((event)=>{
            if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) return;
             // COMPAT: If the current `activeElement` is still the previous
            // one, this is due to the window being blurred when the tab
            // itself becomes unfocused, so we want to abort early to allow to
            // editor to stay focused when the tab becomes focused again.
            var root = ReactEditor.findDocumentOrShadowRoot(editor);
            if (state.latestElement === root.activeElement) return;
            var { relatedTarget } = event;
            var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning
            // to the editor from an embedded editable element (eg. an <input>
            // element inside a void node).
            if (relatedTarget === el) return;
             // COMPAT: The event should be ignored if the focus is moving from
            // the editor to inside a void node's spacer element.
            if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute("data-slate-spacer")) return;
             // COMPAT: The event should be ignored if the focus is moving to a
            // non- editable section of an element that isn't a void node (eg.
            // a list item of the check list example).
            if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {
                var node = ReactEditor.toSlateNode(editor, relatedTarget);
                if ((0, _slate.Element).isElement(node) && !editor.isVoid(node)) return;
            } // COMPAT: Safari doesn't always remove the selection even if the content-
            // editable element no longer has focus. Refer to:
            // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web
            if (IS_SAFARI) {
                var domSelection = root.getSelection();
                domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();
            }
            IS_FOCUSED.delete(editor);
        }, [
            readOnly,
            attributes.onBlur
        ]),
        onClick: (0, _react.useCallback)((event)=>{
            if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {
                var node = ReactEditor.toSlateNode(editor, event.target);
                var path = ReactEditor.findPath(editor, node); // At this time, the Slate document may be arbitrarily different,
                // because onClick handlers can change the document before we get here.
                // Therefore we must check that this path actually exists,
                // and that it still refers to the same node.
                if (!(0, _slate.Editor).hasPath(editor, path) || (0, _slate.Node).get(editor, path) !== node) return;
                if (event.detail === TRIPLE_CLICK && path.length >= 1) {
                    var blockPath = path;
                    if (!(0, _slate.Editor).isBlock(editor, node)) {
                        var _block$;
                        var block = (0, _slate.Editor).above(editor, {
                            match: (n)=>(0, _slate.Editor).isBlock(editor, n),
                            at: path
                        });
                        blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);
                    }
                    var range = (0, _slate.Editor).range(editor, blockPath);
                    (0, _slate.Transforms).select(editor, range);
                    return;
                }
                if (readOnly) return;
                var _start = (0, _slate.Editor).start(editor, path);
                var end = (0, _slate.Editor).end(editor, path);
                var startVoid = (0, _slate.Editor).void(editor, {
                    at: _start
                });
                var endVoid = (0, _slate.Editor).void(editor, {
                    at: end
                });
                if (startVoid && endVoid && (0, _slate.Path).equals(startVoid[1], endVoid[1])) {
                    var _range = (0, _slate.Editor).range(editor, _start);
                    (0, _slate.Transforms).select(editor, _range);
                }
            }
        }, [
            readOnly,
            attributes.onClick
        ]),
        onCompositionEnd: (0, _react.useCallback)((event)=>{
            if (hasEditableTarget(editor, event.target)) {
                if (ReactEditor.isComposing(editor)) {
                    setIsComposing(false);
                    IS_COMPOSING.set(editor, false);
                }
                androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleCompositionEnd(event);
                if (isEventHandled(event, attributes.onCompositionEnd) || IS_ANDROID) return;
                 // COMPAT: In Chrome, `beforeinput` events for compositions
                // aren't correct and never fire the "insertFromComposition"
                // type that we need. So instead, insert whenever a composition
                // ends since it will already have been committed to the DOM.
                if (!IS_SAFARI && !IS_FIREFOX_LEGACY && !IS_IOS && !IS_QQBROWSER && !IS_WECHATBROWSER && !IS_UC_MOBILE && event.data) {
                    var placeholderMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);
                    EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor); // Ensure we insert text with the marks the user was actually seeing
                    if (placeholderMarks !== undefined) {
                        EDITOR_TO_USER_MARKS.set(editor, editor.marks);
                        editor.marks = placeholderMarks;
                    }
                    (0, _slate.Editor).insertText(editor, event.data);
                    var userMarks = EDITOR_TO_USER_MARKS.get(editor);
                    EDITOR_TO_USER_MARKS.delete(editor);
                    if (userMarks !== undefined) editor.marks = userMarks;
                }
            }
        }, [
            attributes.onCompositionEnd
        ]),
        onCompositionUpdate: (0, _react.useCallback)((event)=>{
            if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {
                if (!ReactEditor.isComposing(editor)) {
                    setIsComposing(true);
                    IS_COMPOSING.set(editor, true);
                }
            }
        }, [
            attributes.onCompositionUpdate
        ]),
        onCompositionStart: (0, _react.useCallback)((event)=>{
            if (hasEditableTarget(editor, event.target)) {
                androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleCompositionStart(event);
                if (isEventHandled(event, attributes.onCompositionStart) || IS_ANDROID) return;
                setIsComposing(true);
                var { selection } = editor;
                if (selection) {
                    if ((0, _slate.Range).isExpanded(selection)) {
                        (0, _slate.Editor).deleteFragment(editor);
                        return;
                    }
                    var inline = (0, _slate.Editor).above(editor, {
                        match: (n)=>(0, _slate.Editor).isInline(editor, n),
                        mode: "highest"
                    });
                    if (inline) {
                        var [, inlinePath] = inline;
                        if ((0, _slate.Editor).isEnd(editor, selection.anchor, inlinePath)) {
                            var point = (0, _slate.Editor).after(editor, inlinePath);
                            (0, _slate.Transforms).setSelection(editor, {
                                anchor: point,
                                focus: point
                            });
                        }
                    }
                }
            }
        }, [
            attributes.onCompositionStart
        ]),
        onCopy: (0, _react.useCallback)((event)=>{
            if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {
                event.preventDefault();
                ReactEditor.setFragmentData(editor, event.clipboardData, "copy");
            }
        }, [
            attributes.onCopy
        ]),
        onCut: (0, _react.useCallback)((event)=>{
            if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {
                event.preventDefault();
                ReactEditor.setFragmentData(editor, event.clipboardData, "cut");
                var { selection } = editor;
                if (selection) {
                    if ((0, _slate.Range).isExpanded(selection)) (0, _slate.Editor).deleteFragment(editor);
                    else {
                        var node = (0, _slate.Node).parent(editor, selection.anchor.path);
                        if ((0, _slate.Editor).isVoid(editor, node)) (0, _slate.Transforms).delete(editor);
                    }
                }
            }
        }, [
            readOnly,
            attributes.onCut
        ]),
        onDragOver: (0, _react.useCallback)((event)=>{
            if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {
                // Only when the target is void, call `preventDefault` to signal
                // that drops are allowed. Editable content is droppable by
                // default, and calling `preventDefault` hides the cursor.
                var node = ReactEditor.toSlateNode(editor, event.target);
                if ((0, _slate.Editor).isVoid(editor, node)) event.preventDefault();
            }
        }, [
            attributes.onDragOver
        ]),
        onDragStart: (0, _react.useCallback)((event)=>{
            if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {
                var node = ReactEditor.toSlateNode(editor, event.target);
                var path = ReactEditor.findPath(editor, node);
                var voidMatch = (0, _slate.Editor).isVoid(editor, node) || (0, _slate.Editor).void(editor, {
                    at: path,
                    voids: true
                }); // If starting a drag on a void node, make sure it is selected
                // so that it shows up in the selection's fragment.
                if (voidMatch) {
                    var range = (0, _slate.Editor).range(editor, path);
                    (0, _slate.Transforms).select(editor, range);
                }
                state.isDraggingInternally = true;
                ReactEditor.setFragmentData(editor, event.dataTransfer, "drag");
            }
        }, [
            readOnly,
            attributes.onDragStart
        ]),
        onDrop: (0, _react.useCallback)((event)=>{
            if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {
                event.preventDefault(); // Keep a reference to the dragged range before updating selection
                var draggedRange = editor.selection; // Find the range where the drop happened
                var range = ReactEditor.findEventRange(editor, event);
                var data = event.dataTransfer;
                (0, _slate.Transforms).select(editor, range);
                if (state.isDraggingInternally) {
                    if (draggedRange && !(0, _slate.Range).equals(draggedRange, range) && !(0, _slate.Editor).void(editor, {
                        at: range,
                        voids: true
                    })) (0, _slate.Transforms).delete(editor, {
                        at: draggedRange
                    });
                }
                ReactEditor.insertData(editor, data); // When dragging from another source into the editor, it's possible
                // that the current editor does not have focus.
                if (!ReactEditor.isFocused(editor)) ReactEditor.focus(editor);
            }
            state.isDraggingInternally = false;
        }, [
            readOnly,
            attributes.onDrop
        ]),
        onDragEnd: (0, _react.useCallback)((event)=>{
            if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && hasTarget(editor, event.target)) attributes.onDragEnd(event);
             // When dropping on a different droppable element than the current editor,
            // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.
            // Note: `onDragEnd` is only called when `onDrop` is not called
            state.isDraggingInternally = false;
        }, [
            readOnly,
            attributes.onDragEnd
        ]),
        onFocus: (0, _react.useCallback)((event)=>{
            if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {
                var el = ReactEditor.toDOMNode(editor, editor);
                var root = ReactEditor.findDocumentOrShadowRoot(editor);
                state.latestElement = root.activeElement; // COMPAT: If the editor has nested editable elements, the focus
                // can go to them. In Firefox, this must be prevented because it
                // results in issues with keyboard navigation. (2017/03/30)
                if (IS_FIREFOX && event.target !== el) {
                    el.focus();
                    return;
                }
                IS_FOCUSED.set(editor, true);
            }
        }, [
            readOnly,
            attributes.onFocus
        ]),
        onKeyDown: (0, _react.useCallback)((event)=>{
            if (!readOnly && hasEditableTarget(editor, event.target)) {
                androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleKeyDown(event);
                var { nativeEvent } = event; // COMPAT: The composition end event isn't fired reliably in all browsers,
                // so we sometimes might end up stuck in a composition state even though we
                // aren't composing any more.
                if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {
                    IS_COMPOSING.set(editor, false);
                    setIsComposing(false);
                }
                if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) return;
                var { selection } = editor;
                var element = editor.children[selection !== null ? selection.focus.path[0] : 0];
                var isRTL = (0, _directionDefault.default)((0, _slate.Node).string(element)) === "rtl"; // COMPAT: Since we prevent the default behavior on
                // `beforeinput` events, the browser doesn't think there's ever
                // any history stack to undo or redo, so we have to manage these
                // hotkeys ourselves. (2019/11/06)
                if (Hotkeys.isRedo(nativeEvent)) {
                    event.preventDefault();
                    var maybeHistoryEditor = editor;
                    if (typeof maybeHistoryEditor.redo === "function") maybeHistoryEditor.redo();
                    return;
                }
                if (Hotkeys.isUndo(nativeEvent)) {
                    event.preventDefault();
                    var _maybeHistoryEditor = editor;
                    if (typeof _maybeHistoryEditor.undo === "function") _maybeHistoryEditor.undo();
                    return;
                } // COMPAT: Certain browsers don't handle the selection updates
                // properly. In Chrome, the selection isn't properly extended.
                // And in Firefox, the selection isn't properly collapsed.
                // (2017/10/17)
                if (Hotkeys.isMoveLineBackward(nativeEvent)) {
                    event.preventDefault();
                    (0, _slate.Transforms).move(editor, {
                        unit: "line",
                        reverse: true
                    });
                    return;
                }
                if (Hotkeys.isMoveLineForward(nativeEvent)) {
                    event.preventDefault();
                    (0, _slate.Transforms).move(editor, {
                        unit: "line"
                    });
                    return;
                }
                if (Hotkeys.isExtendLineBackward(nativeEvent)) {
                    event.preventDefault();
                    (0, _slate.Transforms).move(editor, {
                        unit: "line",
                        edge: "focus",
                        reverse: true
                    });
                    return;
                }
                if (Hotkeys.isExtendLineForward(nativeEvent)) {
                    event.preventDefault();
                    (0, _slate.Transforms).move(editor, {
                        unit: "line",
                        edge: "focus"
                    });
                    return;
                } // COMPAT: If a void node is selected, or a zero-width text node
                // adjacent to an inline is selected, we need to handle these
                // hotkeys manually because browsers won't be able to skip over
                // the void node with the zero-width space not being an empty
                // string.
                if (Hotkeys.isMoveBackward(nativeEvent)) {
                    event.preventDefault();
                    if (selection && (0, _slate.Range).isCollapsed(selection)) (0, _slate.Transforms).move(editor, {
                        reverse: !isRTL
                    });
                    else (0, _slate.Transforms).collapse(editor, {
                        edge: "start"
                    });
                    return;
                }
                if (Hotkeys.isMoveForward(nativeEvent)) {
                    event.preventDefault();
                    if (selection && (0, _slate.Range).isCollapsed(selection)) (0, _slate.Transforms).move(editor, {
                        reverse: isRTL
                    });
                    else (0, _slate.Transforms).collapse(editor, {
                        edge: "end"
                    });
                    return;
                }
                if (Hotkeys.isMoveWordBackward(nativeEvent)) {
                    event.preventDefault();
                    if (selection && (0, _slate.Range).isExpanded(selection)) (0, _slate.Transforms).collapse(editor, {
                        edge: "focus"
                    });
                    (0, _slate.Transforms).move(editor, {
                        unit: "word",
                        reverse: !isRTL
                    });
                    return;
                }
                if (Hotkeys.isMoveWordForward(nativeEvent)) {
                    event.preventDefault();
                    if (selection && (0, _slate.Range).isExpanded(selection)) (0, _slate.Transforms).collapse(editor, {
                        edge: "focus"
                    });
                    (0, _slate.Transforms).move(editor, {
                        unit: "word",
                        reverse: isRTL
                    });
                    return;
                } // COMPAT: Certain browsers don't support the `beforeinput` event, so we
                // fall back to guessing at the input intention for hotkeys.
                // COMPAT: In iOS, some of these hotkeys are handled in the
                if (!HAS_BEFORE_INPUT_SUPPORT) {
                    // We don't have a core behavior for these, but they change the
                    // DOM if we don't prevent them, so we have to.
                    if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {
                        event.preventDefault();
                        return;
                    }
                    if (Hotkeys.isSoftBreak(nativeEvent)) {
                        event.preventDefault();
                        (0, _slate.Editor).insertSoftBreak(editor);
                        return;
                    }
                    if (Hotkeys.isSplitBlock(nativeEvent)) {
                        event.preventDefault();
                        (0, _slate.Editor).insertBreak(editor);
                        return;
                    }
                    if (Hotkeys.isDeleteBackward(nativeEvent)) {
                        event.preventDefault();
                        if (selection && (0, _slate.Range).isExpanded(selection)) (0, _slate.Editor).deleteFragment(editor, {
                            direction: "backward"
                        });
                        else (0, _slate.Editor).deleteBackward(editor);
                        return;
                    }
                    if (Hotkeys.isDeleteForward(nativeEvent)) {
                        event.preventDefault();
                        if (selection && (0, _slate.Range).isExpanded(selection)) (0, _slate.Editor).deleteFragment(editor, {
                            direction: "forward"
                        });
                        else (0, _slate.Editor).deleteForward(editor);
                        return;
                    }
                    if (Hotkeys.isDeleteLineBackward(nativeEvent)) {
                        event.preventDefault();
                        if (selection && (0, _slate.Range).isExpanded(selection)) (0, _slate.Editor).deleteFragment(editor, {
                            direction: "backward"
                        });
                        else (0, _slate.Editor).deleteBackward(editor, {
                            unit: "line"
                        });
                        return;
                    }
                    if (Hotkeys.isDeleteLineForward(nativeEvent)) {
                        event.preventDefault();
                        if (selection && (0, _slate.Range).isExpanded(selection)) (0, _slate.Editor).deleteFragment(editor, {
                            direction: "forward"
                        });
                        else (0, _slate.Editor).deleteForward(editor, {
                            unit: "line"
                        });
                        return;
                    }
                    if (Hotkeys.isDeleteWordBackward(nativeEvent)) {
                        event.preventDefault();
                        if (selection && (0, _slate.Range).isExpanded(selection)) (0, _slate.Editor).deleteFragment(editor, {
                            direction: "backward"
                        });
                        else (0, _slate.Editor).deleteBackward(editor, {
                            unit: "word"
                        });
                        return;
                    }
                    if (Hotkeys.isDeleteWordForward(nativeEvent)) {
                        event.preventDefault();
                        if (selection && (0, _slate.Range).isExpanded(selection)) (0, _slate.Editor).deleteFragment(editor, {
                            direction: "forward"
                        });
                        else (0, _slate.Editor).deleteForward(editor, {
                            unit: "word"
                        });
                        return;
                    }
                } else {
                    if (IS_CHROME || IS_SAFARI) // COMPAT: Chrome and Safari support `beforeinput` event but do not fire
                    // an event when deleting backwards in a selected void inline node
                    {
                        if (selection && (Hotkeys.isDeleteBackward(nativeEvent) || Hotkeys.isDeleteForward(nativeEvent)) && (0, _slate.Range).isCollapsed(selection)) {
                            var currentNode = (0, _slate.Node).parent(editor, selection.anchor.path);
                            if ((0, _slate.Element).isElement(currentNode) && (0, _slate.Editor).isVoid(editor, currentNode) && ((0, _slate.Editor).isInline(editor, currentNode) || (0, _slate.Editor).isBlock(editor, currentNode))) {
                                event.preventDefault();
                                (0, _slate.Editor).deleteBackward(editor, {
                                    unit: "block"
                                });
                                return;
                            }
                        }
                    }
                }
            }
        }, [
            readOnly,
            attributes.onKeyDown
        ]),
        onPaste: (0, _react.useCallback)((event)=>{
            if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) // COMPAT: Certain browsers don't support the `beforeinput` event, so we
            // fall back to React's `onPaste` here instead.
            // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events
            // when "paste without formatting" is used, so fallback. (2020/02/20)
            {
                if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent)) {
                    event.preventDefault();
                    ReactEditor.insertData(editor, event.clipboardData);
                }
            }
        }, [
            readOnly,
            attributes.onPaste
        ])
    }), /*#__PURE__*/ (0, _reactDefault.default).createElement(Children, {
        decorations: decorations,
        node: editor,
        renderElement: renderElement,
        renderPlaceholder: renderPlaceholder,
        renderLeaf: renderLeaf,
        selection: editor.selection
    })))));
};
/**
 * The default placeholder element
 */ var DefaultPlaceholder = (_ref)=>{
    var { attributes, children } = _ref;
    return(/*#__PURE__*/ // COMPAT: Artificially add a line-break to the end on the placeholder element
    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter
    (0, _reactDefault.default).createElement("span", Object.assign({}, attributes), children, IS_ANDROID && /*#__PURE__*/ (0, _reactDefault.default).createElement("br", null)));
};
/**
 * A default memoized decorate function.
 */ var defaultDecorate = ()=>[];
/**
 * A default implement to scroll dom range into view.
 */ var defaultScrollSelectionIntoView = (editor, domRange)=>{
    // This was affecting the selection of multiple blocks and dragging behavior,
    // so enabled only if the selection has been collapsed.
    if (!editor.selection || editor.selection && (0, _slate.Range).isCollapsed(editor.selection)) {
        var leafEl = domRange.startContainer.parentElement;
        leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);
        (0, _scrollIntoViewIfNeededDefault.default)(leafEl, {
            scrollMode: "if-needed"
        }); // @ts-expect-error an unorthodox delete D:
        delete leafEl.getBoundingClientRect;
    }
};
/**
 * Check if the target is in the editor.
 */ var hasTarget = (editor, target)=>{
    return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target);
};
/**
 * Check if the target is editable and in the editor.
 */ var hasEditableTarget = (editor, target)=>{
    return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {
        editable: true
    });
};
/**
 * Check if the target is inside void and in an non-readonly editor.
 */ var isTargetInsideNonReadonlyVoid = (editor, target)=>{
    if (IS_READ_ONLY.get(editor)) return false;
    var slateNode = hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);
    return (0, _slate.Editor).isVoid(editor, slateNode);
};
/**
 * Check if an event is overrided by a handler.
 */ var isEventHandled = (event, handler)=>{
    if (!handler) return false;
     // The custom event handler may return a boolean to specify whether the event
    // shall be treated as being handled or not.
    var shouldTreatEventAsHandled = handler(event);
    if (shouldTreatEventAsHandled != null) return shouldTreatEventAsHandled;
    return event.isDefaultPrevented() || event.isPropagationStopped();
};
/**
 * Check if a DOM event is overrided by a handler.
 */ var isDOMEventHandled = (event, handler)=>{
    if (!handler) return false;
     // The custom event handler may return a boolean to specify whether the event
    // shall be treated as being handled or not.
    var shouldTreatEventAsHandled = handler(event);
    if (shouldTreatEventAsHandled != null) return shouldTreatEventAsHandled;
    return event.defaultPrevented;
};
/**
 * A React context for sharing the `focused` state of the editor.
 */ var FocusedContext = /*#__PURE__*/ (0, _react.createContext)(false);
/**
 * Get the current `focused` state of the editor.
 */ var useFocused = ()=>{
    return (0, _react.useContext)(FocusedContext);
};
function isError(error) {
    return error instanceof Error;
}
/**
 * A React context for sharing the editor selector context in a way to control rerenders
 */ var SlateSelectorContext = /*#__PURE__*/ (0, _react.createContext)({});
var refEquality = (a, b)=>a === b;
/**
 * use redux style selectors to prevent rerendering on every keystroke.
 * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.
 *
 * Example:
 * ```
 *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));
 * ```
 */ function useSlateSelector(selector) {
    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;
    var [, forceRender] = (0, _react.useReducer)((s)=>s + 1, 0);
    var context = (0, _react.useContext)(SlateSelectorContext);
    if (!context) throw new Error("The `useSlateSelector` hook must be used inside the <Slate> component's context.");
    var { getSlate, addEventListener } = context;
    var latestSubscriptionCallbackError = (0, _react.useRef)();
    var latestSelector = (0, _react.useRef)(()=>null);
    var latestSelectedState = (0, _react.useRef)(null);
    var selectedState;
    try {
        if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) selectedState = selector(getSlate());
        else selectedState = latestSelectedState.current;
    } catch (err) {
        if (latestSubscriptionCallbackError.current && isError(err)) err.message += "\nThe error may be correlated with this previous error:\n".concat(latestSubscriptionCallbackError.current.stack, "\n\n");
        throw err;
    }
    useIsomorphicLayoutEffect(()=>{
        latestSelector.current = selector;
        latestSelectedState.current = selectedState;
        latestSubscriptionCallbackError.current = undefined;
    });
    useIsomorphicLayoutEffect(()=>{
        function checkForUpdates() {
            try {
                var newSelectedState = latestSelector.current(getSlate());
                if (equalityFn(newSelectedState, latestSelectedState.current)) return;
                latestSelectedState.current = newSelectedState;
            } catch (err) {
                // we ignore all errors here, since when the component
                // is re-rendered, the selectors are called again, and
                // will throw again, if neither props nor store state
                // changed
                latestSubscriptionCallbackError.current = err;
            }
            forceRender();
        }
        var unsubscribe = addEventListener(checkForUpdates);
        checkForUpdates();
        return ()=>unsubscribe();
    }, [
        addEventListener,
        getSlate
    ]);
    return selectedState;
}
/**
 * Create selector context with editor updating on every editor change
 */ function getSelectorContext(editor) {
    var eventListeners = (0, _react.useRef)([]).current;
    var slateRef = (0, _react.useRef)({
        editor
    }).current;
    var onChange = (0, _react.useCallback)((editor)=>{
        slateRef.editor = editor;
        eventListeners.forEach((listener)=>listener(editor));
    }, []);
    var selectorContext = (0, _react.useMemo)(()=>{
        return {
            getSlate: ()=>slateRef.editor,
            addEventListener: (callback)=>{
                eventListeners.push(callback);
                return ()=>{
                    eventListeners.splice(eventListeners.indexOf(callback), 1);
                };
            }
        };
    }, [
        eventListeners,
        slateRef
    ]);
    return {
        selectorContext,
        onChange
    };
}
var _excluded = [
    "editor",
    "children",
    "onChange",
    "value"
];
/**
 * A wrapper around the provider to handle `onChange` events, because the editor
 * is a mutable singleton so it won't ever register as "changed" otherwise.
 */ var Slate = (props)=>{
    var { editor, children, onChange, value } = props, rest = _objectWithoutProperties(props, _excluded);
    var unmountRef = (0, _react.useRef)(false);
    var [context, setContext] = (0, _reactDefault.default).useState(()=>{
        if (!(0, _slate.Node).isNodeList(value)) throw new Error("[Slate] value is invalid! Expected a list of elements" + "but got: ".concat((0, _slate.Scrubber).stringify(value)));
        if (!(0, _slate.Editor).isEditor(editor)) throw new Error("[Slate] editor is invalid! you passed:" + "".concat((0, _slate.Scrubber).stringify(editor)));
        editor.children = value;
        Object.assign(editor, rest);
        return {
            v: 0,
            editor
        };
    });
    var { selectorContext, onChange: handleSelectorChange } = getSelectorContext(editor);
    var onContextChange = (0, _react.useCallback)(()=>{
        if (onChange) onChange(editor.children);
        setContext((prevContext)=>({
                v: prevContext.v + 1,
                editor
            }));
        handleSelectorChange(editor);
    }, [
        onChange
    ]);
    EDITOR_TO_ON_CHANGE.set(editor, onContextChange);
    (0, _react.useEffect)(()=>{
        return ()=>{
            EDITOR_TO_ON_CHANGE.set(editor, ()=>{});
            unmountRef.current = true;
        };
    }, []);
    var [isFocused, setIsFocused] = (0, _react.useState)(ReactEditor.isFocused(editor));
    (0, _react.useEffect)(()=>{
        setIsFocused(ReactEditor.isFocused(editor));
    });
    useIsomorphicLayoutEffect(()=>{
        var fn = ()=>setIsFocused(ReactEditor.isFocused(editor));
        if (IS_REACT_VERSION_17_OR_ABOVE) {
            // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.
            // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)
            // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.
            document.addEventListener("focusin", fn);
            document.addEventListener("focusout", fn);
            return ()=>{
                document.removeEventListener("focusin", fn);
                document.removeEventListener("focusout", fn);
            };
        } else {
            document.addEventListener("focus", fn, true);
            document.addEventListener("blur", fn, true);
            return ()=>{
                document.removeEventListener("focus", fn, true);
                document.removeEventListener("blur", fn, true);
            };
        }
    }, []);
    return /*#__PURE__*/ (0, _reactDefault.default).createElement(SlateSelectorContext.Provider, {
        value: selectorContext
    }, /*#__PURE__*/ (0, _reactDefault.default).createElement(SlateContext.Provider, {
        value: context
    }, /*#__PURE__*/ (0, _reactDefault.default).createElement(EditorContext.Provider, {
        value: context.editor
    }, /*#__PURE__*/ (0, _reactDefault.default).createElement(FocusedContext.Provider, {
        value: isFocused
    }, children))));
};
/**
 * Get the current editor object from the React context.
 * @deprecated Use useSlateStatic instead.
 */ var useEditor = ()=>{
    var editor = (0, _react.useContext)(EditorContext);
    if (!editor) throw new Error("The `useEditor` hook must be used inside the <Slate> component's context.");
    return editor;
};
/**
 * Get the current slate selection.
 * Only triggers a rerender when the selection actually changes
 */ var useSlateSelection = ()=>{
    return useSlateSelector((editor)=>editor.selection, isSelectionEqual);
};
var isSelectionEqual = (a, b)=>{
    if (!a && !b) return true;
    if (!a || !b) return false;
    return (0, _slate.Range).equals(a, b);
};
/**
 * Utilities for single-line deletion
 */ var doRectsIntersect = (rect, compareRect)=>{
    var middle = (compareRect.top + compareRect.bottom) / 2;
    return rect.top <= middle && rect.bottom >= middle;
};
var areRangesSameLine = (editor, range1, range2)=>{
    var rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect();
    var rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect();
    return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);
};
/**
 * A helper utility that returns the end portion of a `Range`
 * which is located on a single line.
 *
 * @param {Editor} editor The editor object to compare against
 * @param {Range} parentRange The parent range to compare against
 * @returns {Range} A valid portion of the parentRange which is one a single line
 */ var findCurrentLineRange = (editor, parentRange)=>{
    var parentRangeBoundary = (0, _slate.Editor).range(editor, (0, _slate.Range).end(parentRange));
    var positions = Array.from((0, _slate.Editor).positions(editor, {
        at: parentRange
    }));
    var left = 0;
    var right = positions.length;
    var middle = Math.floor(right / 2);
    if (areRangesSameLine(editor, (0, _slate.Editor).range(editor, positions[left]), parentRangeBoundary)) return (0, _slate.Editor).range(editor, positions[left], parentRangeBoundary);
    if (positions.length < 2) return (0, _slate.Editor).range(editor, positions[positions.length - 1], parentRangeBoundary);
    while(middle !== positions.length && middle !== left){
        if (areRangesSameLine(editor, (0, _slate.Editor).range(editor, positions[middle]), parentRangeBoundary)) right = middle;
        else left = middle;
        middle = Math.floor((left + right) / 2);
    }
    return (0, _slate.Editor).range(editor, positions[right], parentRangeBoundary);
};
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
/**
 * `withReact` adds React and DOM specific behaviors to the editor.
 *
 * If you are using TypeScript, you must extend Slate's CustomTypes to use
 * this plugin.
 *
 * See https://docs.slatejs.org/concepts/11-typescript to learn how.
 */ var withReact = (editor)=>{
    var e = editor;
    var { apply, onChange, deleteBackward, addMark, removeMark } = e; // The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to
    // avoid collisions between editors in the DOM that share the same value.
    EDITOR_TO_KEY_TO_ELEMENT.set(e, new WeakMap());
    e.addMark = (key, value)=>{
        var _EDITOR_TO_SCHEDULE_F, _EDITOR_TO_PENDING_DI;
        (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(e)) === null || _EDITOR_TO_SCHEDULE_F === void 0 || _EDITOR_TO_SCHEDULE_F();
        if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e) && (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(e)) !== null && _EDITOR_TO_PENDING_DI !== void 0 && _EDITOR_TO_PENDING_DI.length) // Ensure the current pending diffs originating from changes before the addMark
        // are applied with the current formatting
        EDITOR_TO_PENDING_INSERTION_MARKS.set(e, null);
        EDITOR_TO_USER_MARKS.delete(e);
        addMark(key, value);
    };
    e.removeMark = (key)=>{
        var _EDITOR_TO_PENDING_DI2;
        if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e) && (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(e)) !== null && _EDITOR_TO_PENDING_DI2 !== void 0 && _EDITOR_TO_PENDING_DI2.length) // Ensure the current pending diffs originating from changes before the addMark
        // are applied with the current formatting
        EDITOR_TO_PENDING_INSERTION_MARKS.set(e, null);
        EDITOR_TO_USER_MARKS.delete(e);
        removeMark(key);
    };
    e.deleteBackward = (unit)=>{
        if (unit !== "line") return deleteBackward(unit);
        if (e.selection && (0, _slate.Range).isCollapsed(e.selection)) {
            var parentBlockEntry = (0, _slate.Editor).above(e, {
                match: (n)=>(0, _slate.Editor).isBlock(e, n),
                at: e.selection
            });
            if (parentBlockEntry) {
                var [, parentBlockPath] = parentBlockEntry;
                var parentElementRange = (0, _slate.Editor).range(e, parentBlockPath, e.selection.anchor);
                var currentLineRange = findCurrentLineRange(e, parentElementRange);
                if (!(0, _slate.Range).isCollapsed(currentLineRange)) (0, _slate.Transforms).delete(e, {
                    at: currentLineRange
                });
            }
        }
    }; // This attempts to reset the NODE_TO_KEY entry to the correct value
    // as apply() changes the object reference and hence invalidates the NODE_TO_KEY entry
    e.apply = (op)=>{
        var matches = [];
        var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(e);
        if (pendingDiffs !== null && pendingDiffs !== void 0 && pendingDiffs.length) {
            var transformed = pendingDiffs.map((textDiff)=>transformTextDiff(textDiff, op)).filter(Boolean);
            EDITOR_TO_PENDING_DIFFS.set(e, transformed);
        }
        var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(e);
        if (pendingSelection) EDITOR_TO_PENDING_SELECTION.set(e, transformPendingRange(e, pendingSelection, op));
        var pendingAction = EDITOR_TO_PENDING_ACTION.get(e);
        if (pendingAction !== null && pendingAction !== void 0 && pendingAction.at) {
            var at = (0, _slate.Point).isPoint(pendingAction === null || pendingAction === void 0 ? void 0 : pendingAction.at) ? transformPendingPoint(e, pendingAction.at, op) : transformPendingRange(e, pendingAction.at, op);
            EDITOR_TO_PENDING_ACTION.set(e, at ? _objectSpread(_objectSpread({}, pendingAction), {}, {
                at
            }) : null);
        }
        switch(op.type){
            case "insert_text":
            case "remove_text":
            case "set_node":
            case "split_node":
                matches.push(...getMatches(e, op.path));
                break;
            case "set_selection":
                var _EDITOR_TO_USER_SELEC;
                // Selection was manually set, don't restore the user selection after the change.
                (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(e)) === null || _EDITOR_TO_USER_SELEC === void 0 || _EDITOR_TO_USER_SELEC.unref();
                EDITOR_TO_USER_SELECTION.delete(e);
                break;
            case "insert_node":
            case "remove_node":
                matches.push(...getMatches(e, (0, _slate.Path).parent(op.path)));
                break;
            case "merge_node":
                var prevPath = (0, _slate.Path).previous(op.path);
                matches.push(...getMatches(e, prevPath));
                break;
            case "move_node":
                var commonPath = (0, _slate.Path).common((0, _slate.Path).parent(op.path), (0, _slate.Path).parent(op.newPath));
                matches.push(...getMatches(e, commonPath));
                break;
        }
        apply(op);
        for (var [path, key] of matches){
            var [node] = (0, _slate.Editor).node(e, path);
            NODE_TO_KEY.set(node, key);
        }
    };
    e.setFragmentData = (data)=>{
        var { selection } = e;
        if (!selection) return;
        var [start, end] = (0, _slate.Range).edges(selection);
        var startVoid = (0, _slate.Editor).void(e, {
            at: start.path
        });
        var endVoid = (0, _slate.Editor).void(e, {
            at: end.path
        });
        if ((0, _slate.Range).isCollapsed(selection) && !startVoid) return;
         // Create a fake selection so that we can add a Base64-encoded copy of the
        // fragment to the HTML, to decode on future pastes.
        var domRange = ReactEditor.toDOMRange(e, selection);
        var contents = domRange.cloneContents();
        var attach = contents.childNodes[0]; // Make sure attach is non-empty, since empty nodes will not get copied.
        contents.childNodes.forEach((node)=>{
            if (node.textContent && node.textContent.trim() !== "") attach = node;
        }); // COMPAT: If the end node is a void node, we need to move the end of the
        // range from the void node's spacer span, to the end of the void node's
        // content, since the spacer is before void's content in the DOM.
        if (endVoid) {
            var [voidNode] = endVoid;
            var r = domRange.cloneRange();
            var domNode = ReactEditor.toDOMNode(e, voidNode);
            r.setEndAfter(domNode);
            contents = r.cloneContents();
        } // COMPAT: If the start node is a void node, we need to attach the encoded
        // fragment to the void node's content node instead of the spacer, because
        // attaching it to empty `<div>/<span>` nodes will end up having it erased by
        // most browsers. (2018/04/27)
        if (startVoid) attach = contents.querySelector("[data-slate-spacer]");
         // Remove any zero-width space spans from the cloned DOM so that they don't
        // show up elsewhere when pasted.
        Array.from(contents.querySelectorAll("[data-slate-zero-width]")).forEach((zw)=>{
            var isNewline = zw.getAttribute("data-slate-zero-width") === "n";
            zw.textContent = isNewline ? "\n" : "";
        }); // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up
        // in the HTML, and can be used for intra-Slate pasting. If it's a text
        // node, wrap it in a `<span>` so we have something to set an attribute on.
        if (isDOMText(attach)) {
            var span = attach.ownerDocument.createElement("span"); // COMPAT: In Chrome and Safari, if we don't add the `white-space` style
            // then leading and trailing spaces will be ignored. (2017/09/21)
            span.style.whiteSpace = "pre";
            span.appendChild(attach);
            contents.appendChild(span);
            attach = span;
        }
        var fragment = e.getFragment();
        var string = JSON.stringify(fragment);
        var encoded = window.btoa(encodeURIComponent(string));
        attach.setAttribute("data-slate-fragment", encoded);
        data.setData("application/x-slate-fragment", encoded); // Add the content to a <div> so that we can get its inner HTML.
        var div = contents.ownerDocument.createElement("div");
        div.appendChild(contents);
        div.setAttribute("hidden", "true");
        contents.ownerDocument.body.appendChild(div);
        data.setData("text/html", div.innerHTML);
        data.setData("text/plain", getPlainText(div));
        contents.ownerDocument.body.removeChild(div);
        return data;
    };
    e.insertData = (data)=>{
        if (!e.insertFragmentData(data)) e.insertTextData(data);
    };
    e.insertFragmentData = (data)=>{
        /**
     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment
     */ var fragment = data.getData("application/x-slate-fragment") || getSlateFragmentAttribute(data);
        if (fragment) {
            var decoded = decodeURIComponent(window.atob(fragment));
            var parsed = JSON.parse(decoded);
            e.insertFragment(parsed);
            return true;
        }
        return false;
    };
    e.insertTextData = (data)=>{
        var text = data.getData("text/plain");
        if (text) {
            var lines = text.split(/\r\n|\r|\n/);
            var split = false;
            for (var line of lines){
                if (split) (0, _slate.Transforms).splitNodes(e, {
                    always: true
                });
                e.insertText(line);
                split = true;
            }
            return true;
        }
        return false;
    };
    e.onChange = ()=>{
        // COMPAT: React doesn't batch `setState` hook calls, which means that the
        // children and selection can get out of sync for one render pass. So we
        // have to use this unstable API to ensure it batches them. (2019/12/03)
        // https://github.com/facebook/react/issues/14259#issuecomment-439702367
        (0, _reactDomDefault.default).unstable_batchedUpdates(()=>{
            var onContextChange = EDITOR_TO_ON_CHANGE.get(e);
            if (onContextChange) onContextChange();
            onChange();
        });
    };
    return e;
};
var getMatches = (e, path)=>{
    var matches = [];
    for (var [n, p] of (0, _slate.Editor).levels(e, {
        at: path
    })){
        var key = ReactEditor.findKey(e, n);
        matches.push([
            p,
            key
        ]);
    }
    return matches;
};

},{"direction":"6x2nG","lodash/debounce":"bv6vy","lodash/throttle":"lAb0D","react":"21dqq","scroll-into-view-if-needed":"3tw0v","slate":"bnHwp","is-hotkey":"wxZfR","react-dom":"j6uA9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6x2nG":[function(require,module,exports) {
"use strict";
module.exports = direction;
var RTL = "\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC";
var LTR = "A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C\uFE00-\uFE6F\uFEFD-\uFFFF";
var rtl = new RegExp("^[^" + LTR + "]*[" + RTL + "]");
var ltr = new RegExp("^[^" + RTL + "]*[" + LTR + "]");
function direction(value) {
    value = String(value || "");
    if (rtl.test(value)) return "rtl";
    if (ltr.test(value)) return "ltr";
    return "neutral";
}

},{}],"bv6vy":[function(require,module,exports) {
var isObject = require("3b174a999d6a40ac"), now = require("575b2317167ce20d"), toNumber = require("a13332670c5c0f63");
/** Error message constants. */ var FUNC_ERROR_TEXT = "Expected a function";
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */ function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) return trailingEdge(time);
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) return invokeFunc(time);
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) clearTimeout(timerId);
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(now());
    }
    function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) return leadingEdge(lastCallTime);
            if (maxing) {
                // Handle invocations in a tight loop.
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}
module.exports = debounce;

},{"3b174a999d6a40ac":"cGhqJ","575b2317167ce20d":"kOH6e","a13332670c5c0f63":"12NaH"}],"cGhqJ":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
}
module.exports = isObject;

},{}],"kOH6e":[function(require,module,exports) {
var root = require("6439589d9d88d885");
/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */ var now = function() {
    return root.Date.now();
};
module.exports = now;

},{"6439589d9d88d885":"dSYUs"}],"dSYUs":[function(require,module,exports) {
var freeGlobal = require("cd92e8811deaabf5");
/** Detect free variable `self`. */ var freeSelf = typeof self == "object" && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function("return this")();
module.exports = root;

},{"cd92e8811deaabf5":"kAk32"}],"kAk32":[function(require,module,exports) {
/** Detect free variable `global` from Node.js. */ var global = arguments[3];
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
module.exports = freeGlobal;

},{}],"12NaH":[function(require,module,exports) {
var baseTrim = require("261e89907fb89d78"), isObject = require("faaa289d287a34a5"), isSymbol = require("47b3bd23f771891");
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == "number") return value;
    if (isSymbol(value)) return NAN;
    if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") return value === 0 ? value : +value;
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = toNumber;

},{"261e89907fb89d78":"eUJZ3","faaa289d287a34a5":"cGhqJ","47b3bd23f771891":"i3BHC"}],"eUJZ3":[function(require,module,exports) {
var trimmedEndIndex = require("985d3c9be7b51937");
/** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */ function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
module.exports = baseTrim;

},{"985d3c9be7b51937":"hHJmS"}],"hHJmS":[function(require,module,exports) {
/** Used to match a single whitespace character. */ var reWhitespace = /\s/;
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */ function trimmedEndIndex(string) {
    var index = string.length;
    while(index-- && reWhitespace.test(string.charAt(index)));
    return index;
}
module.exports = trimmedEndIndex;

},{}],"i3BHC":[function(require,module,exports) {
var baseGetTag = require("6118c0d5630f51ce"), isObjectLike = require("74644060ad1a1d3c");
/** `Object#toString` result references. */ var symbolTag = "[object Symbol]";
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
module.exports = isSymbol;

},{"6118c0d5630f51ce":"lOnbo","74644060ad1a1d3c":"3BLi4"}],"lOnbo":[function(require,module,exports) {
var Symbol = require("68a84eb98c5d3fa2"), getRawTag = require("9b2aaf31b7bdd837"), objectToString = require("46d5beb3375f8a28");
/** `Object#toString` result references. */ var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

},{"68a84eb98c5d3fa2":"7lsL9","9b2aaf31b7bdd837":"995sO","46d5beb3375f8a28":"bmE3g"}],"7lsL9":[function(require,module,exports) {
var root = require("9ff1abd51ad45ac0");
/** Built-in value references. */ var Symbol = root.Symbol;
module.exports = Symbol;

},{"9ff1abd51ad45ac0":"dSYUs"}],"995sO":[function(require,module,exports) {
var Symbol = require("e9b4533b2a68f814");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;

},{"e9b4533b2a68f814":"7lsL9"}],"bmE3g":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;

},{}],"3BLi4":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == "object";
}
module.exports = isObjectLike;

},{}],"lAb0D":[function(require,module,exports) {
var debounce = require("5b383646e2c7b4c6"), isObject = require("a29ce0b3e78d037d");
/** Error message constants. */ var FUNC_ERROR_TEXT = "Expected a function";
/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */ function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
    if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
    });
}
module.exports = throttle;

},{"5b383646e2c7b4c6":"bv6vy","a29ce0b3e78d037d":"cGhqJ"}],"3tw0v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeScrollIntoView = require("compute-scroll-into-view");
var _computeScrollIntoViewDefault = parcelHelpers.interopDefault(_computeScrollIntoView);
function isOptionsObject(options) {
    return options === Object(options) && Object.keys(options).length !== 0;
}
function defaultBehavior(actions, behavior) {
    if (behavior === void 0) behavior = "auto";
    var canSmoothScroll = "scrollBehavior" in document.body.style;
    actions.forEach(function(_ref) {
        var el = _ref.el, top = _ref.top, left = _ref.left;
        if (el.scroll && canSmoothScroll) el.scroll({
            top: top,
            left: left,
            behavior: behavior
        });
        else {
            el.scrollTop = top;
            el.scrollLeft = left;
        }
    });
}
function getOptions(options) {
    if (options === false) return {
        block: "end",
        inline: "nearest"
    };
    if (isOptionsObject(options)) return options;
    return {
        block: "start",
        inline: "nearest"
    };
}
function scrollIntoView(target, options) {
    var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);
    if (isOptionsObject(options) && typeof options.behavior === "function") return options.behavior(isTargetAttached ? (0, _computeScrollIntoViewDefault.default)(target, options) : []);
    if (!isTargetAttached) return;
    var computeOptions = getOptions(options);
    return defaultBehavior((0, _computeScrollIntoViewDefault.default)(target, computeOptions), computeOptions.behavior);
}
exports.default = scrollIntoView;

},{"compute-scroll-into-view":"FwCjP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"FwCjP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>i);
function t(t) {
    return "object" == typeof t && null != t && 1 === t.nodeType;
}
function e(t, e) {
    return (!e || "hidden" !== t) && "visible" !== t && "clip" !== t;
}
function n(t, n) {
    if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {
        var r = getComputedStyle(t, null);
        return e(r.overflowY, n) || e(r.overflowX, n) || function(t) {
            var e = function(t) {
                if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;
                try {
                    return t.ownerDocument.defaultView.frameElement;
                } catch (t) {
                    return null;
                }
            }(t);
            return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);
        }(t);
    }
    return !1;
}
function r(t, e, n, r, i, o, l, d) {
    return o < t && l > e || o > t && l < e ? 0 : o <= t && d <= n || l >= e && d >= n ? o - t - r : l > e && d < n || o < t && d > n ? l - e + i : 0;
}
var i = function(e, i) {
    var o = window, l = i.scrollMode, d = i.block, f = i.inline, h = i.boundary, u = i.skipOverflowHiddenElements, s = "function" == typeof h ? h : function(t) {
        return t !== h;
    };
    if (!t(e)) throw new TypeError("Invalid target");
    for(var a, c, g = document.scrollingElement || document.documentElement, p = [], m = e; t(m) && s(m);){
        if ((m = null == (c = (a = m).parentElement) ? a.getRootNode().host || null : c) === g) {
            p.push(m);
            break;
        }
        null != m && m === document.body && n(m) && !n(document.documentElement) || null != m && n(m, u) && p.push(m);
    }
    for(var w = o.visualViewport ? o.visualViewport.width : innerWidth, v = o.visualViewport ? o.visualViewport.height : innerHeight, W = window.scrollX || pageXOffset, H = window.scrollY || pageYOffset, b = e.getBoundingClientRect(), y = b.height, E = b.width, M = b.top, V = b.right, x = b.bottom, I = b.left, C = "start" === d || "nearest" === d ? M : "end" === d ? x : M + y / 2, R = "center" === f ? I + E / 2 : "end" === f ? V : I, T = [], k = 0; k < p.length; k++){
        var B = p[k], D = B.getBoundingClientRect(), O = D.height, X = D.width, Y = D.top, L = D.right, S = D.bottom, j = D.left;
        if ("if-needed" === l && M >= 0 && I >= 0 && x <= v && V <= w && M >= Y && x <= S && I >= j && V <= L) return T;
        var N = getComputedStyle(B), q = parseInt(N.borderLeftWidth, 10), z = parseInt(N.borderTopWidth, 10), A = parseInt(N.borderRightWidth, 10), F = parseInt(N.borderBottomWidth, 10), G = 0, J = 0, K = "offsetWidth" in B ? B.offsetWidth - B.clientWidth - q - A : 0, P = "offsetHeight" in B ? B.offsetHeight - B.clientHeight - z - F : 0, Q = "offsetWidth" in B ? 0 === B.offsetWidth ? 0 : X / B.offsetWidth : 0, U = "offsetHeight" in B ? 0 === B.offsetHeight ? 0 : O / B.offsetHeight : 0;
        if (g === B) G = "start" === d ? C : "end" === d ? C - v : "nearest" === d ? r(H, H + v, v, z, F, H + C, H + C + y, y) : C - v / 2, J = "start" === f ? R : "center" === f ? R - w / 2 : "end" === f ? R - w : r(W, W + w, w, q, A, W + R, W + R + E, E), G = Math.max(0, G + H), J = Math.max(0, J + W);
        else {
            G = "start" === d ? C - Y - z : "end" === d ? C - S + F + P : "nearest" === d ? r(Y, S, O, z, F + P, C, C + y, y) : C - (Y + O / 2) + P / 2, J = "start" === f ? R - j - q : "center" === f ? R - (j + X / 2) + K / 2 : "end" === f ? R - L + A + K : r(j, L, X, q, A + K, R, R + E, E);
            var Z = B.scrollLeft, $ = B.scrollTop;
            C += $ - (G = Math.max(0, Math.min($ + G / U, B.scrollHeight - O / U + P))), R += Z - (J = Math.max(0, Math.min(Z + J / Q, B.scrollWidth - X / Q + K)));
        }
        T.push({
            el: B,
            top: G,
            left: J
        });
    }
    return T;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"wxZfR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Constants.
 */ var IS_MAC = typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
var MODIFIERS = {
    alt: "altKey",
    control: "ctrlKey",
    meta: "metaKey",
    shift: "shiftKey"
};
var ALIASES = {
    add: "+",
    break: "pause",
    cmd: "meta",
    command: "meta",
    ctl: "control",
    ctrl: "control",
    del: "delete",
    down: "arrowdown",
    esc: "escape",
    ins: "insert",
    left: "arrowleft",
    mod: IS_MAC ? "meta" : "control",
    opt: "alt",
    option: "alt",
    return: "enter",
    right: "arrowright",
    space: " ",
    spacebar: " ",
    up: "arrowup",
    win: "meta",
    windows: "meta"
};
var CODES = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    control: 17,
    alt: 18,
    pause: 19,
    capslock: 20,
    escape: 27,
    " ": 32,
    pageup: 33,
    pagedown: 34,
    end: 35,
    home: 36,
    arrowleft: 37,
    arrowup: 38,
    arrowright: 39,
    arrowdown: 40,
    insert: 45,
    delete: 46,
    meta: 91,
    numlock: 144,
    scrolllock: 145,
    ";": 186,
    "=": 187,
    ",": 188,
    "-": 189,
    ".": 190,
    "/": 191,
    "`": 192,
    "[": 219,
    "\\": 220,
    "]": 221,
    "'": 222
};
for(var f = 1; f < 20; f++)CODES["f" + f] = 111 + f;
/**
 * Is hotkey?
 */ function isHotkey(hotkey, options, event) {
    if (options && !("byKey" in options)) {
        event = options;
        options = null;
    }
    if (!Array.isArray(hotkey)) hotkey = [
        hotkey
    ];
    var array = hotkey.map(function(string) {
        return parseHotkey(string, options);
    });
    var check = function check(e) {
        return array.some(function(object) {
            return compareHotkey(object, e);
        });
    };
    var ret = event == null ? check : check(event);
    return ret;
}
function isCodeHotkey(hotkey, event) {
    return isHotkey(hotkey, event);
}
function isKeyHotkey(hotkey, event) {
    return isHotkey(hotkey, {
        byKey: true
    }, event);
}
/**
 * Parse.
 */ function parseHotkey(hotkey, options) {
    var byKey = options && options.byKey;
    var ret = {};
    // Special case to handle the `+` key since we use it as a separator.
    hotkey = hotkey.replace("++", "+add");
    var values = hotkey.split("+");
    var length = values.length;
    // Ensure that all the modifiers are set to false unless the hotkey has them.
    for(var k in MODIFIERS)ret[MODIFIERS[k]] = false;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;
    try {
        for(var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var value = _step.value;
            var optional = value.endsWith("?") && value.length > 1;
            if (optional) value = value.slice(0, -1);
            var name = toKeyName(value);
            var modifier = MODIFIERS[name];
            if (length === 1 || !modifier) {
                if (byKey) ret.key = name;
                else ret.which = toKeyCode(value);
            }
            if (modifier) ret[modifier] = optional ? null : true;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return) _iterator.return();
        } finally{
            if (_didIteratorError) throw _iteratorError;
        }
    }
    return ret;
}
/**
 * Compare.
 */ function compareHotkey(object, event) {
    for(var key in object){
        var expected = object[key];
        var actual = void 0;
        if (expected == null) continue;
        if (key === "key" && event.key != null) actual = event.key.toLowerCase();
        else if (key === "which") actual = expected === 91 && event.which === 93 ? 91 : event.which;
        else actual = event[key];
        if (actual == null && expected === false) continue;
        if (actual !== expected) return false;
    }
    return true;
}
/**
 * Utils.
 */ function toKeyCode(name) {
    name = toKeyName(name);
    var code = CODES[name] || name.toUpperCase().charCodeAt(0);
    return code;
}
function toKeyName(name) {
    name = name.toLowerCase();
    name = ALIASES[name] || name;
    return name;
}
/**
 * Export.
 */ exports.default = isHotkey;
exports.isHotkey = isHotkey;
exports.isCodeHotkey = isCodeHotkey;
exports.isKeyHotkey = isKeyHotkey;
exports.parseHotkey = parseHotkey;
exports.compareHotkey = compareHotkey;
exports.toKeyCode = toKeyCode;
exports.toKeyName = toKeyName;

},{}],"6AEwr":[function(require,module,exports) {
"use strict";
module.exports = require("c4c10cbba9862d5f");

},{"c4c10cbba9862d5f":"kujY4"}],"kujY4":[function(require,module,exports) {
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    var React = require("593632ccebda0d3a");
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = "" + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = "" + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return "\n\nCheck the render method of `" + name + "`.";
        }
        return "";
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== "object") return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === "string") return;
        var propTypes;
        if (typeof type === "function") propTypes = type.propTypes;
        else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = "null";
            else if (isArray(type)) typeString = "array";
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"593632ccebda0d3a":"21dqq"}],"99PmY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>newStyled);
var _emotionStyledBaseBrowserEsmJs = require("../base/dist/emotion-styled-base.browser.esm.js");
var _emotionStyledBaseBrowserEsmJsDefault = parcelHelpers.interopDefault(_emotionStyledBaseBrowserEsmJs);
var _extends = require("@babel/runtime/helpers/extends");
var _react = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _react1 = require("@emotion/react");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
];
var newStyled = (0, _emotionStyledBaseBrowserEsmJsDefault.default).bind();
tags.forEach(function(tagName) {
    // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
    newStyled[tagName] = newStyled(tagName);
});

},{"../base/dist/emotion-styled-base.browser.esm.js":"aUeJ5","@babel/runtime/helpers/extends":"vw3vn","react":"21dqq","@emotion/is-prop-valid":"9JzNk","@emotion/react":"9qiaY","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@emotion/use-insertion-effect-with-fallbacks":"lPCYn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aUeJ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createStyled);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _isPropValid = require("@emotion/is-prop-valid");
var _isPropValidDefault = parcelHelpers.interopDefault(_isPropValid);
var _react1 = require("@emotion/react");
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var testOmitPropsOnStringTag = (0, _isPropValidDefault.default);
var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
    return key !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
    var shouldForwardProp;
    if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp !== "function" && isReal) shouldForwardProp = tag.__emotion_forwardProp;
    return shouldForwardProp;
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    (0, _utils.registerStyles)(cache, serialized, isStringTag);
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        return (0, _utils.insertStyles)(cache, serialized, isStringTag);
    });
    return null;
};
var createStyled = function createStyled(tag, options) {
    if (tag === undefined) throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== undefined) {
        identifierName = options.label;
        targetClassName = options.target;
    }
    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
        var args = arguments;
        var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== undefined) styles.push("label:" + identifierName + ";");
        if (args[0] == null || args[0].raw === undefined) styles.push.apply(styles, args);
        else {
            if (args[0][0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for(; i < len; i++){
                if (args[0][i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
                styles.push(args[i], args[0][i]);
            }
        } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class
        var Styled = (0, _react1.withEmotionCache)(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
                mergedProps = {};
                for(var key in props)mergedProps[key] = props[key];
                mergedProps.theme = _react.useContext((0, _react1.ThemeContext));
            }
            if (typeof props.className === "string") className = (0, _utils.getRegisteredStyles)(cache.registered, classInterpolations, props.className);
            else if (props.className != null) className = props.className + " ";
            var serialized = (0, _serialize.serializeStyles)(styles.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== undefined) className += " " + targetClassName;
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for(var _key in props){
                if (shouldUseAs && _key === "as") continue;
                if (finalShouldForwardProp(_key)) newProps[_key] = props[_key];
            }
            newProps.className = className;
            newProps.ref = ref;
            return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
                cache: cache,
                serialized: serialized,
                isStringTag: typeof FinalTag === "string"
            }), /*#__PURE__*/ _react.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles;
        Styled.__emotion_forwardProp = shouldForwardProp;
        Object.defineProperty(Styled, "toString", {
            value: function value() {
                if (targetClassName === undefined && true) return "NO_COMPONENT_SELECTOR";
                 // $FlowFixMe: coerce undefined to string
                return "." + targetClassName;
            }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled(nextTag, (0, _extendsDefault.default)({}, options, nextOptions, {
                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles);
        };
        return Styled;
    };
};

},{"@babel/runtime/helpers/esm/extends":"fTBFS","react":"21dqq","@emotion/is-prop-valid":"9JzNk","@emotion/react":"9qiaY","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@emotion/use-insertion-effect-with-fallbacks":"lPCYn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fTBFS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>_extends);
function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9JzNk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isPropValid);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23
var isPropValid = /* #__PURE__ */ (0, _memoizeDefault.default)(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
});

},{"@emotion/memoize":"2vzJd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2vzJd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>memoize);
function memoize(fn) {
    var cache = Object.create(null);
    return function(arg) {
        if (cache[arg] === undefined) cache[arg] = fn(arg);
        return cache[arg];
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9qiaY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheProvider", ()=>(0, _emotionElementC39617D8BrowserEsmJs.C));
parcelHelpers.export(exports, "ThemeContext", ()=>(0, _emotionElementC39617D8BrowserEsmJs.T));
parcelHelpers.export(exports, "ThemeProvider", ()=>(0, _emotionElementC39617D8BrowserEsmJs.a));
parcelHelpers.export(exports, "__unsafe_useEmotionCache", ()=>(0, _emotionElementC39617D8BrowserEsmJs._));
parcelHelpers.export(exports, "useTheme", ()=>(0, _emotionElementC39617D8BrowserEsmJs.u));
parcelHelpers.export(exports, "withEmotionCache", ()=>(0, _emotionElementC39617D8BrowserEsmJs.w));
parcelHelpers.export(exports, "withTheme", ()=>(0, _emotionElementC39617D8BrowserEsmJs.b));
parcelHelpers.export(exports, "ClassNames", ()=>ClassNames);
parcelHelpers.export(exports, "Global", ()=>Global);
parcelHelpers.export(exports, "createElement", ()=>jsx);
parcelHelpers.export(exports, "css", ()=>css);
parcelHelpers.export(exports, "jsx", ()=>jsx);
parcelHelpers.export(exports, "keyframes", ()=>keyframes);
var _emotionElementC39617D8BrowserEsmJs = require("./emotion-element-c39617d8.browser.esm.js");
var _react = require("react");
var _utils = require("@emotion/utils");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var _serialize = require("@emotion/serialize");
var _cache = require("@emotion/cache");
var _extends = require("@babel/runtime/helpers/extends");
var _weakMemoize = require("@emotion/weak-memoize");
var _emotionReactIsolatedHnrsBrowserEsmJs = require("../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js");
var _hoistNonReactStatics = require("hoist-non-react-statics");
var global = arguments[3];
var pkg = {
    name: "@emotion/react",
    version: "11.11.3",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    exports: {
        ".": {
            module: {
                worker: "./dist/emotion-react.worker.esm.js",
                browser: "./dist/emotion-react.browser.esm.js",
                "default": "./dist/emotion-react.esm.js"
            },
            "import": "./dist/emotion-react.cjs.mjs",
            "default": "./dist/emotion-react.cjs.js"
        },
        "./jsx-runtime": {
            module: {
                worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
                browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
                "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
        },
        "./_isolated-hnrs": {
            module: {
                worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
                browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
                "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
        },
        "./jsx-dev-runtime": {
            module: {
                worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
                browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
                "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
        },
        "./package.json": "./package.json",
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
            types: {
                "import": "./macro.d.mts",
                "default": "./macro.d.ts"
            },
            "default": "./macro.js"
        }
    },
    types: "types/index.d.ts",
    files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "_isolated-hnrs",
        "types/*.d.ts",
        "macro.*"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
        "test:typescript": "dtslint types"
    },
    dependencies: {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.11.0",
        "@emotion/cache": "^11.11.0",
        "@emotion/serialize": "^1.1.3",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
        "@emotion/utils": "^1.2.1",
        "@emotion/weak-memoize": "^0.3.1",
        "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
        react: ">=16.8.0"
    },
    peerDependenciesMeta: {
        "@types/react": {
            optional: true
        }
    },
    devDependencies: {
        "@definitelytyped/dtslint": "0.0.112",
        "@emotion/css": "11.11.2",
        "@emotion/css-prettifier": "1.1.3",
        "@emotion/server": "11.11.0",
        "@emotion/styled": "11.11.0",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1",
        typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
        access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
        entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
        ],
        umdName: "emotionReact",
        exports: {
            envConditions: [
                "browser",
                "worker"
            ],
            extra: {
                "./types/css-prop": "./types/css-prop.d.ts",
                "./macro": {
                    types: {
                        "import": "./macro.d.mts",
                        "default": "./macro.d.ts"
                    },
                    "default": "./macro.js"
                }
            }
        }
    }
};
var jsx = function jsx(type, props) {
    var args = arguments;
    if (props == null || !(0, _emotionElementC39617D8BrowserEsmJs.h).call(props, "css")) // $FlowFixMe
    return _react.createElement.apply(undefined, args);
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = (0, _emotionElementC39617D8BrowserEsmJs.E);
    createElementArgArray[1] = (0, _emotionElementC39617D8BrowserEsmJs.c)(type, props);
    for(var i = 2; i < argsLength; i++)createElementArgArray[i] = args[i];
     // $FlowFixMe
    return _react.createElement.apply(null, createElementArgArray);
};
var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag
var Global = /* #__PURE__ */ (0, _emotionElementC39617D8BrowserEsmJs.w)(function(props, cache) {
    if (!warnedAboutCssPropForGlobal && // probably using the custom createElement which
    // means it will be turned into a className prop
    // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
    (props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
    }
    var styles = props.styles;
    var serialized = (0, _serialize.serializeStyles)([
        styles
    ], undefined, _react.useContext((0, _emotionElementC39617D8BrowserEsmJs.T)));
    if (!(0, _emotionElementC39617D8BrowserEsmJs.i)) {
        var _ref;
        var serializedNames = serialized.name;
        var serializedStyles = serialized.styles;
        var next = serialized.next;
        while(next !== undefined){
            serializedNames += " " + next.name;
            serializedStyles += next.styles;
            next = next.next;
        }
        var shouldCache = cache.compat === true;
        var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
        }, cache.sheet, shouldCache);
        if (shouldCache) return null;
        return /*#__PURE__*/ _react.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref.nonce = cache.sheet.nonce, _ref));
    } // yes, i know these hooks are used conditionally
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything
    var sheetRef = _react.useRef();
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback)(function() {
        var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675
        var sheet = new cache.sheet.constructor({
            key: key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false; // $FlowFixMe
        var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
        if (cache.sheet.tags.length) sheet.before = cache.sheet.tags[0];
        if (node !== null) {
            rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s
            node.setAttribute("data-emotion", key);
            sheet.hydrate([
                node
            ]);
        }
        sheetRef.current = [
            sheet,
            rehydrating
        ];
        return function() {
            sheet.flush();
        };
    }, [
        cache
    ]);
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback)(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
        }
        if (serialized.next !== undefined) // insert keyframes
        (0, _utils.insertStyles)(cache, serialized.next, true);
        if (sheet.tags.length) {
            // if this doesn't exist then it will be null so the style element will be appended
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
    }, [
        cache,
        serialized.name
    ]);
    return null;
});
Global.displayName = "EmotionGlobal";
function css() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return (0, _serialize.serializeStyles)(args);
}
var keyframes = function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name; // $FlowFixMe
    return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
    };
};
var classnames = function classnames(args) {
    var len = args.length;
    var i = 0;
    var cls = "";
    for(; i < len; i++){
        var arg = args[i];
        if (arg == null) continue;
        var toAdd = void 0;
        switch(typeof arg){
            case "boolean":
                break;
            case "object":
                if (Array.isArray(arg)) toAdd = classnames(arg);
                else {
                    if (arg.styles !== undefined && arg.name !== undefined) console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                    toAdd = "";
                    for(var k in arg)if (arg[k] && k) {
                        toAdd && (toAdd += " ");
                        toAdd += k;
                    }
                }
                break;
            default:
                toAdd = arg;
        }
        if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
        }
    }
    return cls;
};
function merge(registered, css, className) {
    var registeredStyles = [];
    var rawClassName = (0, _utils.getRegisteredStyles)(registered, registeredStyles, className);
    if (registeredStyles.length < 2) return className;
    return rawClassName + css(registeredStyles);
}
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serializedArr = _ref.serializedArr;
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        for(var i = 0; i < serializedArr.length; i++)(0, _utils.insertStyles)(cache, serializedArr[i], false);
    });
    return null;
};
var ClassNames = /* #__PURE__ */ (0, _emotionElementC39617D8BrowserEsmJs.w)(function(props, cache) {
    var hasRendered = false;
    var serializedArr = [];
    var css = function css() {
        if (hasRendered && true) throw new Error("css can only be used during render");
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        var serialized = (0, _serialize.serializeStyles)(args, cache.registered);
        serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`
        (0, _utils.registerStyles)(cache, serialized, false);
        return cache.key + "-" + serialized.name;
    };
    var cx = function cx() {
        if (hasRendered && true) throw new Error("cx can only be used during render");
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        return merge(cache.registered, css, classnames(args));
    };
    var content = {
        css: css,
        cx: cx,
        theme: _react.useContext((0, _emotionElementC39617D8BrowserEsmJs.T))
    };
    var ele = props.children(content);
    hasRendered = true;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
        cache: cache,
        serializedArr: serializedArr
    }), ele);
});
ClassNames.displayName = "EmotionClassNames";
var isBrowser = true; // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked
var isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
if (isBrowser && !isTestEnv) {
    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
    var globalContext = typeof globalThis !== "undefined" ? globalThis // eslint-disable-line no-undef
     : isBrowser ? window : global;
    var globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
    if (globalContext[globalKey]) console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    globalContext[globalKey] = true;
}

},{"./emotion-element-c39617d8.browser.esm.js":"dsRqI","react":"21dqq","@emotion/utils":"6UI8e","@emotion/use-insertion-effect-with-fallbacks":"lPCYn","@emotion/serialize":"kS2E2","@emotion/cache":"3Umtj","@babel/runtime/helpers/extends":"vw3vn","@emotion/weak-memoize":"grJxk","../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js":"cUsDD","hoist-non-react-statics":"1GfsB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dsRqI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "C", ()=>CacheProvider);
parcelHelpers.export(exports, "E", ()=>Emotion$1);
parcelHelpers.export(exports, "T", ()=>ThemeContext);
parcelHelpers.export(exports, "_", ()=>__unsafe_useEmotionCache);
parcelHelpers.export(exports, "a", ()=>ThemeProvider);
parcelHelpers.export(exports, "b", ()=>withTheme);
parcelHelpers.export(exports, "c", ()=>createEmotionProps);
parcelHelpers.export(exports, "h", ()=>hasOwnProperty);
parcelHelpers.export(exports, "i", ()=>isBrowser);
parcelHelpers.export(exports, "u", ()=>useTheme);
parcelHelpers.export(exports, "w", ()=>withEmotionCache);
var _react = require("react");
var _cache = require("@emotion/cache");
var _cacheDefault = parcelHelpers.interopDefault(_cache);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _weakMemoize = require("@emotion/weak-memoize");
var _weakMemoizeDefault = parcelHelpers.interopDefault(_weakMemoize);
var _emotionReactIsolatedHnrsBrowserEsmJs = require("../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js");
var _emotionReactIsolatedHnrsBrowserEsmJsDefault = parcelHelpers.interopDefault(_emotionReactIsolatedHnrsBrowserEsmJs);
var _utils = require("@emotion/utils");
var _serialize = require("@emotion/serialize");
var _useInsertionEffectWithFallbacks = require("@emotion/use-insertion-effect-with-fallbacks");
var isBrowser = true;
var hasOwnProperty = {}.hasOwnProperty;
var EmotionCacheContext = /* #__PURE__ */ _react.createContext(// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== "undefined" ? /* #__PURE__ */ (0, _cacheDefault.default)({
    key: "css"
}) : null);
EmotionCacheContext.displayName = "EmotionCacheContext";
var CacheProvider = EmotionCacheContext.Provider;
var __unsafe_useEmotionCache = function useEmotionCache() {
    return (0, _react.useContext)(EmotionCacheContext);
};
var withEmotionCache = function withEmotionCache(func) {
    // $FlowFixMe
    return /*#__PURE__*/ (0, _react.forwardRef)(function(props, ref) {
        // the cache will never be null in the browser
        var cache = (0, _react.useContext)(EmotionCacheContext);
        return func(props, cache, ref);
    });
};
if (!isBrowser) withEmotionCache = function withEmotionCache(func) {
    return function(props) {
        var cache = (0, _react.useContext)(EmotionCacheContext);
        if (cache === null) {
            // yes, we're potentially creating this on every render
            // it doesn't actually matter though since it's only on the server
            // so there will only every be a single render
            // that could change in the future because of suspense and etc. but for now,
            // this works and i don't want to optimise for a future thing that we aren't sure about
            cache = (0, _cacheDefault.default)({
                key: "css"
            });
            return /*#__PURE__*/ _react.createElement(EmotionCacheContext.Provider, {
                value: cache
            }, func(props, cache));
        } else return func(props, cache);
    };
};
var ThemeContext = /* #__PURE__ */ _react.createContext({});
ThemeContext.displayName = "EmotionThemeContext";
var useTheme = function useTheme() {
    return _react.useContext(ThemeContext);
};
var getTheme = function getTheme(outerTheme, theme) {
    if (typeof theme === "function") {
        var mergedTheme = theme(outerTheme);
        if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
        return mergedTheme;
    }
    if (theme == null || typeof theme !== "object" || Array.isArray(theme)) throw new Error("[ThemeProvider] Please make your theme prop a plain object");
    return (0, _extendsDefault.default)({}, outerTheme, theme);
};
var createCacheWithTheme = /* #__PURE__ */ (0, _weakMemoizeDefault.default)(function(outerTheme) {
    return (0, _weakMemoizeDefault.default)(function(theme) {
        return getTheme(outerTheme, theme);
    });
});
var ThemeProvider = function ThemeProvider(props) {
    var theme = _react.useContext(ThemeContext);
    if (props.theme !== theme) theme = createCacheWithTheme(theme)(props.theme);
    return /*#__PURE__*/ _react.createElement(ThemeContext.Provider, {
        value: theme
    }, props.children);
};
function withTheme(Component) {
    var componentName = Component.displayName || Component.name || "Component";
    var render = function render(props, ref) {
        var theme = _react.useContext(ThemeContext);
        return /*#__PURE__*/ _react.createElement(Component, (0, _extendsDefault.default)({
            theme: theme,
            ref: ref
        }, props));
    }; // $FlowFixMe
    var WithTheme = /*#__PURE__*/ _react.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return (0, _emotionReactIsolatedHnrsBrowserEsmJsDefault.default)(WithTheme, Component);
}
var getLastPart = function getLastPart(functionName) {
    // The match may be something like 'Object.createEmotionProps' or
    // 'Loader.prototype.render'
    var parts = functionName.split(".");
    return parts[parts.length - 1];
};
var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {
    // V8
    var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
    if (match) return getLastPart(match[1]); // Safari / Firefox
    match = /^([A-Za-z0-9$.]+)@/.exec(line);
    if (match) return getLastPart(match[1]);
    return undefined;
};
var internalReactFunctionNames = /* #__PURE__ */ new Set([
    "renderWithHooks",
    "processChild",
    "finishClassComponent",
    "renderToString"
]); // These identifiers come from error stacks, so they have to be valid JS
// identifiers, thus we only need to replace what is a valid character for JS,
// but not for CSS.
var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
    return identifier.replace(/\$/g, "-");
};
var getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {
    if (!stackTrace) return undefined;
    var lines = stackTrace.split("\n");
    for(var i = 0; i < lines.length; i++){
        var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just "Error"
        if (!functionName) continue; // If we reach one of these, we have gone too far and should quit
        if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an
        // uppercase letter
        if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);
    }
    return undefined;
};
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var createEmotionProps = function createEmotionProps(type, props) {
    if (typeof props.css === "string" && // check if there is a css declaration
    props.css.indexOf(":") !== -1) throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
    var newProps = {};
    for(var key in props)if (hasOwnProperty.call(props, key)) newProps[key] = props[key];
    newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when
    // the label hasn't already been computed
    if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
        var label = getLabelFromStackTrace(new Error().stack);
        if (label) newProps[labelPropName] = label;
    }
    return newProps;
};
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    (0, _utils.registerStyles)(cache, serialized, isStringTag);
    (0, _useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback)(function() {
        return (0, _utils.insertStyles)(cache, serialized, isStringTag);
    });
    return null;
};
var Emotion = /* #__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible
    if (typeof cssProp === "string" && cache.registered[cssProp] !== undefined) cssProp = cache.registered[cssProp];
    var WrappedComponent = props[typePropName];
    var registeredStyles = [
        cssProp
    ];
    var className = "";
    if (typeof props.className === "string") className = (0, _utils.getRegisteredStyles)(cache.registered, registeredStyles, props.className);
    else if (props.className != null) className = props.className + " ";
    var serialized = (0, _serialize.serializeStyles)(registeredStyles, undefined, _react.useContext(ThemeContext));
    if (serialized.name.indexOf("-") === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) serialized = (0, _serialize.serializeStyles)([
            serialized,
            "label:" + labelFromStack + ";"
        ]);
    }
    className += cache.key + "-" + serialized.name;
    var newProps = {};
    for(var key in props)if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) newProps[key] = props[key];
    newProps.ref = ref;
    newProps.className = className;
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement(Insertion, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof WrappedComponent === "string"
    }), /*#__PURE__*/ _react.createElement(WrappedComponent, newProps));
});
Emotion.displayName = "EmotionCssPropInternal";
var Emotion$1 = Emotion;

},{"react":"21dqq","@emotion/cache":"3Umtj","@babel/runtime/helpers/esm/extends":"fTBFS","@emotion/weak-memoize":"grJxk","../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js":"cUsDD","@emotion/utils":"6UI8e","@emotion/serialize":"kS2E2","@emotion/use-insertion-effect-with-fallbacks":"lPCYn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Umtj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>createCache);
var _sheet = require("@emotion/sheet");
var _stylis = require("stylis");
var _weakMemoize = require("@emotion/weak-memoize");
var _memoize = require("@emotion/memoize");
var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
    var previous = 0;
    var character = 0;
    while(true){
        previous = character;
        character = (0, _stylis.peek)(); // &\f
        if (previous === 38 && character === 12) points[index] = 1;
        if ((0, _stylis.token)(character)) break;
        (0, _stylis.next)();
    }
    return (0, _stylis.slice)(begin, (0, _stylis.position));
};
var toRules = function toRules(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;
    do switch((0, _stylis.token)(character)){
        case 0:
            // &\f
            if (character === 38 && (0, _stylis.peek)() === 12) // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
            // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
            // and when it should just concatenate the outer and inner selectors
            // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
            points[index] = 1;
            parsed[index] += identifierWithPointTracking((0, _stylis.position) - 1, points, index);
            break;
        case 2:
            parsed[index] += (0, _stylis.delimit)(character);
            break;
        case 4:
            // comma
            if (character === 44) {
                // colon
                parsed[++index] = (0, _stylis.peek)() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
            }
        // fallthrough
        default:
            parsed[index] += (0, _stylis.from)(character);
    }
    while (character = (0, _stylis.next)());
    return parsed;
};
var getRules = function getRules(value, points) {
    return (0, _stylis.dealloc)(toRules((0, _stylis.alloc)(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11
var fixedElements = /* #__PURE__ */ new WeakMap();
var compat = function compat(element) {
    if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) return;
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while(parent.type !== "rule"){
        parent = parent.parent;
        if (!parent) return;
    } // short-circuit for the simplest case
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) return;
     // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"
    if (isImplicitRule) return;
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for(var i = 0, k = 0; i < rules.length; i++)for(var j = 0; j < parentRules.length; j++, k++)element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
};
var removeLabel = function removeLabel(element) {
    if (element.type === "decl") {
        var value = element.value;
        if (value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98) {
            // this ignores label
            element["return"] = "";
            element.value = "";
        }
    }
};
var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var isIgnoringComment = function isIgnoringComment(element) {
    return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
    return function(element, index, children) {
        if (element.type !== "rule" || cache.compat) return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses) {
            var isNested = !!element.parent; // in nested rules comments become children of the "auto-inserted" rule and that's always the `element.parent`
            //
            // considering this input:
            // .a {
            //   .b /* comm */ {}
            //   color: hotpink;
            // }
            // we get output corresponding to this:
            // .a {
            //   & {
            //     /* comm */
            //     color: hotpink;
            //   }
            //   .b {}
            // }
            var commentContainer = isNested ? element.parent.children : children;
            for(var i = commentContainer.length - 1; i >= 0; i--){
                var node = commentContainer[i];
                if (node.line < element.line) break;
                 // it is quite weird but comments are *usually* put at `column: element.column - 1`
                // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
                // this will also match inputs like this:
                // .a {
                //   /* comm */
                //   .b {}
                // }
                //
                // but that is fine
                //
                // it would be the easiest to change the placement of the comment to be the first child of the rule:
                // .a {
                //   .b { /* comm */ }
                // }
                // with such inputs we wouldn't have to search for the comment at all
                // TODO: consider changing this comment placement in the next major version
                if (node.column < element.column) {
                    if (isIgnoringComment(node)) return;
                    break;
                }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
                console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
        }
    };
};
var isImportRule = function isImportRule(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
    for(var i = index - 1; i >= 0; i--){
        if (!isImportRule(children[i])) return true;
    }
    return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user
var nullifyElement = function nullifyElement(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
};
var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
    if (!isImportRule(element)) return;
    if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
    }
};
/* eslint-disable no-fallthrough */ function prefix(value, length) {
    switch((0, _stylis.hash)(value, length)){
        // color-adjust
        case 5103:
            return (0, _stylis.WEBKIT) + "print-" + value + value;
        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return (0, _stylis.WEBKIT) + value + value;
        // appearance, user-select, transform, hyphens, text-size-adjust
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MOZ) + value + (0, _stylis.MS) + value + value;
        // flex, flex-direction
        case 6828:
        case 4268:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + value + value;
        // order
        case 6165:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + "flex-" + value + value;
        // align-items
        case 5187:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.replace)(value, /(\w+).+(:[^]+)/, (0, _stylis.WEBKIT) + "box-$1$2" + (0, _stylis.MS) + "flex-$1$2") + value;
        // align-self
        case 5443:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + "flex-item-" + (0, _stylis.replace)(value, /flex-|-self/, "") + value;
        // align-content
        case 4675:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + "flex-line-pack" + (0, _stylis.replace)(value, /align-content|flex-|-self/, "") + value;
        // flex-shrink
        case 5548:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, "shrink", "negative") + value;
        // flex-basis
        case 5292:
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, "basis", "preferred-size") + value;
        // flex-grow
        case 6060:
            return (0, _stylis.WEBKIT) + "box-" + (0, _stylis.replace)(value, "-grow", "") + (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, "grow", "positive") + value;
        // transition
        case 4554:
            return (0, _stylis.WEBKIT) + (0, _stylis.replace)(value, /([^-])(transform)/g, "$1" + (0, _stylis.WEBKIT) + "$2") + value;
        // cursor
        case 6187:
            return (0, _stylis.replace)((0, _stylis.replace)((0, _stylis.replace)(value, /(zoom-|grab)/, (0, _stylis.WEBKIT) + "$1"), /(image-set)/, (0, _stylis.WEBKIT) + "$1"), value, "") + value;
        // background, background-image
        case 5495:
        case 3959:
            return (0, _stylis.replace)(value, /(image-set\([^]*)/, (0, _stylis.WEBKIT) + "$1" + "$`$1");
        // justify-content
        case 4968:
            return (0, _stylis.replace)((0, _stylis.replace)(value, /(.+:)(flex-)?(.*)/, (0, _stylis.WEBKIT) + "box-pack:$3" + (0, _stylis.MS) + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + (0, _stylis.WEBKIT) + value + value;
        // (margin|padding)-inline-(start|end)
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return (0, _stylis.replace)(value, /(.+)-inline(.+)/, (0, _stylis.WEBKIT) + "$1$2") + value;
        // (min|max)?(width|height|inline-size|block-size)
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            // stretch, max-content, min-content, fill-available
            if ((0, _stylis.strlen)(value) - 1 - length > 6) switch((0, _stylis.charat)(value, length + 1)){
                // (m)ax-content, (m)in-content
                case 109:
                    // -
                    if ((0, _stylis.charat)(value, length + 4) !== 45) break;
                // (f)ill-available, (f)it-content
                case 102:
                    return (0, _stylis.replace)(value, /(.+:)(.+)-([^]+)/, "$1" + (0, _stylis.WEBKIT) + "$2-$3" + "$1" + (0, _stylis.MOZ) + ((0, _stylis.charat)(value, length + 3) == 108 ? "$3" : "$2-$3")) + value;
                // (s)tretch
                case 115:
                    return ~(0, _stylis.indexof)(value, "stretch") ? prefix((0, _stylis.replace)(value, "stretch", "fill-available"), length) + value : value;
            }
            break;
        // position: sticky
        case 4949:
            // (s)ticky?
            if ((0, _stylis.charat)(value, length + 1) !== 115) break;
        // display: (flex|inline-flex)
        case 6444:
            switch((0, _stylis.charat)(value, (0, _stylis.strlen)(value) - 3 - (~(0, _stylis.indexof)(value, "!important") && 10))){
                // stic(k)y
                case 107:
                    return (0, _stylis.replace)(value, ":", ":" + (0, _stylis.WEBKIT)) + value;
                // (inline-)?fl(e)x
                case 101:
                    return (0, _stylis.replace)(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + (0, _stylis.WEBKIT) + ((0, _stylis.charat)(value, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + (0, _stylis.WEBKIT) + "$2$3" + "$1" + (0, _stylis.MS) + "$2box$3") + value;
            }
            break;
        // writing-mode
        case 5936:
            switch((0, _stylis.charat)(value, length + 11)){
                // vertical-l(r)
                case 114:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
                // vertical-r(l)
                case 108:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
                // horizontal(-)tb
                case 45:
                    return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + (0, _stylis.replace)(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
            }
            return (0, _stylis.WEBKIT) + value + (0, _stylis.MS) + value + value;
    }
    return value;
}
var prefixer = function prefixer(element, index, children, callback) {
    if (element.length > -1) {
        if (!element["return"]) switch(element.type){
            case 0, _stylis.DECLARATION:
                element["return"] = prefix(element.value, element.length);
                break;
            case 0, _stylis.KEYFRAMES:
                return (0, _stylis.serialize)([
                    (0, _stylis.copy)(element, {
                        value: (0, _stylis.replace)(element.value, "@", "@" + (0, _stylis.WEBKIT))
                    })
                ], callback);
            case 0, _stylis.RULESET:
                if (element.length) return (0, _stylis.combine)(element.props, function(value) {
                    switch((0, _stylis.match)(value, /(::plac\w+|:read-\w+)/)){
                        // :read-(only|write)
                        case ":read-only":
                        case ":read-write":
                            return (0, _stylis.serialize)([
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(read-\w+)/, ":" + (0, _stylis.MOZ) + "$1")
                                    ]
                                })
                            ], callback);
                        // :placeholder
                        case "::placeholder":
                            return (0, _stylis.serialize)([
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, ":" + (0, _stylis.WEBKIT) + "input-$1")
                                    ]
                                }),
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, ":" + (0, _stylis.MOZ) + "$1")
                                    ]
                                }),
                                (0, _stylis.copy)(element, {
                                    props: [
                                        (0, _stylis.replace)(value, /:(plac\w+)/, (0, _stylis.MS) + "input-$1")
                                    ]
                                })
                            ], callback);
                    }
                    return "";
                });
        }
    }
};
var defaultStylisPlugins = [
    prefixer
];
var createCache = function createCache(options) {
    var key = options.key;
    if (!key) throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    if (key === "css") {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component
        Array.prototype.forEach.call(ssrStyles, function(node) {
            // we want to only move elements which have a space in the data-emotion attribute value
            // because that indicates that it is an Emotion 11 server-side rendered style elements
            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
            // will not result in the Emotion 10 styles being destroyed
            var dataEmotionAttribute = node.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) return;
            document.head.appendChild(node);
            node.setAttribute("data-s", "");
        });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    // $FlowFixMe
    if (/[^a-z-]/.test(key)) throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    container = options.container || document.head;
    Array.prototype.forEach.call(// means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node) {
        var attrib = node.getAttribute("data-emotion").split(" "); // $FlowFixMe
        for(var i = 1; i < attrib.length; i++)inserted[attrib[i]] = true;
        nodesToHydrate.push(node);
    });
    var _insert;
    var omnipresentPlugins = [
        compat,
        removeLabel
    ];
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat () {
            return cache.compat;
        }
    }), incorrectImportAlarm);
    var currentSheet;
    var finalizingPlugins = [
        (0, _stylis.stringify),
        function(element) {
            if (!element.root) {
                if (element["return"]) currentSheet.insert(element["return"]);
                else if (element.value && element.type !== (0, _stylis.COMMENT)) // insert empty rule in non-production environments
                // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
                currentSheet.insert(element.value + "{}");
            }
        }
    ];
    var serializer = (0, _stylis.middleware)(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis(styles) {
        return (0, _stylis.serialize)((0, _stylis.compile)(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
        currentSheet = sheet;
        if (serialized.map !== undefined) currentSheet = {
            insert: function insert(rule) {
                sheet.insert(rule + serialized.map);
            }
        };
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) cache.inserted[serialized.name] = true;
    };
    var cache = {
        key: key,
        sheet: new (0, _sheet.StyleSheet)({
            key: key,
            container: container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {},
        insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
};

},{"@emotion/sheet":"1BWeq","stylis":"bMCXt","@emotion/weak-memoize":"grJxk","@emotion/memoize":"2vzJd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1BWeq":[function(require,module,exports) {
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/ // $FlowFixMe
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StyleSheet", ()=>StyleSheet);
function sheetForTag(tag) {
    if (tag.sheet) // $FlowFixMe
    return tag.sheet;
     // this weirdness brought to you by firefox
    /* istanbul ignore next */ for(var i = 0; i < document.styleSheets.length; i++){
        if (document.styleSheets[i].ownerNode === tag) // $FlowFixMe
        return document.styleSheets[i];
    }
}
function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== undefined) tag.setAttribute("nonce", options.nonce);
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
}
var StyleSheet = /*#__PURE__*/ function() {
    // Using Node instead of HTMLElement since container may be a ShadowRoot
    function StyleSheet(options) {
        var _this = this;
        this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
                if (_this.insertionPoint) before = _this.insertionPoint.nextSibling;
                else if (_this.prepend) before = _this.container.firstChild;
                else before = _this.before;
            } else before = _this.tags[_this.tags.length - 1].nextSibling;
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === undefined ? false : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
    }
    var _proto = StyleSheet.prototype;
    _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) this._insertTag(createStyleElement(this));
        var tag = this.tags[this.tags.length - 1];
        var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) // this would only cause problem in speedy mode
        // but we don't want enabling speedy to affect the observable behavior
        // so we report this error at all times
        console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
        if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
                // this is the ultrafast version, works across browsers
                // the big drawback is that the css won't be editable in devtools
                sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
                if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) console.error('There was a problem inserting the following rule: "' + rule + '"', e);
            }
        } else tag.appendChild(document.createTextNode(rule));
        this.ctr++;
    };
    _proto.flush = function flush() {
        // $FlowFixMe
        this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        this._alreadyInsertedOrderInsensitiveRule = false;
    };
    return StyleSheet;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bMCXt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CHARSET", ()=>f);
parcelHelpers.export(exports, "COMMENT", ()=>n);
parcelHelpers.export(exports, "COUNTER_STYLE", ()=>w);
parcelHelpers.export(exports, "DECLARATION", ()=>s);
parcelHelpers.export(exports, "DOCUMENT", ()=>v);
parcelHelpers.export(exports, "FONT_FACE", ()=>b);
parcelHelpers.export(exports, "FONT_FEATURE_VALUES", ()=>d);
parcelHelpers.export(exports, "IMPORT", ()=>i);
parcelHelpers.export(exports, "KEYFRAMES", ()=>h);
parcelHelpers.export(exports, "LAYER", ()=>$);
parcelHelpers.export(exports, "MEDIA", ()=>u);
parcelHelpers.export(exports, "MOZ", ()=>r);
parcelHelpers.export(exports, "MS", ()=>e);
parcelHelpers.export(exports, "NAMESPACE", ()=>p);
parcelHelpers.export(exports, "PAGE", ()=>t);
parcelHelpers.export(exports, "RULESET", ()=>c);
parcelHelpers.export(exports, "SUPPORTS", ()=>l);
parcelHelpers.export(exports, "VIEWPORT", ()=>o);
parcelHelpers.export(exports, "WEBKIT", ()=>a);
parcelHelpers.export(exports, "abs", ()=>g);
parcelHelpers.export(exports, "alloc", ()=>V);
parcelHelpers.export(exports, "append", ()=>q);
parcelHelpers.export(exports, "assign", ()=>m);
parcelHelpers.export(exports, "caret", ()=>R);
parcelHelpers.export(exports, "char", ()=>L);
parcelHelpers.export(exports, "character", ()=>H);
parcelHelpers.export(exports, "characters", ()=>I);
parcelHelpers.export(exports, "charat", ()=>O);
parcelHelpers.export(exports, "column", ()=>E);
parcelHelpers.export(exports, "combine", ()=>B);
parcelHelpers.export(exports, "comment", ()=>ue);
parcelHelpers.export(exports, "commenter", ()=>ae);
parcelHelpers.export(exports, "compile", ()=>ce);
parcelHelpers.export(exports, "copy", ()=>K);
parcelHelpers.export(exports, "dealloc", ()=>W);
parcelHelpers.export(exports, "declaration", ()=>ie);
parcelHelpers.export(exports, "delimit", ()=>X);
parcelHelpers.export(exports, "delimiter", ()=>re);
parcelHelpers.export(exports, "escaping", ()=>ee);
parcelHelpers.export(exports, "from", ()=>k);
parcelHelpers.export(exports, "hash", ()=>x);
parcelHelpers.export(exports, "identifier", ()=>ne);
parcelHelpers.export(exports, "indexof", ()=>C);
parcelHelpers.export(exports, "length", ()=>F);
parcelHelpers.export(exports, "line", ()=>D);
parcelHelpers.export(exports, "match", ()=>j);
parcelHelpers.export(exports, "middleware", ()=>ve);
parcelHelpers.export(exports, "namespace", ()=>be);
parcelHelpers.export(exports, "next", ()=>P);
parcelHelpers.export(exports, "node", ()=>J);
parcelHelpers.export(exports, "parse", ()=>se);
parcelHelpers.export(exports, "peek", ()=>Q);
parcelHelpers.export(exports, "position", ()=>G);
parcelHelpers.export(exports, "prefix", ()=>fe);
parcelHelpers.export(exports, "prefixer", ()=>he);
parcelHelpers.export(exports, "prev", ()=>N);
parcelHelpers.export(exports, "replace", ()=>z);
parcelHelpers.export(exports, "ruleset", ()=>te);
parcelHelpers.export(exports, "rulesheet", ()=>pe);
parcelHelpers.export(exports, "serialize", ()=>oe);
parcelHelpers.export(exports, "sizeof", ()=>S);
parcelHelpers.export(exports, "slice", ()=>T);
parcelHelpers.export(exports, "stringify", ()=>le);
parcelHelpers.export(exports, "strlen", ()=>M);
parcelHelpers.export(exports, "substr", ()=>A);
parcelHelpers.export(exports, "token", ()=>U);
parcelHelpers.export(exports, "tokenize", ()=>Y);
parcelHelpers.export(exports, "tokenizer", ()=>_);
parcelHelpers.export(exports, "trim", ()=>y);
parcelHelpers.export(exports, "whitespace", ()=>Z);
var e = "-ms-";
var r = "-moz-";
var a = "-webkit-";
var n = "comm";
var c = "rule";
var s = "decl";
var t = "@page";
var u = "@media";
var i = "@import";
var f = "@charset";
var o = "@viewport";
var l = "@supports";
var v = "@document";
var p = "@namespace";
var h = "@keyframes";
var b = "@font-face";
var w = "@counter-style";
var d = "@font-feature-values";
var $ = "@layer";
var g = Math.abs;
var k = String.fromCharCode;
var m = Object.assign;
function x(e, r) {
    return O(e, 0) ^ 45 ? (((r << 2 ^ O(e, 0)) << 2 ^ O(e, 1)) << 2 ^ O(e, 2)) << 2 ^ O(e, 3) : 0;
}
function y(e) {
    return e.trim();
}
function j(e, r) {
    return (e = r.exec(e)) ? e[0] : e;
}
function z(e, r, a) {
    return e.replace(r, a);
}
function C(e, r) {
    return e.indexOf(r);
}
function O(e, r) {
    return e.charCodeAt(r) | 0;
}
function A(e, r, a) {
    return e.slice(r, a);
}
function M(e) {
    return e.length;
}
function S(e) {
    return e.length;
}
function q(e, r) {
    return r.push(e), e;
}
function B(e, r) {
    return e.map(r).join("");
}
var D = 1;
var E = 1;
var F = 0;
var G = 0;
var H = 0;
var I = "";
function J(e, r, a, n, c, s, t) {
    return {
        value: e,
        root: r,
        parent: a,
        type: n,
        props: c,
        children: s,
        line: D,
        column: E,
        length: t,
        return: ""
    };
}
function K(e, r) {
    return m(J("", null, null, "", null, null, 0), e, {
        length: -e.length
    }, r);
}
function L() {
    return H;
}
function N() {
    H = G > 0 ? O(I, --G) : 0;
    if (E--, H === 10) E = 1, D--;
    return H;
}
function P() {
    H = G < F ? O(I, G++) : 0;
    if (E++, H === 10) E = 1, D++;
    return H;
}
function Q() {
    return O(I, G);
}
function R() {
    return G;
}
function T(e, r) {
    return A(I, e, r);
}
function U(e) {
    switch(e){
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5;
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        case 59:
        case 123:
        case 125:
            return 4;
        case 58:
            return 3;
        case 34:
        case 39:
        case 40:
        case 91:
            return 2;
        case 41:
        case 93:
            return 1;
    }
    return 0;
}
function V(e) {
    return D = E = 1, F = M(I = e), G = 0, [];
}
function W(e) {
    return I = "", e;
}
function X(e) {
    return y(T(G - 1, re(e === 91 ? e + 2 : e === 40 ? e + 1 : e)));
}
function Y(e) {
    return W(_(V(e)));
}
function Z(e) {
    while(H = Q())if (H < 33) P();
    else break;
    return U(e) > 2 || U(H) > 3 ? "" : " ";
}
function _(e) {
    while(P())switch(U(H)){
        case 0:
            q(ne(G - 1), e);
            break;
        case 2:
            q(X(H), e);
            break;
        default:
            q(k(H), e);
    }
    return e;
}
function ee(e, r) {
    while(--r && P())if (H < 48 || H > 102 || H > 57 && H < 65 || H > 70 && H < 97) break;
    return T(e, R() + (r < 6 && Q() == 32 && P() == 32));
}
function re(e) {
    while(P())switch(H){
        case e:
            return G;
        case 34:
        case 39:
            if (e !== 34 && e !== 39) re(H);
            break;
        case 40:
            if (e === 41) re(e);
            break;
        case 92:
            P();
            break;
    }
    return G;
}
function ae(e, r) {
    while(P())if (e + H === 57) break;
    else if (e + H === 84 && Q() === 47) break;
    return "/*" + T(r, G - 1) + "*" + k(e === 47 ? e : P());
}
function ne(e) {
    while(!U(Q()))P();
    return T(e, G);
}
function ce(e) {
    return W(se("", null, null, null, [
        ""
    ], e = V(e), 0, [
        0
    ], e));
}
function se(e, r, a, n, c, s, t, u, i) {
    var f = 0;
    var o = 0;
    var l = t;
    var v = 0;
    var p = 0;
    var h = 0;
    var b = 1;
    var w = 1;
    var d = 1;
    var $ = 0;
    var g = "";
    var m = c;
    var x = s;
    var y = n;
    var j = g;
    while(w)switch(h = $, $ = P()){
        case 40:
            if (h != 108 && O(j, l - 1) == 58) {
                if (C(j += z(X($), "&", "&\f"), "&\f") != -1) d = -1;
                break;
            }
        case 34:
        case 39:
        case 91:
            j += X($);
            break;
        case 9:
        case 10:
        case 13:
        case 32:
            j += Z(h);
            break;
        case 92:
            j += ee(R() - 1, 7);
            continue;
        case 47:
            switch(Q()){
                case 42:
                case 47:
                    q(ue(ae(P(), R()), r, a), i);
                    break;
                default:
                    j += "/";
            }
            break;
        case 123 * b:
            u[f++] = M(j) * d;
        case 125 * b:
        case 59:
        case 0:
            switch($){
                case 0:
                case 125:
                    w = 0;
                case 59 + o:
                    if (d == -1) j = z(j, /\f/g, "");
                    if (p > 0 && M(j) - l) q(p > 32 ? ie(j + ";", n, a, l - 1) : ie(z(j, " ", "") + ";", n, a, l - 2), i);
                    break;
                case 59:
                    j += ";";
                default:
                    q(y = te(j, r, a, f, o, c, u, g, m = [], x = [], l), s);
                    if ($ === 123) {
                        if (o === 0) se(j, r, y, y, m, s, l, u, x);
                        else switch(v === 99 && O(j, 3) === 110 ? 100 : v){
                            case 100:
                            case 108:
                            case 109:
                            case 115:
                                se(e, y, y, n && q(te(e, y, y, 0, 0, c, u, g, c, m = [], l), x), c, x, l, u, n ? m : x);
                                break;
                            default:
                                se(j, y, y, y, [
                                    ""
                                ], x, 0, u, x);
                        }
                    }
            }
            f = o = p = 0, b = d = 1, g = j = "", l = t;
            break;
        case 58:
            l = 1 + M(j), p = h;
        default:
            if (b < 1) {
                if ($ == 123) --b;
                else if ($ == 125 && b++ == 0 && N() == 125) continue;
            }
            switch(j += k($), $ * b){
                case 38:
                    d = o > 0 ? 1 : (j += "\f", -1);
                    break;
                case 44:
                    u[f++] = (M(j) - 1) * d, d = 1;
                    break;
                case 64:
                    if (Q() === 45) j += X(P());
                    v = Q(), o = l = M(g = j += ne(R())), $++;
                    break;
                case 45:
                    if (h === 45 && M(j) == 2) b = 0;
            }
    }
    return s;
}
function te(e, r, a, n, s, t, u, i, f, o, l) {
    var v = s - 1;
    var p = s === 0 ? t : [
        ""
    ];
    var h = S(p);
    for(var b = 0, w = 0, d = 0; b < n; ++b)for(var $ = 0, k = A(e, v + 1, v = g(w = u[b])), m = e; $ < h; ++$)if (m = y(w > 0 ? p[$] + " " + k : z(k, /&\f/g, p[$]))) f[d++] = m;
    return J(e, r, a, s === 0 ? c : i, f, o, l);
}
function ue(e, r, a) {
    return J(e, r, a, n, k(L()), A(e, 2, -2), 0);
}
function ie(e, r, a, n) {
    return J(e, r, a, s, A(e, 0, n), A(e, n + 1, -1), n);
}
function fe(n, c, s) {
    switch(x(n, c)){
        case 5103:
            return a + "print-" + n + n;
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return a + n + n;
        case 4789:
            return r + n + n;
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return a + n + r + n + e + n + n;
        case 5936:
            switch(O(n, c + 11)){
                case 114:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "tb") + n;
                case 108:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "tb-rl") + n;
                case 45:
                    return a + n + e + z(n, /[svh]\w+-[tblr]{2}/, "lr") + n;
            }
        case 6828:
        case 4268:
        case 2903:
            return a + n + e + n + n;
        case 6165:
            return a + n + e + "flex-" + n + n;
        case 5187:
            return a + n + z(n, /(\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + n;
        case 5443:
            return a + n + e + "flex-item-" + z(n, /flex-|-self/g, "") + (!j(n, /flex-|baseline/) ? e + "grid-row-" + z(n, /flex-|-self/g, "") : "") + n;
        case 4675:
            return a + n + e + "flex-line-pack" + z(n, /align-content|flex-|-self/g, "") + n;
        case 5548:
            return a + n + e + z(n, "shrink", "negative") + n;
        case 5292:
            return a + n + e + z(n, "basis", "preferred-size") + n;
        case 6060:
            return a + "box-" + z(n, "-grow", "") + a + n + e + z(n, "grow", "positive") + n;
        case 4554:
            return a + z(n, /([^-])(transform)/g, "$1" + a + "$2") + n;
        case 6187:
            return z(z(z(n, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), n, "") + n;
        case 5495:
        case 3959:
            return z(n, /(image-set\([^]*)/, a + "$1" + "$`$1");
        case 4968:
            return z(z(n, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + n + n;
        case 4200:
            if (!j(n, /flex-|baseline/)) return e + "grid-column-align" + A(n, c) + n;
            break;
        case 2592:
        case 3360:
            return e + z(n, "template-", "") + n;
        case 4384:
        case 3616:
            if (s && s.some(function(e, r) {
                return c = r, j(e.props, /grid-\w+-end/);
            })) return ~C(n + (s = s[c].value), "span") ? n : e + z(n, "-start", "") + n + e + "grid-row-span:" + (~C(s, "span") ? j(s, /\d+/) : +j(s, /\d+/) - +j(n, /\d+/)) + ";";
            return e + z(n, "-start", "") + n;
        case 4896:
        case 4128:
            return s && s.some(function(e) {
                return j(e.props, /grid-\w+-start/);
            }) ? n : e + z(z(n, "-end", "-span"), "span ", "") + n;
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return z(n, /(.+)-inline(.+)/, a + "$1$2") + n;
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            if (M(n) - 1 - c > 6) switch(O(n, c + 1)){
                case 109:
                    if (O(n, c + 4) !== 45) break;
                case 102:
                    return z(n, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3" + "$1" + r + (O(n, c + 3) == 108 ? "$3" : "$2-$3")) + n;
                case 115:
                    return ~C(n, "stretch") ? fe(z(n, "stretch", "fill-available"), c, s) + n : n;
            }
            break;
        case 5152:
        case 5920:
            return z(n, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(r, a, c, s, t, u, i) {
                return e + a + ":" + c + i + (s ? e + a + "-span:" + (t ? u : +u - +c) + i : "") + n;
            });
        case 4949:
            if (O(n, c + 6) === 121) return z(n, ":", ":" + a) + n;
            break;
        case 6444:
            switch(O(n, O(n, 14) === 45 ? 18 : 11)){
                case 120:
                    return z(n, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + a + (O(n, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + a + "$2$3" + "$1" + e + "$2box$3") + n;
                case 100:
                    return z(n, ":", ":" + e) + n;
            }
            break;
        case 5719:
        case 2647:
        case 2135:
        case 3927:
        case 2391:
            return z(n, "scroll-", "scroll-snap-") + n;
    }
    return n;
}
function oe(e, r) {
    var a = "";
    var n = S(e);
    for(var c = 0; c < n; c++)a += r(e[c], c, e, r) || "";
    return a;
}
function le(e, r, a, t) {
    switch(e.type){
        case $:
            if (e.children.length) break;
        case i:
        case s:
            return e.return = e.return || e.value;
        case n:
            return "";
        case h:
            return e.return = e.value + "{" + oe(e.children, t) + "}";
        case c:
            e.value = e.props.join(",");
    }
    return M(a = oe(e.children, t)) ? e.return = e.value + "{" + a + "}" : "";
}
function ve(e) {
    var r = S(e);
    return function(a, n, c, s) {
        var t = "";
        for(var u = 0; u < r; u++)t += e[u](a, n, c, s) || "";
        return t;
    };
}
function pe(e) {
    return function(r) {
        if (!r.root) {
            if (r = r.return) e(r);
        }
    };
}
function he(n, t, u, i) {
    if (n.length > -1) {
        if (!n.return) switch(n.type){
            case s:
                n.return = fe(n.value, n.length, u);
                return;
            case h:
                return oe([
                    K(n, {
                        value: z(n.value, "@", "@" + a)
                    })
                ], i);
            case c:
                if (n.length) return B(n.props, function(c) {
                    switch(j(c, /(::plac\w+|:read-\w+)/)){
                        case ":read-only":
                        case ":read-write":
                            return oe([
                                K(n, {
                                    props: [
                                        z(c, /:(read-\w+)/, ":" + r + "$1")
                                    ]
                                })
                            ], i);
                        case "::placeholder":
                            return oe([
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, ":" + a + "input-$1")
                                    ]
                                }),
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, ":" + r + "$1")
                                    ]
                                }),
                                K(n, {
                                    props: [
                                        z(c, /:(plac\w+)/, e + "input-$1")
                                    ]
                                })
                            ], i);
                    }
                    return "";
                });
        }
    }
}
function be(e) {
    switch(e.type){
        case c:
            e.props = e.props.map(function(r) {
                return B(Y(r), function(r, a, n) {
                    switch(O(r, 0)){
                        case 12:
                            return A(r, 1, M(r));
                        case 0:
                        case 40:
                        case 43:
                        case 62:
                        case 126:
                            return r;
                        case 58:
                            if (n[++a] === "global") n[a] = "", n[++a] = "\f" + A(n[a], a = 1, -1);
                        case 32:
                            return a === 1 ? "" : r;
                        default:
                            switch(a){
                                case 0:
                                    e = r;
                                    return S(n) > 1 ? "" : r;
                                case a = S(n) - 1:
                                case 2:
                                    return a === 2 ? r + e + e : r + e;
                                default:
                                    return r;
                            }
                    }
                });
            });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grJxk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>weakMemoize);
var weakMemoize = function weakMemoize(func) {
    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
    var cache = new WeakMap();
    return function(arg) {
        if (cache.has(arg)) // $FlowFixMe
        return cache.get(arg);
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUsDD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>hoistNonReactStatics);
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
// this file isolates this package that is not tree-shakeable
// and if this module doesn't actually contain any logic of its own
// then Rollup just use 'hoist-non-react-statics' directly in other chunks
var hoistNonReactStatics = function(targetComponent, sourceComponent) {
    return (0, _hoistNonReactStaticsDefault.default)(targetComponent, sourceComponent);
};

},{"hoist-non-react-statics":"1GfsB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GfsB":[function(require,module,exports) {
"use strict";
var reactIs = require("c03b486d83967636");
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */ var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};
var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};
var FORWARD_REF_STATICS = {
    "$$typeof": true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    "$$typeof": true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) return MEMO_STATICS;
     // React v16.12 and above
    return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
}
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== "string") {
        // don't hoist over string (html) components
        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for(var i = 0; i < keys.length; ++i){
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }
    }
    return targetComponent;
}
module.exports = hoistNonReactStatics;

},{"c03b486d83967636":"7EuwB"}],"7EuwB":[function(require,module,exports) {
"use strict";
module.exports = require("2255125a8e8b1051");

},{"2255125a8e8b1051":"5DsXl"}],"5DsXl":[function(require,module,exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 0xead7;
    function isValidElementType(type) {
        return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    } // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();

},{}],"6UI8e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRegisteredStyles", ()=>getRegisteredStyles);
parcelHelpers.export(exports, "insertStyles", ()=>insertStyles);
parcelHelpers.export(exports, "registerStyles", ()=>registerStyles);
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
        if (registered[className] !== undefined) registeredStyles.push(registered[className] + ";");
        else rawClassName += className + " ";
    });
    return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;
    if (// class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === undefined) cache.registered[className] = serialized.styles;
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag);
    var className = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === undefined) {
        var current = serialized;
        do {
            cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            current = current.next;
        }while (current !== undefined);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kS2E2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeStyles", ()=>serializeStyles);
var _hash = require("@emotion/hash");
var _hashDefault = parcelHelpers.interopDefault(_hash);
var _unitless = require("@emotion/unitless");
var _unitlessDefault = parcelHelpers.interopDefault(_unitless);
var _memoize = require("@emotion/memoize");
var _memoizeDefault = parcelHelpers.interopDefault(_memoize);
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty(property) {
    return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue(value) {
    return value != null && typeof value !== "boolean";
};
var processStyleName = /* #__PURE__ */ (0, _memoizeDefault.default)(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue(key, value) {
    switch(key){
        case "animation":
        case "animationName":
            if (typeof value === "string") return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                    name: p1,
                    styles: p2,
                    next: cursor
                };
                return p1;
            });
    }
    if ((0, _unitlessDefault.default)[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) return value + "px";
    return value;
};
var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
var contentValues = [
    "normal",
    "none",
    "initial",
    "inherit",
    "unset"
];
var oldProcessStyleValue = processStyleValue;
var msPattern = /^-ms-/;
var hyphenPattern = /-(.)/g;
var hyphenatedCache = {};
processStyleValue = function processStyleValue(key, value) {
    if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === undefined) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
            return _char.toUpperCase();
        }) + "?");
    }
    return processed;
};
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) return "";
    if (interpolation.__emotion_styles !== undefined) {
        if (interpolation.toString() === "NO_COMPONENT_SELECTOR") throw new Error(noComponentSelectorMessage);
        return interpolation;
    }
    switch(typeof interpolation){
        case "boolean":
            return "";
        case "object":
            if (interpolation.anim === 1) {
                cursor = {
                    name: interpolation.name,
                    styles: interpolation.styles,
                    next: cursor
                };
                return interpolation.name;
            }
            if (interpolation.styles !== undefined) {
                var next = interpolation.next;
                if (next !== undefined) // not the most efficient thing ever but this is a pretty rare case
                // and there will be very few iterations of this generally
                while(next !== undefined){
                    cursor = {
                        name: next.name,
                        styles: next.styles,
                        next: cursor
                    };
                    next = next.next;
                }
                var styles = interpolation.styles + ";";
                if (interpolation.map !== undefined) styles += interpolation.map;
                return styles;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
        case "function":
            if (mergedProps !== undefined) {
                var previousCursor = cursor;
                var result = interpolation(mergedProps);
                cursor = previousCursor;
                return handleInterpolation(mergedProps, registered, result);
            } else console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            break;
        case "string":
            var matched = [];
            var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
                return "${" + fakeVarName + "}";
            });
            if (matched.length) console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, [
                "`" + replaced + "`"
            ]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
            break;
    } // finalize string values (regular strings and functions interpolated into css calls)
    if (registered == null) return interpolation;
    var cached = registered[interpolation];
    return cached !== undefined ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) for(var i = 0; i < obj.length; i++)string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    else for(var _key in obj){
        var value = obj[_key];
        if (typeof value !== "object") {
            if (registered != null && registered[value] !== undefined) string += _key + "{" + registered[value] + "}";
            else if (isProcessableValue(value)) string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        } else {
            if (_key === "NO_COMPONENT_SELECTOR" && true) throw new Error(noComponentSelectorMessage);
            if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === undefined)) {
                for(var _i = 0; _i < value.length; _i++)if (isProcessableValue(value[_i])) string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch(_key){
                    case "animation":
                    case "animationName":
                        string += processStyleName(_key) + ":" + interpolated + ";";
                        break;
                    default:
                        if (_key === "undefined") console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                        string += _key + "{" + interpolated + "}";
                }
            }
        }
    }
    return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
// keyframes are stored on the SerializedStyles object as a linked list
var cursor;
var serializeStyles = function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== undefined) return args[0];
    var stringMode = true;
    var styles = "";
    cursor = undefined;
    var strings = args[0];
    if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
    } else {
        if (strings[0] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        styles += strings[0];
    } // we start at 1 since we've already handled the first arg
    for(var i = 1; i < args.length; i++){
        styles += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
            if (strings[i] === undefined) console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            styles += strings[i];
        }
    }
    var sourceMap;
    styles = styles.replace(sourceMapPattern, function(match) {
        sourceMap = match;
        return "";
    });
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
    while((match = labelPattern.exec(styles)) !== null)identifierName += "-" + // $FlowFixMe we know it's not null
    match[1];
    var name = (0, _hashDefault.default)(styles) + identifierName;
    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
    return {
        name: name,
        styles: styles,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
    };
};

},{"@emotion/hash":"clggK","@emotion/unitless":"2Tu84","@emotion/memoize":"2vzJd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"clggK":[function(require,module,exports) {
/* eslint-disable */ // Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>murmur2);
function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash
    var k, i = 0, len = str.length;
    for(; len >= 4; ++i, len -= 4){
        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
        k = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
        k ^= /* k >>> r: */ k >>> 24;
        h = /* Math.imul(k, m): */ (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Handle the last few bytes of the input array
    switch(len){
        case 3:
            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 0xff;
            h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */ (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Tu84":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>unitlessKeys);
var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lPCYn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useInsertionEffectAlwaysWithSyncFallback", ()=>useInsertionEffectAlwaysWithSyncFallback);
parcelHelpers.export(exports, "useInsertionEffectWithLayoutFallback", ()=>useInsertionEffectWithLayoutFallback);
var _react = require("react");
var syncFallback = function syncFallback(create) {
    return create();
};
var useInsertionEffect = _react["useInsertionEffect"] ? _react["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || _react.useLayoutEffect;

},{"react":"21dqq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"vw3vn":[function(require,module,exports) {
function _extends() {
    module.exports = _extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

},{}],"gZDpG":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Constants.
 */ var IS_MAC = typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
var MODIFIERS = {
    alt: "altKey",
    control: "ctrlKey",
    meta: "metaKey",
    shift: "shiftKey"
};
var ALIASES = {
    add: "+",
    break: "pause",
    cmd: "meta",
    command: "meta",
    ctl: "control",
    ctrl: "control",
    del: "delete",
    down: "arrowdown",
    esc: "escape",
    ins: "insert",
    left: "arrowleft",
    mod: IS_MAC ? "meta" : "control",
    opt: "alt",
    option: "alt",
    return: "enter",
    right: "arrowright",
    space: " ",
    spacebar: " ",
    up: "arrowup",
    win: "meta",
    windows: "meta"
};
var CODES = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    control: 17,
    alt: 18,
    pause: 19,
    capslock: 20,
    escape: 27,
    " ": 32,
    pageup: 33,
    pagedown: 34,
    end: 35,
    home: 36,
    arrowleft: 37,
    arrowup: 38,
    arrowright: 39,
    arrowdown: 40,
    insert: 45,
    delete: 46,
    meta: 91,
    numlock: 144,
    scrolllock: 145,
    ";": 186,
    "=": 187,
    ",": 188,
    "-": 189,
    ".": 190,
    "/": 191,
    "`": 192,
    "[": 219,
    "\\": 220,
    "]": 221,
    "'": 222
};
for(var f = 1; f < 20; f++)CODES["f" + f] = 111 + f;
/**
 * Is hotkey?
 */ function isHotkey(hotkey, options, event) {
    if (options && !("byKey" in options)) {
        event = options;
        options = null;
    }
    if (!Array.isArray(hotkey)) hotkey = [
        hotkey
    ];
    var array = hotkey.map(function(string) {
        return parseHotkey(string, options);
    });
    var check = function check(e) {
        return array.some(function(object) {
            return compareHotkey(object, e);
        });
    };
    var ret = event == null ? check : check(event);
    return ret;
}
function isCodeHotkey(hotkey, event) {
    return isHotkey(hotkey, event);
}
function isKeyHotkey(hotkey, event) {
    return isHotkey(hotkey, {
        byKey: true
    }, event);
}
/**
 * Parse.
 */ function parseHotkey(hotkey, options) {
    var byKey = options && options.byKey;
    var ret = {};
    // Special case to handle the `+` key since we use it as a separator.
    hotkey = hotkey.replace("++", "+add");
    var values = hotkey.split("+");
    var length = values.length;
    // Ensure that all the modifiers are set to false unless the hotkey has them.
    for(var k in MODIFIERS)ret[MODIFIERS[k]] = false;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;
    try {
        for(var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var value = _step.value;
            var optional = value.endsWith("?") && value.length > 1;
            if (optional) value = value.slice(0, -1);
            var name = toKeyName(value);
            var modifier = MODIFIERS[name];
            if (value.length > 1 && !modifier && !ALIASES[value] && !CODES[name]) throw new TypeError('Unknown modifier: "' + value + '"');
            if (length === 1 || !modifier) {
                if (byKey) ret.key = name;
                else ret.which = toKeyCode(value);
            }
            if (modifier) ret[modifier] = optional ? null : true;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return) _iterator.return();
        } finally{
            if (_didIteratorError) throw _iteratorError;
        }
    }
    return ret;
}
/**
 * Compare.
 */ function compareHotkey(object, event) {
    for(var key in object){
        var expected = object[key];
        var actual = void 0;
        if (expected == null) continue;
        if (key === "key" && event.key != null) actual = event.key.toLowerCase();
        else if (key === "which") actual = expected === 91 && event.which === 93 ? 91 : event.which;
        else actual = event[key];
        if (actual == null && expected === false) continue;
        if (actual !== expected) return false;
    }
    return true;
}
/**
 * Utils.
 */ function toKeyCode(name) {
    name = toKeyName(name);
    var code = CODES[name] || name.toUpperCase().charCodeAt(0);
    return code;
}
function toKeyName(name) {
    name = name.toLowerCase();
    name = ALIASES[name] || name;
    return name;
}
/**
 * Export.
 */ exports.default = isHotkey;
exports.isHotkey = isHotkey;
exports.isCodeHotkey = isCodeHotkey;
exports.isKeyHotkey = isKeyHotkey;
exports.parseHotkey = parseHotkey;
exports.compareHotkey = compareHotkey;
exports.toKeyCode = toKeyCode;
exports.toKeyName = toKeyName;

},{}],"83C22":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clsx", ()=>clsx);
function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;
    else if ("object" == typeof e) {
        if (Array.isArray(e)) for(t = 0; t < e.length; t++)e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
        else for(t in e)e[t] && (n && (n += " "), n += t);
    }
    return n;
}
function clsx() {
    for(var e, t, f = 0, n = ""; f < arguments.length;)(e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
}
exports.default = clsx;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cPNyt":[function(require,module,exports) {
"use strict";
var vanilla = require("a19f4edd89926025");
var ReactExports = require("e3cb921f47249eac");
var useSyncExternalStoreExports = require("1e8ad8cf8d3b3c90");
var useDebugValue = ReactExports.useDebugValue;
var useSyncExternalStoreWithSelector = useSyncExternalStoreExports.useSyncExternalStoreWithSelector;
var didWarnAboutEqualityFn = false;
var identity = function identity(arg) {
    return arg;
};
function useStore(api, selector, equalityFn) {
    if (selector === void 0) selector = identity;
    if (equalityFn && !didWarnAboutEqualityFn) {
        console.warn("[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937");
        didWarnAboutEqualityFn = true;
    }
    var slice = useSyncExternalStoreWithSelector(api.subscribe, api.getState, api.getServerState || api.getInitialState, selector, equalityFn);
    useDebugValue(slice);
    return slice;
}
var createImpl = function createImpl(createState) {
    if (typeof createState !== "function") console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");
    var api = typeof createState === "function" ? vanilla.createStore(createState) : createState;
    var useBoundStore = function useBoundStore(selector, equalityFn) {
        return useStore(api, selector, equalityFn);
    };
    Object.assign(useBoundStore, api);
    return useBoundStore;
};
var create = function create(createState) {
    return createState ? createImpl(createState) : createImpl;
};
var react = function(createState) {
    console.warn("[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.");
    return create(createState);
};
exports.create = create;
exports.default = react;
exports.useStore = useStore;
Object.keys(vanilla).forEach(function(k) {
    if (k !== "default" && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {
        enumerable: true,
        get: function() {
            return vanilla[k];
        }
    });
});
module.exports = react;
module.exports.create = create;
module.exports.useStore = useStore;
module.exports.createStore = vanilla.createStore;
exports.default = module.exports;

},{"a19f4edd89926025":"2SLIN","e3cb921f47249eac":"21dqq","1e8ad8cf8d3b3c90":"iDrhg"}],"2SLIN":[function(require,module,exports) {
"use strict";
var createStoreImpl = function createStoreImpl(createState) {
    var state;
    var listeners = new Set();
    var setState = function setState(partial, replace) {
        var nextState = typeof partial === "function" ? partial(state) : partial;
        if (!Object.is(nextState, state)) {
            var _previousState = state;
            state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
            listeners.forEach(function(listener) {
                return listener(state, _previousState);
            });
        }
    };
    var getState = function getState() {
        return state;
    };
    var getInitialState = function getInitialState() {
        return initialState;
    };
    var subscribe = function subscribe(listener) {
        listeners.add(listener);
        return function() {
            return listeners.delete(listener);
        };
    };
    var destroy = function destroy() {
        console.warn("[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.");
        listeners.clear();
    };
    var api = {
        setState: setState,
        getState: getState,
        getInitialState: getInitialState,
        subscribe: subscribe,
        destroy: destroy
    };
    var initialState = state = createState(setState, getState, api);
    return api;
};
var createStore = function createStore(createState) {
    return createState ? createStoreImpl(createState) : createStoreImpl;
};
var vanilla = function(createState) {
    console.warn("[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.");
    return createStore(createState);
};
exports.createStore = createStore;
exports.default = vanilla;
module.exports = vanilla;
module.exports.createStore = createStore;
exports.default = module.exports;

},{}],"iDrhg":[function(require,module,exports) {
"use strict";
module.exports = require("825b2585cf61f03e");

},{"825b2585cf61f03e":"vU6Qe"}],"vU6Qe":[function(require,module,exports) {
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = require("2f25dc3829c8e76e");
    var shim = require("c4afd16660885105");
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    var useSyncExternalStore = shim.useSyncExternalStore;
    // for CommonJS interop.
    var useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.
    function useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
        // Use this to track the rendered snapshot.
        var instRef = useRef(null);
        var inst;
        if (instRef.current === null) {
            inst = {
                hasValue: false,
                value: null
            };
            instRef.current = inst;
        } else inst = instRef.current;
        var _useMemo = useMemo(function() {
            // Track the memoized state using closure variables that are local to this
            // memoized instance of a getSnapshot function. Intentionally not using a
            // useRef hook, because that state would be shared across all concurrent
            // copies of the hook/component.
            var hasMemo = false;
            var memoizedSnapshot;
            var memoizedSelection;
            var memoizedSelector = function(nextSnapshot) {
                if (!hasMemo) {
                    // The first time the hook is called, there is no memoized result.
                    hasMemo = true;
                    memoizedSnapshot = nextSnapshot;
                    var _nextSelection = selector(nextSnapshot);
                    if (isEqual !== undefined) // Even if the selector has changed, the currently rendered selection
                    // may be equal to the new selection. We should attempt to reuse the
                    // current value if possible, to preserve downstream memoizations.
                    {
                        if (inst.hasValue) {
                            var currentSelection = inst.value;
                            if (isEqual(currentSelection, _nextSelection)) {
                                memoizedSelection = currentSelection;
                                return currentSelection;
                            }
                        }
                    }
                    memoizedSelection = _nextSelection;
                    return _nextSelection;
                } // We may be able to reuse the previous invocation's result.
                // We may be able to reuse the previous invocation's result.
                var prevSnapshot = memoizedSnapshot;
                var prevSelection = memoizedSelection;
                if (objectIs(prevSnapshot, nextSnapshot)) // The snapshot is the same as last time. Reuse the previous selection.
                return prevSelection;
                 // The snapshot has changed, so we need to compute a new selection.
                // The snapshot has changed, so we need to compute a new selection.
                var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data
                // has changed. If it hasn't, return the previous selection. That signals
                // to React that the selections are conceptually equal, and we can bail
                // out of rendering.
                // If a custom isEqual function is provided, use that to check if the data
                // has changed. If it hasn't, return the previous selection. That signals
                // to React that the selections are conceptually equal, and we can bail
                // out of rendering.
                if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) return prevSelection;
                memoizedSnapshot = nextSnapshot;
                memoizedSelection = nextSelection;
                return nextSelection;
            }; // Assigning this to a constant so that Flow knows it can't change.
            // Assigning this to a constant so that Flow knows it can't change.
            var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;
            var getSnapshotWithSelector = function() {
                return memoizedSelector(getSnapshot());
            };
            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function() {
                return memoizedSelector(maybeGetServerSnapshot());
            };
            return [
                getSnapshotWithSelector,
                getServerSnapshotWithSelector
            ];
        }, [
            getSnapshot,
            getServerSnapshot,
            selector,
            isEqual
        ]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
        var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
        useEffect(function() {
            inst.hasValue = true;
            inst.value = value;
        }, [
            value
        ]);
        useDebugValue(value);
        return value;
    }
    exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{"2f25dc3829c8e76e":"21dqq","c4afd16660885105":"hyxdF"}],"hyxdF":[function(require,module,exports) {
"use strict";
module.exports = require("5ab7799a565bbe74");

},{"5ab7799a565bbe74":"khU3l"}],"khU3l":[function(require,module,exports) {
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = require("d49206e28a986e9f");
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    // dispatch for CommonJS interop named imports.
    var useState = React.useState, useEffect = React.useEffect, useLayoutEffect = React.useLayoutEffect, useDebugValue = React.useDebugValue;
    var didWarnOld18Alpha = false;
    var didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works
    // because of a very particular set of implementation details and assumptions
    // -- change any one of them and it will break. The most important assumption
    // is that updates are always synchronous, because concurrent rendering is
    // only available in versions of React that also have a built-in
    // useSyncExternalStore API. And we only use this shim when the built-in API
    // does not exist.
    //
    // Do not assume that the clever hacks used by this hook also work in general.
    // The point of this shim is to replace the need for hacks by other libraries.
    function useSyncExternalStore(subscribe, getSnapshot, // React do not expose a way to check if we're hydrating. So users of the shim
    // will need to track that themselves and return the correct value
    // from `getSnapshot`.
    getServerSnapshot) {
        if (!didWarnOld18Alpha) {
            if (React.startTransition !== undefined) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
            }
        }
        // breaks the rules of React, and only works here because of specific
        // implementation details, most importantly that updates are
        // always synchronous.
        var value = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
            var cachedValue = getSnapshot();
            if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
            }
        }
        // re-render whenever the subscribed state changes by updating an some
        // arbitrary useState hook. Then, during render, we call getSnapshot to read
        // the current value.
        //
        // Because we don't actually use the state returned by the useState hook, we
        // can save a bit of memory by storing other stuff in that slot.
        //
        // To implement the early bailout, we need to track some things on a mutable
        // object. Usually, we would put that in a useRef hook, but we can stash it in
        // our useState hook instead.
        //
        // To force a re-render, we call forceUpdate({inst}). That works because the
        // new object always fails an equality check.
        var _useState = useState({
            inst: {
                value: value,
                getSnapshot: getSnapshot
            }
        }), inst = _useState[0].inst, forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated
        // in the layout phase so we can access it during the tearing check that
        // happens on subscribe.
        useLayoutEffect(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the
            // commit phase if there was an interleaved mutation. In concurrent mode
            // this can happen all the time, but even in synchronous mode, an earlier
            // effect may have mutated the store.
            if (checkIfSnapshotChanged(inst)) // Force a re-render.
            forceUpdate({
                inst: inst
            });
        }, [
            subscribe,
            value,
            getSnapshot
        ]);
        useEffect(function() {
            // Check for changes right before subscribing. Subsequent changes will be
            // detected in the subscription handler.
            if (checkIfSnapshotChanged(inst)) // Force a re-render.
            forceUpdate({
                inst: inst
            });
            var handleStoreChange = function() {
                // TODO: Because there is no cross-renderer API for batching updates, it's
                // up to the consumer of this library to wrap their subscription event
                // with unstable_batchedUpdates. Should we try to detect when this isn't
                // the case and print a warning in development?
                // The store changed. Check if the snapshot changed since the last time we
                // read from the store.
                if (checkIfSnapshotChanged(inst)) // Force a re-render.
                forceUpdate({
                    inst: inst
                });
            }; // Subscribe to the store and return a clean-up function.
            return subscribe(handleStoreChange);
        }, [
            subscribe
        ]);
        useDebugValue(value);
        return value;
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
        } catch (error) {
            return true;
        }
    }
    function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
        // Note: The shim does not use getServerSnapshot, because pre-18 versions of
        // React do not expose a way to check if we're hydrating. So users of the shim
        // will need to track that themselves and return the correct value
        // from `getSnapshot`.
        return getSnapshot();
    }
    var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var isServerEnvironment = !canUseDOM;
    var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
    var useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;
    exports.useSyncExternalStore = useSyncExternalStore$2;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{"d49206e28a986e9f":"21dqq"}],"b6wSj":[function(require,module,exports) {
module.exports = map;
/*
  // returns a new object with the predicate applied to each value
  // like just-map-object, but (value, key, object) are passed to the predicate
  map({a: 3, b: 5, c: 9}, (value) => value + 1); // {a: 4, b: 6, c: 10}
  map({a: 3, b: 5, c: 9}, (value, key) => value + key); // {a: 3a, b: 5b, c: 9c}
  map({a: 3, b: 5, c: 9}, (value, key, object) => object.b); // {a: 5, b: 5, c: 5}
*/ function map(obj, predicate) {
    var result = {};
    var keys = Object.keys(obj);
    var len = keys.length;
    for(var i = 0; i < len; i++){
        var key = keys[i];
        result[key] = predicate(obj[key], key, obj);
    }
    return result;
}

},{}],"gARFp":[function(require,module,exports) {
/* **********************************************
     Begin prism-core.js
********************************************** */ /// <reference lib="WebWorker"/>
var global = arguments[3];
var _self = typeof window !== "undefined" ? window // if in browser
 : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self // if in worker
 : {} // if in node js
;
/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */ var Prism = function(_self) {
    // Private helper vars
    var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
    var uniqueId = 0;
    // The grammar object for plaintext
    var plainTextGrammar = {};
    var _ = {
        /**
		 * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
		 * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
		 * additional languages or plugins yourself.
		 *
		 * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
		 *
		 * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
		 * empty Prism object into the global scope before loading the Prism script like this:
		 *
		 * ```js
		 * window.Prism = window.Prism || {};
		 * Prism.manual = true;
		 * // add a new <script> to load Prism's script
		 * ```
		 *
		 * @default false
		 * @type {boolean}
		 * @memberof Prism
		 * @public
		 */ manual: _self.Prism && _self.Prism.manual,
        /**
		 * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
		 * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
		 * own worker, you don't want it to do this.
		 *
		 * By setting this value to `true`, Prism will not add its own listeners to the worker.
		 *
		 * You obviously have to change this value before Prism executes. To do this, you can add an
		 * empty Prism object into the global scope before loading the Prism script like this:
		 *
		 * ```js
		 * window.Prism = window.Prism || {};
		 * Prism.disableWorkerMessageHandler = true;
		 * // Load Prism's script
		 * ```
		 *
		 * @default false
		 * @type {boolean}
		 * @memberof Prism
		 * @public
		 */ disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
        /**
		 * A namespace for utility methods.
		 *
		 * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
		 * change or disappear at any time.
		 *
		 * @namespace
		 * @memberof Prism
		 */ util: {
            encode: function encode(tokens) {
                if (tokens instanceof Token) return new Token(tokens.type, encode(tokens.content), tokens.alias);
                else if (Array.isArray(tokens)) return tokens.map(encode);
                else return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
            },
            /**
			 * Returns the name of the type of the given value.
			 *
			 * @param {any} o
			 * @returns {string}
			 * @example
			 * type(null)      === 'Null'
			 * type(undefined) === 'Undefined'
			 * type(123)       === 'Number'
			 * type('foo')     === 'String'
			 * type(true)      === 'Boolean'
			 * type([1, 2])    === 'Array'
			 * type({})        === 'Object'
			 * type(String)    === 'Function'
			 * type(/abc+/)    === 'RegExp'
			 */ type: function(o) {
                return Object.prototype.toString.call(o).slice(8, -1);
            },
            /**
			 * Returns a unique number for the given object. Later calls will still return the same number.
			 *
			 * @param {Object} obj
			 * @returns {number}
			 */ objId: function(obj) {
                if (!obj["__id"]) Object.defineProperty(obj, "__id", {
                    value: ++uniqueId
                });
                return obj["__id"];
            },
            /**
			 * Creates a deep clone of the given object.
			 *
			 * The main intended use of this function is to clone language definitions.
			 *
			 * @param {T} o
			 * @param {Record<number, any>} [visited]
			 * @returns {T}
			 * @template T
			 */ clone: function deepClone(o, visited) {
                visited = visited || {};
                var clone;
                var id;
                switch(_.util.type(o)){
                    case "Object":
                        id = _.util.objId(o);
                        if (visited[id]) return visited[id];
                        clone = /** @type {Record<string, any>} */ {};
                        visited[id] = clone;
                        for(var key in o)if (o.hasOwnProperty(key)) clone[key] = deepClone(o[key], visited);
                        return /** @type {any} */ clone;
                    case "Array":
                        id = _.util.objId(o);
                        if (visited[id]) return visited[id];
                        clone = [];
                        visited[id] = clone;
                        /** @type {Array} */ /** @type {any} */ o.forEach(function(v, i) {
                            clone[i] = deepClone(v, visited);
                        });
                        return /** @type {any} */ clone;
                    default:
                        return o;
                }
            },
            /**
			 * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
			 *
			 * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
			 *
			 * @param {Element} element
			 * @returns {string}
			 */ getLanguage: function(element) {
                while(element){
                    var m = lang.exec(element.className);
                    if (m) return m[1].toLowerCase();
                    element = element.parentElement;
                }
                return "none";
            },
            /**
			 * Sets the Prism `language-xxxx` class of the given element.
			 *
			 * @param {Element} element
			 * @param {string} language
			 * @returns {void}
			 */ setLanguage: function(element, language) {
                // remove all `language-xxxx` classes
                // (this might leave behind a leading space)
                element.className = element.className.replace(RegExp(lang, "gi"), "");
                // add the new `language-xxxx` class
                // (using `classList` will automatically clean up spaces for us)
                element.classList.add("language-" + language);
            },
            /**
			 * Returns the script element that is currently executing.
			 *
			 * This does __not__ work for line script element.
			 *
			 * @returns {HTMLScriptElement | null}
			 */ currentScript: function() {
                if (typeof document === "undefined") return null;
                if ("currentScript" in document && true /* hack to trip TS' flow analysis */ ) return /** @type {any} */ document.currentScript;
                // IE11 workaround
                // we'll get the src of the current script by parsing IE11's error stack trace
                // this will not work for inline scripts
                try {
                    throw new Error();
                } catch (err) {
                    // Get file src url from stack. Specifically works with the format of stack traces in IE.
                    // A stack will look like this:
                    //
                    // Error
                    //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
                    //    at Global code (http://localhost/components/prism-core.js:606:1)
                    var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
                    if (src) {
                        var scripts = document.getElementsByTagName("script");
                        for(var i in scripts){
                            if (scripts[i].src == src) return scripts[i];
                        }
                    }
                    return null;
                }
            },
            /**
			 * Returns whether a given class is active for `element`.
			 *
			 * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
			 * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
			 * given class is just the given class with a `no-` prefix.
			 *
			 * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
			 * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
			 * ancestors have the given class or the negated version of it, then the default activation will be returned.
			 *
			 * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
			 * version of it, the class is considered active.
			 *
			 * @param {Element} element
			 * @param {string} className
			 * @param {boolean} [defaultActivation=false]
			 * @returns {boolean}
			 */ isActive: function(element, className, defaultActivation) {
                var no = "no-" + className;
                while(element){
                    var classList = element.classList;
                    if (classList.contains(className)) return true;
                    if (classList.contains(no)) return false;
                    element = element.parentElement;
                }
                return !!defaultActivation;
            }
        },
        /**
		 * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
		 *
		 * @namespace
		 * @memberof Prism
		 * @public
		 */ languages: {
            /**
			 * The grammar for plain, unformatted text.
			 */ plain: plainTextGrammar,
            plaintext: plainTextGrammar,
            text: plainTextGrammar,
            txt: plainTextGrammar,
            /**
			 * Creates a deep copy of the language with the given id and appends the given tokens.
			 *
			 * If a token in `redef` also appears in the copied language, then the existing token in the copied language
			 * will be overwritten at its original position.
			 *
			 * ## Best practices
			 *
			 * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
			 * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
			 * understand the language definition because, normally, the order of tokens matters in Prism grammars.
			 *
			 * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
			 * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
			 *
			 * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
			 * @param {Grammar} redef The new tokens to append.
			 * @returns {Grammar} The new language created.
			 * @public
			 * @example
			 * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
			 *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
			 *     // at its original position
			 *     'comment': { ... },
			 *     // CSS doesn't have a 'color' token, so this token will be appended
			 *     'color': /\b(?:red|green|blue)\b/
			 * });
			 */ extend: function(id, redef) {
                var lang = _.util.clone(_.languages[id]);
                for(var key in redef)lang[key] = redef[key];
                return lang;
            },
            /**
			 * Inserts tokens _before_ another token in a language definition or any other grammar.
			 *
			 * ## Usage
			 *
			 * This helper method makes it easy to modify existing languages. For example, the CSS language definition
			 * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
			 * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
			 * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
			 * this:
			 *
			 * ```js
			 * Prism.languages.markup.style = {
			 *     // token
			 * };
			 * ```
			 *
			 * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
			 * before existing tokens. For the CSS example above, you would use it like this:
			 *
			 * ```js
			 * Prism.languages.insertBefore('markup', 'cdata', {
			 *     'style': {
			 *         // token
			 *     }
			 * });
			 * ```
			 *
			 * ## Special cases
			 *
			 * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
			 * will be ignored.
			 *
			 * This behavior can be used to insert tokens after `before`:
			 *
			 * ```js
			 * Prism.languages.insertBefore('markup', 'comment', {
			 *     'comment': Prism.languages.markup.comment,
			 *     // tokens after 'comment'
			 * });
			 * ```
			 *
			 * ## Limitations
			 *
			 * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
			 * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
			 * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
			 * deleting properties which is necessary to insert at arbitrary positions.
			 *
			 * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
			 * Instead, it will create a new object and replace all references to the target object with the new one. This
			 * can be done without temporarily deleting properties, so the iteration order is well-defined.
			 *
			 * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
			 * you hold the target object in a variable, then the value of the variable will not change.
			 *
			 * ```js
			 * var oldMarkup = Prism.languages.markup;
			 * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
			 *
			 * assert(oldMarkup !== Prism.languages.markup);
			 * assert(newMarkup === Prism.languages.markup);
			 * ```
			 *
			 * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
			 * object to be modified.
			 * @param {string} before The key to insert before.
			 * @param {Grammar} insert An object containing the key-value pairs to be inserted.
			 * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
			 * object to be modified.
			 *
			 * Defaults to `Prism.languages`.
			 * @returns {Grammar} The new grammar object.
			 * @public
			 */ insertBefore: function(inside, before, insert, root) {
                root = root || /** @type {any} */ _.languages;
                var grammar = root[inside];
                /** @type {Grammar} */ var ret = {};
                for(var token in grammar)if (grammar.hasOwnProperty(token)) {
                    if (token == before) {
                        for(var newToken in insert)if (insert.hasOwnProperty(newToken)) ret[newToken] = insert[newToken];
                    }
                    // Do not insert token which also occur in insert. See #1525
                    if (!insert.hasOwnProperty(token)) ret[token] = grammar[token];
                }
                var old = root[inside];
                root[inside] = ret;
                // Update references in other language definitions
                _.languages.DFS(_.languages, function(key, value) {
                    if (value === old && key != inside) this[key] = ret;
                });
                return ret;
            },
            // Traverse a language definition with Depth First Search
            DFS: function DFS(o, callback, type, visited) {
                visited = visited || {};
                var objId = _.util.objId;
                for(var i in o)if (o.hasOwnProperty(i)) {
                    callback.call(o, i, o[i], type || i);
                    var property = o[i];
                    var propertyType = _.util.type(property);
                    if (propertyType === "Object" && !visited[objId(property)]) {
                        visited[objId(property)] = true;
                        DFS(property, callback, null, visited);
                    } else if (propertyType === "Array" && !visited[objId(property)]) {
                        visited[objId(property)] = true;
                        DFS(property, callback, i, visited);
                    }
                }
            }
        },
        plugins: {},
        /**
		 * This is the most high-level function in Prism’s API.
		 * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
		 * each one of them.
		 *
		 * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
		 *
		 * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
		 * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
		 * @memberof Prism
		 * @public
		 */ highlightAll: function(async, callback) {
            _.highlightAllUnder(document, async, callback);
        },
        /**
		 * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
		 * {@link Prism.highlightElement} on each one of them.
		 *
		 * The following hooks will be run:
		 * 1. `before-highlightall`
		 * 2. `before-all-elements-highlight`
		 * 3. All hooks of {@link Prism.highlightElement} for each element.
		 *
		 * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
		 * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
		 * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
		 * @memberof Prism
		 * @public
		 */ highlightAllUnder: function(container, async, callback) {
            var env = {
                callback: callback,
                container: container,
                selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
            };
            _.hooks.run("before-highlightall", env);
            env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
            _.hooks.run("before-all-elements-highlight", env);
            for(var i = 0, element; element = env.elements[i++];)_.highlightElement(element, async === true, env.callback);
        },
        /**
		 * Highlights the code inside a single element.
		 *
		 * The following hooks will be run:
		 * 1. `before-sanity-check`
		 * 2. `before-highlight`
		 * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
		 * 4. `before-insert`
		 * 5. `after-highlight`
		 * 6. `complete`
		 *
		 * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
		 * the element's language.
		 *
		 * @param {Element} element The element containing the code.
		 * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
		 * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
		 * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
		 * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
		 *
		 * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
		 * asynchronous highlighting to work. You can build your own bundle on the
		 * [Download page](https://prismjs.com/download.html).
		 * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
		 * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
		 * @memberof Prism
		 * @public
		 */ highlightElement: function(element, async, callback) {
            // Find language
            var language = _.util.getLanguage(element);
            var grammar = _.languages[language];
            // Set language on the element, if not present
            _.util.setLanguage(element, language);
            // Set language on the parent, for styling
            var parent = element.parentElement;
            if (parent && parent.nodeName.toLowerCase() === "pre") _.util.setLanguage(parent, language);
            var code = element.textContent;
            var env = {
                element: element,
                language: language,
                grammar: grammar,
                code: code
            };
            function insertHighlightedCode(highlightedCode) {
                env.highlightedCode = highlightedCode;
                _.hooks.run("before-insert", env);
                env.element.innerHTML = env.highlightedCode;
                _.hooks.run("after-highlight", env);
                _.hooks.run("complete", env);
                callback && callback.call(env.element);
            }
            _.hooks.run("before-sanity-check", env);
            // plugins may change/add the parent/element
            parent = env.element.parentElement;
            if (parent && parent.nodeName.toLowerCase() === "pre" && !parent.hasAttribute("tabindex")) parent.setAttribute("tabindex", "0");
            if (!env.code) {
                _.hooks.run("complete", env);
                callback && callback.call(env.element);
                return;
            }
            _.hooks.run("before-highlight", env);
            if (!env.grammar) {
                insertHighlightedCode(_.util.encode(env.code));
                return;
            }
            if (async && _self.Worker) {
                var worker = new Worker(_.filename);
                worker.onmessage = function(evt) {
                    insertHighlightedCode(evt.data);
                };
                worker.postMessage(JSON.stringify({
                    language: env.language,
                    code: env.code,
                    immediateClose: true
                }));
            } else insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
        },
        /**
		 * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
		 * and the language definitions to use, and returns a string with the HTML produced.
		 *
		 * The following hooks will be run:
		 * 1. `before-tokenize`
		 * 2. `after-tokenize`
		 * 3. `wrap`: On each {@link Token}.
		 *
		 * @param {string} text A string with the code to be highlighted.
		 * @param {Grammar} grammar An object containing the tokens to use.
		 *
		 * Usually a language definition like `Prism.languages.markup`.
		 * @param {string} language The name of the language definition passed to `grammar`.
		 * @returns {string} The highlighted HTML.
		 * @memberof Prism
		 * @public
		 * @example
		 * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
		 */ highlight: function(text, grammar, language) {
            var env = {
                code: text,
                grammar: grammar,
                language: language
            };
            _.hooks.run("before-tokenize", env);
            if (!env.grammar) throw new Error('The language "' + env.language + '" has no grammar.');
            env.tokens = _.tokenize(env.code, env.grammar);
            _.hooks.run("after-tokenize", env);
            return Token.stringify(_.util.encode(env.tokens), env.language);
        },
        /**
		 * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
		 * and the language definitions to use, and returns an array with the tokenized code.
		 *
		 * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
		 *
		 * This method could be useful in other contexts as well, as a very crude parser.
		 *
		 * @param {string} text A string with the code to be highlighted.
		 * @param {Grammar} grammar An object containing the tokens to use.
		 *
		 * Usually a language definition like `Prism.languages.markup`.
		 * @returns {TokenStream} An array of strings and tokens, a token stream.
		 * @memberof Prism
		 * @public
		 * @example
		 * let code = `var foo = 0;`;
		 * let tokens = Prism.tokenize(code, Prism.languages.javascript);
		 * tokens.forEach(token => {
		 *     if (token instanceof Prism.Token && token.type === 'number') {
		 *         console.log(`Found numeric literal: ${token.content}`);
		 *     }
		 * });
		 */ tokenize: function(text, grammar) {
            var rest = grammar.rest;
            if (rest) {
                for(var token in rest)grammar[token] = rest[token];
                delete grammar.rest;
            }
            var tokenList = new LinkedList();
            addAfter(tokenList, tokenList.head, text);
            matchGrammar(text, tokenList, grammar, tokenList.head, 0);
            return toArray(tokenList);
        },
        /**
		 * @namespace
		 * @memberof Prism
		 * @public
		 */ hooks: {
            all: {},
            /**
			 * Adds the given callback to the list of callbacks for the given hook.
			 *
			 * The callback will be invoked when the hook it is registered for is run.
			 * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
			 *
			 * One callback function can be registered to multiple hooks and the same hook multiple times.
			 *
			 * @param {string} name The name of the hook.
			 * @param {HookCallback} callback The callback function which is given environment variables.
			 * @public
			 */ add: function(name, callback) {
                var hooks = _.hooks.all;
                hooks[name] = hooks[name] || [];
                hooks[name].push(callback);
            },
            /**
			 * Runs a hook invoking all registered callbacks with the given environment variables.
			 *
			 * Callbacks will be invoked synchronously and in the order in which they were registered.
			 *
			 * @param {string} name The name of the hook.
			 * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
			 * @public
			 */ run: function(name, env) {
                var callbacks = _.hooks.all[name];
                if (!callbacks || !callbacks.length) return;
                for(var i = 0, callback; callback = callbacks[i++];)callback(env);
            }
        },
        Token: Token
    };
    _self.Prism = _;
    // Typescript note:
    // The following can be used to import the Token type in JSDoc:
    //
    //   @typedef {InstanceType<import("./prism-core")["Token"]>} Token
    /**
	 * Creates a new token.
	 *
	 * @param {string} type See {@link Token#type type}
	 * @param {string | TokenStream} content See {@link Token#content content}
	 * @param {string|string[]} [alias] The alias(es) of the token.
	 * @param {string} [matchedStr=""] A copy of the full string this token was created from.
	 * @class
	 * @global
	 * @public
	 */ function Token(type, content, alias, matchedStr) {
        /**
		 * The type of the token.
		 *
		 * This is usually the key of a pattern in a {@link Grammar}.
		 *
		 * @type {string}
		 * @see GrammarToken
		 * @public
		 */ this.type = type;
        /**
		 * The strings or tokens contained by this token.
		 *
		 * This will be a token stream if the pattern matched also defined an `inside` grammar.
		 *
		 * @type {string | TokenStream}
		 * @public
		 */ this.content = content;
        /**
		 * The alias(es) of the token.
		 *
		 * @type {string|string[]}
		 * @see GrammarToken
		 * @public
		 */ this.alias = alias;
        // Copy of the full string this token was created from
        this.length = (matchedStr || "").length | 0;
    }
    /**
	 * A token stream is an array of strings and {@link Token Token} objects.
	 *
	 * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
	 * them.
	 *
	 * 1. No adjacent strings.
	 * 2. No empty strings.
	 *
	 *    The only exception here is the token stream that only contains the empty string and nothing else.
	 *
	 * @typedef {Array<string | Token>} TokenStream
	 * @global
	 * @public
	 */ /**
	 * Converts the given token or token stream to an HTML representation.
	 *
	 * The following hooks will be run:
	 * 1. `wrap`: On each {@link Token}.
	 *
	 * @param {string | Token | TokenStream} o The token or token stream to be converted.
	 * @param {string} language The name of current language.
	 * @returns {string} The HTML representation of the token or token stream.
	 * @memberof Token
	 * @static
	 */ Token.stringify = function stringify(o, language) {
        if (typeof o == "string") return o;
        if (Array.isArray(o)) {
            var s = "";
            o.forEach(function(e) {
                s += stringify(e, language);
            });
            return s;
        }
        var env = {
            type: o.type,
            content: stringify(o.content, language),
            tag: "span",
            classes: [
                "token",
                o.type
            ],
            attributes: {},
            language: language
        };
        var aliases = o.alias;
        if (aliases) {
            if (Array.isArray(aliases)) Array.prototype.push.apply(env.classes, aliases);
            else env.classes.push(aliases);
        }
        _.hooks.run("wrap", env);
        var attributes = "";
        for(var name in env.attributes)attributes += " " + name + '="' + (env.attributes[name] || "").replace(/"/g, "&quot;") + '"';
        return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes + ">" + env.content + "</" + env.tag + ">";
    };
    /**
	 * @param {RegExp} pattern
	 * @param {number} pos
	 * @param {string} text
	 * @param {boolean} lookbehind
	 * @returns {RegExpExecArray | null}
	 */ function matchPattern(pattern, pos, text, lookbehind) {
        pattern.lastIndex = pos;
        var match = pattern.exec(text);
        if (match && lookbehind && match[1]) {
            // change the match to remove the text matched by the Prism lookbehind group
            var lookbehindLength = match[1].length;
            match.index += lookbehindLength;
            match[0] = match[0].slice(lookbehindLength);
        }
        return match;
    }
    /**
	 * @param {string} text
	 * @param {LinkedList<string | Token>} tokenList
	 * @param {any} grammar
	 * @param {LinkedListNode<string | Token>} startNode
	 * @param {number} startPos
	 * @param {RematchOptions} [rematch]
	 * @returns {void}
	 * @private
	 *
	 * @typedef RematchOptions
	 * @property {string} cause
	 * @property {number} reach
	 */ function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
        for(var token in grammar){
            if (!grammar.hasOwnProperty(token) || !grammar[token]) continue;
            var patterns = grammar[token];
            patterns = Array.isArray(patterns) ? patterns : [
                patterns
            ];
            for(var j = 0; j < patterns.length; ++j){
                if (rematch && rematch.cause == token + "," + j) return;
                var patternObj = patterns[j];
                var inside = patternObj.inside;
                var lookbehind = !!patternObj.lookbehind;
                var greedy = !!patternObj.greedy;
                var alias = patternObj.alias;
                if (greedy && !patternObj.pattern.global) {
                    // Without the global flag, lastIndex won't work
                    var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
                    patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g");
                }
                /** @type {RegExp} */ var pattern = patternObj.pattern || patternObj;
                for(var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next){
                    if (rematch && pos >= rematch.reach) break;
                    var str = currentNode.value;
                    if (tokenList.length > text.length) // Something went terribly wrong, ABORT, ABORT!
                    return;
                    if (str instanceof Token) continue;
                    var removeCount = 1; // this is the to parameter of removeBetween
                    var match;
                    if (greedy) {
                        match = matchPattern(pattern, pos, text, lookbehind);
                        if (!match || match.index >= text.length) break;
                        var from = match.index;
                        var to = match.index + match[0].length;
                        var p = pos;
                        // find the node that contains the match
                        p += currentNode.value.length;
                        while(from >= p){
                            currentNode = currentNode.next;
                            p += currentNode.value.length;
                        }
                        // adjust pos (and p)
                        p -= currentNode.value.length;
                        pos = p;
                        // the current node is a Token, then the match starts inside another Token, which is invalid
                        if (currentNode.value instanceof Token) continue;
                        // find the last node which is affected by this match
                        for(var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === "string"); k = k.next){
                            removeCount++;
                            p += k.value.length;
                        }
                        removeCount--;
                        // replace with the new match
                        str = text.slice(pos, p);
                        match.index -= pos;
                    } else {
                        match = matchPattern(pattern, 0, str, lookbehind);
                        if (!match) continue;
                    }
                    // eslint-disable-next-line no-redeclare
                    var from = match.index;
                    var matchStr = match[0];
                    var before = str.slice(0, from);
                    var after = str.slice(from + matchStr.length);
                    var reach = pos + str.length;
                    if (rematch && reach > rematch.reach) rematch.reach = reach;
                    var removeFrom = currentNode.prev;
                    if (before) {
                        removeFrom = addAfter(tokenList, removeFrom, before);
                        pos += before.length;
                    }
                    removeRange(tokenList, removeFrom, removeCount);
                    var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
                    currentNode = addAfter(tokenList, removeFrom, wrapped);
                    if (after) addAfter(tokenList, currentNode, after);
                    if (removeCount > 1) {
                        // at least one Token object was removed, so we have to do some rematching
                        // this can only happen if the current pattern is greedy
                        /** @type {RematchOptions} */ var nestedRematch = {
                            cause: token + "," + j,
                            reach: reach
                        };
                        matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);
                        // the reach might have been extended because of the rematching
                        if (rematch && nestedRematch.reach > rematch.reach) rematch.reach = nestedRematch.reach;
                    }
                }
            }
        }
    }
    /**
	 * @typedef LinkedListNode
	 * @property {T} value
	 * @property {LinkedListNode<T> | null} prev The previous node.
	 * @property {LinkedListNode<T> | null} next The next node.
	 * @template T
	 * @private
	 */ /**
	 * @template T
	 * @private
	 */ function LinkedList() {
        /** @type {LinkedListNode<T>} */ var head = {
            value: null,
            prev: null,
            next: null
        };
        /** @type {LinkedListNode<T>} */ var tail = {
            value: null,
            prev: head,
            next: null
        };
        head.next = tail;
        /** @type {LinkedListNode<T>} */ this.head = head;
        /** @type {LinkedListNode<T>} */ this.tail = tail;
        this.length = 0;
    }
    /**
	 * Adds a new node with the given value to the list.
	 *
	 * @param {LinkedList<T>} list
	 * @param {LinkedListNode<T>} node
	 * @param {T} value
	 * @returns {LinkedListNode<T>} The added node.
	 * @template T
	 */ function addAfter(list, node, value) {
        // assumes that node != list.tail && values.length >= 0
        var next = node.next;
        var newNode = {
            value: value,
            prev: node,
            next: next
        };
        node.next = newNode;
        next.prev = newNode;
        list.length++;
        return newNode;
    }
    /**
	 * Removes `count` nodes after the given node. The given node will not be removed.
	 *
	 * @param {LinkedList<T>} list
	 * @param {LinkedListNode<T>} node
	 * @param {number} count
	 * @template T
	 */ function removeRange(list, node, count) {
        var next = node.next;
        for(var i = 0; i < count && next !== list.tail; i++)next = next.next;
        node.next = next;
        next.prev = node;
        list.length -= i;
    }
    /**
	 * @param {LinkedList<T>} list
	 * @returns {T[]}
	 * @template T
	 */ function toArray(list) {
        var array = [];
        var node = list.head.next;
        while(node !== list.tail){
            array.push(node.value);
            node = node.next;
        }
        return array;
    }
    if (!_self.document) {
        if (!_self.addEventListener) // in Node.js
        return _;
        if (!_.disableWorkerMessageHandler) // In worker
        _self.addEventListener("message", function(evt) {
            var message = JSON.parse(evt.data);
            var lang = message.language;
            var code = message.code;
            var immediateClose = message.immediateClose;
            _self.postMessage(_.highlight(code, _.languages[lang], lang));
            if (immediateClose) _self.close();
        }, false);
        return _;
    }
    // Get current script and highlight
    var script = _.util.currentScript();
    if (script) {
        _.filename = script.src;
        if (script.hasAttribute("data-manual")) _.manual = true;
    }
    function highlightAutomaticallyCallback() {
        if (!_.manual) _.highlightAll();
    }
    if (!_.manual) {
        // If the document state is "loading", then we'll use DOMContentLoaded.
        // If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
        // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
        // might take longer one animation frame to execute which can create a race condition where only some plugins have
        // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
        // See https://github.com/PrismJS/prism/issues/2102
        var readyState = document.readyState;
        if (readyState === "loading" || readyState === "interactive" && script && script.defer) document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback);
        else if (window.requestAnimationFrame) window.requestAnimationFrame(highlightAutomaticallyCallback);
        else window.setTimeout(highlightAutomaticallyCallback, 16);
    }
    return _;
}(_self);
if (0, module.exports) module.exports = Prism;
// hack for components to work correctly in node.js
if (typeof global !== "undefined") global.Prism = Prism;
// some additional documentation/types
/**
 * The expansion of a simple `RegExp` literal to support additional properties.
 *
 * @typedef GrammarToken
 * @property {RegExp} pattern The regular expression of the token.
 * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
 * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
 * @property {boolean} [greedy=false] Whether the token is greedy.
 * @property {string|string[]} [alias] An optional alias or list of aliases.
 * @property {Grammar} [inside] The nested grammar of this token.
 *
 * The `inside` grammar will be used to tokenize the text value of each token of this kind.
 *
 * This can be used to make nested and even recursive language definitions.
 *
 * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
 * each another.
 * @global
 * @public
 */ /**
 * @typedef Grammar
 * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
 * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
 * @global
 * @public
 */ /**
 * A function which will invoked after an element was successfully highlighted.
 *
 * @callback HighlightCallback
 * @param {Element} element The element successfully highlighted.
 * @returns {void}
 * @global
 * @public
 */ /**
 * @callback HookCallback
 * @param {Object<string, any>} env The environment variables of the hook.
 * @returns {void}
 * @global
 * @public
 */ /* **********************************************
     Begin prism-markup.js
********************************************** */ Prism.languages.markup = {
    "comment": {
        pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
        greedy: true
    },
    "prolog": {
        pattern: /<\?[\s\S]+?\?>/,
        greedy: true
    },
    "doctype": {
        // https://www.w3.org/TR/xml/#NT-doctypedecl
        pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
        greedy: true,
        inside: {
            "internal-subset": {
                pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
                lookbehind: true,
                greedy: true,
                inside: null // see below
            },
            "string": {
                pattern: /"[^"]*"|'[^']*'/,
                greedy: true
            },
            "punctuation": /^<!|>$|[[\]]/,
            "doctype-tag": /^DOCTYPE/i,
            "name": /[^\s<>'"]+/
        }
    },
    "cdata": {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        greedy: true
    },
    "tag": {
        pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
        greedy: true,
        inside: {
            "tag": {
                pattern: /^<\/?[^\s>\/]+/,
                inside: {
                    "punctuation": /^<\/?/,
                    "namespace": /^[^\s>\/:]+:/
                }
            },
            "special-attr": [],
            "attr-value": {
                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
                inside: {
                    "punctuation": [
                        {
                            pattern: /^=/,
                            alias: "attr-equals"
                        },
                        {
                            pattern: /^(\s*)["']|["']$/,
                            lookbehind: true
                        }
                    ]
                }
            },
            "punctuation": /\/?>/,
            "attr-name": {
                pattern: /[^\s>\/]+/,
                inside: {
                    "namespace": /^[^\s>\/:]+:/
                }
            }
        }
    },
    "entity": [
        {
            pattern: /&[\da-z]{1,8};/i,
            alias: "named-entity"
        },
        /&#x?[\da-f]{1,8};/i
    ]
};
Prism.languages.markup["tag"].inside["attr-value"].inside["entity"] = Prism.languages.markup["entity"];
Prism.languages.markup["doctype"].inside["internal-subset"].inside = Prism.languages.markup;
// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add("wrap", function(env) {
    if (env.type === "entity") env.attributes["title"] = env.content.replace(/&amp;/, "&");
});
Object.defineProperty(Prism.languages.markup.tag, "addInlined", {
    /**
	 * Adds an inlined language to markup.
	 *
	 * An example of an inlined language is CSS with `<style>` tags.
	 *
	 * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addInlined('style', 'css');
	 */ value: function addInlined(tagName, lang) {
        var includedCdataInside = {};
        includedCdataInside["language-" + lang] = {
            pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
            lookbehind: true,
            inside: Prism.languages[lang]
        };
        includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
        var inside = {
            "included-cdata": {
                pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
                inside: includedCdataInside
            }
        };
        inside["language-" + lang] = {
            pattern: /[\s\S]+/,
            inside: Prism.languages[lang]
        };
        var def = {};
        def[tagName] = {
            pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
                return tagName;
            }), "i"),
            lookbehind: true,
            greedy: true,
            inside: inside
        };
        Prism.languages.insertBefore("markup", "cdata", def);
    }
});
Object.defineProperty(Prism.languages.markup.tag, "addAttribute", {
    /**
	 * Adds an pattern to highlight languages embedded in HTML attributes.
	 *
	 * An example of an inlined language is CSS with `style` attributes.
	 *
	 * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addAttribute('style', 'css');
	 */ value: function(attrName, lang) {
        Prism.languages.markup.tag.inside["special-attr"].push({
            pattern: RegExp(/(^|["'\s])/.source + "(?:" + attrName + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, "i"),
            lookbehind: true,
            inside: {
                "attr-name": /^[^\s=]+/,
                "attr-value": {
                    pattern: /=[\s\S]+/,
                    inside: {
                        "value": {
                            pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                            lookbehind: true,
                            alias: [
                                lang,
                                "language-" + lang
                            ],
                            inside: Prism.languages[lang]
                        },
                        "punctuation": [
                            {
                                pattern: /^=/,
                                alias: "attr-equals"
                            },
                            /"|'/
                        ]
                    }
                }
            }
        });
    }
});
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;
Prism.languages.xml = Prism.languages.extend("markup", {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;
/* **********************************************
     Begin prism-css.js
********************************************** */ (function(Prism) {
    var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
    Prism.languages.css = {
        "comment": /\/\*[\s\S]*?\*\//,
        "atrule": {
            pattern: RegExp("@[\\w-](?:" + /[^;{\s"']|\s+(?!\s)/.source + "|" + string.source + ")*?" + /(?:;|(?=\s*\{))/.source),
            inside: {
                "rule": /^@[\w-]+/,
                "selector-function-argument": {
                    pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
                    lookbehind: true,
                    alias: "selector"
                },
                "keyword": {
                    pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
                    lookbehind: true
                }
            }
        },
        "url": {
            // https://drafts.csswg.org/css-values-3/#urls
            pattern: RegExp("\\burl\\((?:" + string.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
            greedy: true,
            inside: {
                "function": /^url/i,
                "punctuation": /^\(|\)$/,
                "string": {
                    pattern: RegExp("^" + string.source + "$"),
                    alias: "url"
                }
            }
        },
        "selector": {
            pattern: RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|" + string.source + ")*(?=\\s*\\{)"),
            lookbehind: true
        },
        "string": {
            pattern: string,
            greedy: true
        },
        "property": {
            pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
            lookbehind: true
        },
        "important": /!important\b/i,
        "function": {
            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
            lookbehind: true
        },
        "punctuation": /[(){};:,]/
    };
    Prism.languages.css["atrule"].inside.rest = Prism.languages.css;
    var markup = Prism.languages.markup;
    if (markup) {
        markup.tag.addInlined("style", "css");
        markup.tag.addAttribute("style", "css");
    }
})(Prism);
/* **********************************************
     Begin prism-clike.js
********************************************** */ Prism.languages.clike = {
    "comment": [
        {
            pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
            lookbehind: true,
            greedy: true
        },
        {
            pattern: /(^|[^\\:])\/\/.*/,
            lookbehind: true,
            greedy: true
        }
    ],
    "string": {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: true
    },
    "class-name": {
        pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
        lookbehind: true,
        inside: {
            "punctuation": /[.\\]/
        }
    },
    "keyword": /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
    "boolean": /\b(?:false|true)\b/,
    "function": /\b\w+(?=\()/,
    "number": /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    "operator": /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
    "punctuation": /[{}[\];(),.:]/
};
/* **********************************************
     Begin prism-javascript.js
********************************************** */ Prism.languages.javascript = Prism.languages.extend("clike", {
    "class-name": [
        Prism.languages.clike["class-name"],
        {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
            lookbehind: true
        }
    ],
    "keyword": [
        {
            pattern: /((?:^|\})\s*)catch\b/,
            lookbehind: true
        },
        {
            pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
            lookbehind: true
        }
    ],
    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
    "function": /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
    "number": {
        pattern: RegExp(/(^|[^\w$])/.source + "(?:" + // constant
        (/NaN|Infinity/.source + "|" + // binary integer
        /0[bB][01]+(?:_[01]+)*n?/.source + "|" + // octal integer
        /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + // hexadecimal integer
        /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + // decimal bigint
        /\d+(?:_\d+)*n/.source + "|" + // decimal number (integer or float) but no bigint
        /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source),
        lookbehind: true
    },
    "operator": /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});
Prism.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
Prism.languages.insertBefore("javascript", "keyword", {
    "regex": {
        pattern: RegExp(// lookbehind
        // eslint-disable-next-line regexp/no-dupe-characters-character-class
        /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source + // Regex pattern:
        // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
        // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
        // with the only syntax, so we have to define 2 different regex patterns.
        /\//.source + "(?:" + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + "|" + // `v` flag syntax. This supports 3 levels of nested character classes.
        /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ")" + // lookahead
        /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),
        lookbehind: true,
        greedy: true,
        inside: {
            "regex-source": {
                pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
                lookbehind: true,
                alias: "language-regex",
                inside: Prism.languages.regex
            },
            "regex-delimiter": /^\/|\/$/,
            "regex-flags": /^[a-z]+$/
        }
    },
    // This must be declared before keyword because we use "function" inside the look-forward
    "function-variable": {
        pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
        alias: "function"
    },
    "parameter": [
        {
            pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
            lookbehind: true,
            inside: Prism.languages.javascript
        },
        {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
            lookbehind: true,
            inside: Prism.languages.javascript
        },
        {
            pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
            lookbehind: true,
            inside: Prism.languages.javascript
        },
        {
            pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
            lookbehind: true,
            inside: Prism.languages.javascript
        }
    ],
    "constant": /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});
Prism.languages.insertBefore("javascript", "string", {
    "hashbang": {
        pattern: /^#!.*/,
        greedy: true,
        alias: "comment"
    },
    "template-string": {
        pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
        greedy: true,
        inside: {
            "template-punctuation": {
                pattern: /^`|`$/,
                alias: "string"
            },
            "interpolation": {
                pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
                lookbehind: true,
                inside: {
                    "interpolation-punctuation": {
                        pattern: /^\$\{|\}$/,
                        alias: "punctuation"
                    },
                    rest: Prism.languages.javascript
                }
            },
            "string": /[\s\S]+/
        }
    },
    "string-property": {
        pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
        lookbehind: true,
        greedy: true,
        alias: "property"
    }
});
Prism.languages.insertBefore("javascript", "operator", {
    "literal-property": {
        pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
        lookbehind: true,
        alias: "property"
    }
});
if (Prism.languages.markup) {
    Prism.languages.markup.tag.addInlined("script", "javascript");
    // add attribute support for all DOM events.
    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
    Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, "javascript");
}
Prism.languages.js = Prism.languages.javascript;
/* **********************************************
     Begin prism-file-highlight.js
********************************************** */ (function() {
    if (typeof Prism === "undefined" || typeof document === "undefined") return;
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
    if (!Element.prototype.matches) Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    var LOADING_MESSAGE = "Loading\u2026";
    var FAILURE_MESSAGE = function(status, message) {
        return "\u2716 Error " + status + " while fetching file: " + message;
    };
    var FAILURE_EMPTY_MESSAGE = "\u2716 Error: File does not exist or is empty";
    var EXTENSIONS = {
        "js": "javascript",
        "py": "python",
        "rb": "ruby",
        "ps1": "powershell",
        "psm1": "powershell",
        "sh": "bash",
        "bat": "batch",
        "h": "c",
        "tex": "latex"
    };
    var STATUS_ATTR = "data-src-status";
    var STATUS_LOADING = "loading";
    var STATUS_LOADED = "loaded";
    var STATUS_FAILED = "failed";
    var SELECTOR = "pre[data-src]:not([" + STATUS_ATTR + '="' + STATUS_LOADED + '"])' + ":not([" + STATUS_ATTR + '="' + STATUS_LOADING + '"])';
    /**
	 * Loads the given file.
	 *
	 * @param {string} src The URL or path of the source file to load.
	 * @param {(result: string) => void} success
	 * @param {(reason: string) => void} error
	 */ function loadFile(src, success, error) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", src, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState == 4) {
                if (xhr.status < 400 && xhr.responseText) success(xhr.responseText);
                else if (xhr.status >= 400) error(FAILURE_MESSAGE(xhr.status, xhr.statusText));
                else error(FAILURE_EMPTY_MESSAGE);
            }
        };
        xhr.send(null);
    }
    /**
	 * Parses the given range.
	 *
	 * This returns a range with inclusive ends.
	 *
	 * @param {string | null | undefined} range
	 * @returns {[number, number | undefined] | undefined}
	 */ function parseRange(range) {
        var m = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range || "");
        if (m) {
            var start = Number(m[1]);
            var comma = m[2];
            var end = m[3];
            if (!comma) return [
                start,
                start
            ];
            if (!end) return [
                start,
                undefined
            ];
            return [
                start,
                Number(end)
            ];
        }
        return undefined;
    }
    Prism.hooks.add("before-highlightall", function(env) {
        env.selector += ", " + SELECTOR;
    });
    Prism.hooks.add("before-sanity-check", function(env) {
        var pre = /** @type {HTMLPreElement} */ env.element;
        if (pre.matches(SELECTOR)) {
            env.code = ""; // fast-path the whole thing and go to complete
            pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading
            // add code element with loading message
            var code = pre.appendChild(document.createElement("CODE"));
            code.textContent = LOADING_MESSAGE;
            var src = pre.getAttribute("data-src");
            var language = env.language;
            if (language === "none") {
                // the language might be 'none' because there is no language set;
                // in this case, we want to use the extension as the language
                var extension = (/\.(\w+)$/.exec(src) || [
                    ,
                    "none"
                ])[1];
                language = EXTENSIONS[extension] || extension;
            }
            // set language classes
            Prism.util.setLanguage(code, language);
            Prism.util.setLanguage(pre, language);
            // preload the language
            var autoloader = Prism.plugins.autoloader;
            if (autoloader) autoloader.loadLanguages(language);
            // load file
            loadFile(src, function(text) {
                // mark as loaded
                pre.setAttribute(STATUS_ATTR, STATUS_LOADED);
                // handle data-range
                var range = parseRange(pre.getAttribute("data-range"));
                if (range) {
                    var lines = text.split(/\r\n?|\n/g);
                    // the range is one-based and inclusive on both ends
                    var start = range[0];
                    var end = range[1] == null ? lines.length : range[1];
                    if (start < 0) start += lines.length;
                    start = Math.max(0, Math.min(start - 1, lines.length));
                    if (end < 0) end += lines.length;
                    end = Math.max(0, Math.min(end, lines.length));
                    text = lines.slice(start, end).join("\n");
                    // add data-start for line numbers
                    if (!pre.hasAttribute("data-start")) pre.setAttribute("data-start", String(start + 1));
                }
                // highlight code
                code.textContent = text;
                Prism.highlightElement(code);
            }, function(error) {
                // mark as failed
                pre.setAttribute(STATUS_ATTR, STATUS_FAILED);
                code.textContent = error;
            });
        }
    });
    Prism.plugins.fileHighlight = {
        /**
		 * Executes the File Highlight plugin for all matching `pre` elements under the given container.
		 *
		 * Note: Elements which are already loaded or currently loading will not be touched by this method.
		 *
		 * @param {ParentNode} [container=document]
		 */ highlight: function highlight(container) {
            var elements = (container || document).querySelectorAll(SELECTOR);
            for(var i = 0, element; element = elements[i++];)Prism.highlightElement(element);
        }
    };
    var logged = false;
    /** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */ Prism.fileHighlight = function() {
        if (!logged) {
            console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.");
            logged = true;
        }
        Prism.plugins.fileHighlight.highlight.apply(this, arguments);
    };
})();

},{}],"gw7fg":[function(require,module,exports) {
module.exports = JSON.parse('{"categories":[{"id":"people","emojis":["grinning","smiley","smile","grin","laughing","sweat_smile","rolling_on_the_floor_laughing","joy","slightly_smiling_face","upside_down_face","melting_face","wink","blush","innocent","smiling_face_with_3_hearts","heart_eyes","star-struck","kissing_heart","kissing","relaxed","kissing_closed_eyes","kissing_smiling_eyes","smiling_face_with_tear","yum","stuck_out_tongue","stuck_out_tongue_winking_eye","zany_face","stuck_out_tongue_closed_eyes","money_mouth_face","hugging_face","face_with_hand_over_mouth","face_with_open_eyes_and_hand_over_mouth","face_with_peeking_eye","shushing_face","thinking_face","saluting_face","zipper_mouth_face","face_with_raised_eyebrow","neutral_face","expressionless","no_mouth","dotted_line_face","face_in_clouds","smirk","unamused","face_with_rolling_eyes","grimacing","face_exhaling","lying_face","relieved","pensive","sleepy","drooling_face","sleeping","mask","face_with_thermometer","face_with_head_bandage","nauseated_face","face_vomiting","sneezing_face","hot_face","cold_face","woozy_face","dizzy_face","face_with_spiral_eyes","exploding_head","face_with_cowboy_hat","partying_face","disguised_face","sunglasses","nerd_face","face_with_monocle","confused","face_with_diagonal_mouth","worried","slightly_frowning_face","white_frowning_face","open_mouth","hushed","astonished","flushed","pleading_face","face_holding_back_tears","frowning","anguished","fearful","cold_sweat","disappointed_relieved","cry","sob","scream","confounded","persevere","disappointed","sweat","weary","tired_face","yawning_face","triumph","rage","angry","face_with_symbols_on_mouth","smiling_imp","imp","skull","skull_and_crossbones","hankey","clown_face","japanese_ogre","japanese_goblin","ghost","alien","space_invader","robot_face","wave","raised_back_of_hand","raised_hand_with_fingers_splayed","hand","spock-hand","rightwards_hand","leftwards_hand","palm_down_hand","palm_up_hand","ok_hand","pinched_fingers","pinching_hand","v","crossed_fingers","hand_with_index_finger_and_thumb_crossed","i_love_you_hand_sign","the_horns","call_me_hand","point_left","point_right","point_up_2","middle_finger","point_down","point_up","index_pointing_at_the_viewer","+1","-1","fist","facepunch","left-facing_fist","right-facing_fist","clap","raised_hands","heart_hands","open_hands","palms_up_together","handshake","pray","writing_hand","nail_care","selfie","muscle","mechanical_arm","mechanical_leg","leg","foot","ear","ear_with_hearing_aid","nose","brain","anatomical_heart","lungs","tooth","bone","eyes","eye","tongue","lips","biting_lip","baby","child","boy","girl","adult","person_with_blond_hair","man","bearded_person","man_with_beard","woman_with_beard","red_haired_man","curly_haired_man","white_haired_man","bald_man","woman","red_haired_woman","red_haired_person","curly_haired_woman","curly_haired_person","white_haired_woman","white_haired_person","bald_woman","bald_person","blond-haired-woman","blond-haired-man","older_adult","older_man","older_woman","person_frowning","man-frowning","woman-frowning","person_with_pouting_face","man-pouting","woman-pouting","no_good","man-gesturing-no","woman-gesturing-no","ok_woman","man-gesturing-ok","woman-gesturing-ok","information_desk_person","man-tipping-hand","woman-tipping-hand","raising_hand","man-raising-hand","woman-raising-hand","deaf_person","deaf_man","deaf_woman","bow","man-bowing","woman-bowing","face_palm","man-facepalming","woman-facepalming","shrug","man-shrugging","woman-shrugging","health_worker","male-doctor","female-doctor","student","male-student","female-student","teacher","male-teacher","female-teacher","judge","male-judge","female-judge","farmer","male-farmer","female-farmer","cook","male-cook","female-cook","mechanic","male-mechanic","female-mechanic","factory_worker","male-factory-worker","female-factory-worker","office_worker","male-office-worker","female-office-worker","scientist","male-scientist","female-scientist","technologist","male-technologist","female-technologist","singer","male-singer","female-singer","artist","male-artist","female-artist","pilot","male-pilot","female-pilot","astronaut","male-astronaut","female-astronaut","firefighter","male-firefighter","female-firefighter","cop","male-police-officer","female-police-officer","sleuth_or_spy","male-detective","female-detective","guardsman","male-guard","female-guard","ninja","construction_worker","male-construction-worker","female-construction-worker","person_with_crown","prince","princess","man_with_turban","man-wearing-turban","woman-wearing-turban","man_with_gua_pi_mao","person_with_headscarf","person_in_tuxedo","man_in_tuxedo","woman_in_tuxedo","bride_with_veil","man_with_veil","woman_with_veil","pregnant_woman","pregnant_man","pregnant_person","breast-feeding","woman_feeding_baby","man_feeding_baby","person_feeding_baby","angel","santa","mrs_claus","mx_claus","superhero","male_superhero","female_superhero","supervillain","male_supervillain","female_supervillain","mage","male_mage","female_mage","fairy","male_fairy","female_fairy","vampire","male_vampire","female_vampire","merperson","merman","mermaid","elf","male_elf","female_elf","genie","male_genie","female_genie","zombie","male_zombie","female_zombie","troll","massage","man-getting-massage","woman-getting-massage","haircut","man-getting-haircut","woman-getting-haircut","walking","man-walking","woman-walking","standing_person","man_standing","woman_standing","kneeling_person","man_kneeling","woman_kneeling","person_with_probing_cane","man_with_probing_cane","woman_with_probing_cane","person_in_motorized_wheelchair","man_in_motorized_wheelchair","woman_in_motorized_wheelchair","person_in_manual_wheelchair","man_in_manual_wheelchair","woman_in_manual_wheelchair","runner","man-running","woman-running","dancer","man_dancing","man_in_business_suit_levitating","dancers","men-with-bunny-ears-partying","women-with-bunny-ears-partying","person_in_steamy_room","man_in_steamy_room","woman_in_steamy_room","person_climbing","man_climbing","woman_climbing","fencer","horse_racing","skier","snowboarder","golfer","man-golfing","woman-golfing","surfer","man-surfing","woman-surfing","rowboat","man-rowing-boat","woman-rowing-boat","swimmer","man-swimming","woman-swimming","person_with_ball","man-bouncing-ball","woman-bouncing-ball","weight_lifter","man-lifting-weights","woman-lifting-weights","bicyclist","man-biking","woman-biking","mountain_bicyclist","man-mountain-biking","woman-mountain-biking","person_doing_cartwheel","man-cartwheeling","woman-cartwheeling","wrestlers","man-wrestling","woman-wrestling","water_polo","man-playing-water-polo","woman-playing-water-polo","handball","man-playing-handball","woman-playing-handball","juggling","man-juggling","woman-juggling","person_in_lotus_position","man_in_lotus_position","woman_in_lotus_position","bath","sleeping_accommodation","people_holding_hands","two_women_holding_hands","man_and_woman_holding_hands","two_men_holding_hands","couplekiss","woman-kiss-man","man-kiss-man","woman-kiss-woman","couple_with_heart","woman-heart-man","man-heart-man","woman-heart-woman","family","man-woman-boy","man-woman-girl","man-woman-girl-boy","man-woman-boy-boy","man-woman-girl-girl","man-man-boy","man-man-girl","man-man-girl-boy","man-man-boy-boy","man-man-girl-girl","woman-woman-boy","woman-woman-girl","woman-woman-girl-boy","woman-woman-boy-boy","woman-woman-girl-girl","man-boy","man-boy-boy","man-girl","man-girl-boy","man-girl-girl","woman-boy","woman-boy-boy","woman-girl","woman-girl-boy","woman-girl-girl","speaking_head_in_silhouette","bust_in_silhouette","busts_in_silhouette","people_hugging","footprints","smiley_cat","smile_cat","joy_cat","heart_eyes_cat","smirk_cat","kissing_cat","scream_cat","crying_cat_face","pouting_cat","see_no_evil","hear_no_evil","speak_no_evil","kiss","love_letter","cupid","gift_heart","sparkling_heart","heartpulse","heartbeat","revolving_hearts","two_hearts","heart_decoration","heavy_heart_exclamation_mark_ornament","broken_heart","heart_on_fire","mending_heart","heart","orange_heart","yellow_heart","green_heart","blue_heart","purple_heart","brown_heart","black_heart","white_heart","100","anger","boom","dizzy","sweat_drops","dash","hole","bomb","speech_balloon","eye-in-speech-bubble","left_speech_bubble","right_anger_bubble","thought_balloon","zzz"]},{"id":"nature","emojis":["monkey_face","monkey","gorilla","orangutan","dog","dog2","guide_dog","service_dog","poodle","wolf","fox_face","raccoon","cat","cat2","black_cat","lion_face","tiger","tiger2","leopard","horse","racehorse","unicorn_face","zebra_face","deer","bison","cow","ox","water_buffalo","cow2","pig","pig2","boar","pig_nose","ram","sheep","goat","dromedary_camel","camel","llama","giraffe_face","elephant","mammoth","rhinoceros","hippopotamus","mouse","mouse2","rat","hamster","rabbit","rabbit2","chipmunk","beaver","hedgehog","bat","bear","polar_bear","koala","panda_face","sloth","otter","skunk","kangaroo","badger","feet","turkey","chicken","rooster","hatching_chick","baby_chick","hatched_chick","bird","penguin","dove_of_peace","eagle","duck","swan","owl","dodo","feather","flamingo","peacock","parrot","frog","crocodile","turtle","lizard","snake","dragon_face","dragon","sauropod","t-rex","whale","whale2","dolphin","seal","fish","tropical_fish","blowfish","shark","octopus","shell","coral","snail","butterfly","bug","ant","bee","beetle","ladybug","cricket","cockroach","spider","spider_web","scorpion","mosquito","fly","worm","microbe","bouquet","cherry_blossom","white_flower","lotus","rosette","rose","wilted_flower","hibiscus","sunflower","blossom","tulip","seedling","potted_plant","evergreen_tree","deciduous_tree","palm_tree","cactus","ear_of_rice","herb","shamrock","four_leaf_clover","maple_leaf","fallen_leaf","leaves","empty_nest","nest_with_eggs"]},{"id":"foods","emojis":["grapes","melon","watermelon","tangerine","lemon","banana","pineapple","mango","apple","green_apple","pear","peach","cherries","strawberry","blueberries","kiwifruit","tomato","olive","coconut","avocado","eggplant","potato","carrot","corn","hot_pepper","bell_pepper","cucumber","leafy_green","broccoli","garlic","onion","mushroom","peanuts","beans","chestnut","bread","croissant","baguette_bread","flatbread","pretzel","bagel","pancakes","waffle","cheese_wedge","meat_on_bone","poultry_leg","cut_of_meat","bacon","hamburger","fries","pizza","hotdog","sandwich","taco","burrito","tamale","stuffed_flatbread","falafel","egg","fried_egg","shallow_pan_of_food","stew","fondue","bowl_with_spoon","green_salad","popcorn","butter","salt","canned_food","bento","rice_cracker","rice_ball","rice","curry","ramen","spaghetti","sweet_potato","oden","sushi","fried_shrimp","fish_cake","moon_cake","dango","dumpling","fortune_cookie","takeout_box","crab","lobster","shrimp","squid","oyster","icecream","shaved_ice","ice_cream","doughnut","cookie","birthday","cake","cupcake","pie","chocolate_bar","candy","lollipop","custard","honey_pot","baby_bottle","glass_of_milk","coffee","teapot","tea","sake","champagne","wine_glass","cocktail","tropical_drink","beer","beers","clinking_glasses","tumbler_glass","pouring_liquid","cup_with_straw","bubble_tea","beverage_box","mate_drink","ice_cube","chopsticks","knife_fork_plate","fork_and_knife","spoon","hocho","jar","amphora"]},{"id":"activity","emojis":["jack_o_lantern","christmas_tree","fireworks","sparkler","firecracker","sparkles","balloon","tada","confetti_ball","tanabata_tree","bamboo","dolls","flags","wind_chime","rice_scene","red_envelope","ribbon","gift","reminder_ribbon","admission_tickets","ticket","medal","trophy","sports_medal","first_place_medal","second_place_medal","third_place_medal","soccer","baseball","softball","basketball","volleyball","football","rugby_football","tennis","flying_disc","bowling","cricket_bat_and_ball","field_hockey_stick_and_ball","ice_hockey_stick_and_puck","lacrosse","table_tennis_paddle_and_ball","badminton_racquet_and_shuttlecock","boxing_glove","martial_arts_uniform","goal_net","golf","ice_skate","fishing_pole_and_fish","diving_mask","running_shirt_with_sash","ski","sled","curling_stone","dart","yo-yo","kite","8ball","crystal_ball","magic_wand","nazar_amulet","hamsa","video_game","joystick","slot_machine","game_die","jigsaw","teddy_bear","pinata","mirror_ball","nesting_dolls","spades","hearts","diamonds","clubs","chess_pawn","black_joker","mahjong","flower_playing_cards","performing_arts","frame_with_picture","art","thread","sewing_needle","yarn","knot"]},{"id":"places","emojis":["earth_africa","earth_americas","earth_asia","globe_with_meridians","world_map","japan","compass","snow_capped_mountain","mountain","volcano","mount_fuji","camping","beach_with_umbrella","desert","desert_island","national_park","stadium","classical_building","building_construction","bricks","rock","wood","hut","house_buildings","derelict_house_building","house","house_with_garden","office","post_office","european_post_office","hospital","bank","hotel","love_hotel","convenience_store","school","department_store","factory","japanese_castle","european_castle","wedding","tokyo_tower","statue_of_liberty","church","mosque","hindu_temple","synagogue","shinto_shrine","kaaba","fountain","tent","foggy","night_with_stars","cityscape","sunrise_over_mountains","sunrise","city_sunset","city_sunrise","bridge_at_night","hotsprings","carousel_horse","playground_slide","ferris_wheel","roller_coaster","barber","circus_tent","steam_locomotive","railway_car","bullettrain_side","bullettrain_front","train2","metro","light_rail","station","tram","monorail","mountain_railway","train","bus","oncoming_bus","trolleybus","minibus","ambulance","fire_engine","police_car","oncoming_police_car","taxi","oncoming_taxi","car","oncoming_automobile","blue_car","pickup_truck","truck","articulated_lorry","tractor","racing_car","racing_motorcycle","motor_scooter","manual_wheelchair","motorized_wheelchair","auto_rickshaw","bike","scooter","skateboard","roller_skate","busstop","motorway","railway_track","oil_drum","fuelpump","wheel","rotating_light","traffic_light","vertical_traffic_light","octagonal_sign","construction","anchor","ring_buoy","boat","canoe","speedboat","passenger_ship","ferry","motor_boat","ship","airplane","small_airplane","airplane_departure","airplane_arriving","parachute","seat","helicopter","suspension_railway","mountain_cableway","aerial_tramway","satellite","rocket","flying_saucer","bellhop_bell","luggage","hourglass","hourglass_flowing_sand","watch","alarm_clock","stopwatch","timer_clock","mantelpiece_clock","clock12","clock1230","clock1","clock130","clock2","clock230","clock3","clock330","clock4","clock430","clock5","clock530","clock6","clock630","clock7","clock730","clock8","clock830","clock9","clock930","clock10","clock1030","clock11","clock1130","new_moon","waxing_crescent_moon","first_quarter_moon","moon","full_moon","waning_gibbous_moon","last_quarter_moon","waning_crescent_moon","crescent_moon","new_moon_with_face","first_quarter_moon_with_face","last_quarter_moon_with_face","thermometer","sunny","full_moon_with_face","sun_with_face","ringed_planet","star","star2","stars","milky_way","cloud","partly_sunny","thunder_cloud_and_rain","mostly_sunny","barely_sunny","partly_sunny_rain","rain_cloud","snow_cloud","lightning","tornado","fog","wind_blowing_face","cyclone","rainbow","closed_umbrella","umbrella","umbrella_with_rain_drops","umbrella_on_ground","zap","snowflake","snowman","snowman_without_snow","comet","fire","droplet","ocean"]},{"id":"objects","emojis":["eyeglasses","dark_sunglasses","goggles","lab_coat","safety_vest","necktie","shirt","jeans","scarf","gloves","coat","socks","dress","kimono","sari","one-piece_swimsuit","briefs","shorts","bikini","womans_clothes","purse","handbag","pouch","shopping_bags","school_satchel","thong_sandal","mans_shoe","athletic_shoe","hiking_boot","womans_flat_shoe","high_heel","sandal","ballet_shoes","boot","crown","womans_hat","tophat","mortar_board","billed_cap","military_helmet","helmet_with_white_cross","prayer_beads","lipstick","ring","gem","mute","speaker","sound","loud_sound","loudspeaker","mega","postal_horn","bell","no_bell","musical_score","musical_note","notes","studio_microphone","level_slider","control_knobs","microphone","headphones","radio","saxophone","accordion","guitar","musical_keyboard","trumpet","violin","banjo","drum_with_drumsticks","long_drum","iphone","calling","phone","telephone_receiver","pager","fax","battery","low_battery","electric_plug","computer","desktop_computer","printer","keyboard","three_button_mouse","trackball","minidisc","floppy_disk","cd","dvd","abacus","movie_camera","film_frames","film_projector","clapper","tv","camera","camera_with_flash","video_camera","vhs","mag","mag_right","candle","bulb","flashlight","izakaya_lantern","diya_lamp","notebook_with_decorative_cover","closed_book","book","green_book","blue_book","orange_book","books","notebook","ledger","page_with_curl","scroll","page_facing_up","newspaper","rolled_up_newspaper","bookmark_tabs","bookmark","label","moneybag","coin","yen","dollar","euro","pound","money_with_wings","credit_card","receipt","chart","email","e-mail","incoming_envelope","envelope_with_arrow","outbox_tray","inbox_tray","package","mailbox","mailbox_closed","mailbox_with_mail","mailbox_with_no_mail","postbox","ballot_box_with_ballot","pencil2","black_nib","lower_left_fountain_pen","lower_left_ballpoint_pen","lower_left_paintbrush","lower_left_crayon","memo","briefcase","file_folder","open_file_folder","card_index_dividers","date","calendar","spiral_note_pad","spiral_calendar_pad","card_index","chart_with_upwards_trend","chart_with_downwards_trend","bar_chart","clipboard","pushpin","round_pushpin","paperclip","linked_paperclips","straight_ruler","triangular_ruler","scissors","card_file_box","file_cabinet","wastebasket","lock","unlock","lock_with_ink_pen","closed_lock_with_key","key","old_key","hammer","axe","pick","hammer_and_pick","hammer_and_wrench","dagger_knife","crossed_swords","gun","boomerang","bow_and_arrow","shield","carpentry_saw","wrench","screwdriver","nut_and_bolt","gear","compression","scales","probing_cane","link","chains","hook","toolbox","magnet","ladder","alembic","test_tube","petri_dish","dna","microscope","telescope","satellite_antenna","syringe","drop_of_blood","pill","adhesive_bandage","crutch","stethoscope","x-ray","door","elevator","mirror","window","bed","couch_and_lamp","chair","toilet","plunger","shower","bathtub","mouse_trap","razor","lotion_bottle","safety_pin","broom","basket","roll_of_paper","bucket","soap","bubbles","toothbrush","sponge","fire_extinguisher","shopping_trolley","smoking","coffin","headstone","funeral_urn","moyai","placard","identification_card"]},{"id":"symbols","emojis":["atm","put_litter_in_its_place","potable_water","wheelchair","mens","womens","restroom","baby_symbol","wc","passport_control","customs","baggage_claim","left_luggage","warning","children_crossing","no_entry","no_entry_sign","no_bicycles","no_smoking","do_not_litter","non-potable_water","no_pedestrians","no_mobile_phones","underage","radioactive_sign","biohazard_sign","arrow_up","arrow_upper_right","arrow_right","arrow_lower_right","arrow_down","arrow_lower_left","arrow_left","arrow_upper_left","arrow_up_down","left_right_arrow","leftwards_arrow_with_hook","arrow_right_hook","arrow_heading_up","arrow_heading_down","arrows_clockwise","arrows_counterclockwise","back","end","on","soon","top","place_of_worship","atom_symbol","om_symbol","star_of_david","wheel_of_dharma","yin_yang","latin_cross","orthodox_cross","star_and_crescent","peace_symbol","menorah_with_nine_branches","six_pointed_star","aries","taurus","gemini","cancer","leo","virgo","libra","scorpius","sagittarius","capricorn","aquarius","pisces","ophiuchus","twisted_rightwards_arrows","repeat","repeat_one","arrow_forward","fast_forward","black_right_pointing_double_triangle_with_vertical_bar","black_right_pointing_triangle_with_double_vertical_bar","arrow_backward","rewind","black_left_pointing_double_triangle_with_vertical_bar","arrow_up_small","arrow_double_up","arrow_down_small","arrow_double_down","double_vertical_bar","black_square_for_stop","black_circle_for_record","eject","cinema","low_brightness","high_brightness","signal_strength","vibration_mode","mobile_phone_off","female_sign","male_sign","transgender_symbol","heavy_multiplication_x","heavy_plus_sign","heavy_minus_sign","heavy_division_sign","heavy_equals_sign","infinity","bangbang","interrobang","question","grey_question","grey_exclamation","exclamation","wavy_dash","currency_exchange","heavy_dollar_sign","medical_symbol","recycle","fleur_de_lis","trident","name_badge","beginner","o","white_check_mark","ballot_box_with_check","heavy_check_mark","x","negative_squared_cross_mark","curly_loop","loop","part_alternation_mark","eight_spoked_asterisk","eight_pointed_black_star","sparkle","copyright","registered","tm","hash","keycap_star","zero","one","two","three","four","five","six","seven","eight","nine","keycap_ten","capital_abcd","abcd","1234","symbols","abc","a","ab","b","cl","cool","free","information_source","id","m","new","ng","o2","ok","parking","sos","up","vs","koko","sa","u6708","u6709","u6307","ideograph_advantage","u5272","u7121","u7981","accept","u7533","u5408","u7a7a","congratulations","secret","u55b6","u6e80","red_circle","large_orange_circle","large_yellow_circle","large_green_circle","large_blue_circle","large_purple_circle","large_brown_circle","black_circle","white_circle","large_red_square","large_orange_square","large_yellow_square","large_green_square","large_blue_square","large_purple_square","large_brown_square","black_large_square","white_large_square","black_medium_square","white_medium_square","black_medium_small_square","white_medium_small_square","black_small_square","white_small_square","large_orange_diamond","large_blue_diamond","small_orange_diamond","small_blue_diamond","small_red_triangle","small_red_triangle_down","diamond_shape_with_a_dot_inside","radio_button","white_square_button","black_square_button"]},{"id":"flags","emojis":["checkered_flag","cn","crossed_flags","de","es","flag-ac","flag-ad","flag-ae","flag-af","flag-ag","flag-ai","flag-al","flag-am","flag-ao","flag-aq","flag-ar","flag-as","flag-at","flag-au","flag-aw","flag-ax","flag-az","flag-ba","flag-bb","flag-bd","flag-be","flag-bf","flag-bg","flag-bh","flag-bi","flag-bj","flag-bl","flag-bm","flag-bn","flag-bo","flag-bq","flag-br","flag-bs","flag-bt","flag-bv","flag-bw","flag-by","flag-bz","flag-ca","flag-cc","flag-cd","flag-cf","flag-cg","flag-ch","flag-ci","flag-ck","flag-cl","flag-cm","flag-co","flag-cp","flag-cr","flag-cu","flag-cv","flag-cw","flag-cx","flag-cy","flag-cz","flag-dg","flag-dj","flag-dk","flag-dm","flag-do","flag-dz","flag-ea","flag-ec","flag-ee","flag-eg","flag-eh","flag-england","flag-er","flag-et","flag-eu","flag-fi","flag-fj","flag-fk","flag-fm","flag-fo","flag-ga","flag-gd","flag-ge","flag-gf","flag-gg","flag-gh","flag-gi","flag-gl","flag-gm","flag-gn","flag-gp","flag-gq","flag-gr","flag-gs","flag-gt","flag-gu","flag-gw","flag-gy","flag-hk","flag-hm","flag-hn","flag-hr","flag-ht","flag-hu","flag-ic","flag-id","flag-ie","flag-il","flag-im","flag-in","flag-io","flag-iq","flag-ir","flag-is","flag-je","flag-jm","flag-jo","flag-ke","flag-kg","flag-kh","flag-ki","flag-km","flag-kn","flag-kp","flag-kw","flag-ky","flag-kz","flag-la","flag-lb","flag-lc","flag-li","flag-lk","flag-lr","flag-ls","flag-lt","flag-lu","flag-lv","flag-ly","flag-ma","flag-mc","flag-md","flag-me","flag-mf","flag-mg","flag-mh","flag-mk","flag-ml","flag-mm","flag-mn","flag-mo","flag-mp","flag-mq","flag-mr","flag-ms","flag-mt","flag-mu","flag-mv","flag-mw","flag-mx","flag-my","flag-mz","flag-na","flag-nc","flag-ne","flag-nf","flag-ng","flag-ni","flag-nl","flag-no","flag-np","flag-nr","flag-nu","flag-nz","flag-om","flag-pa","flag-pe","flag-pf","flag-pg","flag-ph","flag-pk","flag-pl","flag-pm","flag-pn","flag-pr","flag-ps","flag-pt","flag-pw","flag-py","flag-qa","flag-re","flag-ro","flag-rs","flag-rw","flag-sa","flag-sb","flag-sc","flag-scotland","flag-sd","flag-se","flag-sg","flag-sh","flag-si","flag-sj","flag-sk","flag-sl","flag-sm","flag-sn","flag-so","flag-sr","flag-ss","flag-st","flag-sv","flag-sx","flag-sy","flag-sz","flag-ta","flag-tc","flag-td","flag-tf","flag-tg","flag-th","flag-tj","flag-tk","flag-tl","flag-tm","flag-tn","flag-to","flag-tr","flag-tt","flag-tv","flag-tw","flag-tz","flag-ua","flag-ug","flag-um","flag-un","flag-uy","flag-uz","flag-va","flag-vc","flag-ve","flag-vg","flag-vi","flag-vn","flag-vu","flag-wales","flag-wf","flag-ws","flag-xk","flag-ye","flag-yt","flag-za","flag-zm","flag-zw","fr","gb","it","jp","kr","pirate_flag","rainbow-flag","ru","transgender_flag","triangular_flag_on_post","us","waving_black_flag","waving_white_flag"]}],"emojis":{"100":{"id":"100","name":"Hundred Points","keywords":["100","score","perfect","numbers","century","exam","quiz","test","pass"],"skins":[{"unified":"1f4af","native":"\uD83D\uDCAF"}],"version":1},"1234":{"id":"1234","name":"Input Numbers","keywords":["1234","blue","square"],"skins":[{"unified":"1f522","native":"\uD83D\uDD22"}],"version":1},"grinning":{"id":"grinning","name":"Grinning Face","emoticons":[":D"],"keywords":["smile","happy","joy",":D","grin"],"skins":[{"unified":"1f600","native":"\uD83D\uDE00"}],"version":1},"smiley":{"id":"smiley","name":"Grinning Face with Big Eyes","emoticons":[":)","=)","=-)"],"keywords":["smiley","happy","joy","haha",":D",":)","smile","funny"],"skins":[{"unified":"1f603","native":"\uD83D\uDE03"}],"version":1},"smile":{"id":"smile","name":"Grinning Face with Smiling Eyes","emoticons":[":)","C:","c:",":D",":-D"],"keywords":["smile","happy","joy","funny","haha","laugh","like",":D",":)"],"skins":[{"unified":"1f604","native":"\uD83D\uDE04"}],"version":1},"grin":{"id":"grin","name":"Beaming Face with Smiling Eyes","keywords":["grin","happy","smile","joy","kawaii"],"skins":[{"unified":"1f601","native":"\uD83D\uDE01"}],"version":1},"laughing":{"id":"laughing","name":"Grinning Squinting Face","emoticons":[":>",":->"],"keywords":["laughing","satisfied","happy","joy","lol","haha","glad","XD","laugh"],"skins":[{"unified":"1f606","native":"\uD83D\uDE06"}],"version":1},"sweat_smile":{"id":"sweat_smile","name":"Grinning Face with Sweat","keywords":["smile","hot","happy","laugh","relief"],"skins":[{"unified":"1f605","native":"\uD83D\uDE05"}],"version":1},"rolling_on_the_floor_laughing":{"id":"rolling_on_the_floor_laughing","name":"Rolling on the Floor Laughing","keywords":["face","lol","haha","rofl"],"skins":[{"unified":"1f923","native":"\uD83E\uDD23"}],"version":3},"joy":{"id":"joy","name":"Face with Tears of Joy","keywords":["cry","weep","happy","happytears","haha"],"skins":[{"unified":"1f602","native":"\uD83D\uDE02"}],"version":1},"slightly_smiling_face":{"id":"slightly_smiling_face","name":"Slightly Smiling Face","emoticons":[":)","(:",":-)"],"keywords":["smile"],"skins":[{"unified":"1f642","native":"\uD83D\uDE42"}],"version":1},"upside_down_face":{"id":"upside_down_face","name":"Upside-Down Face","keywords":["upside","down","flipped","silly","smile"],"skins":[{"unified":"1f643","native":"\uD83D\uDE43"}],"version":1},"melting_face":{"id":"melting_face","name":"Melting Face","keywords":["hot","heat"],"skins":[{"unified":"1fae0","native":"\uD83E\uDEE0"}],"version":14},"wink":{"id":"wink","name":"Winking Face","emoticons":[";)",";-)"],"keywords":["wink","happy","mischievous","secret",";)","smile","eye"],"skins":[{"unified":"1f609","native":"\uD83D\uDE09"}],"version":1},"blush":{"id":"blush","name":"Smiling Face with Smiling Eyes","emoticons":[":)"],"keywords":["blush","smile","happy","flushed","crush","embarrassed","shy","joy"],"skins":[{"unified":"1f60a","native":"\uD83D\uDE0A"}],"version":1},"innocent":{"id":"innocent","name":"Smiling Face with Halo","keywords":["innocent","angel","heaven"],"skins":[{"unified":"1f607","native":"\uD83D\uDE07"}],"version":1},"smiling_face_with_3_hearts":{"id":"smiling_face_with_3_hearts","name":"Smiling Face with Hearts","keywords":["3","love","like","affection","valentines","infatuation","crush","adore"],"skins":[{"unified":"1f970","native":"\uD83E\uDD70"}],"version":11},"heart_eyes":{"id":"heart_eyes","name":"Smiling Face with Heart-Eyes","keywords":["heart","eyes","love","like","affection","valentines","infatuation","crush"],"skins":[{"unified":"1f60d","native":"\uD83D\uDE0D"}],"version":1},"star-struck":{"id":"star-struck","name":"Star-Struck","keywords":["star","struck","grinning","face","with","eyes","smile","starry"],"skins":[{"unified":"1f929","native":"\uD83E\uDD29"}],"version":5},"kissing_heart":{"id":"kissing_heart","name":"Face Blowing a Kiss","emoticons":[":*",":-*"],"keywords":["kissing","heart","love","like","affection","valentines","infatuation"],"skins":[{"unified":"1f618","native":"\uD83D\uDE18"}],"version":1},"kissing":{"id":"kissing","name":"Kissing Face","keywords":["love","like","3","valentines","infatuation","kiss"],"skins":[{"unified":"1f617","native":"\uD83D\uDE17"}],"version":1},"relaxed":{"id":"relaxed","name":"Smiling Face","keywords":["relaxed","blush","massage","happiness"],"skins":[{"unified":"263a-fe0f","native":"\u263A\uFE0F"}],"version":1},"kissing_closed_eyes":{"id":"kissing_closed_eyes","name":"Kissing Face with Closed Eyes","keywords":["love","like","affection","valentines","infatuation","kiss"],"skins":[{"unified":"1f61a","native":"\uD83D\uDE1A"}],"version":1},"kissing_smiling_eyes":{"id":"kissing_smiling_eyes","name":"Kissing Face with Smiling Eyes","keywords":["affection","valentines","infatuation","kiss"],"skins":[{"unified":"1f619","native":"\uD83D\uDE19"}],"version":1},"smiling_face_with_tear":{"id":"smiling_face_with_tear","name":"Smiling Face with Tear","keywords":["sad","cry","pretend"],"skins":[{"unified":"1f972","native":"\uD83E\uDD72"}],"version":13},"yum":{"id":"yum","name":"Face Savoring Food","keywords":["yum","happy","joy","tongue","smile","silly","yummy","nom","delicious","savouring"],"skins":[{"unified":"1f60b","native":"\uD83D\uDE0B"}],"version":1},"stuck_out_tongue":{"id":"stuck_out_tongue","name":"Face with Tongue","emoticons":[":p",":-p",":P",":-P",":b",":-b"],"keywords":["stuck","out","prank","childish","playful","mischievous","smile"],"skins":[{"unified":"1f61b","native":"\uD83D\uDE1B"}],"version":1},"stuck_out_tongue_winking_eye":{"id":"stuck_out_tongue_winking_eye","name":"Winking Face with Tongue","emoticons":[";p",";-p",";b",";-b",";P",";-P"],"keywords":["stuck","out","eye","prank","childish","playful","mischievous","smile","wink"],"skins":[{"unified":"1f61c","native":"\uD83D\uDE1C"}],"version":1},"zany_face":{"id":"zany_face","name":"Zany Face","keywords":["grinning","with","one","large","and","small","eye","goofy","crazy"],"skins":[{"unified":"1f92a","native":"\uD83E\uDD2A"}],"version":5},"stuck_out_tongue_closed_eyes":{"id":"stuck_out_tongue_closed_eyes","name":"Squinting Face with Tongue","keywords":["stuck","out","closed","eyes","prank","playful","mischievous","smile"],"skins":[{"unified":"1f61d","native":"\uD83D\uDE1D"}],"version":1},"money_mouth_face":{"id":"money_mouth_face","name":"Money-Mouth Face","keywords":["money","mouth","rich","dollar"],"skins":[{"unified":"1f911","native":"\uD83E\uDD11"}],"version":1},"hugging_face":{"id":"hugging_face","name":"Hugging Face","keywords":["smile","hug"],"skins":[{"unified":"1f917","native":"\uD83E\uDD17"}],"version":1},"face_with_hand_over_mouth":{"id":"face_with_hand_over_mouth","name":"Face with Hand over Mouth","keywords":["smiling","eyes","and","covering","whoops","shock","surprise"],"skins":[{"unified":"1f92d","native":"\uD83E\uDD2D"}],"version":5},"face_with_open_eyes_and_hand_over_mouth":{"id":"face_with_open_eyes_and_hand_over_mouth","name":"Face with Open Eyes and Hand over Mouth","keywords":["silence","secret","shock","surprise"],"skins":[{"unified":"1fae2","native":"\uD83E\uDEE2"}],"version":14},"face_with_peeking_eye":{"id":"face_with_peeking_eye","name":"Face with Peeking Eye","keywords":["scared","frightening","embarrassing"],"skins":[{"unified":"1fae3","native":"\uD83E\uDEE3"}],"version":14},"shushing_face":{"id":"shushing_face","name":"Shushing Face","keywords":["with","finger","covering","closed","lips","quiet","shhh"],"skins":[{"unified":"1f92b","native":"\uD83E\uDD2B"}],"version":5},"thinking_face":{"id":"thinking_face","name":"Thinking Face","keywords":["hmmm","think","consider"],"skins":[{"unified":"1f914","native":"\uD83E\uDD14"}],"version":1},"saluting_face":{"id":"saluting_face","name":"Saluting Face","keywords":["respect","salute"],"skins":[{"unified":"1fae1","native":"\uD83E\uDEE1"}],"version":14},"zipper_mouth_face":{"id":"zipper_mouth_face","name":"Zipper-Mouth Face","keywords":["zipper","mouth","sealed","secret"],"skins":[{"unified":"1f910","native":"\uD83E\uDD10"}],"version":1},"face_with_raised_eyebrow":{"id":"face_with_raised_eyebrow","name":"Face with Raised Eyebrow","keywords":["one","distrust","scepticism","disapproval","disbelief","surprise"],"skins":[{"unified":"1f928","native":"\uD83E\uDD28"}],"version":5},"neutral_face":{"id":"neutral_face","name":"Neutral Face","emoticons":[":|",":-|"],"keywords":["indifference","meh",":",""],"skins":[{"unified":"1f610","native":"\uD83D\uDE10"}],"version":1},"expressionless":{"id":"expressionless","name":"Expressionless Face","emoticons":["-_-"],"keywords":["indifferent","-","","meh","deadpan"],"skins":[{"unified":"1f611","native":"\uD83D\uDE11"}],"version":1},"no_mouth":{"id":"no_mouth","name":"Face Without Mouth","keywords":["no","hellokitty"],"skins":[{"unified":"1f636","native":"\uD83D\uDE36"}],"version":1},"dotted_line_face":{"id":"dotted_line_face","name":"Dotted Line Face","keywords":["invisible","lonely","isolation","depression"],"skins":[{"unified":"1fae5","native":"\uD83E\uDEE5"}],"version":14},"face_in_clouds":{"id":"face_in_clouds","name":"Face in Clouds","keywords":["shower","steam","dream"],"skins":[{"unified":"1f636-200d-1f32b-fe0f","native":"\uD83D\uDE36\u200D\uD83C\uDF2B\uFE0F"}],"version":13.1},"smirk":{"id":"smirk","name":"Smirking Face","keywords":["smirk","smile","mean","prank","smug","sarcasm"],"skins":[{"unified":"1f60f","native":"\uD83D\uDE0F"}],"version":1},"unamused":{"id":"unamused","name":"Unamused Face","emoticons":[":("],"keywords":["indifference","bored","straight","serious","sarcasm","unimpressed","skeptical","dubious","side","eye"],"skins":[{"unified":"1f612","native":"\uD83D\uDE12"}],"version":1},"face_with_rolling_eyes":{"id":"face_with_rolling_eyes","name":"Face with Rolling Eyes","keywords":["eyeroll","frustrated"],"skins":[{"unified":"1f644","native":"\uD83D\uDE44"}],"version":1},"grimacing":{"id":"grimacing","name":"Grimacing Face","keywords":["grimace","teeth"],"skins":[{"unified":"1f62c","native":"\uD83D\uDE2C"}],"version":1},"face_exhaling":{"id":"face_exhaling","name":"Face Exhaling","keywords":["relieve","relief","tired","sigh"],"skins":[{"unified":"1f62e-200d-1f4a8","native":"\uD83D\uDE2E\u200D\uD83D\uDCA8"}],"version":13.1},"lying_face":{"id":"lying_face","name":"Lying Face","keywords":["lie","pinocchio"],"skins":[{"unified":"1f925","native":"\uD83E\uDD25"}],"version":3},"relieved":{"id":"relieved","name":"Relieved Face","keywords":["relaxed","phew","massage","happiness"],"skins":[{"unified":"1f60c","native":"\uD83D\uDE0C"}],"version":1},"pensive":{"id":"pensive","name":"Pensive Face","keywords":["sad","depressed","upset"],"skins":[{"unified":"1f614","native":"\uD83D\uDE14"}],"version":1},"sleepy":{"id":"sleepy","name":"Sleepy Face","keywords":["tired","rest","nap"],"skins":[{"unified":"1f62a","native":"\uD83D\uDE2A"}],"version":1},"drooling_face":{"id":"drooling_face","name":"Drooling Face","keywords":[],"skins":[{"unified":"1f924","native":"\uD83E\uDD24"}],"version":3},"sleeping":{"id":"sleeping","name":"Sleeping Face","keywords":["tired","sleepy","night","zzz"],"skins":[{"unified":"1f634","native":"\uD83D\uDE34"}],"version":1},"mask":{"id":"mask","name":"Face with Medical Mask","keywords":["sick","ill","disease"],"skins":[{"unified":"1f637","native":"\uD83D\uDE37"}],"version":1},"face_with_thermometer":{"id":"face_with_thermometer","name":"Face with Thermometer","keywords":["sick","temperature","cold","fever"],"skins":[{"unified":"1f912","native":"\uD83E\uDD12"}],"version":1},"face_with_head_bandage":{"id":"face_with_head_bandage","name":"Face with Head-Bandage","keywords":["head","bandage","injured","clumsy","hurt"],"skins":[{"unified":"1f915","native":"\uD83E\uDD15"}],"version":1},"nauseated_face":{"id":"nauseated_face","name":"Nauseated Face","keywords":["vomit","gross","green","sick","throw","up","ill"],"skins":[{"unified":"1f922","native":"\uD83E\uDD22"}],"version":3},"face_vomiting":{"id":"face_vomiting","name":"Face Vomiting","keywords":["with","open","mouth","sick"],"skins":[{"unified":"1f92e","native":"\uD83E\uDD2E"}],"version":5},"sneezing_face":{"id":"sneezing_face","name":"Sneezing Face","keywords":["gesundheit","sneeze","sick","allergy"],"skins":[{"unified":"1f927","native":"\uD83E\uDD27"}],"version":3},"hot_face":{"id":"hot_face","name":"Hot Face","keywords":["feverish","heat","red","sweating"],"skins":[{"unified":"1f975","native":"\uD83E\uDD75"}],"version":11},"cold_face":{"id":"cold_face","name":"Cold Face","keywords":["blue","freezing","frozen","frostbite","icicles"],"skins":[{"unified":"1f976","native":"\uD83E\uDD76"}],"version":11},"woozy_face":{"id":"woozy_face","name":"Woozy Face","keywords":["dizzy","intoxicated","tipsy","wavy"],"skins":[{"unified":"1f974","native":"\uD83E\uDD74"}],"version":11},"dizzy_face":{"id":"dizzy_face","name":"Dizzy Face","keywords":["spent","unconscious","xox"],"skins":[{"unified":"1f635","native":"\uD83D\uDE35"}],"version":1},"face_with_spiral_eyes":{"id":"face_with_spiral_eyes","name":"Face with Spiral Eyes","keywords":["sick","ill","confused","nauseous","nausea"],"skins":[{"unified":"1f635-200d-1f4ab","native":"\uD83D\uDE35\u200D\uD83D\uDCAB"}],"version":13.1},"exploding_head":{"id":"exploding_head","name":"Exploding Head","keywords":["shocked","face","with","mind","blown"],"skins":[{"unified":"1f92f","native":"\uD83E\uDD2F"}],"version":5},"face_with_cowboy_hat":{"id":"face_with_cowboy_hat","name":"Cowboy Hat Face","keywords":["with","cowgirl"],"skins":[{"unified":"1f920","native":"\uD83E\uDD20"}],"version":3},"partying_face":{"id":"partying_face","name":"Partying Face","keywords":["celebration","woohoo"],"skins":[{"unified":"1f973","native":"\uD83E\uDD73"}],"version":11},"disguised_face":{"id":"disguised_face","name":"Disguised Face","keywords":["pretent","brows","glasses","moustache"],"skins":[{"unified":"1f978","native":"\uD83E\uDD78"}],"version":13},"sunglasses":{"id":"sunglasses","name":"Smiling Face with Sunglasses","emoticons":["8)"],"keywords":["cool","smile","summer","beach","sunglass"],"skins":[{"unified":"1f60e","native":"\uD83D\uDE0E"}],"version":1},"nerd_face":{"id":"nerd_face","name":"Nerd Face","keywords":["nerdy","geek","dork"],"skins":[{"unified":"1f913","native":"\uD83E\uDD13"}],"version":1},"face_with_monocle":{"id":"face_with_monocle","name":"Face with Monocle","keywords":["stuffy","wealthy"],"skins":[{"unified":"1f9d0","native":"\uD83E\uDDD0"}],"version":5},"confused":{"id":"confused","name":"Confused Face","emoticons":[":\\\\",":-\\\\",":/",":-/"],"keywords":["indifference","huh","weird","hmmm",":/"],"skins":[{"unified":"1f615","native":"\uD83D\uDE15"}],"version":1},"face_with_diagonal_mouth":{"id":"face_with_diagonal_mouth","name":"Face with Diagonal Mouth","keywords":["skeptic","confuse","frustrated","indifferent"],"skins":[{"unified":"1fae4","native":"\uD83E\uDEE4"}],"version":14},"worried":{"id":"worried","name":"Worried Face","keywords":["concern","nervous",":("],"skins":[{"unified":"1f61f","native":"\uD83D\uDE1F"}],"version":1},"slightly_frowning_face":{"id":"slightly_frowning_face","name":"Slightly Frowning Face","keywords":["disappointed","sad","upset"],"skins":[{"unified":"1f641","native":"\uD83D\uDE41"}],"version":1},"white_frowning_face":{"id":"white_frowning_face","name":"Frowning Face","keywords":["white","sad","upset","frown"],"skins":[{"unified":"2639-fe0f","native":"\u2639\uFE0F"}],"version":1},"open_mouth":{"id":"open_mouth","name":"Face with Open Mouth","emoticons":[":o",":-o",":O",":-O"],"keywords":["surprise","impressed","wow","whoa",":O"],"skins":[{"unified":"1f62e","native":"\uD83D\uDE2E"}],"version":1},"hushed":{"id":"hushed","name":"Hushed Face","keywords":["woo","shh"],"skins":[{"unified":"1f62f","native":"\uD83D\uDE2F"}],"version":1},"astonished":{"id":"astonished","name":"Astonished Face","keywords":["xox","surprised","poisoned"],"skins":[{"unified":"1f632","native":"\uD83D\uDE32"}],"version":1},"flushed":{"id":"flushed","name":"Flushed Face","keywords":["blush","shy","flattered"],"skins":[{"unified":"1f633","native":"\uD83D\uDE33"}],"version":1},"pleading_face":{"id":"pleading_face","name":"Pleading Face","keywords":["begging","mercy"],"skins":[{"unified":"1f97a","native":"\uD83E\uDD7A"}],"version":11},"face_holding_back_tears":{"id":"face_holding_back_tears","name":"Face Holding Back Tears","keywords":["touched","gratitude"],"skins":[{"unified":"1f979","native":"\uD83E\uDD79"}],"version":14},"frowning":{"id":"frowning","name":"Frowning Face with Open Mouth","keywords":["aw","what"],"skins":[{"unified":"1f626","native":"\uD83D\uDE26"}],"version":1},"anguished":{"id":"anguished","name":"Anguished Face","emoticons":["D:"],"keywords":["stunned","nervous"],"skins":[{"unified":"1f627","native":"\uD83D\uDE27"}],"version":1},"fearful":{"id":"fearful","name":"Fearful Face","keywords":["scared","terrified","nervous","oops","huh"],"skins":[{"unified":"1f628","native":"\uD83D\uDE28"}],"version":1},"cold_sweat":{"id":"cold_sweat","name":"Anxious Face with Sweat","keywords":["cold","nervous"],"skins":[{"unified":"1f630","native":"\uD83D\uDE30"}],"version":1},"disappointed_relieved":{"id":"disappointed_relieved","name":"Sad but Relieved Face","keywords":["disappointed","phew","sweat","nervous"],"skins":[{"unified":"1f625","native":"\uD83D\uDE25"}],"version":1},"cry":{"id":"cry","name":"Crying Face","emoticons":[":\'("],"keywords":["cry","tears","sad","depressed","upset",":\'("],"skins":[{"unified":"1f622","native":"\uD83D\uDE22"}],"version":1},"sob":{"id":"sob","name":"Loudly Crying Face","emoticons":[":\'("],"keywords":["sob","cry","tears","sad","upset","depressed"],"skins":[{"unified":"1f62d","native":"\uD83D\uDE2D"}],"version":1},"scream":{"id":"scream","name":"Face Screaming in Fear","keywords":["scream","munch","scared","omg"],"skins":[{"unified":"1f631","native":"\uD83D\uDE31"}],"version":1},"confounded":{"id":"confounded","name":"Confounded Face","keywords":["confused","sick","unwell","oops",":S"],"skins":[{"unified":"1f616","native":"\uD83D\uDE16"}],"version":1},"persevere":{"id":"persevere","name":"Persevering Face","keywords":["persevere","sick","no","upset","oops"],"skins":[{"unified":"1f623","native":"\uD83D\uDE23"}],"version":1},"disappointed":{"id":"disappointed","name":"Disappointed Face","emoticons":["):",":(",":-("],"keywords":["sad","upset","depressed",":("],"skins":[{"unified":"1f61e","native":"\uD83D\uDE1E"}],"version":1},"sweat":{"id":"sweat","name":"Face with Cold Sweat","keywords":["downcast","hot","sad","tired","exercise"],"skins":[{"unified":"1f613","native":"\uD83D\uDE13"}],"version":1},"weary":{"id":"weary","name":"Weary Face","keywords":["tired","sleepy","sad","frustrated","upset"],"skins":[{"unified":"1f629","native":"\uD83D\uDE29"}],"version":1},"tired_face":{"id":"tired_face","name":"Tired Face","keywords":["sick","whine","upset","frustrated"],"skins":[{"unified":"1f62b","native":"\uD83D\uDE2B"}],"version":1},"yawning_face":{"id":"yawning_face","name":"Yawning Face","keywords":["tired","sleepy"],"skins":[{"unified":"1f971","native":"\uD83E\uDD71"}],"version":12},"triumph":{"id":"triumph","name":"Face with Look of Triumph","keywords":["steam","from","nose","gas","phew","proud","pride"],"skins":[{"unified":"1f624","native":"\uD83D\uDE24"}],"version":1},"rage":{"id":"rage","name":"Pouting Face","keywords":["rage","angry","mad","hate","despise"],"skins":[{"unified":"1f621","native":"\uD83D\uDE21"}],"version":1},"angry":{"id":"angry","name":"Angry Face","emoticons":[">:(",">:-("],"keywords":["mad","annoyed","frustrated"],"skins":[{"unified":"1f620","native":"\uD83D\uDE20"}],"version":1},"face_with_symbols_on_mouth":{"id":"face_with_symbols_on_mouth","name":"Face with Symbols on Mouth","keywords":["serious","covering","swearing","cursing","cussing","profanity","expletive"],"skins":[{"unified":"1f92c","native":"\uD83E\uDD2C"}],"version":5},"smiling_imp":{"id":"smiling_imp","name":"Smiling Face with Horns","keywords":["imp","devil"],"skins":[{"unified":"1f608","native":"\uD83D\uDE08"}],"version":1},"imp":{"id":"imp","name":"Imp","keywords":["angry","face","with","horns","devil"],"skins":[{"unified":"1f47f","native":"\uD83D\uDC7F"}],"version":1},"skull":{"id":"skull","name":"Skull","keywords":["dead","skeleton","creepy","death"],"skins":[{"unified":"1f480","native":"\uD83D\uDC80"}],"version":1},"skull_and_crossbones":{"id":"skull_and_crossbones","name":"Skull and Crossbones","keywords":["poison","danger","deadly","scary","death","pirate","evil"],"skins":[{"unified":"2620-fe0f","native":"\u2620\uFE0F"}],"version":1},"hankey":{"id":"hankey","name":"Pile of Poo","keywords":["hankey","poop","shit","shitface","fail","turd"],"skins":[{"unified":"1f4a9","native":"\uD83D\uDCA9"}],"version":1},"clown_face":{"id":"clown_face","name":"Clown Face","keywords":[],"skins":[{"unified":"1f921","native":"\uD83E\uDD21"}],"version":3},"japanese_ogre":{"id":"japanese_ogre","name":"Ogre","keywords":["japanese","monster","red","mask","halloween","scary","creepy","devil","demon"],"skins":[{"unified":"1f479","native":"\uD83D\uDC79"}],"version":1},"japanese_goblin":{"id":"japanese_goblin","name":"Goblin","keywords":["japanese","red","evil","mask","monster","scary","creepy"],"skins":[{"unified":"1f47a","native":"\uD83D\uDC7A"}],"version":1},"ghost":{"id":"ghost","name":"Ghost","keywords":["halloween","spooky","scary"],"skins":[{"unified":"1f47b","native":"\uD83D\uDC7B"}],"version":1},"alien":{"id":"alien","name":"Alien","keywords":["UFO","paul","weird","outer","space"],"skins":[{"unified":"1f47d","native":"\uD83D\uDC7D"}],"version":1},"space_invader":{"id":"space_invader","name":"Alien Monster","keywords":["space","invader","game","arcade","play"],"skins":[{"unified":"1f47e","native":"\uD83D\uDC7E"}],"version":1},"robot_face":{"id":"robot_face","name":"Robot","keywords":["face","computer","machine","bot"],"skins":[{"unified":"1f916","native":"\uD83E\uDD16"}],"version":1},"smiley_cat":{"id":"smiley_cat","name":"Grinning Cat","keywords":["smiley","animal","cats","happy","smile"],"skins":[{"unified":"1f63a","native":"\uD83D\uDE3A"}],"version":1},"smile_cat":{"id":"smile_cat","name":"Grinning Cat with Smiling Eyes","keywords":["smile","animal","cats"],"skins":[{"unified":"1f638","native":"\uD83D\uDE38"}],"version":1},"joy_cat":{"id":"joy_cat","name":"Cat with Tears of Joy","keywords":["animal","cats","haha","happy"],"skins":[{"unified":"1f639","native":"\uD83D\uDE39"}],"version":1},"heart_eyes_cat":{"id":"heart_eyes_cat","name":"Smiling Cat with Heart-Eyes","keywords":["heart","eyes","animal","love","like","affection","cats","valentines"],"skins":[{"unified":"1f63b","native":"\uD83D\uDE3B"}],"version":1},"smirk_cat":{"id":"smirk_cat","name":"Cat with Wry Smile","keywords":["smirk","animal","cats"],"skins":[{"unified":"1f63c","native":"\uD83D\uDE3C"}],"version":1},"kissing_cat":{"id":"kissing_cat","name":"Kissing Cat","keywords":["animal","cats","kiss"],"skins":[{"unified":"1f63d","native":"\uD83D\uDE3D"}],"version":1},"scream_cat":{"id":"scream_cat","name":"Weary Cat","keywords":["scream","animal","cats","munch","scared"],"skins":[{"unified":"1f640","native":"\uD83D\uDE40"}],"version":1},"crying_cat_face":{"id":"crying_cat_face","name":"Crying Cat","keywords":["face","animal","tears","weep","sad","cats","upset","cry"],"skins":[{"unified":"1f63f","native":"\uD83D\uDE3F"}],"version":1},"pouting_cat":{"id":"pouting_cat","name":"Pouting Cat","keywords":["animal","cats"],"skins":[{"unified":"1f63e","native":"\uD83D\uDE3E"}],"version":1},"see_no_evil":{"id":"see_no_evil","name":"See-No-Evil Monkey","keywords":["see","no","evil","animal","nature","haha"],"skins":[{"unified":"1f648","native":"\uD83D\uDE48"}],"version":1},"hear_no_evil":{"id":"hear_no_evil","name":"Hear-No-Evil Monkey","keywords":["hear","no","evil","animal","nature"],"skins":[{"unified":"1f649","native":"\uD83D\uDE49"}],"version":1},"speak_no_evil":{"id":"speak_no_evil","name":"Speak-No-Evil Monkey","keywords":["speak","no","evil","animal","nature","omg"],"skins":[{"unified":"1f64a","native":"\uD83D\uDE4A"}],"version":1},"kiss":{"id":"kiss","name":"Kiss Mark","keywords":["face","lips","love","like","affection","valentines"],"skins":[{"unified":"1f48b","native":"\uD83D\uDC8B"}],"version":1},"love_letter":{"id":"love_letter","name":"Love Letter","keywords":["email","like","affection","envelope","valentines"],"skins":[{"unified":"1f48c","native":"\uD83D\uDC8C"}],"version":1},"cupid":{"id":"cupid","name":"Heart with Arrow","keywords":["cupid","love","like","affection","valentines"],"skins":[{"unified":"1f498","native":"\uD83D\uDC98"}],"version":1},"gift_heart":{"id":"gift_heart","name":"Heart with Ribbon","keywords":["gift","love","valentines"],"skins":[{"unified":"1f49d","native":"\uD83D\uDC9D"}],"version":1},"sparkling_heart":{"id":"sparkling_heart","name":"Sparkling Heart","keywords":["love","like","affection","valentines"],"skins":[{"unified":"1f496","native":"\uD83D\uDC96"}],"version":1},"heartpulse":{"id":"heartpulse","name":"Growing Heart","keywords":["heartpulse","like","love","affection","valentines","pink"],"skins":[{"unified":"1f497","native":"\uD83D\uDC97"}],"version":1},"heartbeat":{"id":"heartbeat","name":"Beating Heart","keywords":["heartbeat","love","like","affection","valentines","pink"],"skins":[{"unified":"1f493","native":"\uD83D\uDC93"}],"version":1},"revolving_hearts":{"id":"revolving_hearts","name":"Revolving Hearts","keywords":["love","like","affection","valentines"],"skins":[{"unified":"1f49e","native":"\uD83D\uDC9E"}],"version":1},"two_hearts":{"id":"two_hearts","name":"Two Hearts","keywords":["love","like","affection","valentines","heart"],"skins":[{"unified":"1f495","native":"\uD83D\uDC95"}],"version":1},"heart_decoration":{"id":"heart_decoration","name":"Heart Decoration","keywords":["purple","square","love","like"],"skins":[{"unified":"1f49f","native":"\uD83D\uDC9F"}],"version":1},"heavy_heart_exclamation_mark_ornament":{"id":"heavy_heart_exclamation_mark_ornament","name":"Heart Exclamation","keywords":["heavy","mark","ornament","decoration","love"],"skins":[{"unified":"2763-fe0f","native":"\u2763\uFE0F"}],"version":1},"broken_heart":{"id":"broken_heart","name":"Broken Heart","emoticons":["</3"],"keywords":["sad","sorry","break","heartbreak"],"skins":[{"unified":"1f494","native":"\uD83D\uDC94"}],"version":1},"heart_on_fire":{"id":"heart_on_fire","name":"Heart on Fire","keywords":["passionate","enthusiastic"],"skins":[{"unified":"2764-fe0f-200d-1f525","native":"\u2764\uFE0F\u200D\uD83D\uDD25"}],"version":13.1},"mending_heart":{"id":"mending_heart","name":"Mending Heart","keywords":["broken","bandage","wounded"],"skins":[{"unified":"2764-fe0f-200d-1fa79","native":"\u2764\uFE0F\u200D\uD83E\uDE79"}],"version":13.1},"heart":{"id":"heart","name":"Red Heart","emoticons":["<3"],"keywords":["love","like","valentines"],"skins":[{"unified":"2764-fe0f","native":"\u2764\uFE0F"}],"version":1},"orange_heart":{"id":"orange_heart","name":"Orange Heart","keywords":["love","like","affection","valentines"],"skins":[{"unified":"1f9e1","native":"\uD83E\uDDE1"}],"version":5},"yellow_heart":{"id":"yellow_heart","name":"Yellow Heart","emoticons":["<3"],"keywords":["love","like","affection","valentines"],"skins":[{"unified":"1f49b","native":"\uD83D\uDC9B"}],"version":1},"green_heart":{"id":"green_heart","name":"Green Heart","emoticons":["<3"],"keywords":["love","like","affection","valentines"],"skins":[{"unified":"1f49a","native":"\uD83D\uDC9A"}],"version":1},"blue_heart":{"id":"blue_heart","name":"Blue Heart","emoticons":["<3"],"keywords":["love","like","affection","valentines"],"skins":[{"unified":"1f499","native":"\uD83D\uDC99"}],"version":1},"purple_heart":{"id":"purple_heart","name":"Purple Heart","emoticons":["<3"],"keywords":["love","like","affection","valentines"],"skins":[{"unified":"1f49c","native":"\uD83D\uDC9C"}],"version":1},"brown_heart":{"id":"brown_heart","name":"Brown Heart","keywords":["coffee"],"skins":[{"unified":"1f90e","native":"\uD83E\uDD0E"}],"version":12},"black_heart":{"id":"black_heart","name":"Black Heart","keywords":["evil"],"skins":[{"unified":"1f5a4","native":"\uD83D\uDDA4"}],"version":3},"white_heart":{"id":"white_heart","name":"White Heart","keywords":["pure"],"skins":[{"unified":"1f90d","native":"\uD83E\uDD0D"}],"version":12},"anger":{"id":"anger","name":"Anger Symbol","keywords":["angry","mad"],"skins":[{"unified":"1f4a2","native":"\uD83D\uDCA2"}],"version":1},"boom":{"id":"boom","name":"Collision","keywords":["boom","bomb","explode","explosion","blown"],"skins":[{"unified":"1f4a5","native":"\uD83D\uDCA5"}],"version":1},"dizzy":{"id":"dizzy","name":"Dizzy","keywords":["star","sparkle","shoot","magic"],"skins":[{"unified":"1f4ab","native":"\uD83D\uDCAB"}],"version":1},"sweat_drops":{"id":"sweat_drops","name":"Sweat Droplets","keywords":["drops","water","drip","oops"],"skins":[{"unified":"1f4a6","native":"\uD83D\uDCA6"}],"version":1},"dash":{"id":"dash","name":"Dash Symbol","keywords":["dashing","away","wind","air","fast","shoo","fart","smoke","puff"],"skins":[{"unified":"1f4a8","native":"\uD83D\uDCA8"}],"version":1},"hole":{"id":"hole","name":"Hole","keywords":["embarrassing"],"skins":[{"unified":"1f573-fe0f","native":"\uD83D\uDD73\uFE0F"}],"version":1},"bomb":{"id":"bomb","name":"Bomb","keywords":["boom","explode","explosion","terrorism"],"skins":[{"unified":"1f4a3","native":"\uD83D\uDCA3"}],"version":1},"speech_balloon":{"id":"speech_balloon","name":"Speech Balloon","keywords":["bubble","words","message","talk","chatting"],"skins":[{"unified":"1f4ac","native":"\uD83D\uDCAC"}],"version":1},"eye-in-speech-bubble":{"id":"eye-in-speech-bubble","name":"Eye in Speech Bubble","keywords":["in-speech-bubble","info"],"skins":[{"unified":"1f441-fe0f-200d-1f5e8-fe0f","native":"\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8\uFE0F"}],"version":2},"left_speech_bubble":{"id":"left_speech_bubble","name":"Left Speech Bubble","keywords":["words","message","talk","chatting"],"skins":[{"unified":"1f5e8-fe0f","native":"\uD83D\uDDE8\uFE0F"}],"version":2},"right_anger_bubble":{"id":"right_anger_bubble","name":"Right Anger Bubble","keywords":["caption","speech","thinking","mad"],"skins":[{"unified":"1f5ef-fe0f","native":"\uD83D\uDDEF\uFE0F"}],"version":1},"thought_balloon":{"id":"thought_balloon","name":"Thought Balloon","keywords":["bubble","cloud","speech","thinking","dream"],"skins":[{"unified":"1f4ad","native":"\uD83D\uDCAD"}],"version":1},"zzz":{"id":"zzz","name":"Zzz","keywords":["sleepy","tired","dream"],"skins":[{"unified":"1f4a4","native":"\uD83D\uDCA4"}],"version":1},"wave":{"id":"wave","name":"Waving Hand","keywords":["wave","hands","gesture","goodbye","solong","farewell","hello","hi","palm"],"skins":[{"unified":"1f44b","native":"\uD83D\uDC4B"},{"unified":"1f44b-1f3fb","native":"\uD83D\uDC4B\uD83C\uDFFB"},{"unified":"1f44b-1f3fc","native":"\uD83D\uDC4B\uD83C\uDFFC"},{"unified":"1f44b-1f3fd","native":"\uD83D\uDC4B\uD83C\uDFFD"},{"unified":"1f44b-1f3fe","native":"\uD83D\uDC4B\uD83C\uDFFE"},{"unified":"1f44b-1f3ff","native":"\uD83D\uDC4B\uD83C\uDFFF"}],"version":1},"raised_back_of_hand":{"id":"raised_back_of_hand","name":"Raised Back of Hand","keywords":["fingers","backhand"],"skins":[{"unified":"1f91a","native":"\uD83E\uDD1A"},{"unified":"1f91a-1f3fb","native":"\uD83E\uDD1A\uD83C\uDFFB"},{"unified":"1f91a-1f3fc","native":"\uD83E\uDD1A\uD83C\uDFFC"},{"unified":"1f91a-1f3fd","native":"\uD83E\uDD1A\uD83C\uDFFD"},{"unified":"1f91a-1f3fe","native":"\uD83E\uDD1A\uD83C\uDFFE"},{"unified":"1f91a-1f3ff","native":"\uD83E\uDD1A\uD83C\uDFFF"}],"version":3},"raised_hand_with_fingers_splayed":{"id":"raised_hand_with_fingers_splayed","name":"Hand with Fingers Splayed","keywords":["raised","palm"],"skins":[{"unified":"1f590-fe0f","native":"\uD83D\uDD90\uFE0F"},{"unified":"1f590-1f3fb","native":"\uD83D\uDD90\uD83C\uDFFB"},{"unified":"1f590-1f3fc","native":"\uD83D\uDD90\uD83C\uDFFC"},{"unified":"1f590-1f3fd","native":"\uD83D\uDD90\uD83C\uDFFD"},{"unified":"1f590-1f3fe","native":"\uD83D\uDD90\uD83C\uDFFE"},{"unified":"1f590-1f3ff","native":"\uD83D\uDD90\uD83C\uDFFF"}],"version":1},"hand":{"id":"hand","name":"Raised Hand","keywords":["fingers","stop","highfive","high","five","palm","ban"],"skins":[{"unified":"270b","native":"\u270B"},{"unified":"270b-1f3fb","native":"\u270B\uD83C\uDFFB"},{"unified":"270b-1f3fc","native":"\u270B\uD83C\uDFFC"},{"unified":"270b-1f3fd","native":"\u270B\uD83C\uDFFD"},{"unified":"270b-1f3fe","native":"\u270B\uD83C\uDFFE"},{"unified":"270b-1f3ff","native":"\u270B\uD83C\uDFFF"}],"version":1},"spock-hand":{"id":"spock-hand","name":"Vulcan Salute","keywords":["spock","hand","fingers","star","trek"],"skins":[{"unified":"1f596","native":"\uD83D\uDD96"},{"unified":"1f596-1f3fb","native":"\uD83D\uDD96\uD83C\uDFFB"},{"unified":"1f596-1f3fc","native":"\uD83D\uDD96\uD83C\uDFFC"},{"unified":"1f596-1f3fd","native":"\uD83D\uDD96\uD83C\uDFFD"},{"unified":"1f596-1f3fe","native":"\uD83D\uDD96\uD83C\uDFFE"},{"unified":"1f596-1f3ff","native":"\uD83D\uDD96\uD83C\uDFFF"}],"version":1},"rightwards_hand":{"id":"rightwards_hand","name":"Rightwards Hand","keywords":["palm","offer"],"skins":[{"unified":"1faf1","native":"\uD83E\uDEF1"},{"unified":"1faf1-1f3fb","native":"\uD83E\uDEF1\uD83C\uDFFB"},{"unified":"1faf1-1f3fc","native":"\uD83E\uDEF1\uD83C\uDFFC"},{"unified":"1faf1-1f3fd","native":"\uD83E\uDEF1\uD83C\uDFFD"},{"unified":"1faf1-1f3fe","native":"\uD83E\uDEF1\uD83C\uDFFE"},{"unified":"1faf1-1f3ff","native":"\uD83E\uDEF1\uD83C\uDFFF"}],"version":14},"leftwards_hand":{"id":"leftwards_hand","name":"Leftwards Hand","keywords":["palm","offer"],"skins":[{"unified":"1faf2","native":"\uD83E\uDEF2"},{"unified":"1faf2-1f3fb","native":"\uD83E\uDEF2\uD83C\uDFFB"},{"unified":"1faf2-1f3fc","native":"\uD83E\uDEF2\uD83C\uDFFC"},{"unified":"1faf2-1f3fd","native":"\uD83E\uDEF2\uD83C\uDFFD"},{"unified":"1faf2-1f3fe","native":"\uD83E\uDEF2\uD83C\uDFFE"},{"unified":"1faf2-1f3ff","native":"\uD83E\uDEF2\uD83C\uDFFF"}],"version":14},"palm_down_hand":{"id":"palm_down_hand","name":"Palm Down Hand","keywords":["drop"],"skins":[{"unified":"1faf3","native":"\uD83E\uDEF3"},{"unified":"1faf3-1f3fb","native":"\uD83E\uDEF3\uD83C\uDFFB"},{"unified":"1faf3-1f3fc","native":"\uD83E\uDEF3\uD83C\uDFFC"},{"unified":"1faf3-1f3fd","native":"\uD83E\uDEF3\uD83C\uDFFD"},{"unified":"1faf3-1f3fe","native":"\uD83E\uDEF3\uD83C\uDFFE"},{"unified":"1faf3-1f3ff","native":"\uD83E\uDEF3\uD83C\uDFFF"}],"version":14},"palm_up_hand":{"id":"palm_up_hand","name":"Palm Up Hand","keywords":["lift","offer","demand"],"skins":[{"unified":"1faf4","native":"\uD83E\uDEF4"},{"unified":"1faf4-1f3fb","native":"\uD83E\uDEF4\uD83C\uDFFB"},{"unified":"1faf4-1f3fc","native":"\uD83E\uDEF4\uD83C\uDFFC"},{"unified":"1faf4-1f3fd","native":"\uD83E\uDEF4\uD83C\uDFFD"},{"unified":"1faf4-1f3fe","native":"\uD83E\uDEF4\uD83C\uDFFE"},{"unified":"1faf4-1f3ff","native":"\uD83E\uDEF4\uD83C\uDFFF"}],"version":14},"ok_hand":{"id":"ok_hand","name":"Ok Hand","keywords":["fingers","limbs","perfect","okay"],"skins":[{"unified":"1f44c","native":"\uD83D\uDC4C"},{"unified":"1f44c-1f3fb","native":"\uD83D\uDC4C\uD83C\uDFFB"},{"unified":"1f44c-1f3fc","native":"\uD83D\uDC4C\uD83C\uDFFC"},{"unified":"1f44c-1f3fd","native":"\uD83D\uDC4C\uD83C\uDFFD"},{"unified":"1f44c-1f3fe","native":"\uD83D\uDC4C\uD83C\uDFFE"},{"unified":"1f44c-1f3ff","native":"\uD83D\uDC4C\uD83C\uDFFF"}],"version":1},"pinched_fingers":{"id":"pinched_fingers","name":"Pinched Fingers","keywords":["size","tiny","small"],"skins":[{"unified":"1f90c","native":"\uD83E\uDD0C"},{"unified":"1f90c-1f3fb","native":"\uD83E\uDD0C\uD83C\uDFFB"},{"unified":"1f90c-1f3fc","native":"\uD83E\uDD0C\uD83C\uDFFC"},{"unified":"1f90c-1f3fd","native":"\uD83E\uDD0C\uD83C\uDFFD"},{"unified":"1f90c-1f3fe","native":"\uD83E\uDD0C\uD83C\uDFFE"},{"unified":"1f90c-1f3ff","native":"\uD83E\uDD0C\uD83C\uDFFF"}],"version":13},"pinching_hand":{"id":"pinching_hand","name":"Pinching Hand","keywords":["tiny","small","size"],"skins":[{"unified":"1f90f","native":"\uD83E\uDD0F"},{"unified":"1f90f-1f3fb","native":"\uD83E\uDD0F\uD83C\uDFFB"},{"unified":"1f90f-1f3fc","native":"\uD83E\uDD0F\uD83C\uDFFC"},{"unified":"1f90f-1f3fd","native":"\uD83E\uDD0F\uD83C\uDFFD"},{"unified":"1f90f-1f3fe","native":"\uD83E\uDD0F\uD83C\uDFFE"},{"unified":"1f90f-1f3ff","native":"\uD83E\uDD0F\uD83C\uDFFF"}],"version":12},"v":{"id":"v","name":"Victory Hand","keywords":["v","fingers","ohyeah","peace","two"],"skins":[{"unified":"270c-fe0f","native":"\u270C\uFE0F"},{"unified":"270c-1f3fb","native":"\u270C\uD83C\uDFFB"},{"unified":"270c-1f3fc","native":"\u270C\uD83C\uDFFC"},{"unified":"270c-1f3fd","native":"\u270C\uD83C\uDFFD"},{"unified":"270c-1f3fe","native":"\u270C\uD83C\uDFFE"},{"unified":"270c-1f3ff","native":"\u270C\uD83C\uDFFF"}],"version":1},"crossed_fingers":{"id":"crossed_fingers","name":"Crossed Fingers","keywords":["hand","with","index","and","middle","good","lucky"],"skins":[{"unified":"1f91e","native":"\uD83E\uDD1E"},{"unified":"1f91e-1f3fb","native":"\uD83E\uDD1E\uD83C\uDFFB"},{"unified":"1f91e-1f3fc","native":"\uD83E\uDD1E\uD83C\uDFFC"},{"unified":"1f91e-1f3fd","native":"\uD83E\uDD1E\uD83C\uDFFD"},{"unified":"1f91e-1f3fe","native":"\uD83E\uDD1E\uD83C\uDFFE"},{"unified":"1f91e-1f3ff","native":"\uD83E\uDD1E\uD83C\uDFFF"}],"version":3},"hand_with_index_finger_and_thumb_crossed":{"id":"hand_with_index_finger_and_thumb_crossed","name":"Hand with Index Finger and Thumb Crossed","keywords":["heart","love","money","expensive"],"skins":[{"unified":"1faf0","native":"\uD83E\uDEF0"},{"unified":"1faf0-1f3fb","native":"\uD83E\uDEF0\uD83C\uDFFB"},{"unified":"1faf0-1f3fc","native":"\uD83E\uDEF0\uD83C\uDFFC"},{"unified":"1faf0-1f3fd","native":"\uD83E\uDEF0\uD83C\uDFFD"},{"unified":"1faf0-1f3fe","native":"\uD83E\uDEF0\uD83C\uDFFE"},{"unified":"1faf0-1f3ff","native":"\uD83E\uDEF0\uD83C\uDFFF"}],"version":14},"i_love_you_hand_sign":{"id":"i_love_you_hand_sign","name":"Love-You Gesture","keywords":["i","love","you","hand","sign","fingers"],"skins":[{"unified":"1f91f","native":"\uD83E\uDD1F"},{"unified":"1f91f-1f3fb","native":"\uD83E\uDD1F\uD83C\uDFFB"},{"unified":"1f91f-1f3fc","native":"\uD83E\uDD1F\uD83C\uDFFC"},{"unified":"1f91f-1f3fd","native":"\uD83E\uDD1F\uD83C\uDFFD"},{"unified":"1f91f-1f3fe","native":"\uD83E\uDD1F\uD83C\uDFFE"},{"unified":"1f91f-1f3ff","native":"\uD83E\uDD1F\uD83C\uDFFF"}],"version":5},"the_horns":{"id":"the_horns","name":"Sign of the Horns","keywords":["hand","fingers","evil","eye","rock","on"],"skins":[{"unified":"1f918","native":"\uD83E\uDD18"},{"unified":"1f918-1f3fb","native":"\uD83E\uDD18\uD83C\uDFFB"},{"unified":"1f918-1f3fc","native":"\uD83E\uDD18\uD83C\uDFFC"},{"unified":"1f918-1f3fd","native":"\uD83E\uDD18\uD83C\uDFFD"},{"unified":"1f918-1f3fe","native":"\uD83E\uDD18\uD83C\uDFFE"},{"unified":"1f918-1f3ff","native":"\uD83E\uDD18\uD83C\uDFFF"}],"version":1},"call_me_hand":{"id":"call_me_hand","name":"Call Me Hand","keywords":["hands","gesture","shaka"],"skins":[{"unified":"1f919","native":"\uD83E\uDD19"},{"unified":"1f919-1f3fb","native":"\uD83E\uDD19\uD83C\uDFFB"},{"unified":"1f919-1f3fc","native":"\uD83E\uDD19\uD83C\uDFFC"},{"unified":"1f919-1f3fd","native":"\uD83E\uDD19\uD83C\uDFFD"},{"unified":"1f919-1f3fe","native":"\uD83E\uDD19\uD83C\uDFFE"},{"unified":"1f919-1f3ff","native":"\uD83E\uDD19\uD83C\uDFFF"}],"version":3},"point_left":{"id":"point_left","name":"Backhand Index Pointing Left","keywords":["point","direction","fingers","hand"],"skins":[{"unified":"1f448","native":"\uD83D\uDC48"},{"unified":"1f448-1f3fb","native":"\uD83D\uDC48\uD83C\uDFFB"},{"unified":"1f448-1f3fc","native":"\uD83D\uDC48\uD83C\uDFFC"},{"unified":"1f448-1f3fd","native":"\uD83D\uDC48\uD83C\uDFFD"},{"unified":"1f448-1f3fe","native":"\uD83D\uDC48\uD83C\uDFFE"},{"unified":"1f448-1f3ff","native":"\uD83D\uDC48\uD83C\uDFFF"}],"version":1},"point_right":{"id":"point_right","name":"Backhand Index Pointing Right","keywords":["point","fingers","hand","direction"],"skins":[{"unified":"1f449","native":"\uD83D\uDC49"},{"unified":"1f449-1f3fb","native":"\uD83D\uDC49\uD83C\uDFFB"},{"unified":"1f449-1f3fc","native":"\uD83D\uDC49\uD83C\uDFFC"},{"unified":"1f449-1f3fd","native":"\uD83D\uDC49\uD83C\uDFFD"},{"unified":"1f449-1f3fe","native":"\uD83D\uDC49\uD83C\uDFFE"},{"unified":"1f449-1f3ff","native":"\uD83D\uDC49\uD83C\uDFFF"}],"version":1},"point_up_2":{"id":"point_up_2","name":"Backhand Index Pointing Up","keywords":["point","2","fingers","hand","direction"],"skins":[{"unified":"1f446","native":"\uD83D\uDC46"},{"unified":"1f446-1f3fb","native":"\uD83D\uDC46\uD83C\uDFFB"},{"unified":"1f446-1f3fc","native":"\uD83D\uDC46\uD83C\uDFFC"},{"unified":"1f446-1f3fd","native":"\uD83D\uDC46\uD83C\uDFFD"},{"unified":"1f446-1f3fe","native":"\uD83D\uDC46\uD83C\uDFFE"},{"unified":"1f446-1f3ff","native":"\uD83D\uDC46\uD83C\uDFFF"}],"version":1},"middle_finger":{"id":"middle_finger","name":"Middle Finger","keywords":["reversed","hand","with","extended","fingers","rude","flipping"],"skins":[{"unified":"1f595","native":"\uD83D\uDD95"},{"unified":"1f595-1f3fb","native":"\uD83D\uDD95\uD83C\uDFFB"},{"unified":"1f595-1f3fc","native":"\uD83D\uDD95\uD83C\uDFFC"},{"unified":"1f595-1f3fd","native":"\uD83D\uDD95\uD83C\uDFFD"},{"unified":"1f595-1f3fe","native":"\uD83D\uDD95\uD83C\uDFFE"},{"unified":"1f595-1f3ff","native":"\uD83D\uDD95\uD83C\uDFFF"}],"version":1},"point_down":{"id":"point_down","name":"Backhand Index Pointing Down","keywords":["point","fingers","hand","direction"],"skins":[{"unified":"1f447","native":"\uD83D\uDC47"},{"unified":"1f447-1f3fb","native":"\uD83D\uDC47\uD83C\uDFFB"},{"unified":"1f447-1f3fc","native":"\uD83D\uDC47\uD83C\uDFFC"},{"unified":"1f447-1f3fd","native":"\uD83D\uDC47\uD83C\uDFFD"},{"unified":"1f447-1f3fe","native":"\uD83D\uDC47\uD83C\uDFFE"},{"unified":"1f447-1f3ff","native":"\uD83D\uDC47\uD83C\uDFFF"}],"version":1},"point_up":{"id":"point_up","name":"Index Pointing Up","keywords":["point","hand","fingers","direction"],"skins":[{"unified":"261d-fe0f","native":"\u261D\uFE0F"},{"unified":"261d-1f3fb","native":"\u261D\uD83C\uDFFB"},{"unified":"261d-1f3fc","native":"\u261D\uD83C\uDFFC"},{"unified":"261d-1f3fd","native":"\u261D\uD83C\uDFFD"},{"unified":"261d-1f3fe","native":"\u261D\uD83C\uDFFE"},{"unified":"261d-1f3ff","native":"\u261D\uD83C\uDFFF"}],"version":1},"index_pointing_at_the_viewer":{"id":"index_pointing_at_the_viewer","name":"Index Pointing at the Viewer","keywords":["you","recruit"],"skins":[{"unified":"1faf5","native":"\uD83E\uDEF5"},{"unified":"1faf5-1f3fb","native":"\uD83E\uDEF5\uD83C\uDFFB"},{"unified":"1faf5-1f3fc","native":"\uD83E\uDEF5\uD83C\uDFFC"},{"unified":"1faf5-1f3fd","native":"\uD83E\uDEF5\uD83C\uDFFD"},{"unified":"1faf5-1f3fe","native":"\uD83E\uDEF5\uD83C\uDFFE"},{"unified":"1faf5-1f3ff","native":"\uD83E\uDEF5\uD83C\uDFFF"}],"version":14},"+1":{"id":"+1","name":"Thumbs Up","keywords":["+1","thumbsup","yes","awesome","good","agree","accept","cool","hand","like"],"skins":[{"unified":"1f44d","native":"\uD83D\uDC4D"},{"unified":"1f44d-1f3fb","native":"\uD83D\uDC4D\uD83C\uDFFB"},{"unified":"1f44d-1f3fc","native":"\uD83D\uDC4D\uD83C\uDFFC"},{"unified":"1f44d-1f3fd","native":"\uD83D\uDC4D\uD83C\uDFFD"},{"unified":"1f44d-1f3fe","native":"\uD83D\uDC4D\uD83C\uDFFE"},{"unified":"1f44d-1f3ff","native":"\uD83D\uDC4D\uD83C\uDFFF"}],"version":1},"-1":{"id":"-1","name":"Thumbs Down","keywords":["-1","thumbsdown","no","dislike","hand"],"skins":[{"unified":"1f44e","native":"\uD83D\uDC4E"},{"unified":"1f44e-1f3fb","native":"\uD83D\uDC4E\uD83C\uDFFB"},{"unified":"1f44e-1f3fc","native":"\uD83D\uDC4E\uD83C\uDFFC"},{"unified":"1f44e-1f3fd","native":"\uD83D\uDC4E\uD83C\uDFFD"},{"unified":"1f44e-1f3fe","native":"\uD83D\uDC4E\uD83C\uDFFE"},{"unified":"1f44e-1f3ff","native":"\uD83D\uDC4E\uD83C\uDFFF"}],"version":1},"fist":{"id":"fist","name":"Raised Fist","keywords":["fingers","hand","grasp"],"skins":[{"unified":"270a","native":"\u270A"},{"unified":"270a-1f3fb","native":"\u270A\uD83C\uDFFB"},{"unified":"270a-1f3fc","native":"\u270A\uD83C\uDFFC"},{"unified":"270a-1f3fd","native":"\u270A\uD83C\uDFFD"},{"unified":"270a-1f3fe","native":"\u270A\uD83C\uDFFE"},{"unified":"270a-1f3ff","native":"\u270A\uD83C\uDFFF"}],"version":1},"facepunch":{"id":"facepunch","name":"Oncoming Fist","keywords":["facepunch","punch","angry","violence","hit","attack","hand"],"skins":[{"unified":"1f44a","native":"\uD83D\uDC4A"},{"unified":"1f44a-1f3fb","native":"\uD83D\uDC4A\uD83C\uDFFB"},{"unified":"1f44a-1f3fc","native":"\uD83D\uDC4A\uD83C\uDFFC"},{"unified":"1f44a-1f3fd","native":"\uD83D\uDC4A\uD83C\uDFFD"},{"unified":"1f44a-1f3fe","native":"\uD83D\uDC4A\uD83C\uDFFE"},{"unified":"1f44a-1f3ff","native":"\uD83D\uDC4A\uD83C\uDFFF"}],"version":1},"left-facing_fist":{"id":"left-facing_fist","name":"Left-Facing Fist","keywords":["left","facing","hand","fistbump"],"skins":[{"unified":"1f91b","native":"\uD83E\uDD1B"},{"unified":"1f91b-1f3fb","native":"\uD83E\uDD1B\uD83C\uDFFB"},{"unified":"1f91b-1f3fc","native":"\uD83E\uDD1B\uD83C\uDFFC"},{"unified":"1f91b-1f3fd","native":"\uD83E\uDD1B\uD83C\uDFFD"},{"unified":"1f91b-1f3fe","native":"\uD83E\uDD1B\uD83C\uDFFE"},{"unified":"1f91b-1f3ff","native":"\uD83E\uDD1B\uD83C\uDFFF"}],"version":3},"right-facing_fist":{"id":"right-facing_fist","name":"Right-Facing Fist","keywords":["right","facing","hand","fistbump"],"skins":[{"unified":"1f91c","native":"\uD83E\uDD1C"},{"unified":"1f91c-1f3fb","native":"\uD83E\uDD1C\uD83C\uDFFB"},{"unified":"1f91c-1f3fc","native":"\uD83E\uDD1C\uD83C\uDFFC"},{"unified":"1f91c-1f3fd","native":"\uD83E\uDD1C\uD83C\uDFFD"},{"unified":"1f91c-1f3fe","native":"\uD83E\uDD1C\uD83C\uDFFE"},{"unified":"1f91c-1f3ff","native":"\uD83E\uDD1C\uD83C\uDFFF"}],"version":3},"clap":{"id":"clap","name":"Clapping Hands","keywords":["clap","praise","applause","congrats","yay"],"skins":[{"unified":"1f44f","native":"\uD83D\uDC4F"},{"unified":"1f44f-1f3fb","native":"\uD83D\uDC4F\uD83C\uDFFB"},{"unified":"1f44f-1f3fc","native":"\uD83D\uDC4F\uD83C\uDFFC"},{"unified":"1f44f-1f3fd","native":"\uD83D\uDC4F\uD83C\uDFFD"},{"unified":"1f44f-1f3fe","native":"\uD83D\uDC4F\uD83C\uDFFE"},{"unified":"1f44f-1f3ff","native":"\uD83D\uDC4F\uD83C\uDFFF"}],"version":1},"raised_hands":{"id":"raised_hands","name":"Raising Hands","keywords":["raised","gesture","hooray","yea","celebration"],"skins":[{"unified":"1f64c","native":"\uD83D\uDE4C"},{"unified":"1f64c-1f3fb","native":"\uD83D\uDE4C\uD83C\uDFFB"},{"unified":"1f64c-1f3fc","native":"\uD83D\uDE4C\uD83C\uDFFC"},{"unified":"1f64c-1f3fd","native":"\uD83D\uDE4C\uD83C\uDFFD"},{"unified":"1f64c-1f3fe","native":"\uD83D\uDE4C\uD83C\uDFFE"},{"unified":"1f64c-1f3ff","native":"\uD83D\uDE4C\uD83C\uDFFF"}],"version":1},"heart_hands":{"id":"heart_hands","name":"Heart Hands","keywords":["love","appreciation","support"],"skins":[{"unified":"1faf6","native":"\uD83E\uDEF6"},{"unified":"1faf6-1f3fb","native":"\uD83E\uDEF6\uD83C\uDFFB"},{"unified":"1faf6-1f3fc","native":"\uD83E\uDEF6\uD83C\uDFFC"},{"unified":"1faf6-1f3fd","native":"\uD83E\uDEF6\uD83C\uDFFD"},{"unified":"1faf6-1f3fe","native":"\uD83E\uDEF6\uD83C\uDFFE"},{"unified":"1faf6-1f3ff","native":"\uD83E\uDEF6\uD83C\uDFFF"}],"version":14},"open_hands":{"id":"open_hands","name":"Open Hands","keywords":["fingers","butterfly"],"skins":[{"unified":"1f450","native":"\uD83D\uDC50"},{"unified":"1f450-1f3fb","native":"\uD83D\uDC50\uD83C\uDFFB"},{"unified":"1f450-1f3fc","native":"\uD83D\uDC50\uD83C\uDFFC"},{"unified":"1f450-1f3fd","native":"\uD83D\uDC50\uD83C\uDFFD"},{"unified":"1f450-1f3fe","native":"\uD83D\uDC50\uD83C\uDFFE"},{"unified":"1f450-1f3ff","native":"\uD83D\uDC50\uD83C\uDFFF"}],"version":1},"palms_up_together":{"id":"palms_up_together","name":"Palms Up Together","keywords":["hands","gesture","cupped","prayer"],"skins":[{"unified":"1f932","native":"\uD83E\uDD32"},{"unified":"1f932-1f3fb","native":"\uD83E\uDD32\uD83C\uDFFB"},{"unified":"1f932-1f3fc","native":"\uD83E\uDD32\uD83C\uDFFC"},{"unified":"1f932-1f3fd","native":"\uD83E\uDD32\uD83C\uDFFD"},{"unified":"1f932-1f3fe","native":"\uD83E\uDD32\uD83C\uDFFE"},{"unified":"1f932-1f3ff","native":"\uD83E\uDD32\uD83C\uDFFF"}],"version":5},"handshake":{"id":"handshake","name":"Handshake","keywords":["agreement","shake"],"skins":[{"unified":"1f91d","native":"\uD83E\uDD1D"},{"unified":"1f91d-1f3fb","native":"\uD83E\uDD1D\uD83C\uDFFB"},{"unified":"1f91d-1f3fc","native":"\uD83E\uDD1D\uD83C\uDFFC"},{"unified":"1f91d-1f3fd","native":"\uD83E\uDD1D\uD83C\uDFFD"},{"unified":"1f91d-1f3fe","native":"\uD83E\uDD1D\uD83C\uDFFE"},{"unified":"1f91d-1f3ff","native":"\uD83E\uDD1D\uD83C\uDFFF"}],"version":3},"pray":{"id":"pray","name":"Folded Hands","keywords":["pray","please","hope","wish","namaste","highfive","high","five"],"skins":[{"unified":"1f64f","native":"\uD83D\uDE4F"},{"unified":"1f64f-1f3fb","native":"\uD83D\uDE4F\uD83C\uDFFB"},{"unified":"1f64f-1f3fc","native":"\uD83D\uDE4F\uD83C\uDFFC"},{"unified":"1f64f-1f3fd","native":"\uD83D\uDE4F\uD83C\uDFFD"},{"unified":"1f64f-1f3fe","native":"\uD83D\uDE4F\uD83C\uDFFE"},{"unified":"1f64f-1f3ff","native":"\uD83D\uDE4F\uD83C\uDFFF"}],"version":1},"writing_hand":{"id":"writing_hand","name":"Writing Hand","keywords":["lower","left","ballpoint","pen","stationery","write","compose"],"skins":[{"unified":"270d-fe0f","native":"\u270D\uFE0F"},{"unified":"270d-1f3fb","native":"\u270D\uD83C\uDFFB"},{"unified":"270d-1f3fc","native":"\u270D\uD83C\uDFFC"},{"unified":"270d-1f3fd","native":"\u270D\uD83C\uDFFD"},{"unified":"270d-1f3fe","native":"\u270D\uD83C\uDFFE"},{"unified":"270d-1f3ff","native":"\u270D\uD83C\uDFFF"}],"version":1},"nail_care":{"id":"nail_care","name":"Nail Polish","keywords":["care","beauty","manicure","finger","fashion"],"skins":[{"unified":"1f485","native":"\uD83D\uDC85"},{"unified":"1f485-1f3fb","native":"\uD83D\uDC85\uD83C\uDFFB"},{"unified":"1f485-1f3fc","native":"\uD83D\uDC85\uD83C\uDFFC"},{"unified":"1f485-1f3fd","native":"\uD83D\uDC85\uD83C\uDFFD"},{"unified":"1f485-1f3fe","native":"\uD83D\uDC85\uD83C\uDFFE"},{"unified":"1f485-1f3ff","native":"\uD83D\uDC85\uD83C\uDFFF"}],"version":1},"selfie":{"id":"selfie","name":"Selfie","keywords":["camera","phone"],"skins":[{"unified":"1f933","native":"\uD83E\uDD33"},{"unified":"1f933-1f3fb","native":"\uD83E\uDD33\uD83C\uDFFB"},{"unified":"1f933-1f3fc","native":"\uD83E\uDD33\uD83C\uDFFC"},{"unified":"1f933-1f3fd","native":"\uD83E\uDD33\uD83C\uDFFD"},{"unified":"1f933-1f3fe","native":"\uD83E\uDD33\uD83C\uDFFE"},{"unified":"1f933-1f3ff","native":"\uD83E\uDD33\uD83C\uDFFF"}],"version":3},"muscle":{"id":"muscle","name":"Flexed Biceps","keywords":["muscle","arm","flex","hand","summer","strong"],"skins":[{"unified":"1f4aa","native":"\uD83D\uDCAA"},{"unified":"1f4aa-1f3fb","native":"\uD83D\uDCAA\uD83C\uDFFB"},{"unified":"1f4aa-1f3fc","native":"\uD83D\uDCAA\uD83C\uDFFC"},{"unified":"1f4aa-1f3fd","native":"\uD83D\uDCAA\uD83C\uDFFD"},{"unified":"1f4aa-1f3fe","native":"\uD83D\uDCAA\uD83C\uDFFE"},{"unified":"1f4aa-1f3ff","native":"\uD83D\uDCAA\uD83C\uDFFF"}],"version":1},"mechanical_arm":{"id":"mechanical_arm","name":"Mechanical Arm","keywords":["accessibility"],"skins":[{"unified":"1f9be","native":"\uD83E\uDDBE"}],"version":12},"mechanical_leg":{"id":"mechanical_leg","name":"Mechanical Leg","keywords":["accessibility"],"skins":[{"unified":"1f9bf","native":"\uD83E\uDDBF"}],"version":12},"leg":{"id":"leg","name":"Leg","keywords":["kick","limb"],"skins":[{"unified":"1f9b5","native":"\uD83E\uDDB5"},{"unified":"1f9b5-1f3fb","native":"\uD83E\uDDB5\uD83C\uDFFB"},{"unified":"1f9b5-1f3fc","native":"\uD83E\uDDB5\uD83C\uDFFC"},{"unified":"1f9b5-1f3fd","native":"\uD83E\uDDB5\uD83C\uDFFD"},{"unified":"1f9b5-1f3fe","native":"\uD83E\uDDB5\uD83C\uDFFE"},{"unified":"1f9b5-1f3ff","native":"\uD83E\uDDB5\uD83C\uDFFF"}],"version":11},"foot":{"id":"foot","name":"Foot","keywords":["kick","stomp"],"skins":[{"unified":"1f9b6","native":"\uD83E\uDDB6"},{"unified":"1f9b6-1f3fb","native":"\uD83E\uDDB6\uD83C\uDFFB"},{"unified":"1f9b6-1f3fc","native":"\uD83E\uDDB6\uD83C\uDFFC"},{"unified":"1f9b6-1f3fd","native":"\uD83E\uDDB6\uD83C\uDFFD"},{"unified":"1f9b6-1f3fe","native":"\uD83E\uDDB6\uD83C\uDFFE"},{"unified":"1f9b6-1f3ff","native":"\uD83E\uDDB6\uD83C\uDFFF"}],"version":11},"ear":{"id":"ear","name":"Ear","keywords":["face","hear","sound","listen"],"skins":[{"unified":"1f442","native":"\uD83D\uDC42"},{"unified":"1f442-1f3fb","native":"\uD83D\uDC42\uD83C\uDFFB"},{"unified":"1f442-1f3fc","native":"\uD83D\uDC42\uD83C\uDFFC"},{"unified":"1f442-1f3fd","native":"\uD83D\uDC42\uD83C\uDFFD"},{"unified":"1f442-1f3fe","native":"\uD83D\uDC42\uD83C\uDFFE"},{"unified":"1f442-1f3ff","native":"\uD83D\uDC42\uD83C\uDFFF"}],"version":1},"ear_with_hearing_aid":{"id":"ear_with_hearing_aid","name":"Ear with Hearing Aid","keywords":["accessibility"],"skins":[{"unified":"1f9bb","native":"\uD83E\uDDBB"},{"unified":"1f9bb-1f3fb","native":"\uD83E\uDDBB\uD83C\uDFFB"},{"unified":"1f9bb-1f3fc","native":"\uD83E\uDDBB\uD83C\uDFFC"},{"unified":"1f9bb-1f3fd","native":"\uD83E\uDDBB\uD83C\uDFFD"},{"unified":"1f9bb-1f3fe","native":"\uD83E\uDDBB\uD83C\uDFFE"},{"unified":"1f9bb-1f3ff","native":"\uD83E\uDDBB\uD83C\uDFFF"}],"version":12},"nose":{"id":"nose","name":"Nose","keywords":["smell","sniff"],"skins":[{"unified":"1f443","native":"\uD83D\uDC43"},{"unified":"1f443-1f3fb","native":"\uD83D\uDC43\uD83C\uDFFB"},{"unified":"1f443-1f3fc","native":"\uD83D\uDC43\uD83C\uDFFC"},{"unified":"1f443-1f3fd","native":"\uD83D\uDC43\uD83C\uDFFD"},{"unified":"1f443-1f3fe","native":"\uD83D\uDC43\uD83C\uDFFE"},{"unified":"1f443-1f3ff","native":"\uD83D\uDC43\uD83C\uDFFF"}],"version":1},"brain":{"id":"brain","name":"Brain","keywords":["smart","intelligent"],"skins":[{"unified":"1f9e0","native":"\uD83E\uDDE0"}],"version":5},"anatomical_heart":{"id":"anatomical_heart","name":"Anatomical Heart","keywords":["health","heartbeat"],"skins":[{"unified":"1fac0","native":"\uD83E\uDEC0"}],"version":13},"lungs":{"id":"lungs","name":"Lungs","keywords":["breathe"],"skins":[{"unified":"1fac1","native":"\uD83E\uDEC1"}],"version":13},"tooth":{"id":"tooth","name":"Tooth","keywords":["teeth","dentist"],"skins":[{"unified":"1f9b7","native":"\uD83E\uDDB7"}],"version":11},"bone":{"id":"bone","name":"Bone","keywords":["skeleton"],"skins":[{"unified":"1f9b4","native":"\uD83E\uDDB4"}],"version":11},"eyes":{"id":"eyes","name":"Eyes","keywords":["look","watch","stalk","peek","see"],"skins":[{"unified":"1f440","native":"\uD83D\uDC40"}],"version":1},"eye":{"id":"eye","name":"Eye","keywords":["face","look","see","watch","stare"],"skins":[{"unified":"1f441-fe0f","native":"\uD83D\uDC41\uFE0F"}],"version":1},"tongue":{"id":"tongue","name":"Tongue","keywords":["mouth","playful"],"skins":[{"unified":"1f445","native":"\uD83D\uDC45"}],"version":1},"lips":{"id":"lips","name":"Mouth","keywords":["lips","kiss"],"skins":[{"unified":"1f444","native":"\uD83D\uDC44"}],"version":1},"biting_lip":{"id":"biting_lip","name":"Biting Lip","keywords":["flirt","sexy","pain","worry"],"skins":[{"unified":"1fae6","native":"\uD83E\uDEE6"}],"version":14},"baby":{"id":"baby","name":"Baby","keywords":["child","boy","girl","toddler"],"skins":[{"unified":"1f476","native":"\uD83D\uDC76"},{"unified":"1f476-1f3fb","native":"\uD83D\uDC76\uD83C\uDFFB"},{"unified":"1f476-1f3fc","native":"\uD83D\uDC76\uD83C\uDFFC"},{"unified":"1f476-1f3fd","native":"\uD83D\uDC76\uD83C\uDFFD"},{"unified":"1f476-1f3fe","native":"\uD83D\uDC76\uD83C\uDFFE"},{"unified":"1f476-1f3ff","native":"\uD83D\uDC76\uD83C\uDFFF"}],"version":1},"child":{"id":"child","name":"Child","keywords":["gender","neutral","young"],"skins":[{"unified":"1f9d2","native":"\uD83E\uDDD2"},{"unified":"1f9d2-1f3fb","native":"\uD83E\uDDD2\uD83C\uDFFB"},{"unified":"1f9d2-1f3fc","native":"\uD83E\uDDD2\uD83C\uDFFC"},{"unified":"1f9d2-1f3fd","native":"\uD83E\uDDD2\uD83C\uDFFD"},{"unified":"1f9d2-1f3fe","native":"\uD83E\uDDD2\uD83C\uDFFE"},{"unified":"1f9d2-1f3ff","native":"\uD83E\uDDD2\uD83C\uDFFF"}],"version":5},"boy":{"id":"boy","name":"Boy","keywords":["man","male","guy","teenager"],"skins":[{"unified":"1f466","native":"\uD83D\uDC66"},{"unified":"1f466-1f3fb","native":"\uD83D\uDC66\uD83C\uDFFB"},{"unified":"1f466-1f3fc","native":"\uD83D\uDC66\uD83C\uDFFC"},{"unified":"1f466-1f3fd","native":"\uD83D\uDC66\uD83C\uDFFD"},{"unified":"1f466-1f3fe","native":"\uD83D\uDC66\uD83C\uDFFE"},{"unified":"1f466-1f3ff","native":"\uD83D\uDC66\uD83C\uDFFF"}],"version":1},"girl":{"id":"girl","name":"Girl","keywords":["female","woman","teenager"],"skins":[{"unified":"1f467","native":"\uD83D\uDC67"},{"unified":"1f467-1f3fb","native":"\uD83D\uDC67\uD83C\uDFFB"},{"unified":"1f467-1f3fc","native":"\uD83D\uDC67\uD83C\uDFFC"},{"unified":"1f467-1f3fd","native":"\uD83D\uDC67\uD83C\uDFFD"},{"unified":"1f467-1f3fe","native":"\uD83D\uDC67\uD83C\uDFFE"},{"unified":"1f467-1f3ff","native":"\uD83D\uDC67\uD83C\uDFFF"}],"version":1},"adult":{"id":"adult","name":"Adult","keywords":["person","gender","neutral"],"skins":[{"unified":"1f9d1","native":"\uD83E\uDDD1"},{"unified":"1f9d1-1f3fb","native":"\uD83E\uDDD1\uD83C\uDFFB"},{"unified":"1f9d1-1f3fc","native":"\uD83E\uDDD1\uD83C\uDFFC"},{"unified":"1f9d1-1f3fd","native":"\uD83E\uDDD1\uD83C\uDFFD"},{"unified":"1f9d1-1f3fe","native":"\uD83E\uDDD1\uD83C\uDFFE"},{"unified":"1f9d1-1f3ff","native":"\uD83E\uDDD1\uD83C\uDFFF"}],"version":5},"person_with_blond_hair":{"id":"person_with_blond_hair","name":"Person Blond Hair","keywords":["with","hairstyle"],"skins":[{"unified":"1f471","native":"\uD83D\uDC71"},{"unified":"1f471-1f3fb","native":"\uD83D\uDC71\uD83C\uDFFB"},{"unified":"1f471-1f3fc","native":"\uD83D\uDC71\uD83C\uDFFC"},{"unified":"1f471-1f3fd","native":"\uD83D\uDC71\uD83C\uDFFD"},{"unified":"1f471-1f3fe","native":"\uD83D\uDC71\uD83C\uDFFE"},{"unified":"1f471-1f3ff","native":"\uD83D\uDC71\uD83C\uDFFF"}],"version":1},"man":{"id":"man","name":"Man","keywords":["mustache","father","dad","guy","classy","sir","moustache"],"skins":[{"unified":"1f468","native":"\uD83D\uDC68"},{"unified":"1f468-1f3fb","native":"\uD83D\uDC68\uD83C\uDFFB"},{"unified":"1f468-1f3fc","native":"\uD83D\uDC68\uD83C\uDFFC"},{"unified":"1f468-1f3fd","native":"\uD83D\uDC68\uD83C\uDFFD"},{"unified":"1f468-1f3fe","native":"\uD83D\uDC68\uD83C\uDFFE"},{"unified":"1f468-1f3ff","native":"\uD83D\uDC68\uD83C\uDFFF"}],"version":1},"bearded_person":{"id":"bearded_person","name":"Person Beard","keywords":["bearded","man","bewhiskered"],"skins":[{"unified":"1f9d4","native":"\uD83E\uDDD4"},{"unified":"1f9d4-1f3fb","native":"\uD83E\uDDD4\uD83C\uDFFB"},{"unified":"1f9d4-1f3fc","native":"\uD83E\uDDD4\uD83C\uDFFC"},{"unified":"1f9d4-1f3fd","native":"\uD83E\uDDD4\uD83C\uDFFD"},{"unified":"1f9d4-1f3fe","native":"\uD83E\uDDD4\uD83C\uDFFE"},{"unified":"1f9d4-1f3ff","native":"\uD83E\uDDD4\uD83C\uDFFF"}],"version":5},"man_with_beard":{"id":"man_with_beard","name":"Man: Beard","keywords":["man","with","facial","hair"],"skins":[{"unified":"1f9d4-200d-2642-fe0f","native":"\uD83E\uDDD4\u200D\u2642\uFE0F"},{"unified":"1f9d4-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9d4-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9d4-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9d4-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9d4-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":13.1},"woman_with_beard":{"id":"woman_with_beard","name":"Woman: Beard","keywords":["woman","with","facial","hair"],"skins":[{"unified":"1f9d4-200d-2640-fe0f","native":"\uD83E\uDDD4\u200D\u2640\uFE0F"},{"unified":"1f9d4-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9d4-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9d4-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9d4-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9d4-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDD4\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":13.1},"red_haired_man":{"id":"red_haired_man","name":"Man: Red Hair","keywords":["haired","man","hairstyle"],"skins":[{"unified":"1f468-200d-1f9b0","native":"\uD83D\uDC68\u200D\uD83E\uDDB0"},{"unified":"1f468-1f3fb-200d-1f9b0","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83E\uDDB0"},{"unified":"1f468-1f3fc-200d-1f9b0","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83E\uDDB0"},{"unified":"1f468-1f3fd-200d-1f9b0","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83E\uDDB0"},{"unified":"1f468-1f3fe-200d-1f9b0","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83E\uDDB0"},{"unified":"1f468-1f3ff-200d-1f9b0","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83E\uDDB0"}],"version":11},"curly_haired_man":{"id":"curly_haired_man","name":"Man: Curly Hair","keywords":["haired","man","hairstyle"],"skins":[{"unified":"1f468-200d-1f9b1","native":"\uD83D\uDC68\u200D\uD83E\uDDB1"},{"unified":"1f468-1f3fb-200d-1f9b1","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83E\uDDB1"},{"unified":"1f468-1f3fc-200d-1f9b1","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83E\uDDB1"},{"unified":"1f468-1f3fd-200d-1f9b1","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83E\uDDB1"},{"unified":"1f468-1f3fe-200d-1f9b1","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83E\uDDB1"},{"unified":"1f468-1f3ff-200d-1f9b1","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83E\uDDB1"}],"version":11},"white_haired_man":{"id":"white_haired_man","name":"Man: White Hair","keywords":["haired","man","old","elder"],"skins":[{"unified":"1f468-200d-1f9b3","native":"\uD83D\uDC68\u200D\uD83E\uDDB3"},{"unified":"1f468-1f3fb-200d-1f9b3","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83E\uDDB3"},{"unified":"1f468-1f3fc-200d-1f9b3","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83E\uDDB3"},{"unified":"1f468-1f3fd-200d-1f9b3","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83E\uDDB3"},{"unified":"1f468-1f3fe-200d-1f9b3","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83E\uDDB3"},{"unified":"1f468-1f3ff-200d-1f9b3","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83E\uDDB3"}],"version":11},"bald_man":{"id":"bald_man","name":"Man: Bald","keywords":["man","hairless"],"skins":[{"unified":"1f468-200d-1f9b2","native":"\uD83D\uDC68\u200D\uD83E\uDDB2"},{"unified":"1f468-1f3fb-200d-1f9b2","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83E\uDDB2"},{"unified":"1f468-1f3fc-200d-1f9b2","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83E\uDDB2"},{"unified":"1f468-1f3fd-200d-1f9b2","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83E\uDDB2"},{"unified":"1f468-1f3fe-200d-1f9b2","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83E\uDDB2"},{"unified":"1f468-1f3ff-200d-1f9b2","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83E\uDDB2"}],"version":11},"woman":{"id":"woman","name":"Woman","keywords":["female","girls","lady"],"skins":[{"unified":"1f469","native":"\uD83D\uDC69"},{"unified":"1f469-1f3fb","native":"\uD83D\uDC69\uD83C\uDFFB"},{"unified":"1f469-1f3fc","native":"\uD83D\uDC69\uD83C\uDFFC"},{"unified":"1f469-1f3fd","native":"\uD83D\uDC69\uD83C\uDFFD"},{"unified":"1f469-1f3fe","native":"\uD83D\uDC69\uD83C\uDFFE"},{"unified":"1f469-1f3ff","native":"\uD83D\uDC69\uD83C\uDFFF"}],"version":1},"red_haired_woman":{"id":"red_haired_woman","name":"Woman: Red Hair","keywords":["haired","woman","hairstyle"],"skins":[{"unified":"1f469-200d-1f9b0","native":"\uD83D\uDC69\u200D\uD83E\uDDB0"},{"unified":"1f469-1f3fb-200d-1f9b0","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDDB0"},{"unified":"1f469-1f3fc-200d-1f9b0","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDDB0"},{"unified":"1f469-1f3fd-200d-1f9b0","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDB0"},{"unified":"1f469-1f3fe-200d-1f9b0","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDDB0"},{"unified":"1f469-1f3ff-200d-1f9b0","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDDB0"}],"version":11},"red_haired_person":{"id":"red_haired_person","name":"Person: Red Hair","keywords":["haired","person","hairstyle"],"skins":[{"unified":"1f9d1-200d-1f9b0","native":"\uD83E\uDDD1\u200D\uD83E\uDDB0"},{"unified":"1f9d1-1f3fb-200d-1f9b0","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDDB0"},{"unified":"1f9d1-1f3fc-200d-1f9b0","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDDB0"},{"unified":"1f9d1-1f3fd-200d-1f9b0","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDDB0"},{"unified":"1f9d1-1f3fe-200d-1f9b0","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDDB0"},{"unified":"1f9d1-1f3ff-200d-1f9b0","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83E\uDDB0"}],"version":12.1},"curly_haired_woman":{"id":"curly_haired_woman","name":"Woman: Curly Hair","keywords":["haired","woman","hairstyle"],"skins":[{"unified":"1f469-200d-1f9b1","native":"\uD83D\uDC69\u200D\uD83E\uDDB1"},{"unified":"1f469-1f3fb-200d-1f9b1","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDDB1"},{"unified":"1f469-1f3fc-200d-1f9b1","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDDB1"},{"unified":"1f469-1f3fd-200d-1f9b1","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDB1"},{"unified":"1f469-1f3fe-200d-1f9b1","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDDB1"},{"unified":"1f469-1f3ff-200d-1f9b1","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDDB1"}],"version":11},"curly_haired_person":{"id":"curly_haired_person","name":"Person: Curly Hair","keywords":["haired","person","hairstyle"],"skins":[{"unified":"1f9d1-200d-1f9b1","native":"\uD83E\uDDD1\u200D\uD83E\uDDB1"},{"unified":"1f9d1-1f3fb-200d-1f9b1","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDDB1"},{"unified":"1f9d1-1f3fc-200d-1f9b1","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDDB1"},{"unified":"1f9d1-1f3fd-200d-1f9b1","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDDB1"},{"unified":"1f9d1-1f3fe-200d-1f9b1","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDDB1"},{"unified":"1f9d1-1f3ff-200d-1f9b1","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83E\uDDB1"}],"version":12.1},"white_haired_woman":{"id":"white_haired_woman","name":"Woman: White Hair","keywords":["haired","woman","old","elder"],"skins":[{"unified":"1f469-200d-1f9b3","native":"\uD83D\uDC69\u200D\uD83E\uDDB3"},{"unified":"1f469-1f3fb-200d-1f9b3","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDDB3"},{"unified":"1f469-1f3fc-200d-1f9b3","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDDB3"},{"unified":"1f469-1f3fd-200d-1f9b3","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDB3"},{"unified":"1f469-1f3fe-200d-1f9b3","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDDB3"},{"unified":"1f469-1f3ff-200d-1f9b3","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDDB3"}],"version":11},"white_haired_person":{"id":"white_haired_person","name":"Person: White Hair","keywords":["haired","person","elder","old"],"skins":[{"unified":"1f9d1-200d-1f9b3","native":"\uD83E\uDDD1\u200D\uD83E\uDDB3"},{"unified":"1f9d1-1f3fb-200d-1f9b3","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDDB3"},{"unified":"1f9d1-1f3fc-200d-1f9b3","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDDB3"},{"unified":"1f9d1-1f3fd-200d-1f9b3","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDDB3"},{"unified":"1f9d1-1f3fe-200d-1f9b3","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDDB3"},{"unified":"1f9d1-1f3ff-200d-1f9b3","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83E\uDDB3"}],"version":12.1},"bald_woman":{"id":"bald_woman","name":"Woman: Bald","keywords":["woman","hairless"],"skins":[{"unified":"1f469-200d-1f9b2","native":"\uD83D\uDC69\u200D\uD83E\uDDB2"},{"unified":"1f469-1f3fb-200d-1f9b2","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDDB2"},{"unified":"1f469-1f3fc-200d-1f9b2","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDDB2"},{"unified":"1f469-1f3fd-200d-1f9b2","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDB2"},{"unified":"1f469-1f3fe-200d-1f9b2","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDDB2"},{"unified":"1f469-1f3ff-200d-1f9b2","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDDB2"}],"version":11},"bald_person":{"id":"bald_person","name":"Person: Bald","keywords":["person","hairless"],"skins":[{"unified":"1f9d1-200d-1f9b2","native":"\uD83E\uDDD1\u200D\uD83E\uDDB2"},{"unified":"1f9d1-1f3fb-200d-1f9b2","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDDB2"},{"unified":"1f9d1-1f3fc-200d-1f9b2","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDDB2"},{"unified":"1f9d1-1f3fd-200d-1f9b2","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDDB2"},{"unified":"1f9d1-1f3fe-200d-1f9b2","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDDB2"},{"unified":"1f9d1-1f3ff-200d-1f9b2","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83E\uDDB2"}],"version":12.1},"blond-haired-woman":{"id":"blond-haired-woman","name":"Woman: Blond Hair","keywords":["haired-woman","woman","female","girl","blonde","person"],"skins":[{"unified":"1f471-200d-2640-fe0f","native":"\uD83D\uDC71\u200D\u2640\uFE0F"},{"unified":"1f471-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC71\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f471-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC71\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f471-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC71\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f471-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC71\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f471-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC71\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"blond-haired-man":{"id":"blond-haired-man","name":"Man: Blond Hair","keywords":["haired-man","man","male","boy","blonde","guy","person"],"skins":[{"unified":"1f471-200d-2642-fe0f","native":"\uD83D\uDC71\u200D\u2642\uFE0F"},{"unified":"1f471-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC71\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f471-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC71\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f471-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC71\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f471-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC71\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f471-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC71\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"older_adult":{"id":"older_adult","name":"Older Adult","keywords":["person","human","elder","senior","gender","neutral"],"skins":[{"unified":"1f9d3","native":"\uD83E\uDDD3"},{"unified":"1f9d3-1f3fb","native":"\uD83E\uDDD3\uD83C\uDFFB"},{"unified":"1f9d3-1f3fc","native":"\uD83E\uDDD3\uD83C\uDFFC"},{"unified":"1f9d3-1f3fd","native":"\uD83E\uDDD3\uD83C\uDFFD"},{"unified":"1f9d3-1f3fe","native":"\uD83E\uDDD3\uD83C\uDFFE"},{"unified":"1f9d3-1f3ff","native":"\uD83E\uDDD3\uD83C\uDFFF"}],"version":5},"older_man":{"id":"older_man","name":"Old Man","keywords":["older","human","male","men","elder","senior"],"skins":[{"unified":"1f474","native":"\uD83D\uDC74"},{"unified":"1f474-1f3fb","native":"\uD83D\uDC74\uD83C\uDFFB"},{"unified":"1f474-1f3fc","native":"\uD83D\uDC74\uD83C\uDFFC"},{"unified":"1f474-1f3fd","native":"\uD83D\uDC74\uD83C\uDFFD"},{"unified":"1f474-1f3fe","native":"\uD83D\uDC74\uD83C\uDFFE"},{"unified":"1f474-1f3ff","native":"\uD83D\uDC74\uD83C\uDFFF"}],"version":1},"older_woman":{"id":"older_woman","name":"Old Woman","keywords":["older","human","female","women","lady","elder","senior"],"skins":[{"unified":"1f475","native":"\uD83D\uDC75"},{"unified":"1f475-1f3fb","native":"\uD83D\uDC75\uD83C\uDFFB"},{"unified":"1f475-1f3fc","native":"\uD83D\uDC75\uD83C\uDFFC"},{"unified":"1f475-1f3fd","native":"\uD83D\uDC75\uD83C\uDFFD"},{"unified":"1f475-1f3fe","native":"\uD83D\uDC75\uD83C\uDFFE"},{"unified":"1f475-1f3ff","native":"\uD83D\uDC75\uD83C\uDFFF"}],"version":1},"person_frowning":{"id":"person_frowning","name":"Person Frowning","keywords":["worried"],"skins":[{"unified":"1f64d","native":"\uD83D\uDE4D"},{"unified":"1f64d-1f3fb","native":"\uD83D\uDE4D\uD83C\uDFFB"},{"unified":"1f64d-1f3fc","native":"\uD83D\uDE4D\uD83C\uDFFC"},{"unified":"1f64d-1f3fd","native":"\uD83D\uDE4D\uD83C\uDFFD"},{"unified":"1f64d-1f3fe","native":"\uD83D\uDE4D\uD83C\uDFFE"},{"unified":"1f64d-1f3ff","native":"\uD83D\uDE4D\uD83C\uDFFF"}],"version":1},"man-frowning":{"id":"man-frowning","name":"Man Frowning","keywords":["male","boy","sad","depressed","discouraged","unhappy"],"skins":[{"unified":"1f64d-200d-2642-fe0f","native":"\uD83D\uDE4D\u200D\u2642\uFE0F"},{"unified":"1f64d-1f3fb-200d-2642-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f64d-1f3fc-200d-2642-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f64d-1f3fd-200d-2642-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f64d-1f3fe-200d-2642-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f64d-1f3ff-200d-2642-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-frowning":{"id":"woman-frowning","name":"Woman Frowning","keywords":["female","girl","sad","depressed","discouraged","unhappy"],"skins":[{"unified":"1f64d-200d-2640-fe0f","native":"\uD83D\uDE4D\u200D\u2640\uFE0F"},{"unified":"1f64d-1f3fb-200d-2640-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f64d-1f3fc-200d-2640-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f64d-1f3fd-200d-2640-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f64d-1f3fe-200d-2640-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f64d-1f3ff-200d-2640-fe0f","native":"\uD83D\uDE4D\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"person_with_pouting_face":{"id":"person_with_pouting_face","name":"Person Pouting","keywords":["with","face","upset"],"skins":[{"unified":"1f64e","native":"\uD83D\uDE4E"},{"unified":"1f64e-1f3fb","native":"\uD83D\uDE4E\uD83C\uDFFB"},{"unified":"1f64e-1f3fc","native":"\uD83D\uDE4E\uD83C\uDFFC"},{"unified":"1f64e-1f3fd","native":"\uD83D\uDE4E\uD83C\uDFFD"},{"unified":"1f64e-1f3fe","native":"\uD83D\uDE4E\uD83C\uDFFE"},{"unified":"1f64e-1f3ff","native":"\uD83D\uDE4E\uD83C\uDFFF"}],"version":1},"man-pouting":{"id":"man-pouting","name":"Man Pouting","keywords":["male","boy"],"skins":[{"unified":"1f64e-200d-2642-fe0f","native":"\uD83D\uDE4E\u200D\u2642\uFE0F"},{"unified":"1f64e-1f3fb-200d-2642-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f64e-1f3fc-200d-2642-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f64e-1f3fd-200d-2642-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f64e-1f3fe-200d-2642-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f64e-1f3ff-200d-2642-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-pouting":{"id":"woman-pouting","name":"Woman Pouting","keywords":["female","girl"],"skins":[{"unified":"1f64e-200d-2640-fe0f","native":"\uD83D\uDE4E\u200D\u2640\uFE0F"},{"unified":"1f64e-1f3fb-200d-2640-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f64e-1f3fc-200d-2640-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f64e-1f3fd-200d-2640-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f64e-1f3fe-200d-2640-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f64e-1f3ff-200d-2640-fe0f","native":"\uD83D\uDE4E\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"no_good":{"id":"no_good","name":"Person Gesturing No","keywords":["good","decline"],"skins":[{"unified":"1f645","native":"\uD83D\uDE45"},{"unified":"1f645-1f3fb","native":"\uD83D\uDE45\uD83C\uDFFB"},{"unified":"1f645-1f3fc","native":"\uD83D\uDE45\uD83C\uDFFC"},{"unified":"1f645-1f3fd","native":"\uD83D\uDE45\uD83C\uDFFD"},{"unified":"1f645-1f3fe","native":"\uD83D\uDE45\uD83C\uDFFE"},{"unified":"1f645-1f3ff","native":"\uD83D\uDE45\uD83C\uDFFF"}],"version":1},"man-gesturing-no":{"id":"man-gesturing-no","name":"Man Gesturing No","keywords":["gesturing-no","male","boy","nope"],"skins":[{"unified":"1f645-200d-2642-fe0f","native":"\uD83D\uDE45\u200D\u2642\uFE0F"},{"unified":"1f645-1f3fb-200d-2642-fe0f","native":"\uD83D\uDE45\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f645-1f3fc-200d-2642-fe0f","native":"\uD83D\uDE45\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f645-1f3fd-200d-2642-fe0f","native":"\uD83D\uDE45\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f645-1f3fe-200d-2642-fe0f","native":"\uD83D\uDE45\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f645-1f3ff-200d-2642-fe0f","native":"\uD83D\uDE45\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-gesturing-no":{"id":"woman-gesturing-no","name":"Woman Gesturing No","keywords":["gesturing-no","female","girl","nope"],"skins":[{"unified":"1f645-200d-2640-fe0f","native":"\uD83D\uDE45\u200D\u2640\uFE0F"},{"unified":"1f645-1f3fb-200d-2640-fe0f","native":"\uD83D\uDE45\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f645-1f3fc-200d-2640-fe0f","native":"\uD83D\uDE45\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f645-1f3fd-200d-2640-fe0f","native":"\uD83D\uDE45\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f645-1f3fe-200d-2640-fe0f","native":"\uD83D\uDE45\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f645-1f3ff-200d-2640-fe0f","native":"\uD83D\uDE45\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"ok_woman":{"id":"ok_woman","name":"Person Gesturing Ok","keywords":["woman","agree"],"skins":[{"unified":"1f646","native":"\uD83D\uDE46"},{"unified":"1f646-1f3fb","native":"\uD83D\uDE46\uD83C\uDFFB"},{"unified":"1f646-1f3fc","native":"\uD83D\uDE46\uD83C\uDFFC"},{"unified":"1f646-1f3fd","native":"\uD83D\uDE46\uD83C\uDFFD"},{"unified":"1f646-1f3fe","native":"\uD83D\uDE46\uD83C\uDFFE"},{"unified":"1f646-1f3ff","native":"\uD83D\uDE46\uD83C\uDFFF"}],"version":1},"man-gesturing-ok":{"id":"man-gesturing-ok","name":"Man Gesturing Ok","keywords":["gesturing-ok","men","boy","male","blue","human"],"skins":[{"unified":"1f646-200d-2642-fe0f","native":"\uD83D\uDE46\u200D\u2642\uFE0F"},{"unified":"1f646-1f3fb-200d-2642-fe0f","native":"\uD83D\uDE46\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f646-1f3fc-200d-2642-fe0f","native":"\uD83D\uDE46\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f646-1f3fd-200d-2642-fe0f","native":"\uD83D\uDE46\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f646-1f3fe-200d-2642-fe0f","native":"\uD83D\uDE46\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f646-1f3ff-200d-2642-fe0f","native":"\uD83D\uDE46\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-gesturing-ok":{"id":"woman-gesturing-ok","name":"Woman Gesturing Ok","keywords":["gesturing-ok","women","girl","female","pink","human"],"skins":[{"unified":"1f646-200d-2640-fe0f","native":"\uD83D\uDE46\u200D\u2640\uFE0F"},{"unified":"1f646-1f3fb-200d-2640-fe0f","native":"\uD83D\uDE46\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f646-1f3fc-200d-2640-fe0f","native":"\uD83D\uDE46\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f646-1f3fd-200d-2640-fe0f","native":"\uD83D\uDE46\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f646-1f3fe-200d-2640-fe0f","native":"\uD83D\uDE46\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f646-1f3ff-200d-2640-fe0f","native":"\uD83D\uDE46\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"information_desk_person":{"id":"information_desk_person","name":"Person Tipping Hand","keywords":["information","desk"],"skins":[{"unified":"1f481","native":"\uD83D\uDC81"},{"unified":"1f481-1f3fb","native":"\uD83D\uDC81\uD83C\uDFFB"},{"unified":"1f481-1f3fc","native":"\uD83D\uDC81\uD83C\uDFFC"},{"unified":"1f481-1f3fd","native":"\uD83D\uDC81\uD83C\uDFFD"},{"unified":"1f481-1f3fe","native":"\uD83D\uDC81\uD83C\uDFFE"},{"unified":"1f481-1f3ff","native":"\uD83D\uDC81\uD83C\uDFFF"}],"version":1},"man-tipping-hand":{"id":"man-tipping-hand","name":"Man Tipping Hand","keywords":["tipping-hand","male","boy","human","information"],"skins":[{"unified":"1f481-200d-2642-fe0f","native":"\uD83D\uDC81\u200D\u2642\uFE0F"},{"unified":"1f481-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC81\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f481-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC81\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f481-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC81\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f481-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC81\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f481-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC81\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-tipping-hand":{"id":"woman-tipping-hand","name":"Woman Tipping Hand","keywords":["tipping-hand","female","girl","human","information"],"skins":[{"unified":"1f481-200d-2640-fe0f","native":"\uD83D\uDC81\u200D\u2640\uFE0F"},{"unified":"1f481-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC81\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f481-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC81\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f481-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC81\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f481-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC81\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f481-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC81\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"raising_hand":{"id":"raising_hand","name":"Person Raising Hand","keywords":["question"],"skins":[{"unified":"1f64b","native":"\uD83D\uDE4B"},{"unified":"1f64b-1f3fb","native":"\uD83D\uDE4B\uD83C\uDFFB"},{"unified":"1f64b-1f3fc","native":"\uD83D\uDE4B\uD83C\uDFFC"},{"unified":"1f64b-1f3fd","native":"\uD83D\uDE4B\uD83C\uDFFD"},{"unified":"1f64b-1f3fe","native":"\uD83D\uDE4B\uD83C\uDFFE"},{"unified":"1f64b-1f3ff","native":"\uD83D\uDE4B\uD83C\uDFFF"}],"version":1},"man-raising-hand":{"id":"man-raising-hand","name":"Man Raising Hand","keywords":["raising-hand","male","boy"],"skins":[{"unified":"1f64b-200d-2642-fe0f","native":"\uD83D\uDE4B\u200D\u2642\uFE0F"},{"unified":"1f64b-1f3fb-200d-2642-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f64b-1f3fc-200d-2642-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f64b-1f3fd-200d-2642-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f64b-1f3fe-200d-2642-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f64b-1f3ff-200d-2642-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-raising-hand":{"id":"woman-raising-hand","name":"Woman Raising Hand","keywords":["raising-hand","female","girl"],"skins":[{"unified":"1f64b-200d-2640-fe0f","native":"\uD83D\uDE4B\u200D\u2640\uFE0F"},{"unified":"1f64b-1f3fb-200d-2640-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f64b-1f3fc-200d-2640-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f64b-1f3fd-200d-2640-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f64b-1f3fe-200d-2640-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f64b-1f3ff-200d-2640-fe0f","native":"\uD83D\uDE4B\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"deaf_person":{"id":"deaf_person","name":"Deaf Person","keywords":["accessibility"],"skins":[{"unified":"1f9cf","native":"\uD83E\uDDCF"},{"unified":"1f9cf-1f3fb","native":"\uD83E\uDDCF\uD83C\uDFFB"},{"unified":"1f9cf-1f3fc","native":"\uD83E\uDDCF\uD83C\uDFFC"},{"unified":"1f9cf-1f3fd","native":"\uD83E\uDDCF\uD83C\uDFFD"},{"unified":"1f9cf-1f3fe","native":"\uD83E\uDDCF\uD83C\uDFFE"},{"unified":"1f9cf-1f3ff","native":"\uD83E\uDDCF\uD83C\uDFFF"}],"version":12},"deaf_man":{"id":"deaf_man","name":"Deaf Man","keywords":["accessibility"],"skins":[{"unified":"1f9cf-200d-2642-fe0f","native":"\uD83E\uDDCF\u200D\u2642\uFE0F"},{"unified":"1f9cf-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9cf-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9cf-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9cf-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9cf-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":12},"deaf_woman":{"id":"deaf_woman","name":"Deaf Woman","keywords":["accessibility"],"skins":[{"unified":"1f9cf-200d-2640-fe0f","native":"\uD83E\uDDCF\u200D\u2640\uFE0F"},{"unified":"1f9cf-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9cf-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9cf-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9cf-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9cf-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDCF\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":12},"bow":{"id":"bow","name":"Person Bowing","keywords":["bow","respectiful"],"skins":[{"unified":"1f647","native":"\uD83D\uDE47"},{"unified":"1f647-1f3fb","native":"\uD83D\uDE47\uD83C\uDFFB"},{"unified":"1f647-1f3fc","native":"\uD83D\uDE47\uD83C\uDFFC"},{"unified":"1f647-1f3fd","native":"\uD83D\uDE47\uD83C\uDFFD"},{"unified":"1f647-1f3fe","native":"\uD83D\uDE47\uD83C\uDFFE"},{"unified":"1f647-1f3ff","native":"\uD83D\uDE47\uD83C\uDFFF"}],"version":1},"man-bowing":{"id":"man-bowing","name":"Man Bowing","keywords":["male","boy"],"skins":[{"unified":"1f647-200d-2642-fe0f","native":"\uD83D\uDE47\u200D\u2642\uFE0F"},{"unified":"1f647-1f3fb-200d-2642-fe0f","native":"\uD83D\uDE47\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f647-1f3fc-200d-2642-fe0f","native":"\uD83D\uDE47\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f647-1f3fd-200d-2642-fe0f","native":"\uD83D\uDE47\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f647-1f3fe-200d-2642-fe0f","native":"\uD83D\uDE47\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f647-1f3ff-200d-2642-fe0f","native":"\uD83D\uDE47\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-bowing":{"id":"woman-bowing","name":"Woman Bowing","keywords":["female","girl"],"skins":[{"unified":"1f647-200d-2640-fe0f","native":"\uD83D\uDE47\u200D\u2640\uFE0F"},{"unified":"1f647-1f3fb-200d-2640-fe0f","native":"\uD83D\uDE47\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f647-1f3fc-200d-2640-fe0f","native":"\uD83D\uDE47\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f647-1f3fd-200d-2640-fe0f","native":"\uD83D\uDE47\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f647-1f3fe-200d-2640-fe0f","native":"\uD83D\uDE47\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f647-1f3ff-200d-2640-fe0f","native":"\uD83D\uDE47\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"face_palm":{"id":"face_palm","name":"Face Palm","keywords":["person","facepalming","disappointed"],"skins":[{"unified":"1f926","native":"\uD83E\uDD26"},{"unified":"1f926-1f3fb","native":"\uD83E\uDD26\uD83C\uDFFB"},{"unified":"1f926-1f3fc","native":"\uD83E\uDD26\uD83C\uDFFC"},{"unified":"1f926-1f3fd","native":"\uD83E\uDD26\uD83C\uDFFD"},{"unified":"1f926-1f3fe","native":"\uD83E\uDD26\uD83C\uDFFE"},{"unified":"1f926-1f3ff","native":"\uD83E\uDD26\uD83C\uDFFF"}],"version":3},"man-facepalming":{"id":"man-facepalming","name":"Man Facepalming","keywords":["male","boy","disbelief"],"skins":[{"unified":"1f926-200d-2642-fe0f","native":"\uD83E\uDD26\u200D\u2642\uFE0F"},{"unified":"1f926-1f3fb-200d-2642-fe0f","native":"\uD83E\uDD26\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f926-1f3fc-200d-2642-fe0f","native":"\uD83E\uDD26\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f926-1f3fd-200d-2642-fe0f","native":"\uD83E\uDD26\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f926-1f3fe-200d-2642-fe0f","native":"\uD83E\uDD26\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f926-1f3ff-200d-2642-fe0f","native":"\uD83E\uDD26\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-facepalming":{"id":"woman-facepalming","name":"Woman Facepalming","keywords":["female","girl","disbelief"],"skins":[{"unified":"1f926-200d-2640-fe0f","native":"\uD83E\uDD26\u200D\u2640\uFE0F"},{"unified":"1f926-1f3fb-200d-2640-fe0f","native":"\uD83E\uDD26\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f926-1f3fc-200d-2640-fe0f","native":"\uD83E\uDD26\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f926-1f3fd-200d-2640-fe0f","native":"\uD83E\uDD26\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f926-1f3fe-200d-2640-fe0f","native":"\uD83E\uDD26\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f926-1f3ff-200d-2640-fe0f","native":"\uD83E\uDD26\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"shrug":{"id":"shrug","name":"Shrug","keywords":["person","shrugging","regardless"],"skins":[{"unified":"1f937","native":"\uD83E\uDD37"},{"unified":"1f937-1f3fb","native":"\uD83E\uDD37\uD83C\uDFFB"},{"unified":"1f937-1f3fc","native":"\uD83E\uDD37\uD83C\uDFFC"},{"unified":"1f937-1f3fd","native":"\uD83E\uDD37\uD83C\uDFFD"},{"unified":"1f937-1f3fe","native":"\uD83E\uDD37\uD83C\uDFFE"},{"unified":"1f937-1f3ff","native":"\uD83E\uDD37\uD83C\uDFFF"}],"version":3},"man-shrugging":{"id":"man-shrugging","name":"Man Shrugging","keywords":["male","boy","confused","indifferent","doubt"],"skins":[{"unified":"1f937-200d-2642-fe0f","native":"\uD83E\uDD37\u200D\u2642\uFE0F"},{"unified":"1f937-1f3fb-200d-2642-fe0f","native":"\uD83E\uDD37\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f937-1f3fc-200d-2642-fe0f","native":"\uD83E\uDD37\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f937-1f3fd-200d-2642-fe0f","native":"\uD83E\uDD37\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f937-1f3fe-200d-2642-fe0f","native":"\uD83E\uDD37\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f937-1f3ff-200d-2642-fe0f","native":"\uD83E\uDD37\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-shrugging":{"id":"woman-shrugging","name":"Woman Shrugging","keywords":["female","girl","confused","indifferent","doubt"],"skins":[{"unified":"1f937-200d-2640-fe0f","native":"\uD83E\uDD37\u200D\u2640\uFE0F"},{"unified":"1f937-1f3fb-200d-2640-fe0f","native":"\uD83E\uDD37\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f937-1f3fc-200d-2640-fe0f","native":"\uD83E\uDD37\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f937-1f3fd-200d-2640-fe0f","native":"\uD83E\uDD37\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f937-1f3fe-200d-2640-fe0f","native":"\uD83E\uDD37\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f937-1f3ff-200d-2640-fe0f","native":"\uD83E\uDD37\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"health_worker":{"id":"health_worker","name":"Health Worker","keywords":["hospital"],"skins":[{"unified":"1f9d1-200d-2695-fe0f","native":"\uD83E\uDDD1\u200D\u2695\uFE0F"},{"unified":"1f9d1-1f3fb-200d-2695-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\u2695\uFE0F"},{"unified":"1f9d1-1f3fc-200d-2695-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\u2695\uFE0F"},{"unified":"1f9d1-1f3fd-200d-2695-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\u2695\uFE0F"},{"unified":"1f9d1-1f3fe-200d-2695-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\u2695\uFE0F"},{"unified":"1f9d1-1f3ff-200d-2695-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\u2695\uFE0F"}],"version":12.1},"male-doctor":{"id":"male-doctor","name":"Man Health Worker","keywords":["male","doctor","nurse","therapist","healthcare","human"],"skins":[{"unified":"1f468-200d-2695-fe0f","native":"\uD83D\uDC68\u200D\u2695\uFE0F"},{"unified":"1f468-1f3fb-200d-2695-fe0f","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\u2695\uFE0F"},{"unified":"1f468-1f3fc-200d-2695-fe0f","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\u2695\uFE0F"},{"unified":"1f468-1f3fd-200d-2695-fe0f","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\u2695\uFE0F"},{"unified":"1f468-1f3fe-200d-2695-fe0f","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\u2695\uFE0F"},{"unified":"1f468-1f3ff-200d-2695-fe0f","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\u2695\uFE0F"}],"version":4},"female-doctor":{"id":"female-doctor","name":"Woman Health Worker","keywords":["female","doctor","nurse","therapist","healthcare","human"],"skins":[{"unified":"1f469-200d-2695-fe0f","native":"\uD83D\uDC69\u200D\u2695\uFE0F"},{"unified":"1f469-1f3fb-200d-2695-fe0f","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\u2695\uFE0F"},{"unified":"1f469-1f3fc-200d-2695-fe0f","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\u2695\uFE0F"},{"unified":"1f469-1f3fd-200d-2695-fe0f","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\u2695\uFE0F"},{"unified":"1f469-1f3fe-200d-2695-fe0f","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\u2695\uFE0F"},{"unified":"1f469-1f3ff-200d-2695-fe0f","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\u2695\uFE0F"}],"version":4},"student":{"id":"student","name":"Student","keywords":["learn"],"skins":[{"unified":"1f9d1-200d-1f393","native":"\uD83E\uDDD1\u200D\uD83C\uDF93"},{"unified":"1f9d1-1f3fb-200d-1f393","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDF93"},{"unified":"1f9d1-1f3fc-200d-1f393","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDF93"},{"unified":"1f9d1-1f3fd-200d-1f393","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDF93"},{"unified":"1f9d1-1f3fe-200d-1f393","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDF93"},{"unified":"1f9d1-1f3ff-200d-1f393","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDF93"}],"version":12.1},"male-student":{"id":"male-student","name":"Man Student","keywords":["male","graduate","human"],"skins":[{"unified":"1f468-200d-1f393","native":"\uD83D\uDC68\u200D\uD83C\uDF93"},{"unified":"1f468-1f3fb-200d-1f393","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDF93"},{"unified":"1f468-1f3fc-200d-1f393","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDF93"},{"unified":"1f468-1f3fd-200d-1f393","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83C\uDF93"},{"unified":"1f468-1f3fe-200d-1f393","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83C\uDF93"},{"unified":"1f468-1f3ff-200d-1f393","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83C\uDF93"}],"version":4},"female-student":{"id":"female-student","name":"Woman Student","keywords":["female","graduate","human"],"skins":[{"unified":"1f469-200d-1f393","native":"\uD83D\uDC69\u200D\uD83C\uDF93"},{"unified":"1f469-1f3fb-200d-1f393","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83C\uDF93"},{"unified":"1f469-1f3fc-200d-1f393","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83C\uDF93"},{"unified":"1f469-1f3fd-200d-1f393","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDF93"},{"unified":"1f469-1f3fe-200d-1f393","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83C\uDF93"},{"unified":"1f469-1f3ff-200d-1f393","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83C\uDF93"}],"version":4},"teacher":{"id":"teacher","name":"Teacher","keywords":["professor"],"skins":[{"unified":"1f9d1-200d-1f3eb","native":"\uD83E\uDDD1\u200D\uD83C\uDFEB"},{"unified":"1f9d1-1f3fb-200d-1f3eb","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDFEB"},{"unified":"1f9d1-1f3fc-200d-1f3eb","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDFEB"},{"unified":"1f9d1-1f3fd-200d-1f3eb","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDFEB"},{"unified":"1f9d1-1f3fe-200d-1f3eb","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDFEB"},{"unified":"1f9d1-1f3ff-200d-1f3eb","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDFEB"}],"version":12.1},"male-teacher":{"id":"male-teacher","name":"Man Teacher","keywords":["male","instructor","professor","human"],"skins":[{"unified":"1f468-200d-1f3eb","native":"\uD83D\uDC68\u200D\uD83C\uDFEB"},{"unified":"1f468-1f3fb-200d-1f3eb","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDFEB"},{"unified":"1f468-1f3fc-200d-1f3eb","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDFEB"},{"unified":"1f468-1f3fd-200d-1f3eb","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83C\uDFEB"},{"unified":"1f468-1f3fe-200d-1f3eb","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83C\uDFEB"},{"unified":"1f468-1f3ff-200d-1f3eb","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83C\uDFEB"}],"version":4},"female-teacher":{"id":"female-teacher","name":"Woman Teacher","keywords":["female","instructor","professor","human"],"skins":[{"unified":"1f469-200d-1f3eb","native":"\uD83D\uDC69\u200D\uD83C\uDFEB"},{"unified":"1f469-1f3fb-200d-1f3eb","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83C\uDFEB"},{"unified":"1f469-1f3fc-200d-1f3eb","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83C\uDFEB"},{"unified":"1f469-1f3fd-200d-1f3eb","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDFEB"},{"unified":"1f469-1f3fe-200d-1f3eb","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83C\uDFEB"},{"unified":"1f469-1f3ff-200d-1f3eb","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83C\uDFEB"}],"version":4},"judge":{"id":"judge","name":"Judge","keywords":["law"],"skins":[{"unified":"1f9d1-200d-2696-fe0f","native":"\uD83E\uDDD1\u200D\u2696\uFE0F"},{"unified":"1f9d1-1f3fb-200d-2696-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\u2696\uFE0F"},{"unified":"1f9d1-1f3fc-200d-2696-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\u2696\uFE0F"},{"unified":"1f9d1-1f3fd-200d-2696-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\u2696\uFE0F"},{"unified":"1f9d1-1f3fe-200d-2696-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\u2696\uFE0F"},{"unified":"1f9d1-1f3ff-200d-2696-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\u2696\uFE0F"}],"version":12.1},"male-judge":{"id":"male-judge","name":"Man Judge","keywords":["male","justice","court","human"],"skins":[{"unified":"1f468-200d-2696-fe0f","native":"\uD83D\uDC68\u200D\u2696\uFE0F"},{"unified":"1f468-1f3fb-200d-2696-fe0f","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\u2696\uFE0F"},{"unified":"1f468-1f3fc-200d-2696-fe0f","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\u2696\uFE0F"},{"unified":"1f468-1f3fd-200d-2696-fe0f","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\u2696\uFE0F"},{"unified":"1f468-1f3fe-200d-2696-fe0f","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\u2696\uFE0F"},{"unified":"1f468-1f3ff-200d-2696-fe0f","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\u2696\uFE0F"}],"version":4},"female-judge":{"id":"female-judge","name":"Woman Judge","keywords":["female","justice","court","human"],"skins":[{"unified":"1f469-200d-2696-fe0f","native":"\uD83D\uDC69\u200D\u2696\uFE0F"},{"unified":"1f469-1f3fb-200d-2696-fe0f","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\u2696\uFE0F"},{"unified":"1f469-1f3fc-200d-2696-fe0f","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\u2696\uFE0F"},{"unified":"1f469-1f3fd-200d-2696-fe0f","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\u2696\uFE0F"},{"unified":"1f469-1f3fe-200d-2696-fe0f","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\u2696\uFE0F"},{"unified":"1f469-1f3ff-200d-2696-fe0f","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\u2696\uFE0F"}],"version":4},"farmer":{"id":"farmer","name":"Farmer","keywords":["crops"],"skins":[{"unified":"1f9d1-200d-1f33e","native":"\uD83E\uDDD1\u200D\uD83C\uDF3E"},{"unified":"1f9d1-1f3fb-200d-1f33e","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDF3E"},{"unified":"1f9d1-1f3fc-200d-1f33e","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDF3E"},{"unified":"1f9d1-1f3fd-200d-1f33e","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDF3E"},{"unified":"1f9d1-1f3fe-200d-1f33e","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDF3E"},{"unified":"1f9d1-1f3ff-200d-1f33e","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDF3E"}],"version":12.1},"male-farmer":{"id":"male-farmer","name":"Man Farmer","keywords":["male","rancher","gardener","human"],"skins":[{"unified":"1f468-200d-1f33e","native":"\uD83D\uDC68\u200D\uD83C\uDF3E"},{"unified":"1f468-1f3fb-200d-1f33e","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDF3E"},{"unified":"1f468-1f3fc-200d-1f33e","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDF3E"},{"unified":"1f468-1f3fd-200d-1f33e","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83C\uDF3E"},{"unified":"1f468-1f3fe-200d-1f33e","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83C\uDF3E"},{"unified":"1f468-1f3ff-200d-1f33e","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83C\uDF3E"}],"version":4},"female-farmer":{"id":"female-farmer","name":"Woman Farmer","keywords":["female","rancher","gardener","human"],"skins":[{"unified":"1f469-200d-1f33e","native":"\uD83D\uDC69\u200D\uD83C\uDF3E"},{"unified":"1f469-1f3fb-200d-1f33e","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83C\uDF3E"},{"unified":"1f469-1f3fc-200d-1f33e","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83C\uDF3E"},{"unified":"1f469-1f3fd-200d-1f33e","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDF3E"},{"unified":"1f469-1f3fe-200d-1f33e","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83C\uDF3E"},{"unified":"1f469-1f3ff-200d-1f33e","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83C\uDF3E"}],"version":4},"cook":{"id":"cook","name":"Cook","keywords":["food","kitchen","culinary"],"skins":[{"unified":"1f9d1-200d-1f373","native":"\uD83E\uDDD1\u200D\uD83C\uDF73"},{"unified":"1f9d1-1f3fb-200d-1f373","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDF73"},{"unified":"1f9d1-1f3fc-200d-1f373","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDF73"},{"unified":"1f9d1-1f3fd-200d-1f373","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDF73"},{"unified":"1f9d1-1f3fe-200d-1f373","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDF73"},{"unified":"1f9d1-1f3ff-200d-1f373","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDF73"}],"version":12.1},"male-cook":{"id":"male-cook","name":"Man Cook","keywords":["male","chef","human"],"skins":[{"unified":"1f468-200d-1f373","native":"\uD83D\uDC68\u200D\uD83C\uDF73"},{"unified":"1f468-1f3fb-200d-1f373","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDF73"},{"unified":"1f468-1f3fc-200d-1f373","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDF73"},{"unified":"1f468-1f3fd-200d-1f373","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83C\uDF73"},{"unified":"1f468-1f3fe-200d-1f373","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83C\uDF73"},{"unified":"1f468-1f3ff-200d-1f373","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83C\uDF73"}],"version":4},"female-cook":{"id":"female-cook","name":"Woman Cook","keywords":["female","chef","human"],"skins":[{"unified":"1f469-200d-1f373","native":"\uD83D\uDC69\u200D\uD83C\uDF73"},{"unified":"1f469-1f3fb-200d-1f373","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83C\uDF73"},{"unified":"1f469-1f3fc-200d-1f373","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83C\uDF73"},{"unified":"1f469-1f3fd-200d-1f373","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDF73"},{"unified":"1f469-1f3fe-200d-1f373","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83C\uDF73"},{"unified":"1f469-1f3ff-200d-1f373","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83C\uDF73"}],"version":4},"mechanic":{"id":"mechanic","name":"Mechanic","keywords":["worker","technician"],"skins":[{"unified":"1f9d1-200d-1f527","native":"\uD83E\uDDD1\u200D\uD83D\uDD27"},{"unified":"1f9d1-1f3fb-200d-1f527","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83D\uDD27"},{"unified":"1f9d1-1f3fc-200d-1f527","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83D\uDD27"},{"unified":"1f9d1-1f3fd-200d-1f527","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83D\uDD27"},{"unified":"1f9d1-1f3fe-200d-1f527","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83D\uDD27"},{"unified":"1f9d1-1f3ff-200d-1f527","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83D\uDD27"}],"version":12.1},"male-mechanic":{"id":"male-mechanic","name":"Man Mechanic","keywords":["male","plumber","human","wrench"],"skins":[{"unified":"1f468-200d-1f527","native":"\uD83D\uDC68\u200D\uD83D\uDD27"},{"unified":"1f468-1f3fb-200d-1f527","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83D\uDD27"},{"unified":"1f468-1f3fc-200d-1f527","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDD27"},{"unified":"1f468-1f3fd-200d-1f527","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83D\uDD27"},{"unified":"1f468-1f3fe-200d-1f527","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83D\uDD27"},{"unified":"1f468-1f3ff-200d-1f527","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83D\uDD27"}],"version":4},"female-mechanic":{"id":"female-mechanic","name":"Woman Mechanic","keywords":["female","plumber","human","wrench"],"skins":[{"unified":"1f469-200d-1f527","native":"\uD83D\uDC69\u200D\uD83D\uDD27"},{"unified":"1f469-1f3fb-200d-1f527","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83D\uDD27"},{"unified":"1f469-1f3fc-200d-1f527","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83D\uDD27"},{"unified":"1f469-1f3fd-200d-1f527","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83D\uDD27"},{"unified":"1f469-1f3fe-200d-1f527","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83D\uDD27"},{"unified":"1f469-1f3ff-200d-1f527","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83D\uDD27"}],"version":4},"factory_worker":{"id":"factory_worker","name":"Factory Worker","keywords":["labor"],"skins":[{"unified":"1f9d1-200d-1f3ed","native":"\uD83E\uDDD1\u200D\uD83C\uDFED"},{"unified":"1f9d1-1f3fb-200d-1f3ed","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDFED"},{"unified":"1f9d1-1f3fc-200d-1f3ed","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDFED"},{"unified":"1f9d1-1f3fd-200d-1f3ed","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDFED"},{"unified":"1f9d1-1f3fe-200d-1f3ed","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDFED"},{"unified":"1f9d1-1f3ff-200d-1f3ed","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDFED"}],"version":12.1},"male-factory-worker":{"id":"male-factory-worker","name":"Man Factory Worker","keywords":["male","factory-worker","assembly","industrial","human"],"skins":[{"unified":"1f468-200d-1f3ed","native":"\uD83D\uDC68\u200D\uD83C\uDFED"},{"unified":"1f468-1f3fb-200d-1f3ed","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDFED"},{"unified":"1f468-1f3fc-200d-1f3ed","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDFED"},{"unified":"1f468-1f3fd-200d-1f3ed","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83C\uDFED"},{"unified":"1f468-1f3fe-200d-1f3ed","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83C\uDFED"},{"unified":"1f468-1f3ff-200d-1f3ed","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83C\uDFED"}],"version":4},"female-factory-worker":{"id":"female-factory-worker","name":"Woman Factory Worker","keywords":["female","factory-worker","assembly","industrial","human"],"skins":[{"unified":"1f469-200d-1f3ed","native":"\uD83D\uDC69\u200D\uD83C\uDFED"},{"unified":"1f469-1f3fb-200d-1f3ed","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83C\uDFED"},{"unified":"1f469-1f3fc-200d-1f3ed","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83C\uDFED"},{"unified":"1f469-1f3fd-200d-1f3ed","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDFED"},{"unified":"1f469-1f3fe-200d-1f3ed","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83C\uDFED"},{"unified":"1f469-1f3ff-200d-1f3ed","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83C\uDFED"}],"version":4},"office_worker":{"id":"office_worker","name":"Office Worker","keywords":["business"],"skins":[{"unified":"1f9d1-200d-1f4bc","native":"\uD83E\uDDD1\u200D\uD83D\uDCBC"},{"unified":"1f9d1-1f3fb-200d-1f4bc","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83D\uDCBC"},{"unified":"1f9d1-1f3fc-200d-1f4bc","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83D\uDCBC"},{"unified":"1f9d1-1f3fd-200d-1f4bc","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83D\uDCBC"},{"unified":"1f9d1-1f3fe-200d-1f4bc","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83D\uDCBC"},{"unified":"1f9d1-1f3ff-200d-1f4bc","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83D\uDCBC"}],"version":12.1},"male-office-worker":{"id":"male-office-worker","name":"Man Office Worker","keywords":["male","office-worker","business","manager","human"],"skins":[{"unified":"1f468-200d-1f4bc","native":"\uD83D\uDC68\u200D\uD83D\uDCBC"},{"unified":"1f468-1f3fb-200d-1f4bc","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83D\uDCBC"},{"unified":"1f468-1f3fc-200d-1f4bc","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDCBC"},{"unified":"1f468-1f3fd-200d-1f4bc","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83D\uDCBC"},{"unified":"1f468-1f3fe-200d-1f4bc","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83D\uDCBC"},{"unified":"1f468-1f3ff-200d-1f4bc","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83D\uDCBC"}],"version":4},"female-office-worker":{"id":"female-office-worker","name":"Woman Office Worker","keywords":["female","office-worker","business","manager","human"],"skins":[{"unified":"1f469-200d-1f4bc","native":"\uD83D\uDC69\u200D\uD83D\uDCBC"},{"unified":"1f469-1f3fb-200d-1f4bc","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83D\uDCBC"},{"unified":"1f469-1f3fc-200d-1f4bc","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83D\uDCBC"},{"unified":"1f469-1f3fd-200d-1f4bc","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83D\uDCBC"},{"unified":"1f469-1f3fe-200d-1f4bc","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83D\uDCBC"},{"unified":"1f469-1f3ff-200d-1f4bc","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83D\uDCBC"}],"version":4},"scientist":{"id":"scientist","name":"Scientist","keywords":["chemistry"],"skins":[{"unified":"1f9d1-200d-1f52c","native":"\uD83E\uDDD1\u200D\uD83D\uDD2C"},{"unified":"1f9d1-1f3fb-200d-1f52c","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83D\uDD2C"},{"unified":"1f9d1-1f3fc-200d-1f52c","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83D\uDD2C"},{"unified":"1f9d1-1f3fd-200d-1f52c","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83D\uDD2C"},{"unified":"1f9d1-1f3fe-200d-1f52c","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83D\uDD2C"},{"unified":"1f9d1-1f3ff-200d-1f52c","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83D\uDD2C"}],"version":12.1},"male-scientist":{"id":"male-scientist","name":"Man Scientist","keywords":["male","biologist","chemist","engineer","physicist","human"],"skins":[{"unified":"1f468-200d-1f52c","native":"\uD83D\uDC68\u200D\uD83D\uDD2C"},{"unified":"1f468-1f3fb-200d-1f52c","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83D\uDD2C"},{"unified":"1f468-1f3fc-200d-1f52c","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDD2C"},{"unified":"1f468-1f3fd-200d-1f52c","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83D\uDD2C"},{"unified":"1f468-1f3fe-200d-1f52c","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83D\uDD2C"},{"unified":"1f468-1f3ff-200d-1f52c","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83D\uDD2C"}],"version":4},"female-scientist":{"id":"female-scientist","name":"Woman Scientist","keywords":["female","biologist","chemist","engineer","physicist","human"],"skins":[{"unified":"1f469-200d-1f52c","native":"\uD83D\uDC69\u200D\uD83D\uDD2C"},{"unified":"1f469-1f3fb-200d-1f52c","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83D\uDD2C"},{"unified":"1f469-1f3fc-200d-1f52c","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83D\uDD2C"},{"unified":"1f469-1f3fd-200d-1f52c","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83D\uDD2C"},{"unified":"1f469-1f3fe-200d-1f52c","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83D\uDD2C"},{"unified":"1f469-1f3ff-200d-1f52c","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83D\uDD2C"}],"version":4},"technologist":{"id":"technologist","name":"Technologist","keywords":["computer"],"skins":[{"unified":"1f9d1-200d-1f4bb","native":"\uD83E\uDDD1\u200D\uD83D\uDCBB"},{"unified":"1f9d1-1f3fb-200d-1f4bb","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83D\uDCBB"},{"unified":"1f9d1-1f3fc-200d-1f4bb","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83D\uDCBB"},{"unified":"1f9d1-1f3fd-200d-1f4bb","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83D\uDCBB"},{"unified":"1f9d1-1f3fe-200d-1f4bb","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83D\uDCBB"},{"unified":"1f9d1-1f3ff-200d-1f4bb","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83D\uDCBB"}],"version":12.1},"male-technologist":{"id":"male-technologist","name":"Man Technologist","keywords":["male","coder","developer","engineer","programmer","software","human","laptop","computer"],"skins":[{"unified":"1f468-200d-1f4bb","native":"\uD83D\uDC68\u200D\uD83D\uDCBB"},{"unified":"1f468-1f3fb-200d-1f4bb","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83D\uDCBB"},{"unified":"1f468-1f3fc-200d-1f4bb","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDCBB"},{"unified":"1f468-1f3fd-200d-1f4bb","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83D\uDCBB"},{"unified":"1f468-1f3fe-200d-1f4bb","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83D\uDCBB"},{"unified":"1f468-1f3ff-200d-1f4bb","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83D\uDCBB"}],"version":4},"female-technologist":{"id":"female-technologist","name":"Woman Technologist","keywords":["female","coder","developer","engineer","programmer","software","human","laptop","computer"],"skins":[{"unified":"1f469-200d-1f4bb","native":"\uD83D\uDC69\u200D\uD83D\uDCBB"},{"unified":"1f469-1f3fb-200d-1f4bb","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83D\uDCBB"},{"unified":"1f469-1f3fc-200d-1f4bb","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83D\uDCBB"},{"unified":"1f469-1f3fd-200d-1f4bb","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83D\uDCBB"},{"unified":"1f469-1f3fe-200d-1f4bb","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83D\uDCBB"},{"unified":"1f469-1f3ff-200d-1f4bb","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83D\uDCBB"}],"version":4},"singer":{"id":"singer","name":"Singer","keywords":["song","artist","performer"],"skins":[{"unified":"1f9d1-200d-1f3a4","native":"\uD83E\uDDD1\u200D\uD83C\uDFA4"},{"unified":"1f9d1-1f3fb-200d-1f3a4","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDFA4"},{"unified":"1f9d1-1f3fc-200d-1f3a4","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDFA4"},{"unified":"1f9d1-1f3fd-200d-1f3a4","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDFA4"},{"unified":"1f9d1-1f3fe-200d-1f3a4","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDFA4"},{"unified":"1f9d1-1f3ff-200d-1f3a4","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDFA4"}],"version":12.1},"male-singer":{"id":"male-singer","name":"Man Singer","keywords":["male","rockstar","entertainer","human"],"skins":[{"unified":"1f468-200d-1f3a4","native":"\uD83D\uDC68\u200D\uD83C\uDFA4"},{"unified":"1f468-1f3fb-200d-1f3a4","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDFA4"},{"unified":"1f468-1f3fc-200d-1f3a4","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDFA4"},{"unified":"1f468-1f3fd-200d-1f3a4","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83C\uDFA4"},{"unified":"1f468-1f3fe-200d-1f3a4","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83C\uDFA4"},{"unified":"1f468-1f3ff-200d-1f3a4","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83C\uDFA4"}],"version":4},"female-singer":{"id":"female-singer","name":"Woman Singer","keywords":["female","rockstar","entertainer","human"],"skins":[{"unified":"1f469-200d-1f3a4","native":"\uD83D\uDC69\u200D\uD83C\uDFA4"},{"unified":"1f469-1f3fb-200d-1f3a4","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83C\uDFA4"},{"unified":"1f469-1f3fc-200d-1f3a4","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83C\uDFA4"},{"unified":"1f469-1f3fd-200d-1f3a4","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDFA4"},{"unified":"1f469-1f3fe-200d-1f3a4","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83C\uDFA4"},{"unified":"1f469-1f3ff-200d-1f3a4","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83C\uDFA4"}],"version":4},"artist":{"id":"artist","name":"Artist","keywords":["painting","draw","creativity"],"skins":[{"unified":"1f9d1-200d-1f3a8","native":"\uD83E\uDDD1\u200D\uD83C\uDFA8"},{"unified":"1f9d1-1f3fb-200d-1f3a8","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDFA8"},{"unified":"1f9d1-1f3fc-200d-1f3a8","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDFA8"},{"unified":"1f9d1-1f3fd-200d-1f3a8","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDFA8"},{"unified":"1f9d1-1f3fe-200d-1f3a8","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDFA8"},{"unified":"1f9d1-1f3ff-200d-1f3a8","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDFA8"}],"version":12.1},"male-artist":{"id":"male-artist","name":"Man Artist","keywords":["male","painter","human"],"skins":[{"unified":"1f468-200d-1f3a8","native":"\uD83D\uDC68\u200D\uD83C\uDFA8"},{"unified":"1f468-1f3fb-200d-1f3a8","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDFA8"},{"unified":"1f468-1f3fc-200d-1f3a8","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDFA8"},{"unified":"1f468-1f3fd-200d-1f3a8","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83C\uDFA8"},{"unified":"1f468-1f3fe-200d-1f3a8","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83C\uDFA8"},{"unified":"1f468-1f3ff-200d-1f3a8","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83C\uDFA8"}],"version":4},"female-artist":{"id":"female-artist","name":"Woman Artist","keywords":["female","painter","human"],"skins":[{"unified":"1f469-200d-1f3a8","native":"\uD83D\uDC69\u200D\uD83C\uDFA8"},{"unified":"1f469-1f3fb-200d-1f3a8","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83C\uDFA8"},{"unified":"1f469-1f3fc-200d-1f3a8","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83C\uDFA8"},{"unified":"1f469-1f3fd-200d-1f3a8","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDFA8"},{"unified":"1f469-1f3fe-200d-1f3a8","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83C\uDFA8"},{"unified":"1f469-1f3ff-200d-1f3a8","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83C\uDFA8"}],"version":4},"pilot":{"id":"pilot","name":"Pilot","keywords":["fly","plane","airplane"],"skins":[{"unified":"1f9d1-200d-2708-fe0f","native":"\uD83E\uDDD1\u200D\u2708\uFE0F"},{"unified":"1f9d1-1f3fb-200d-2708-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\u2708\uFE0F"},{"unified":"1f9d1-1f3fc-200d-2708-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\u2708\uFE0F"},{"unified":"1f9d1-1f3fd-200d-2708-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\u2708\uFE0F"},{"unified":"1f9d1-1f3fe-200d-2708-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\u2708\uFE0F"},{"unified":"1f9d1-1f3ff-200d-2708-fe0f","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\u2708\uFE0F"}],"version":12.1},"male-pilot":{"id":"male-pilot","name":"Man Pilot","keywords":["male","aviator","plane","human"],"skins":[{"unified":"1f468-200d-2708-fe0f","native":"\uD83D\uDC68\u200D\u2708\uFE0F"},{"unified":"1f468-1f3fb-200d-2708-fe0f","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\u2708\uFE0F"},{"unified":"1f468-1f3fc-200d-2708-fe0f","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\u2708\uFE0F"},{"unified":"1f468-1f3fd-200d-2708-fe0f","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\u2708\uFE0F"},{"unified":"1f468-1f3fe-200d-2708-fe0f","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\u2708\uFE0F"},{"unified":"1f468-1f3ff-200d-2708-fe0f","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\u2708\uFE0F"}],"version":4},"female-pilot":{"id":"female-pilot","name":"Woman Pilot","keywords":["female","aviator","plane","human"],"skins":[{"unified":"1f469-200d-2708-fe0f","native":"\uD83D\uDC69\u200D\u2708\uFE0F"},{"unified":"1f469-1f3fb-200d-2708-fe0f","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\u2708\uFE0F"},{"unified":"1f469-1f3fc-200d-2708-fe0f","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\u2708\uFE0F"},{"unified":"1f469-1f3fd-200d-2708-fe0f","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\u2708\uFE0F"},{"unified":"1f469-1f3fe-200d-2708-fe0f","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\u2708\uFE0F"},{"unified":"1f469-1f3ff-200d-2708-fe0f","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\u2708\uFE0F"}],"version":4},"astronaut":{"id":"astronaut","name":"Astronaut","keywords":["outerspace"],"skins":[{"unified":"1f9d1-200d-1f680","native":"\uD83E\uDDD1\u200D\uD83D\uDE80"},{"unified":"1f9d1-1f3fb-200d-1f680","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83D\uDE80"},{"unified":"1f9d1-1f3fc-200d-1f680","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83D\uDE80"},{"unified":"1f9d1-1f3fd-200d-1f680","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83D\uDE80"},{"unified":"1f9d1-1f3fe-200d-1f680","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83D\uDE80"},{"unified":"1f9d1-1f3ff-200d-1f680","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83D\uDE80"}],"version":12.1},"male-astronaut":{"id":"male-astronaut","name":"Man Astronaut","keywords":["male","space","rocket","human"],"skins":[{"unified":"1f468-200d-1f680","native":"\uD83D\uDC68\u200D\uD83D\uDE80"},{"unified":"1f468-1f3fb-200d-1f680","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83D\uDE80"},{"unified":"1f468-1f3fc-200d-1f680","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDE80"},{"unified":"1f468-1f3fd-200d-1f680","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83D\uDE80"},{"unified":"1f468-1f3fe-200d-1f680","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83D\uDE80"},{"unified":"1f468-1f3ff-200d-1f680","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83D\uDE80"}],"version":4},"female-astronaut":{"id":"female-astronaut","name":"Woman Astronaut","keywords":["female","space","rocket","human"],"skins":[{"unified":"1f469-200d-1f680","native":"\uD83D\uDC69\u200D\uD83D\uDE80"},{"unified":"1f469-1f3fb-200d-1f680","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83D\uDE80"},{"unified":"1f469-1f3fc-200d-1f680","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83D\uDE80"},{"unified":"1f469-1f3fd-200d-1f680","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83D\uDE80"},{"unified":"1f469-1f3fe-200d-1f680","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83D\uDE80"},{"unified":"1f469-1f3ff-200d-1f680","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83D\uDE80"}],"version":4},"firefighter":{"id":"firefighter","name":"Firefighter","keywords":["fire"],"skins":[{"unified":"1f9d1-200d-1f692","native":"\uD83E\uDDD1\u200D\uD83D\uDE92"},{"unified":"1f9d1-1f3fb-200d-1f692","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83D\uDE92"},{"unified":"1f9d1-1f3fc-200d-1f692","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83D\uDE92"},{"unified":"1f9d1-1f3fd-200d-1f692","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83D\uDE92"},{"unified":"1f9d1-1f3fe-200d-1f692","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83D\uDE92"},{"unified":"1f9d1-1f3ff-200d-1f692","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83D\uDE92"}],"version":12.1},"male-firefighter":{"id":"male-firefighter","name":"Man Firefighter","keywords":["male","fireman","human"],"skins":[{"unified":"1f468-200d-1f692","native":"\uD83D\uDC68\u200D\uD83D\uDE92"},{"unified":"1f468-1f3fb-200d-1f692","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83D\uDE92"},{"unified":"1f468-1f3fc-200d-1f692","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83D\uDE92"},{"unified":"1f468-1f3fd-200d-1f692","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83D\uDE92"},{"unified":"1f468-1f3fe-200d-1f692","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83D\uDE92"},{"unified":"1f468-1f3ff-200d-1f692","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83D\uDE92"}],"version":4},"female-firefighter":{"id":"female-firefighter","name":"Woman Firefighter","keywords":["female","fireman","human"],"skins":[{"unified":"1f469-200d-1f692","native":"\uD83D\uDC69\u200D\uD83D\uDE92"},{"unified":"1f469-1f3fb-200d-1f692","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83D\uDE92"},{"unified":"1f469-1f3fc-200d-1f692","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83D\uDE92"},{"unified":"1f469-1f3fd-200d-1f692","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83D\uDE92"},{"unified":"1f469-1f3fe-200d-1f692","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83D\uDE92"},{"unified":"1f469-1f3ff-200d-1f692","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83D\uDE92"}],"version":4},"cop":{"id":"cop","name":"Police Officer","keywords":["cop"],"skins":[{"unified":"1f46e","native":"\uD83D\uDC6E"},{"unified":"1f46e-1f3fb","native":"\uD83D\uDC6E\uD83C\uDFFB"},{"unified":"1f46e-1f3fc","native":"\uD83D\uDC6E\uD83C\uDFFC"},{"unified":"1f46e-1f3fd","native":"\uD83D\uDC6E\uD83C\uDFFD"},{"unified":"1f46e-1f3fe","native":"\uD83D\uDC6E\uD83C\uDFFE"},{"unified":"1f46e-1f3ff","native":"\uD83D\uDC6E\uD83C\uDFFF"}],"version":1},"male-police-officer":{"id":"male-police-officer","name":"Man Police Officer","keywords":["male","police-officer","law","legal","enforcement","arrest","911"],"skins":[{"unified":"1f46e-200d-2642-fe0f","native":"\uD83D\uDC6E\u200D\u2642\uFE0F"},{"unified":"1f46e-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f46e-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f46e-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f46e-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f46e-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"female-police-officer":{"id":"female-police-officer","name":"Woman Police Officer","keywords":["female","police-officer","law","legal","enforcement","arrest","911"],"skins":[{"unified":"1f46e-200d-2640-fe0f","native":"\uD83D\uDC6E\u200D\u2640\uFE0F"},{"unified":"1f46e-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f46e-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f46e-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f46e-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f46e-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC6E\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"sleuth_or_spy":{"id":"sleuth_or_spy","name":"Detective","keywords":["sleuth","or","spy","human"],"skins":[{"unified":"1f575-fe0f","native":"\uD83D\uDD75\uFE0F"},{"unified":"1f575-1f3fb","native":"\uD83D\uDD75\uD83C\uDFFB"},{"unified":"1f575-1f3fc","native":"\uD83D\uDD75\uD83C\uDFFC"},{"unified":"1f575-1f3fd","native":"\uD83D\uDD75\uD83C\uDFFD"},{"unified":"1f575-1f3fe","native":"\uD83D\uDD75\uD83C\uDFFE"},{"unified":"1f575-1f3ff","native":"\uD83D\uDD75\uD83C\uDFFF"}],"version":1},"male-detective":{"id":"male-detective","name":"Man Detective","keywords":["male","crime"],"skins":[{"unified":"1f575-fe0f-200d-2642-fe0f","native":"\uD83D\uDD75\uFE0F\u200D\u2642\uFE0F"},{"unified":"1f575-1f3fb-200d-2642-fe0f","native":"\uD83D\uDD75\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f575-1f3fc-200d-2642-fe0f","native":"\uD83D\uDD75\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f575-1f3fd-200d-2642-fe0f","native":"\uD83D\uDD75\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f575-1f3fe-200d-2642-fe0f","native":"\uD83D\uDD75\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f575-1f3ff-200d-2642-fe0f","native":"\uD83D\uDD75\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"female-detective":{"id":"female-detective","name":"Woman Detective","keywords":["female","human","spy"],"skins":[{"unified":"1f575-fe0f-200d-2640-fe0f","native":"\uD83D\uDD75\uFE0F\u200D\u2640\uFE0F"},{"unified":"1f575-1f3fb-200d-2640-fe0f","native":"\uD83D\uDD75\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f575-1f3fc-200d-2640-fe0f","native":"\uD83D\uDD75\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f575-1f3fd-200d-2640-fe0f","native":"\uD83D\uDD75\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f575-1f3fe-200d-2640-fe0f","native":"\uD83D\uDD75\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f575-1f3ff-200d-2640-fe0f","native":"\uD83D\uDD75\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"guardsman":{"id":"guardsman","name":"Guard","keywords":["guardsman","protect"],"skins":[{"unified":"1f482","native":"\uD83D\uDC82"},{"unified":"1f482-1f3fb","native":"\uD83D\uDC82\uD83C\uDFFB"},{"unified":"1f482-1f3fc","native":"\uD83D\uDC82\uD83C\uDFFC"},{"unified":"1f482-1f3fd","native":"\uD83D\uDC82\uD83C\uDFFD"},{"unified":"1f482-1f3fe","native":"\uD83D\uDC82\uD83C\uDFFE"},{"unified":"1f482-1f3ff","native":"\uD83D\uDC82\uD83C\uDFFF"}],"version":1},"male-guard":{"id":"male-guard","name":"Man Guard","keywords":["male","uk","gb","british","guy","royal"],"skins":[{"unified":"1f482-200d-2642-fe0f","native":"\uD83D\uDC82\u200D\u2642\uFE0F"},{"unified":"1f482-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC82\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f482-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC82\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f482-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC82\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f482-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC82\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f482-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC82\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"female-guard":{"id":"female-guard","name":"Woman Guard","keywords":["female","uk","gb","british","royal"],"skins":[{"unified":"1f482-200d-2640-fe0f","native":"\uD83D\uDC82\u200D\u2640\uFE0F"},{"unified":"1f482-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC82\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f482-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC82\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f482-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC82\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f482-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC82\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f482-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC82\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"ninja":{"id":"ninja","name":"Ninja","keywords":["ninjutsu","skills","japanese"],"skins":[{"unified":"1f977","native":"\uD83E\uDD77"},{"unified":"1f977-1f3fb","native":"\uD83E\uDD77\uD83C\uDFFB"},{"unified":"1f977-1f3fc","native":"\uD83E\uDD77\uD83C\uDFFC"},{"unified":"1f977-1f3fd","native":"\uD83E\uDD77\uD83C\uDFFD"},{"unified":"1f977-1f3fe","native":"\uD83E\uDD77\uD83C\uDFFE"},{"unified":"1f977-1f3ff","native":"\uD83E\uDD77\uD83C\uDFFF"}],"version":13},"construction_worker":{"id":"construction_worker","name":"Construction Worker","keywords":["labor","build"],"skins":[{"unified":"1f477","native":"\uD83D\uDC77"},{"unified":"1f477-1f3fb","native":"\uD83D\uDC77\uD83C\uDFFB"},{"unified":"1f477-1f3fc","native":"\uD83D\uDC77\uD83C\uDFFC"},{"unified":"1f477-1f3fd","native":"\uD83D\uDC77\uD83C\uDFFD"},{"unified":"1f477-1f3fe","native":"\uD83D\uDC77\uD83C\uDFFE"},{"unified":"1f477-1f3ff","native":"\uD83D\uDC77\uD83C\uDFFF"}],"version":1},"male-construction-worker":{"id":"male-construction-worker","name":"Man Construction Worker","keywords":["male","construction-worker","human","wip","guy","build","labor"],"skins":[{"unified":"1f477-200d-2642-fe0f","native":"\uD83D\uDC77\u200D\u2642\uFE0F"},{"unified":"1f477-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC77\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f477-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC77\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f477-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC77\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f477-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC77\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f477-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC77\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"female-construction-worker":{"id":"female-construction-worker","name":"Woman Construction Worker","keywords":["female","construction-worker","human","wip","build","labor"],"skins":[{"unified":"1f477-200d-2640-fe0f","native":"\uD83D\uDC77\u200D\u2640\uFE0F"},{"unified":"1f477-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC77\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f477-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC77\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f477-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC77\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f477-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC77\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f477-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC77\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"person_with_crown":{"id":"person_with_crown","name":"Person with Crown","keywords":["royalty","power"],"skins":[{"unified":"1fac5","native":"\uD83E\uDEC5"},{"unified":"1fac5-1f3fb","native":"\uD83E\uDEC5\uD83C\uDFFB"},{"unified":"1fac5-1f3fc","native":"\uD83E\uDEC5\uD83C\uDFFC"},{"unified":"1fac5-1f3fd","native":"\uD83E\uDEC5\uD83C\uDFFD"},{"unified":"1fac5-1f3fe","native":"\uD83E\uDEC5\uD83C\uDFFE"},{"unified":"1fac5-1f3ff","native":"\uD83E\uDEC5\uD83C\uDFFF"}],"version":14},"prince":{"id":"prince","name":"Prince","keywords":["boy","man","male","crown","royal","king"],"skins":[{"unified":"1f934","native":"\uD83E\uDD34"},{"unified":"1f934-1f3fb","native":"\uD83E\uDD34\uD83C\uDFFB"},{"unified":"1f934-1f3fc","native":"\uD83E\uDD34\uD83C\uDFFC"},{"unified":"1f934-1f3fd","native":"\uD83E\uDD34\uD83C\uDFFD"},{"unified":"1f934-1f3fe","native":"\uD83E\uDD34\uD83C\uDFFE"},{"unified":"1f934-1f3ff","native":"\uD83E\uDD34\uD83C\uDFFF"}],"version":3},"princess":{"id":"princess","name":"Princess","keywords":["girl","woman","female","blond","crown","royal","queen"],"skins":[{"unified":"1f478","native":"\uD83D\uDC78"},{"unified":"1f478-1f3fb","native":"\uD83D\uDC78\uD83C\uDFFB"},{"unified":"1f478-1f3fc","native":"\uD83D\uDC78\uD83C\uDFFC"},{"unified":"1f478-1f3fd","native":"\uD83D\uDC78\uD83C\uDFFD"},{"unified":"1f478-1f3fe","native":"\uD83D\uDC78\uD83C\uDFFE"},{"unified":"1f478-1f3ff","native":"\uD83D\uDC78\uD83C\uDFFF"}],"version":1},"man_with_turban":{"id":"man_with_turban","name":"Man with Turban","keywords":["person","wearing","headdress"],"skins":[{"unified":"1f473","native":"\uD83D\uDC73"},{"unified":"1f473-1f3fb","native":"\uD83D\uDC73\uD83C\uDFFB"},{"unified":"1f473-1f3fc","native":"\uD83D\uDC73\uD83C\uDFFC"},{"unified":"1f473-1f3fd","native":"\uD83D\uDC73\uD83C\uDFFD"},{"unified":"1f473-1f3fe","native":"\uD83D\uDC73\uD83C\uDFFE"},{"unified":"1f473-1f3ff","native":"\uD83D\uDC73\uD83C\uDFFF"}],"version":1},"man-wearing-turban":{"id":"man-wearing-turban","name":"Man Wearing Turban","keywords":["wearing-turban","male","indian","hinduism","arabs"],"skins":[{"unified":"1f473-200d-2642-fe0f","native":"\uD83D\uDC73\u200D\u2642\uFE0F"},{"unified":"1f473-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC73\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f473-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC73\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f473-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC73\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f473-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC73\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f473-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC73\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-wearing-turban":{"id":"woman-wearing-turban","name":"Woman Wearing Turban","keywords":["wearing-turban","female","indian","hinduism","arabs"],"skins":[{"unified":"1f473-200d-2640-fe0f","native":"\uD83D\uDC73\u200D\u2640\uFE0F"},{"unified":"1f473-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC73\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f473-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC73\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f473-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC73\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f473-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC73\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f473-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC73\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"man_with_gua_pi_mao":{"id":"man_with_gua_pi_mao","name":"Man with Gua Pi Mao","keywords":["skullcap","male","boy","chinese"],"skins":[{"unified":"1f472","native":"\uD83D\uDC72"},{"unified":"1f472-1f3fb","native":"\uD83D\uDC72\uD83C\uDFFB"},{"unified":"1f472-1f3fc","native":"\uD83D\uDC72\uD83C\uDFFC"},{"unified":"1f472-1f3fd","native":"\uD83D\uDC72\uD83C\uDFFD"},{"unified":"1f472-1f3fe","native":"\uD83D\uDC72\uD83C\uDFFE"},{"unified":"1f472-1f3ff","native":"\uD83D\uDC72\uD83C\uDFFF"}],"version":1},"person_with_headscarf":{"id":"person_with_headscarf","name":"Woman with Headscarf","keywords":["person","female","hijab","mantilla","tichel"],"skins":[{"unified":"1f9d5","native":"\uD83E\uDDD5"},{"unified":"1f9d5-1f3fb","native":"\uD83E\uDDD5\uD83C\uDFFB"},{"unified":"1f9d5-1f3fc","native":"\uD83E\uDDD5\uD83C\uDFFC"},{"unified":"1f9d5-1f3fd","native":"\uD83E\uDDD5\uD83C\uDFFD"},{"unified":"1f9d5-1f3fe","native":"\uD83E\uDDD5\uD83C\uDFFE"},{"unified":"1f9d5-1f3ff","native":"\uD83E\uDDD5\uD83C\uDFFF"}],"version":5},"person_in_tuxedo":{"id":"person_in_tuxedo","name":"Man in Tuxedo","keywords":["person","couple","marriage","wedding","groom"],"skins":[{"unified":"1f935","native":"\uD83E\uDD35"},{"unified":"1f935-1f3fb","native":"\uD83E\uDD35\uD83C\uDFFB"},{"unified":"1f935-1f3fc","native":"\uD83E\uDD35\uD83C\uDFFC"},{"unified":"1f935-1f3fd","native":"\uD83E\uDD35\uD83C\uDFFD"},{"unified":"1f935-1f3fe","native":"\uD83E\uDD35\uD83C\uDFFE"},{"unified":"1f935-1f3ff","native":"\uD83E\uDD35\uD83C\uDFFF"}],"version":3},"man_in_tuxedo":{"id":"man_in_tuxedo","name":"Man in Tuxedo","keywords":["formal","fashion"],"skins":[{"unified":"1f935-200d-2642-fe0f","native":"\uD83E\uDD35\u200D\u2642\uFE0F"},{"unified":"1f935-1f3fb-200d-2642-fe0f","native":"\uD83E\uDD35\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f935-1f3fc-200d-2642-fe0f","native":"\uD83E\uDD35\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f935-1f3fd-200d-2642-fe0f","native":"\uD83E\uDD35\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f935-1f3fe-200d-2642-fe0f","native":"\uD83E\uDD35\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f935-1f3ff-200d-2642-fe0f","native":"\uD83E\uDD35\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":13},"woman_in_tuxedo":{"id":"woman_in_tuxedo","name":"Woman in Tuxedo","keywords":["formal","fashion"],"skins":[{"unified":"1f935-200d-2640-fe0f","native":"\uD83E\uDD35\u200D\u2640\uFE0F"},{"unified":"1f935-1f3fb-200d-2640-fe0f","native":"\uD83E\uDD35\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f935-1f3fc-200d-2640-fe0f","native":"\uD83E\uDD35\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f935-1f3fd-200d-2640-fe0f","native":"\uD83E\uDD35\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f935-1f3fe-200d-2640-fe0f","native":"\uD83E\uDD35\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f935-1f3ff-200d-2640-fe0f","native":"\uD83E\uDD35\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":13},"bride_with_veil":{"id":"bride_with_veil","name":"Bride with Veil","keywords":["couple","marriage","wedding","woman"],"skins":[{"unified":"1f470","native":"\uD83D\uDC70"},{"unified":"1f470-1f3fb","native":"\uD83D\uDC70\uD83C\uDFFB"},{"unified":"1f470-1f3fc","native":"\uD83D\uDC70\uD83C\uDFFC"},{"unified":"1f470-1f3fd","native":"\uD83D\uDC70\uD83C\uDFFD"},{"unified":"1f470-1f3fe","native":"\uD83D\uDC70\uD83C\uDFFE"},{"unified":"1f470-1f3ff","native":"\uD83D\uDC70\uD83C\uDFFF"}],"version":1},"man_with_veil":{"id":"man_with_veil","name":"Man with Veil","keywords":["wedding","marriage"],"skins":[{"unified":"1f470-200d-2642-fe0f","native":"\uD83D\uDC70\u200D\u2642\uFE0F"},{"unified":"1f470-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC70\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f470-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC70\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f470-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC70\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f470-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC70\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f470-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC70\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":13},"woman_with_veil":{"id":"woman_with_veil","name":"Woman with Veil","keywords":["wedding","marriage"],"skins":[{"unified":"1f470-200d-2640-fe0f","native":"\uD83D\uDC70\u200D\u2640\uFE0F"},{"unified":"1f470-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC70\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f470-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC70\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f470-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC70\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f470-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC70\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f470-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC70\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":13},"pregnant_woman":{"id":"pregnant_woman","name":"Pregnant Woman","keywords":["baby"],"skins":[{"unified":"1f930","native":"\uD83E\uDD30"},{"unified":"1f930-1f3fb","native":"\uD83E\uDD30\uD83C\uDFFB"},{"unified":"1f930-1f3fc","native":"\uD83E\uDD30\uD83C\uDFFC"},{"unified":"1f930-1f3fd","native":"\uD83E\uDD30\uD83C\uDFFD"},{"unified":"1f930-1f3fe","native":"\uD83E\uDD30\uD83C\uDFFE"},{"unified":"1f930-1f3ff","native":"\uD83E\uDD30\uD83C\uDFFF"}],"version":3},"pregnant_man":{"id":"pregnant_man","name":"Pregnant Man","keywords":["baby","belly"],"skins":[{"unified":"1fac3","native":"\uD83E\uDEC3"},{"unified":"1fac3-1f3fb","native":"\uD83E\uDEC3\uD83C\uDFFB"},{"unified":"1fac3-1f3fc","native":"\uD83E\uDEC3\uD83C\uDFFC"},{"unified":"1fac3-1f3fd","native":"\uD83E\uDEC3\uD83C\uDFFD"},{"unified":"1fac3-1f3fe","native":"\uD83E\uDEC3\uD83C\uDFFE"},{"unified":"1fac3-1f3ff","native":"\uD83E\uDEC3\uD83C\uDFFF"}],"version":14},"pregnant_person":{"id":"pregnant_person","name":"Pregnant Person","keywords":["baby","belly"],"skins":[{"unified":"1fac4","native":"\uD83E\uDEC4"},{"unified":"1fac4-1f3fb","native":"\uD83E\uDEC4\uD83C\uDFFB"},{"unified":"1fac4-1f3fc","native":"\uD83E\uDEC4\uD83C\uDFFC"},{"unified":"1fac4-1f3fd","native":"\uD83E\uDEC4\uD83C\uDFFD"},{"unified":"1fac4-1f3fe","native":"\uD83E\uDEC4\uD83C\uDFFE"},{"unified":"1fac4-1f3ff","native":"\uD83E\uDEC4\uD83C\uDFFF"}],"version":14},"breast-feeding":{"id":"breast-feeding","name":"Breast-Feeding","keywords":["breast","feeding","nursing","baby"],"skins":[{"unified":"1f931","native":"\uD83E\uDD31"},{"unified":"1f931-1f3fb","native":"\uD83E\uDD31\uD83C\uDFFB"},{"unified":"1f931-1f3fc","native":"\uD83E\uDD31\uD83C\uDFFC"},{"unified":"1f931-1f3fd","native":"\uD83E\uDD31\uD83C\uDFFD"},{"unified":"1f931-1f3fe","native":"\uD83E\uDD31\uD83C\uDFFE"},{"unified":"1f931-1f3ff","native":"\uD83E\uDD31\uD83C\uDFFF"}],"version":5},"woman_feeding_baby":{"id":"woman_feeding_baby","name":"Woman Feeding Baby","keywords":["birth","food"],"skins":[{"unified":"1f469-200d-1f37c","native":"\uD83D\uDC69\u200D\uD83C\uDF7C"},{"unified":"1f469-1f3fb-200d-1f37c","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83C\uDF7C"},{"unified":"1f469-1f3fc-200d-1f37c","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83C\uDF7C"},{"unified":"1f469-1f3fd-200d-1f37c","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDF7C"},{"unified":"1f469-1f3fe-200d-1f37c","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83C\uDF7C"},{"unified":"1f469-1f3ff-200d-1f37c","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83C\uDF7C"}],"version":13},"man_feeding_baby":{"id":"man_feeding_baby","name":"Man Feeding Baby","keywords":["birth","food"],"skins":[{"unified":"1f468-200d-1f37c","native":"\uD83D\uDC68\u200D\uD83C\uDF7C"},{"unified":"1f468-1f3fb-200d-1f37c","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83C\uDF7C"},{"unified":"1f468-1f3fc-200d-1f37c","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83C\uDF7C"},{"unified":"1f468-1f3fd-200d-1f37c","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83C\uDF7C"},{"unified":"1f468-1f3fe-200d-1f37c","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83C\uDF7C"},{"unified":"1f468-1f3ff-200d-1f37c","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83C\uDF7C"}],"version":13},"person_feeding_baby":{"id":"person_feeding_baby","name":"Person Feeding Baby","keywords":["birth","food"],"skins":[{"unified":"1f9d1-200d-1f37c","native":"\uD83E\uDDD1\u200D\uD83C\uDF7C"},{"unified":"1f9d1-1f3fb-200d-1f37c","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDF7C"},{"unified":"1f9d1-1f3fc-200d-1f37c","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDF7C"},{"unified":"1f9d1-1f3fd-200d-1f37c","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDF7C"},{"unified":"1f9d1-1f3fe-200d-1f37c","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDF7C"},{"unified":"1f9d1-1f3ff-200d-1f37c","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDF7C"}],"version":13},"angel":{"id":"angel","name":"Baby Angel","keywords":["heaven","wings","halo"],"skins":[{"unified":"1f47c","native":"\uD83D\uDC7C"},{"unified":"1f47c-1f3fb","native":"\uD83D\uDC7C\uD83C\uDFFB"},{"unified":"1f47c-1f3fc","native":"\uD83D\uDC7C\uD83C\uDFFC"},{"unified":"1f47c-1f3fd","native":"\uD83D\uDC7C\uD83C\uDFFD"},{"unified":"1f47c-1f3fe","native":"\uD83D\uDC7C\uD83C\uDFFE"},{"unified":"1f47c-1f3ff","native":"\uD83D\uDC7C\uD83C\uDFFF"}],"version":1},"santa":{"id":"santa","name":"Santa Claus","keywords":["festival","man","male","xmas","father","christmas"],"skins":[{"unified":"1f385","native":"\uD83C\uDF85"},{"unified":"1f385-1f3fb","native":"\uD83C\uDF85\uD83C\uDFFB"},{"unified":"1f385-1f3fc","native":"\uD83C\uDF85\uD83C\uDFFC"},{"unified":"1f385-1f3fd","native":"\uD83C\uDF85\uD83C\uDFFD"},{"unified":"1f385-1f3fe","native":"\uD83C\uDF85\uD83C\uDFFE"},{"unified":"1f385-1f3ff","native":"\uD83C\uDF85\uD83C\uDFFF"}],"version":1},"mrs_claus":{"id":"mrs_claus","name":"Mrs. Claus","keywords":["mrs","mother","christmas","woman","female","xmas"],"skins":[{"unified":"1f936","native":"\uD83E\uDD36"},{"unified":"1f936-1f3fb","native":"\uD83E\uDD36\uD83C\uDFFB"},{"unified":"1f936-1f3fc","native":"\uD83E\uDD36\uD83C\uDFFC"},{"unified":"1f936-1f3fd","native":"\uD83E\uDD36\uD83C\uDFFD"},{"unified":"1f936-1f3fe","native":"\uD83E\uDD36\uD83C\uDFFE"},{"unified":"1f936-1f3ff","native":"\uD83E\uDD36\uD83C\uDFFF"}],"version":3},"mx_claus":{"id":"mx_claus","name":"Mx Claus","keywords":["christmas"],"skins":[{"unified":"1f9d1-200d-1f384","native":"\uD83E\uDDD1\u200D\uD83C\uDF84"},{"unified":"1f9d1-1f3fb-200d-1f384","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83C\uDF84"},{"unified":"1f9d1-1f3fc-200d-1f384","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83C\uDF84"},{"unified":"1f9d1-1f3fd-200d-1f384","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83C\uDF84"},{"unified":"1f9d1-1f3fe-200d-1f384","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83C\uDF84"},{"unified":"1f9d1-1f3ff-200d-1f384","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83C\uDF84"}],"version":13},"superhero":{"id":"superhero","name":"Superhero","keywords":["marvel"],"skins":[{"unified":"1f9b8","native":"\uD83E\uDDB8"},{"unified":"1f9b8-1f3fb","native":"\uD83E\uDDB8\uD83C\uDFFB"},{"unified":"1f9b8-1f3fc","native":"\uD83E\uDDB8\uD83C\uDFFC"},{"unified":"1f9b8-1f3fd","native":"\uD83E\uDDB8\uD83C\uDFFD"},{"unified":"1f9b8-1f3fe","native":"\uD83E\uDDB8\uD83C\uDFFE"},{"unified":"1f9b8-1f3ff","native":"\uD83E\uDDB8\uD83C\uDFFF"}],"version":11},"male_superhero":{"id":"male_superhero","name":"Man Superhero","keywords":["male","good","hero","superpowers"],"skins":[{"unified":"1f9b8-200d-2642-fe0f","native":"\uD83E\uDDB8\u200D\u2642\uFE0F"},{"unified":"1f9b8-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9b8-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9b8-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9b8-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9b8-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":11},"female_superhero":{"id":"female_superhero","name":"Woman Superhero","keywords":["female","good","heroine","superpowers"],"skins":[{"unified":"1f9b8-200d-2640-fe0f","native":"\uD83E\uDDB8\u200D\u2640\uFE0F"},{"unified":"1f9b8-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9b8-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9b8-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9b8-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9b8-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDB8\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":11},"supervillain":{"id":"supervillain","name":"Supervillain","keywords":["marvel"],"skins":[{"unified":"1f9b9","native":"\uD83E\uDDB9"},{"unified":"1f9b9-1f3fb","native":"\uD83E\uDDB9\uD83C\uDFFB"},{"unified":"1f9b9-1f3fc","native":"\uD83E\uDDB9\uD83C\uDFFC"},{"unified":"1f9b9-1f3fd","native":"\uD83E\uDDB9\uD83C\uDFFD"},{"unified":"1f9b9-1f3fe","native":"\uD83E\uDDB9\uD83C\uDFFE"},{"unified":"1f9b9-1f3ff","native":"\uD83E\uDDB9\uD83C\uDFFF"}],"version":11},"male_supervillain":{"id":"male_supervillain","name":"Man Supervillain","keywords":["male","evil","bad","criminal","hero","superpowers"],"skins":[{"unified":"1f9b9-200d-2642-fe0f","native":"\uD83E\uDDB9\u200D\u2642\uFE0F"},{"unified":"1f9b9-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9b9-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9b9-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9b9-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9b9-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":11},"female_supervillain":{"id":"female_supervillain","name":"Woman Supervillain","keywords":["female","evil","bad","criminal","heroine","superpowers"],"skins":[{"unified":"1f9b9-200d-2640-fe0f","native":"\uD83E\uDDB9\u200D\u2640\uFE0F"},{"unified":"1f9b9-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9b9-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9b9-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9b9-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9b9-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDB9\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":11},"mage":{"id":"mage","name":"Mage","keywords":["magic"],"skins":[{"unified":"1f9d9","native":"\uD83E\uDDD9"},{"unified":"1f9d9-1f3fb","native":"\uD83E\uDDD9\uD83C\uDFFB"},{"unified":"1f9d9-1f3fc","native":"\uD83E\uDDD9\uD83C\uDFFC"},{"unified":"1f9d9-1f3fd","native":"\uD83E\uDDD9\uD83C\uDFFD"},{"unified":"1f9d9-1f3fe","native":"\uD83E\uDDD9\uD83C\uDFFE"},{"unified":"1f9d9-1f3ff","native":"\uD83E\uDDD9\uD83C\uDFFF"}],"version":5},"male_mage":{"id":"male_mage","name":"Man Mage","keywords":["male","sorcerer"],"skins":[{"unified":"1f9d9-200d-2642-fe0f","native":"\uD83E\uDDD9\u200D\u2642\uFE0F"},{"unified":"1f9d9-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9d9-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9d9-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9d9-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9d9-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":5},"female_mage":{"id":"female_mage","name":"Woman Mage","keywords":["female","witch"],"skins":[{"unified":"1f9d9-200d-2640-fe0f","native":"\uD83E\uDDD9\u200D\u2640\uFE0F"},{"unified":"1f9d9-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9d9-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9d9-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9d9-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9d9-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDD9\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":5},"fairy":{"id":"fairy","name":"Fairy","keywords":["wings","magical"],"skins":[{"unified":"1f9da","native":"\uD83E\uDDDA"},{"unified":"1f9da-1f3fb","native":"\uD83E\uDDDA\uD83C\uDFFB"},{"unified":"1f9da-1f3fc","native":"\uD83E\uDDDA\uD83C\uDFFC"},{"unified":"1f9da-1f3fd","native":"\uD83E\uDDDA\uD83C\uDFFD"},{"unified":"1f9da-1f3fe","native":"\uD83E\uDDDA\uD83C\uDFFE"},{"unified":"1f9da-1f3ff","native":"\uD83E\uDDDA\uD83C\uDFFF"}],"version":5},"male_fairy":{"id":"male_fairy","name":"Man Fairy","keywords":["male"],"skins":[{"unified":"1f9da-200d-2642-fe0f","native":"\uD83E\uDDDA\u200D\u2642\uFE0F"},{"unified":"1f9da-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9da-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9da-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9da-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9da-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":5},"female_fairy":{"id":"female_fairy","name":"Woman Fairy","keywords":["female"],"skins":[{"unified":"1f9da-200d-2640-fe0f","native":"\uD83E\uDDDA\u200D\u2640\uFE0F"},{"unified":"1f9da-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9da-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9da-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9da-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9da-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDDA\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":5},"vampire":{"id":"vampire","name":"Vampire","keywords":["blood","twilight"],"skins":[{"unified":"1f9db","native":"\uD83E\uDDDB"},{"unified":"1f9db-1f3fb","native":"\uD83E\uDDDB\uD83C\uDFFB"},{"unified":"1f9db-1f3fc","native":"\uD83E\uDDDB\uD83C\uDFFC"},{"unified":"1f9db-1f3fd","native":"\uD83E\uDDDB\uD83C\uDFFD"},{"unified":"1f9db-1f3fe","native":"\uD83E\uDDDB\uD83C\uDFFE"},{"unified":"1f9db-1f3ff","native":"\uD83E\uDDDB\uD83C\uDFFF"}],"version":5},"male_vampire":{"id":"male_vampire","name":"Man Vampire","keywords":["male","dracula"],"skins":[{"unified":"1f9db-200d-2642-fe0f","native":"\uD83E\uDDDB\u200D\u2642\uFE0F"},{"unified":"1f9db-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9db-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9db-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9db-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9db-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":5},"female_vampire":{"id":"female_vampire","name":"Woman Vampire","keywords":["female"],"skins":[{"unified":"1f9db-200d-2640-fe0f","native":"\uD83E\uDDDB\u200D\u2640\uFE0F"},{"unified":"1f9db-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9db-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9db-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9db-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9db-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDDB\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":5},"merperson":{"id":"merperson","name":"Merperson","keywords":["sea"],"skins":[{"unified":"1f9dc","native":"\uD83E\uDDDC"},{"unified":"1f9dc-1f3fb","native":"\uD83E\uDDDC\uD83C\uDFFB"},{"unified":"1f9dc-1f3fc","native":"\uD83E\uDDDC\uD83C\uDFFC"},{"unified":"1f9dc-1f3fd","native":"\uD83E\uDDDC\uD83C\uDFFD"},{"unified":"1f9dc-1f3fe","native":"\uD83E\uDDDC\uD83C\uDFFE"},{"unified":"1f9dc-1f3ff","native":"\uD83E\uDDDC\uD83C\uDFFF"}],"version":5},"merman":{"id":"merman","name":"Merman","keywords":["man","male","triton"],"skins":[{"unified":"1f9dc-200d-2642-fe0f","native":"\uD83E\uDDDC\u200D\u2642\uFE0F"},{"unified":"1f9dc-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9dc-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9dc-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9dc-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9dc-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":5},"mermaid":{"id":"mermaid","name":"Mermaid","keywords":["woman","female","merwoman","ariel"],"skins":[{"unified":"1f9dc-200d-2640-fe0f","native":"\uD83E\uDDDC\u200D\u2640\uFE0F"},{"unified":"1f9dc-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9dc-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9dc-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9dc-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9dc-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDDC\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":5},"elf":{"id":"elf","name":"Elf","keywords":["magical"],"skins":[{"unified":"1f9dd","native":"\uD83E\uDDDD"},{"unified":"1f9dd-1f3fb","native":"\uD83E\uDDDD\uD83C\uDFFB"},{"unified":"1f9dd-1f3fc","native":"\uD83E\uDDDD\uD83C\uDFFC"},{"unified":"1f9dd-1f3fd","native":"\uD83E\uDDDD\uD83C\uDFFD"},{"unified":"1f9dd-1f3fe","native":"\uD83E\uDDDD\uD83C\uDFFE"},{"unified":"1f9dd-1f3ff","native":"\uD83E\uDDDD\uD83C\uDFFF"}],"version":5},"male_elf":{"id":"male_elf","name":"Man Elf","keywords":["male"],"skins":[{"unified":"1f9dd-200d-2642-fe0f","native":"\uD83E\uDDDD\u200D\u2642\uFE0F"},{"unified":"1f9dd-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9dd-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9dd-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9dd-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9dd-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":5},"female_elf":{"id":"female_elf","name":"Woman Elf","keywords":["female"],"skins":[{"unified":"1f9dd-200d-2640-fe0f","native":"\uD83E\uDDDD\u200D\u2640\uFE0F"},{"unified":"1f9dd-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9dd-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9dd-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9dd-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9dd-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDDD\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":5},"genie":{"id":"genie","name":"Genie","keywords":["magical","wishes"],"skins":[{"unified":"1f9de","native":"\uD83E\uDDDE"}],"version":5},"male_genie":{"id":"male_genie","name":"Man Genie","keywords":["male"],"skins":[{"unified":"1f9de-200d-2642-fe0f","native":"\uD83E\uDDDE\u200D\u2642\uFE0F"}],"version":5},"female_genie":{"id":"female_genie","name":"Woman Genie","keywords":["female"],"skins":[{"unified":"1f9de-200d-2640-fe0f","native":"\uD83E\uDDDE\u200D\u2640\uFE0F"}],"version":5},"zombie":{"id":"zombie","name":"Zombie","keywords":["dead"],"skins":[{"unified":"1f9df","native":"\uD83E\uDDDF"}],"version":5},"male_zombie":{"id":"male_zombie","name":"Man Zombie","keywords":["male","dracula","undead","walking","dead"],"skins":[{"unified":"1f9df-200d-2642-fe0f","native":"\uD83E\uDDDF\u200D\u2642\uFE0F"}],"version":5},"female_zombie":{"id":"female_zombie","name":"Woman Zombie","keywords":["female","undead","walking","dead"],"skins":[{"unified":"1f9df-200d-2640-fe0f","native":"\uD83E\uDDDF\u200D\u2640\uFE0F"}],"version":5},"troll":{"id":"troll","name":"Troll","keywords":["mystical","monster"],"skins":[{"unified":"1f9cc","native":"\uD83E\uDDCC"}],"version":14},"massage":{"id":"massage","name":"Face Massage","keywords":["person","getting","relax"],"skins":[{"unified":"1f486","native":"\uD83D\uDC86"},{"unified":"1f486-1f3fb","native":"\uD83D\uDC86\uD83C\uDFFB"},{"unified":"1f486-1f3fc","native":"\uD83D\uDC86\uD83C\uDFFC"},{"unified":"1f486-1f3fd","native":"\uD83D\uDC86\uD83C\uDFFD"},{"unified":"1f486-1f3fe","native":"\uD83D\uDC86\uD83C\uDFFE"},{"unified":"1f486-1f3ff","native":"\uD83D\uDC86\uD83C\uDFFF"}],"version":1},"man-getting-massage":{"id":"man-getting-massage","name":"Man Getting Massage","keywords":["getting-massage","male","boy","head"],"skins":[{"unified":"1f486-200d-2642-fe0f","native":"\uD83D\uDC86\u200D\u2642\uFE0F"},{"unified":"1f486-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC86\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f486-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC86\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f486-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC86\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f486-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC86\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f486-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC86\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-getting-massage":{"id":"woman-getting-massage","name":"Woman Getting Massage","keywords":["getting-massage","female","girl","head"],"skins":[{"unified":"1f486-200d-2640-fe0f","native":"\uD83D\uDC86\u200D\u2640\uFE0F"},{"unified":"1f486-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC86\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f486-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC86\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f486-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC86\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f486-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC86\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f486-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC86\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"haircut":{"id":"haircut","name":"Haircut","keywords":["person","getting","hairstyle"],"skins":[{"unified":"1f487","native":"\uD83D\uDC87"},{"unified":"1f487-1f3fb","native":"\uD83D\uDC87\uD83C\uDFFB"},{"unified":"1f487-1f3fc","native":"\uD83D\uDC87\uD83C\uDFFC"},{"unified":"1f487-1f3fd","native":"\uD83D\uDC87\uD83C\uDFFD"},{"unified":"1f487-1f3fe","native":"\uD83D\uDC87\uD83C\uDFFE"},{"unified":"1f487-1f3ff","native":"\uD83D\uDC87\uD83C\uDFFF"}],"version":1},"man-getting-haircut":{"id":"man-getting-haircut","name":"Man Getting Haircut","keywords":["getting-haircut","male","boy"],"skins":[{"unified":"1f487-200d-2642-fe0f","native":"\uD83D\uDC87\u200D\u2642\uFE0F"},{"unified":"1f487-1f3fb-200d-2642-fe0f","native":"\uD83D\uDC87\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f487-1f3fc-200d-2642-fe0f","native":"\uD83D\uDC87\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f487-1f3fd-200d-2642-fe0f","native":"\uD83D\uDC87\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f487-1f3fe-200d-2642-fe0f","native":"\uD83D\uDC87\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f487-1f3ff-200d-2642-fe0f","native":"\uD83D\uDC87\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-getting-haircut":{"id":"woman-getting-haircut","name":"Woman Getting Haircut","keywords":["getting-haircut","female","girl"],"skins":[{"unified":"1f487-200d-2640-fe0f","native":"\uD83D\uDC87\u200D\u2640\uFE0F"},{"unified":"1f487-1f3fb-200d-2640-fe0f","native":"\uD83D\uDC87\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f487-1f3fc-200d-2640-fe0f","native":"\uD83D\uDC87\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f487-1f3fd-200d-2640-fe0f","native":"\uD83D\uDC87\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f487-1f3fe-200d-2640-fe0f","native":"\uD83D\uDC87\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f487-1f3ff-200d-2640-fe0f","native":"\uD83D\uDC87\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"walking":{"id":"walking","name":"Pedestrian","keywords":["walking","person","move"],"skins":[{"unified":"1f6b6","native":"\uD83D\uDEB6"},{"unified":"1f6b6-1f3fb","native":"\uD83D\uDEB6\uD83C\uDFFB"},{"unified":"1f6b6-1f3fc","native":"\uD83D\uDEB6\uD83C\uDFFC"},{"unified":"1f6b6-1f3fd","native":"\uD83D\uDEB6\uD83C\uDFFD"},{"unified":"1f6b6-1f3fe","native":"\uD83D\uDEB6\uD83C\uDFFE"},{"unified":"1f6b6-1f3ff","native":"\uD83D\uDEB6\uD83C\uDFFF"}],"version":1},"man-walking":{"id":"man-walking","name":"Man Walking","keywords":["human","feet","steps"],"skins":[{"unified":"1f6b6-200d-2642-fe0f","native":"\uD83D\uDEB6\u200D\u2642\uFE0F"},{"unified":"1f6b6-1f3fb-200d-2642-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f6b6-1f3fc-200d-2642-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f6b6-1f3fd-200d-2642-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f6b6-1f3fe-200d-2642-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f6b6-1f3ff-200d-2642-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-walking":{"id":"woman-walking","name":"Woman Walking","keywords":["human","feet","steps","female"],"skins":[{"unified":"1f6b6-200d-2640-fe0f","native":"\uD83D\uDEB6\u200D\u2640\uFE0F"},{"unified":"1f6b6-1f3fb-200d-2640-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f6b6-1f3fc-200d-2640-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f6b6-1f3fd-200d-2640-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f6b6-1f3fe-200d-2640-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f6b6-1f3ff-200d-2640-fe0f","native":"\uD83D\uDEB6\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"standing_person":{"id":"standing_person","name":"Standing Person","keywords":["still"],"skins":[{"unified":"1f9cd","native":"\uD83E\uDDCD"},{"unified":"1f9cd-1f3fb","native":"\uD83E\uDDCD\uD83C\uDFFB"},{"unified":"1f9cd-1f3fc","native":"\uD83E\uDDCD\uD83C\uDFFC"},{"unified":"1f9cd-1f3fd","native":"\uD83E\uDDCD\uD83C\uDFFD"},{"unified":"1f9cd-1f3fe","native":"\uD83E\uDDCD\uD83C\uDFFE"},{"unified":"1f9cd-1f3ff","native":"\uD83E\uDDCD\uD83C\uDFFF"}],"version":12},"man_standing":{"id":"man_standing","name":"Man Standing","keywords":["still"],"skins":[{"unified":"1f9cd-200d-2642-fe0f","native":"\uD83E\uDDCD\u200D\u2642\uFE0F"},{"unified":"1f9cd-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9cd-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9cd-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9cd-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9cd-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":12},"woman_standing":{"id":"woman_standing","name":"Woman Standing","keywords":["still"],"skins":[{"unified":"1f9cd-200d-2640-fe0f","native":"\uD83E\uDDCD\u200D\u2640\uFE0F"},{"unified":"1f9cd-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9cd-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9cd-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9cd-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9cd-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDCD\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":12},"kneeling_person":{"id":"kneeling_person","name":"Kneeling Person","keywords":["pray","respectful"],"skins":[{"unified":"1f9ce","native":"\uD83E\uDDCE"},{"unified":"1f9ce-1f3fb","native":"\uD83E\uDDCE\uD83C\uDFFB"},{"unified":"1f9ce-1f3fc","native":"\uD83E\uDDCE\uD83C\uDFFC"},{"unified":"1f9ce-1f3fd","native":"\uD83E\uDDCE\uD83C\uDFFD"},{"unified":"1f9ce-1f3fe","native":"\uD83E\uDDCE\uD83C\uDFFE"},{"unified":"1f9ce-1f3ff","native":"\uD83E\uDDCE\uD83C\uDFFF"}],"version":12},"man_kneeling":{"id":"man_kneeling","name":"Man Kneeling","keywords":["pray","respectful"],"skins":[{"unified":"1f9ce-200d-2642-fe0f","native":"\uD83E\uDDCE\u200D\u2642\uFE0F"},{"unified":"1f9ce-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9ce-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9ce-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9ce-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9ce-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":12},"woman_kneeling":{"id":"woman_kneeling","name":"Woman Kneeling","keywords":["respectful","pray"],"skins":[{"unified":"1f9ce-200d-2640-fe0f","native":"\uD83E\uDDCE\u200D\u2640\uFE0F"},{"unified":"1f9ce-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9ce-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9ce-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9ce-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9ce-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDCE\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":12},"person_with_probing_cane":{"id":"person_with_probing_cane","name":"Person with White Cane","keywords":["probing","blind"],"skins":[{"unified":"1f9d1-200d-1f9af","native":"\uD83E\uDDD1\u200D\uD83E\uDDAF"},{"unified":"1f9d1-1f3fb-200d-1f9af","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDDAF"},{"unified":"1f9d1-1f3fc-200d-1f9af","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDDAF"},{"unified":"1f9d1-1f3fd-200d-1f9af","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDDAF"},{"unified":"1f9d1-1f3fe-200d-1f9af","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDDAF"},{"unified":"1f9d1-1f3ff-200d-1f9af","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83E\uDDAF"}],"version":12.1},"man_with_probing_cane":{"id":"man_with_probing_cane","name":"Man with White Cane","keywords":["probing","blind"],"skins":[{"unified":"1f468-200d-1f9af","native":"\uD83D\uDC68\u200D\uD83E\uDDAF"},{"unified":"1f468-1f3fb-200d-1f9af","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83E\uDDAF"},{"unified":"1f468-1f3fc-200d-1f9af","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83E\uDDAF"},{"unified":"1f468-1f3fd-200d-1f9af","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83E\uDDAF"},{"unified":"1f468-1f3fe-200d-1f9af","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83E\uDDAF"},{"unified":"1f468-1f3ff-200d-1f9af","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83E\uDDAF"}],"version":12},"woman_with_probing_cane":{"id":"woman_with_probing_cane","name":"Woman with White Cane","keywords":["probing","blind"],"skins":[{"unified":"1f469-200d-1f9af","native":"\uD83D\uDC69\u200D\uD83E\uDDAF"},{"unified":"1f469-1f3fb-200d-1f9af","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDDAF"},{"unified":"1f469-1f3fc-200d-1f9af","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDDAF"},{"unified":"1f469-1f3fd-200d-1f9af","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDAF"},{"unified":"1f469-1f3fe-200d-1f9af","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDDAF"},{"unified":"1f469-1f3ff-200d-1f9af","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDDAF"}],"version":12},"person_in_motorized_wheelchair":{"id":"person_in_motorized_wheelchair","name":"Person in Motorized Wheelchair","keywords":["disability","accessibility"],"skins":[{"unified":"1f9d1-200d-1f9bc","native":"\uD83E\uDDD1\u200D\uD83E\uDDBC"},{"unified":"1f9d1-1f3fb-200d-1f9bc","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDDBC"},{"unified":"1f9d1-1f3fc-200d-1f9bc","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDDBC"},{"unified":"1f9d1-1f3fd-200d-1f9bc","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDDBC"},{"unified":"1f9d1-1f3fe-200d-1f9bc","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDDBC"},{"unified":"1f9d1-1f3ff-200d-1f9bc","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83E\uDDBC"}],"version":12.1},"man_in_motorized_wheelchair":{"id":"man_in_motorized_wheelchair","name":"Man in Motorized Wheelchair","keywords":["disability","accessibility"],"skins":[{"unified":"1f468-200d-1f9bc","native":"\uD83D\uDC68\u200D\uD83E\uDDBC"},{"unified":"1f468-1f3fb-200d-1f9bc","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83E\uDDBC"},{"unified":"1f468-1f3fc-200d-1f9bc","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83E\uDDBC"},{"unified":"1f468-1f3fd-200d-1f9bc","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83E\uDDBC"},{"unified":"1f468-1f3fe-200d-1f9bc","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83E\uDDBC"},{"unified":"1f468-1f3ff-200d-1f9bc","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83E\uDDBC"}],"version":12},"woman_in_motorized_wheelchair":{"id":"woman_in_motorized_wheelchair","name":"Woman in Motorized Wheelchair","keywords":["disability","accessibility"],"skins":[{"unified":"1f469-200d-1f9bc","native":"\uD83D\uDC69\u200D\uD83E\uDDBC"},{"unified":"1f469-1f3fb-200d-1f9bc","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDDBC"},{"unified":"1f469-1f3fc-200d-1f9bc","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDDBC"},{"unified":"1f469-1f3fd-200d-1f9bc","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDBC"},{"unified":"1f469-1f3fe-200d-1f9bc","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDDBC"},{"unified":"1f469-1f3ff-200d-1f9bc","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDDBC"}],"version":12},"person_in_manual_wheelchair":{"id":"person_in_manual_wheelchair","name":"Person in Manual Wheelchair","keywords":["disability","accessibility"],"skins":[{"unified":"1f9d1-200d-1f9bd","native":"\uD83E\uDDD1\u200D\uD83E\uDDBD"},{"unified":"1f9d1-1f3fb-200d-1f9bd","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDDBD"},{"unified":"1f9d1-1f3fc-200d-1f9bd","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDDBD"},{"unified":"1f9d1-1f3fd-200d-1f9bd","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDDBD"},{"unified":"1f9d1-1f3fe-200d-1f9bd","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDDBD"},{"unified":"1f9d1-1f3ff-200d-1f9bd","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83E\uDDBD"}],"version":12.1},"man_in_manual_wheelchair":{"id":"man_in_manual_wheelchair","name":"Man in Manual Wheelchair","keywords":["disability","accessibility"],"skins":[{"unified":"1f468-200d-1f9bd","native":"\uD83D\uDC68\u200D\uD83E\uDDBD"},{"unified":"1f468-1f3fb-200d-1f9bd","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\uD83E\uDDBD"},{"unified":"1f468-1f3fc-200d-1f9bd","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\uD83E\uDDBD"},{"unified":"1f468-1f3fd-200d-1f9bd","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\uD83E\uDDBD"},{"unified":"1f468-1f3fe-200d-1f9bd","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\uD83E\uDDBD"},{"unified":"1f468-1f3ff-200d-1f9bd","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\uD83E\uDDBD"}],"version":12},"woman_in_manual_wheelchair":{"id":"woman_in_manual_wheelchair","name":"Woman in Manual Wheelchair","keywords":["disability","accessibility"],"skins":[{"unified":"1f469-200d-1f9bd","native":"\uD83D\uDC69\u200D\uD83E\uDDBD"},{"unified":"1f469-1f3fb-200d-1f9bd","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDDBD"},{"unified":"1f469-1f3fc-200d-1f9bd","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDDBD"},{"unified":"1f469-1f3fd-200d-1f9bd","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDDBD"},{"unified":"1f469-1f3fe-200d-1f9bd","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDDBD"},{"unified":"1f469-1f3ff-200d-1f9bd","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDDBD"}],"version":12},"runner":{"id":"runner","name":"Runner","keywords":["running","person","move"],"skins":[{"unified":"1f3c3","native":"\uD83C\uDFC3"},{"unified":"1f3c3-1f3fb","native":"\uD83C\uDFC3\uD83C\uDFFB"},{"unified":"1f3c3-1f3fc","native":"\uD83C\uDFC3\uD83C\uDFFC"},{"unified":"1f3c3-1f3fd","native":"\uD83C\uDFC3\uD83C\uDFFD"},{"unified":"1f3c3-1f3fe","native":"\uD83C\uDFC3\uD83C\uDFFE"},{"unified":"1f3c3-1f3ff","native":"\uD83C\uDFC3\uD83C\uDFFF"}],"version":1},"man-running":{"id":"man-running","name":"Man Running","keywords":["walking","exercise","race"],"skins":[{"unified":"1f3c3-200d-2642-fe0f","native":"\uD83C\uDFC3\u200D\u2642\uFE0F"},{"unified":"1f3c3-1f3fb-200d-2642-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f3c3-1f3fc-200d-2642-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f3c3-1f3fd-200d-2642-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f3c3-1f3fe-200d-2642-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f3c3-1f3ff-200d-2642-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-running":{"id":"woman-running","name":"Woman Running","keywords":["walking","exercise","race","female"],"skins":[{"unified":"1f3c3-200d-2640-fe0f","native":"\uD83C\uDFC3\u200D\u2640\uFE0F"},{"unified":"1f3c3-1f3fb-200d-2640-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f3c3-1f3fc-200d-2640-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f3c3-1f3fd-200d-2640-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f3c3-1f3fe-200d-2640-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f3c3-1f3ff-200d-2640-fe0f","native":"\uD83C\uDFC3\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"dancer":{"id":"dancer","name":"Dancer","keywords":["woman","dancing","female","girl","fun"],"skins":[{"unified":"1f483","native":"\uD83D\uDC83"},{"unified":"1f483-1f3fb","native":"\uD83D\uDC83\uD83C\uDFFB"},{"unified":"1f483-1f3fc","native":"\uD83D\uDC83\uD83C\uDFFC"},{"unified":"1f483-1f3fd","native":"\uD83D\uDC83\uD83C\uDFFD"},{"unified":"1f483-1f3fe","native":"\uD83D\uDC83\uD83C\uDFFE"},{"unified":"1f483-1f3ff","native":"\uD83D\uDC83\uD83C\uDFFF"}],"version":1},"man_dancing":{"id":"man_dancing","name":"Man Dancing","keywords":["male","boy","fun","dancer"],"skins":[{"unified":"1f57a","native":"\uD83D\uDD7A"},{"unified":"1f57a-1f3fb","native":"\uD83D\uDD7A\uD83C\uDFFB"},{"unified":"1f57a-1f3fc","native":"\uD83D\uDD7A\uD83C\uDFFC"},{"unified":"1f57a-1f3fd","native":"\uD83D\uDD7A\uD83C\uDFFD"},{"unified":"1f57a-1f3fe","native":"\uD83D\uDD7A\uD83C\uDFFE"},{"unified":"1f57a-1f3ff","native":"\uD83D\uDD7A\uD83C\uDFFF"}],"version":3},"man_in_business_suit_levitating":{"id":"man_in_business_suit_levitating","name":"Person in Suit Levitating","keywords":["man","business","levitate","hover","jump"],"skins":[{"unified":"1f574-fe0f","native":"\uD83D\uDD74\uFE0F"},{"unified":"1f574-1f3fb","native":"\uD83D\uDD74\uD83C\uDFFB"},{"unified":"1f574-1f3fc","native":"\uD83D\uDD74\uD83C\uDFFC"},{"unified":"1f574-1f3fd","native":"\uD83D\uDD74\uD83C\uDFFD"},{"unified":"1f574-1f3fe","native":"\uD83D\uDD74\uD83C\uDFFE"},{"unified":"1f574-1f3ff","native":"\uD83D\uDD74\uD83C\uDFFF"}],"version":1},"dancers":{"id":"dancers","name":"Woman with Bunny Ears","keywords":["dancers","people","perform","costume"],"skins":[{"unified":"1f46f","native":"\uD83D\uDC6F"}],"version":1},"men-with-bunny-ears-partying":{"id":"men-with-bunny-ears-partying","name":"Men with Bunny Ears","keywords":["with-bunny-ears-partying","man","male","boys"],"skins":[{"unified":"1f46f-200d-2642-fe0f","native":"\uD83D\uDC6F\u200D\u2642\uFE0F"}],"version":4},"women-with-bunny-ears-partying":{"id":"women-with-bunny-ears-partying","name":"Women with Bunny Ears","keywords":["with-bunny-ears-partying","woman","female","girls"],"skins":[{"unified":"1f46f-200d-2640-fe0f","native":"\uD83D\uDC6F\u200D\u2640\uFE0F"}],"version":4},"person_in_steamy_room":{"id":"person_in_steamy_room","name":"Person in Steamy Room","keywords":["relax","spa"],"skins":[{"unified":"1f9d6","native":"\uD83E\uDDD6"},{"unified":"1f9d6-1f3fb","native":"\uD83E\uDDD6\uD83C\uDFFB"},{"unified":"1f9d6-1f3fc","native":"\uD83E\uDDD6\uD83C\uDFFC"},{"unified":"1f9d6-1f3fd","native":"\uD83E\uDDD6\uD83C\uDFFD"},{"unified":"1f9d6-1f3fe","native":"\uD83E\uDDD6\uD83C\uDFFE"},{"unified":"1f9d6-1f3ff","native":"\uD83E\uDDD6\uD83C\uDFFF"}],"version":5},"man_in_steamy_room":{"id":"man_in_steamy_room","name":"Man in Steamy Room","keywords":["male","spa","steamroom","sauna"],"skins":[{"unified":"1f9d6-200d-2642-fe0f","native":"\uD83E\uDDD6\u200D\u2642\uFE0F"},{"unified":"1f9d6-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9d6-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9d6-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9d6-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9d6-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":5},"woman_in_steamy_room":{"id":"woman_in_steamy_room","name":"Woman in Steamy Room","keywords":["female","spa","steamroom","sauna"],"skins":[{"unified":"1f9d6-200d-2640-fe0f","native":"\uD83E\uDDD6\u200D\u2640\uFE0F"},{"unified":"1f9d6-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9d6-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9d6-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9d6-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9d6-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDD6\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":5},"person_climbing":{"id":"person_climbing","name":"Person Climbing","keywords":["sport"],"skins":[{"unified":"1f9d7","native":"\uD83E\uDDD7"},{"unified":"1f9d7-1f3fb","native":"\uD83E\uDDD7\uD83C\uDFFB"},{"unified":"1f9d7-1f3fc","native":"\uD83E\uDDD7\uD83C\uDFFC"},{"unified":"1f9d7-1f3fd","native":"\uD83E\uDDD7\uD83C\uDFFD"},{"unified":"1f9d7-1f3fe","native":"\uD83E\uDDD7\uD83C\uDFFE"},{"unified":"1f9d7-1f3ff","native":"\uD83E\uDDD7\uD83C\uDFFF"}],"version":5},"man_climbing":{"id":"man_climbing","name":"Man Climbing","keywords":["sports","hobby","male","rock"],"skins":[{"unified":"1f9d7-200d-2642-fe0f","native":"\uD83E\uDDD7\u200D\u2642\uFE0F"},{"unified":"1f9d7-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9d7-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9d7-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9d7-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9d7-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":5},"woman_climbing":{"id":"woman_climbing","name":"Woman Climbing","keywords":["sports","hobby","female","rock"],"skins":[{"unified":"1f9d7-200d-2640-fe0f","native":"\uD83E\uDDD7\u200D\u2640\uFE0F"},{"unified":"1f9d7-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9d7-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9d7-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9d7-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9d7-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDD7\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":5},"fencer":{"id":"fencer","name":"Fencer","keywords":["person","fencing","sports","sword"],"skins":[{"unified":"1f93a","native":"\uD83E\uDD3A"}],"version":3},"horse_racing":{"id":"horse_racing","name":"Horse Racing","keywords":["animal","betting","competition","gambling","luck"],"skins":[{"unified":"1f3c7","native":"\uD83C\uDFC7"},{"unified":"1f3c7-1f3fb","native":"\uD83C\uDFC7\uD83C\uDFFB"},{"unified":"1f3c7-1f3fc","native":"\uD83C\uDFC7\uD83C\uDFFC"},{"unified":"1f3c7-1f3fd","native":"\uD83C\uDFC7\uD83C\uDFFD"},{"unified":"1f3c7-1f3fe","native":"\uD83C\uDFC7\uD83C\uDFFE"},{"unified":"1f3c7-1f3ff","native":"\uD83C\uDFC7\uD83C\uDFFF"}],"version":1},"skier":{"id":"skier","name":"Skier","keywords":["sports","winter","snow"],"skins":[{"unified":"26f7-fe0f","native":"\u26F7\uFE0F"}],"version":1},"snowboarder":{"id":"snowboarder","name":"Snowboarder","keywords":["sports","winter"],"skins":[{"unified":"1f3c2","native":"\uD83C\uDFC2"},{"unified":"1f3c2-1f3fb","native":"\uD83C\uDFC2\uD83C\uDFFB"},{"unified":"1f3c2-1f3fc","native":"\uD83C\uDFC2\uD83C\uDFFC"},{"unified":"1f3c2-1f3fd","native":"\uD83C\uDFC2\uD83C\uDFFD"},{"unified":"1f3c2-1f3fe","native":"\uD83C\uDFC2\uD83C\uDFFE"},{"unified":"1f3c2-1f3ff","native":"\uD83C\uDFC2\uD83C\uDFFF"}],"version":1},"golfer":{"id":"golfer","name":"Person Golfing","keywords":["golfer","sports","business"],"skins":[{"unified":"1f3cc-fe0f","native":"\uD83C\uDFCC\uFE0F"},{"unified":"1f3cc-1f3fb","native":"\uD83C\uDFCC\uD83C\uDFFB"},{"unified":"1f3cc-1f3fc","native":"\uD83C\uDFCC\uD83C\uDFFC"},{"unified":"1f3cc-1f3fd","native":"\uD83C\uDFCC\uD83C\uDFFD"},{"unified":"1f3cc-1f3fe","native":"\uD83C\uDFCC\uD83C\uDFFE"},{"unified":"1f3cc-1f3ff","native":"\uD83C\uDFCC\uD83C\uDFFF"}],"version":1},"man-golfing":{"id":"man-golfing","name":"Man Golfing","keywords":["sport"],"skins":[{"unified":"1f3cc-fe0f-200d-2642-fe0f","native":"\uD83C\uDFCC\uFE0F\u200D\u2642\uFE0F"},{"unified":"1f3cc-1f3fb-200d-2642-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f3cc-1f3fc-200d-2642-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f3cc-1f3fd-200d-2642-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f3cc-1f3fe-200d-2642-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f3cc-1f3ff-200d-2642-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-golfing":{"id":"woman-golfing","name":"Woman Golfing","keywords":["sports","business","female"],"skins":[{"unified":"1f3cc-fe0f-200d-2640-fe0f","native":"\uD83C\uDFCC\uFE0F\u200D\u2640\uFE0F"},{"unified":"1f3cc-1f3fb-200d-2640-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f3cc-1f3fc-200d-2640-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f3cc-1f3fd-200d-2640-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f3cc-1f3fe-200d-2640-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f3cc-1f3ff-200d-2640-fe0f","native":"\uD83C\uDFCC\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"surfer":{"id":"surfer","name":"Surfer","keywords":["person","surfing","sport","sea"],"skins":[{"unified":"1f3c4","native":"\uD83C\uDFC4"},{"unified":"1f3c4-1f3fb","native":"\uD83C\uDFC4\uD83C\uDFFB"},{"unified":"1f3c4-1f3fc","native":"\uD83C\uDFC4\uD83C\uDFFC"},{"unified":"1f3c4-1f3fd","native":"\uD83C\uDFC4\uD83C\uDFFD"},{"unified":"1f3c4-1f3fe","native":"\uD83C\uDFC4\uD83C\uDFFE"},{"unified":"1f3c4-1f3ff","native":"\uD83C\uDFC4\uD83C\uDFFF"}],"version":1},"man-surfing":{"id":"man-surfing","name":"Man Surfing","keywords":["sports","ocean","sea","summer","beach"],"skins":[{"unified":"1f3c4-200d-2642-fe0f","native":"\uD83C\uDFC4\u200D\u2642\uFE0F"},{"unified":"1f3c4-1f3fb-200d-2642-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f3c4-1f3fc-200d-2642-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f3c4-1f3fd-200d-2642-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f3c4-1f3fe-200d-2642-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f3c4-1f3ff-200d-2642-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-surfing":{"id":"woman-surfing","name":"Woman Surfing","keywords":["sports","ocean","sea","summer","beach","female"],"skins":[{"unified":"1f3c4-200d-2640-fe0f","native":"\uD83C\uDFC4\u200D\u2640\uFE0F"},{"unified":"1f3c4-1f3fb-200d-2640-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f3c4-1f3fc-200d-2640-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f3c4-1f3fd-200d-2640-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f3c4-1f3fe-200d-2640-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f3c4-1f3ff-200d-2640-fe0f","native":"\uD83C\uDFC4\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"rowboat":{"id":"rowboat","name":"Rowboat","keywords":["person","rowing","boat","sport","move"],"skins":[{"unified":"1f6a3","native":"\uD83D\uDEA3"},{"unified":"1f6a3-1f3fb","native":"\uD83D\uDEA3\uD83C\uDFFB"},{"unified":"1f6a3-1f3fc","native":"\uD83D\uDEA3\uD83C\uDFFC"},{"unified":"1f6a3-1f3fd","native":"\uD83D\uDEA3\uD83C\uDFFD"},{"unified":"1f6a3-1f3fe","native":"\uD83D\uDEA3\uD83C\uDFFE"},{"unified":"1f6a3-1f3ff","native":"\uD83D\uDEA3\uD83C\uDFFF"}],"version":1},"man-rowing-boat":{"id":"man-rowing-boat","name":"Man Rowing Boat","keywords":["rowing-boat","sports","hobby","water","ship"],"skins":[{"unified":"1f6a3-200d-2642-fe0f","native":"\uD83D\uDEA3\u200D\u2642\uFE0F"},{"unified":"1f6a3-1f3fb-200d-2642-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f6a3-1f3fc-200d-2642-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f6a3-1f3fd-200d-2642-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f6a3-1f3fe-200d-2642-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f6a3-1f3ff-200d-2642-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-rowing-boat":{"id":"woman-rowing-boat","name":"Woman Rowing Boat","keywords":["rowing-boat","sports","hobby","water","ship","female"],"skins":[{"unified":"1f6a3-200d-2640-fe0f","native":"\uD83D\uDEA3\u200D\u2640\uFE0F"},{"unified":"1f6a3-1f3fb-200d-2640-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f6a3-1f3fc-200d-2640-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f6a3-1f3fd-200d-2640-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f6a3-1f3fe-200d-2640-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f6a3-1f3ff-200d-2640-fe0f","native":"\uD83D\uDEA3\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"swimmer":{"id":"swimmer","name":"Swimmer","keywords":["person","swimming","sport","pool"],"skins":[{"unified":"1f3ca","native":"\uD83C\uDFCA"},{"unified":"1f3ca-1f3fb","native":"\uD83C\uDFCA\uD83C\uDFFB"},{"unified":"1f3ca-1f3fc","native":"\uD83C\uDFCA\uD83C\uDFFC"},{"unified":"1f3ca-1f3fd","native":"\uD83C\uDFCA\uD83C\uDFFD"},{"unified":"1f3ca-1f3fe","native":"\uD83C\uDFCA\uD83C\uDFFE"},{"unified":"1f3ca-1f3ff","native":"\uD83C\uDFCA\uD83C\uDFFF"}],"version":1},"man-swimming":{"id":"man-swimming","name":"Man Swimming","keywords":["sports","exercise","human","athlete","water","summer"],"skins":[{"unified":"1f3ca-200d-2642-fe0f","native":"\uD83C\uDFCA\u200D\u2642\uFE0F"},{"unified":"1f3ca-1f3fb-200d-2642-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f3ca-1f3fc-200d-2642-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f3ca-1f3fd-200d-2642-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f3ca-1f3fe-200d-2642-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f3ca-1f3ff-200d-2642-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-swimming":{"id":"woman-swimming","name":"Woman Swimming","keywords":["sports","exercise","human","athlete","water","summer","female"],"skins":[{"unified":"1f3ca-200d-2640-fe0f","native":"\uD83C\uDFCA\u200D\u2640\uFE0F"},{"unified":"1f3ca-1f3fb-200d-2640-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f3ca-1f3fc-200d-2640-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f3ca-1f3fd-200d-2640-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f3ca-1f3fe-200d-2640-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f3ca-1f3ff-200d-2640-fe0f","native":"\uD83C\uDFCA\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"person_with_ball":{"id":"person_with_ball","name":"Person Bouncing Ball","keywords":["with","sports","human"],"skins":[{"unified":"26f9-fe0f","native":"\u26F9\uFE0F"},{"unified":"26f9-1f3fb","native":"\u26F9\uD83C\uDFFB"},{"unified":"26f9-1f3fc","native":"\u26F9\uD83C\uDFFC"},{"unified":"26f9-1f3fd","native":"\u26F9\uD83C\uDFFD"},{"unified":"26f9-1f3fe","native":"\u26F9\uD83C\uDFFE"},{"unified":"26f9-1f3ff","native":"\u26F9\uD83C\uDFFF"}],"version":1},"man-bouncing-ball":{"id":"man-bouncing-ball","name":"Man Bouncing Ball","keywords":["bouncing-ball","sport"],"skins":[{"unified":"26f9-fe0f-200d-2642-fe0f","native":"\u26F9\uFE0F\u200D\u2642\uFE0F"},{"unified":"26f9-1f3fb-200d-2642-fe0f","native":"\u26F9\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"26f9-1f3fc-200d-2642-fe0f","native":"\u26F9\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"26f9-1f3fd-200d-2642-fe0f","native":"\u26F9\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"26f9-1f3fe-200d-2642-fe0f","native":"\u26F9\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"26f9-1f3ff-200d-2642-fe0f","native":"\u26F9\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-bouncing-ball":{"id":"woman-bouncing-ball","name":"Woman Bouncing Ball","keywords":["bouncing-ball","sports","human","female"],"skins":[{"unified":"26f9-fe0f-200d-2640-fe0f","native":"\u26F9\uFE0F\u200D\u2640\uFE0F"},{"unified":"26f9-1f3fb-200d-2640-fe0f","native":"\u26F9\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"26f9-1f3fc-200d-2640-fe0f","native":"\u26F9\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"26f9-1f3fd-200d-2640-fe0f","native":"\u26F9\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"26f9-1f3fe-200d-2640-fe0f","native":"\u26F9\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"26f9-1f3ff-200d-2640-fe0f","native":"\u26F9\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"weight_lifter":{"id":"weight_lifter","name":"Person Lifting Weights","keywords":["weight","lifter","sports","training","exercise"],"skins":[{"unified":"1f3cb-fe0f","native":"\uD83C\uDFCB\uFE0F"},{"unified":"1f3cb-1f3fb","native":"\uD83C\uDFCB\uD83C\uDFFB"},{"unified":"1f3cb-1f3fc","native":"\uD83C\uDFCB\uD83C\uDFFC"},{"unified":"1f3cb-1f3fd","native":"\uD83C\uDFCB\uD83C\uDFFD"},{"unified":"1f3cb-1f3fe","native":"\uD83C\uDFCB\uD83C\uDFFE"},{"unified":"1f3cb-1f3ff","native":"\uD83C\uDFCB\uD83C\uDFFF"}],"version":1},"man-lifting-weights":{"id":"man-lifting-weights","name":"Man Lifting Weights","keywords":["lifting-weights","sport"],"skins":[{"unified":"1f3cb-fe0f-200d-2642-fe0f","native":"\uD83C\uDFCB\uFE0F\u200D\u2642\uFE0F"},{"unified":"1f3cb-1f3fb-200d-2642-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f3cb-1f3fc-200d-2642-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f3cb-1f3fd-200d-2642-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f3cb-1f3fe-200d-2642-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f3cb-1f3ff-200d-2642-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-lifting-weights":{"id":"woman-lifting-weights","name":"Woman Lifting Weights","keywords":["lifting-weights","sports","training","exercise","female"],"skins":[{"unified":"1f3cb-fe0f-200d-2640-fe0f","native":"\uD83C\uDFCB\uFE0F\u200D\u2640\uFE0F"},{"unified":"1f3cb-1f3fb-200d-2640-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f3cb-1f3fc-200d-2640-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f3cb-1f3fd-200d-2640-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f3cb-1f3fe-200d-2640-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f3cb-1f3ff-200d-2640-fe0f","native":"\uD83C\uDFCB\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"bicyclist":{"id":"bicyclist","name":"Bicyclist","keywords":["person","biking","sport","move"],"skins":[{"unified":"1f6b4","native":"\uD83D\uDEB4"},{"unified":"1f6b4-1f3fb","native":"\uD83D\uDEB4\uD83C\uDFFB"},{"unified":"1f6b4-1f3fc","native":"\uD83D\uDEB4\uD83C\uDFFC"},{"unified":"1f6b4-1f3fd","native":"\uD83D\uDEB4\uD83C\uDFFD"},{"unified":"1f6b4-1f3fe","native":"\uD83D\uDEB4\uD83C\uDFFE"},{"unified":"1f6b4-1f3ff","native":"\uD83D\uDEB4\uD83C\uDFFF"}],"version":1},"man-biking":{"id":"man-biking","name":"Man Biking","keywords":["sports","bike","exercise","hipster"],"skins":[{"unified":"1f6b4-200d-2642-fe0f","native":"\uD83D\uDEB4\u200D\u2642\uFE0F"},{"unified":"1f6b4-1f3fb-200d-2642-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f6b4-1f3fc-200d-2642-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f6b4-1f3fd-200d-2642-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f6b4-1f3fe-200d-2642-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f6b4-1f3ff-200d-2642-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-biking":{"id":"woman-biking","name":"Woman Biking","keywords":["sports","bike","exercise","hipster","female"],"skins":[{"unified":"1f6b4-200d-2640-fe0f","native":"\uD83D\uDEB4\u200D\u2640\uFE0F"},{"unified":"1f6b4-1f3fb-200d-2640-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f6b4-1f3fc-200d-2640-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f6b4-1f3fd-200d-2640-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f6b4-1f3fe-200d-2640-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f6b4-1f3ff-200d-2640-fe0f","native":"\uD83D\uDEB4\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"mountain_bicyclist":{"id":"mountain_bicyclist","name":"Mountain Bicyclist","keywords":["person","biking","sport","move"],"skins":[{"unified":"1f6b5","native":"\uD83D\uDEB5"},{"unified":"1f6b5-1f3fb","native":"\uD83D\uDEB5\uD83C\uDFFB"},{"unified":"1f6b5-1f3fc","native":"\uD83D\uDEB5\uD83C\uDFFC"},{"unified":"1f6b5-1f3fd","native":"\uD83D\uDEB5\uD83C\uDFFD"},{"unified":"1f6b5-1f3fe","native":"\uD83D\uDEB5\uD83C\uDFFE"},{"unified":"1f6b5-1f3ff","native":"\uD83D\uDEB5\uD83C\uDFFF"}],"version":1},"man-mountain-biking":{"id":"man-mountain-biking","name":"Man Mountain Biking","keywords":["mountain-biking","transportation","sports","human","race","bike"],"skins":[{"unified":"1f6b5-200d-2642-fe0f","native":"\uD83D\uDEB5\u200D\u2642\uFE0F"},{"unified":"1f6b5-1f3fb-200d-2642-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f6b5-1f3fc-200d-2642-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f6b5-1f3fd-200d-2642-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f6b5-1f3fe-200d-2642-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f6b5-1f3ff-200d-2642-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-mountain-biking":{"id":"woman-mountain-biking","name":"Woman Mountain Biking","keywords":["mountain-biking","transportation","sports","human","race","bike","female"],"skins":[{"unified":"1f6b5-200d-2640-fe0f","native":"\uD83D\uDEB5\u200D\u2640\uFE0F"},{"unified":"1f6b5-1f3fb-200d-2640-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f6b5-1f3fc-200d-2640-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f6b5-1f3fd-200d-2640-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f6b5-1f3fe-200d-2640-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f6b5-1f3ff-200d-2640-fe0f","native":"\uD83D\uDEB5\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"person_doing_cartwheel":{"id":"person_doing_cartwheel","name":"Person Cartwheeling","keywords":["doing","cartwheel","sport","gymnastic"],"skins":[{"unified":"1f938","native":"\uD83E\uDD38"},{"unified":"1f938-1f3fb","native":"\uD83E\uDD38\uD83C\uDFFB"},{"unified":"1f938-1f3fc","native":"\uD83E\uDD38\uD83C\uDFFC"},{"unified":"1f938-1f3fd","native":"\uD83E\uDD38\uD83C\uDFFD"},{"unified":"1f938-1f3fe","native":"\uD83E\uDD38\uD83C\uDFFE"},{"unified":"1f938-1f3ff","native":"\uD83E\uDD38\uD83C\uDFFF"}],"version":3},"man-cartwheeling":{"id":"man-cartwheeling","name":"Man Cartwheeling","keywords":["gymnastics"],"skins":[{"unified":"1f938-200d-2642-fe0f","native":"\uD83E\uDD38\u200D\u2642\uFE0F"},{"unified":"1f938-1f3fb-200d-2642-fe0f","native":"\uD83E\uDD38\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f938-1f3fc-200d-2642-fe0f","native":"\uD83E\uDD38\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f938-1f3fd-200d-2642-fe0f","native":"\uD83E\uDD38\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f938-1f3fe-200d-2642-fe0f","native":"\uD83E\uDD38\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f938-1f3ff-200d-2642-fe0f","native":"\uD83E\uDD38\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-cartwheeling":{"id":"woman-cartwheeling","name":"Woman Cartwheeling","keywords":["gymnastics"],"skins":[{"unified":"1f938-200d-2640-fe0f","native":"\uD83E\uDD38\u200D\u2640\uFE0F"},{"unified":"1f938-1f3fb-200d-2640-fe0f","native":"\uD83E\uDD38\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f938-1f3fc-200d-2640-fe0f","native":"\uD83E\uDD38\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f938-1f3fd-200d-2640-fe0f","native":"\uD83E\uDD38\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f938-1f3fe-200d-2640-fe0f","native":"\uD83E\uDD38\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f938-1f3ff-200d-2640-fe0f","native":"\uD83E\uDD38\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"wrestlers":{"id":"wrestlers","name":"Wrestlers","keywords":["people","wrestling","sport"],"skins":[{"unified":"1f93c","native":"\uD83E\uDD3C"}],"version":3},"man-wrestling":{"id":"man-wrestling","name":"Men Wrestling","keywords":["man","sports","wrestlers"],"skins":[{"unified":"1f93c-200d-2642-fe0f","native":"\uD83E\uDD3C\u200D\u2642\uFE0F"}],"version":4},"woman-wrestling":{"id":"woman-wrestling","name":"Women Wrestling","keywords":["woman","sports","wrestlers"],"skins":[{"unified":"1f93c-200d-2640-fe0f","native":"\uD83E\uDD3C\u200D\u2640\uFE0F"}],"version":4},"water_polo":{"id":"water_polo","name":"Water Polo","keywords":["person","playing","sport"],"skins":[{"unified":"1f93d","native":"\uD83E\uDD3D"},{"unified":"1f93d-1f3fb","native":"\uD83E\uDD3D\uD83C\uDFFB"},{"unified":"1f93d-1f3fc","native":"\uD83E\uDD3D\uD83C\uDFFC"},{"unified":"1f93d-1f3fd","native":"\uD83E\uDD3D\uD83C\uDFFD"},{"unified":"1f93d-1f3fe","native":"\uD83E\uDD3D\uD83C\uDFFE"},{"unified":"1f93d-1f3ff","native":"\uD83E\uDD3D\uD83C\uDFFF"}],"version":3},"man-playing-water-polo":{"id":"man-playing-water-polo","name":"Man Playing Water Polo","keywords":["playing-water-polo","sports","pool"],"skins":[{"unified":"1f93d-200d-2642-fe0f","native":"\uD83E\uDD3D\u200D\u2642\uFE0F"},{"unified":"1f93d-1f3fb-200d-2642-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f93d-1f3fc-200d-2642-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f93d-1f3fd-200d-2642-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f93d-1f3fe-200d-2642-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f93d-1f3ff-200d-2642-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-playing-water-polo":{"id":"woman-playing-water-polo","name":"Woman Playing Water Polo","keywords":["playing-water-polo","sports","pool"],"skins":[{"unified":"1f93d-200d-2640-fe0f","native":"\uD83E\uDD3D\u200D\u2640\uFE0F"},{"unified":"1f93d-1f3fb-200d-2640-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f93d-1f3fc-200d-2640-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f93d-1f3fd-200d-2640-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f93d-1f3fe-200d-2640-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f93d-1f3ff-200d-2640-fe0f","native":"\uD83E\uDD3D\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"handball":{"id":"handball","name":"Handball","keywords":["person","playing","sport"],"skins":[{"unified":"1f93e","native":"\uD83E\uDD3E"},{"unified":"1f93e-1f3fb","native":"\uD83E\uDD3E\uD83C\uDFFB"},{"unified":"1f93e-1f3fc","native":"\uD83E\uDD3E\uD83C\uDFFC"},{"unified":"1f93e-1f3fd","native":"\uD83E\uDD3E\uD83C\uDFFD"},{"unified":"1f93e-1f3fe","native":"\uD83E\uDD3E\uD83C\uDFFE"},{"unified":"1f93e-1f3ff","native":"\uD83E\uDD3E\uD83C\uDFFF"}],"version":3},"man-playing-handball":{"id":"man-playing-handball","name":"Man Playing Handball","keywords":["playing-handball","sports"],"skins":[{"unified":"1f93e-200d-2642-fe0f","native":"\uD83E\uDD3E\u200D\u2642\uFE0F"},{"unified":"1f93e-1f3fb-200d-2642-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f93e-1f3fc-200d-2642-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f93e-1f3fd-200d-2642-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f93e-1f3fe-200d-2642-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f93e-1f3ff-200d-2642-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-playing-handball":{"id":"woman-playing-handball","name":"Woman Playing Handball","keywords":["playing-handball","sports"],"skins":[{"unified":"1f93e-200d-2640-fe0f","native":"\uD83E\uDD3E\u200D\u2640\uFE0F"},{"unified":"1f93e-1f3fb-200d-2640-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f93e-1f3fc-200d-2640-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f93e-1f3fd-200d-2640-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f93e-1f3fe-200d-2640-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f93e-1f3ff-200d-2640-fe0f","native":"\uD83E\uDD3E\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"juggling":{"id":"juggling","name":"Juggling","keywords":["person","performance","balance"],"skins":[{"unified":"1f939","native":"\uD83E\uDD39"},{"unified":"1f939-1f3fb","native":"\uD83E\uDD39\uD83C\uDFFB"},{"unified":"1f939-1f3fc","native":"\uD83E\uDD39\uD83C\uDFFC"},{"unified":"1f939-1f3fd","native":"\uD83E\uDD39\uD83C\uDFFD"},{"unified":"1f939-1f3fe","native":"\uD83E\uDD39\uD83C\uDFFE"},{"unified":"1f939-1f3ff","native":"\uD83E\uDD39\uD83C\uDFFF"}],"version":3},"man-juggling":{"id":"man-juggling","name":"Man Juggling","keywords":["juggle","balance","skill","multitask"],"skins":[{"unified":"1f939-200d-2642-fe0f","native":"\uD83E\uDD39\u200D\u2642\uFE0F"},{"unified":"1f939-1f3fb-200d-2642-fe0f","native":"\uD83E\uDD39\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f939-1f3fc-200d-2642-fe0f","native":"\uD83E\uDD39\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f939-1f3fd-200d-2642-fe0f","native":"\uD83E\uDD39\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f939-1f3fe-200d-2642-fe0f","native":"\uD83E\uDD39\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f939-1f3ff-200d-2642-fe0f","native":"\uD83E\uDD39\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":4},"woman-juggling":{"id":"woman-juggling","name":"Woman Juggling","keywords":["juggle","balance","skill","multitask"],"skins":[{"unified":"1f939-200d-2640-fe0f","native":"\uD83E\uDD39\u200D\u2640\uFE0F"},{"unified":"1f939-1f3fb-200d-2640-fe0f","native":"\uD83E\uDD39\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f939-1f3fc-200d-2640-fe0f","native":"\uD83E\uDD39\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f939-1f3fd-200d-2640-fe0f","native":"\uD83E\uDD39\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f939-1f3fe-200d-2640-fe0f","native":"\uD83E\uDD39\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f939-1f3ff-200d-2640-fe0f","native":"\uD83E\uDD39\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":4},"person_in_lotus_position":{"id":"person_in_lotus_position","name":"Person in Lotus Position","keywords":["meditate"],"skins":[{"unified":"1f9d8","native":"\uD83E\uDDD8"},{"unified":"1f9d8-1f3fb","native":"\uD83E\uDDD8\uD83C\uDFFB"},{"unified":"1f9d8-1f3fc","native":"\uD83E\uDDD8\uD83C\uDFFC"},{"unified":"1f9d8-1f3fd","native":"\uD83E\uDDD8\uD83C\uDFFD"},{"unified":"1f9d8-1f3fe","native":"\uD83E\uDDD8\uD83C\uDFFE"},{"unified":"1f9d8-1f3ff","native":"\uD83E\uDDD8\uD83C\uDFFF"}],"version":5},"man_in_lotus_position":{"id":"man_in_lotus_position","name":"Man in Lotus Position","keywords":["male","meditation","yoga","serenity","zen","mindfulness"],"skins":[{"unified":"1f9d8-200d-2642-fe0f","native":"\uD83E\uDDD8\u200D\u2642\uFE0F"},{"unified":"1f9d8-1f3fb-200d-2642-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFB\u200D\u2642\uFE0F"},{"unified":"1f9d8-1f3fc-200d-2642-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFC\u200D\u2642\uFE0F"},{"unified":"1f9d8-1f3fd-200d-2642-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFD\u200D\u2642\uFE0F"},{"unified":"1f9d8-1f3fe-200d-2642-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFE\u200D\u2642\uFE0F"},{"unified":"1f9d8-1f3ff-200d-2642-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFF\u200D\u2642\uFE0F"}],"version":5},"woman_in_lotus_position":{"id":"woman_in_lotus_position","name":"Woman in Lotus Position","keywords":["female","meditation","yoga","serenity","zen","mindfulness"],"skins":[{"unified":"1f9d8-200d-2640-fe0f","native":"\uD83E\uDDD8\u200D\u2640\uFE0F"},{"unified":"1f9d8-1f3fb-200d-2640-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFB\u200D\u2640\uFE0F"},{"unified":"1f9d8-1f3fc-200d-2640-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFC\u200D\u2640\uFE0F"},{"unified":"1f9d8-1f3fd-200d-2640-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFD\u200D\u2640\uFE0F"},{"unified":"1f9d8-1f3fe-200d-2640-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFE\u200D\u2640\uFE0F"},{"unified":"1f9d8-1f3ff-200d-2640-fe0f","native":"\uD83E\uDDD8\uD83C\uDFFF\u200D\u2640\uFE0F"}],"version":5},"bath":{"id":"bath","name":"Bath","keywords":["person","taking","clean","shower","bathroom"],"skins":[{"unified":"1f6c0","native":"\uD83D\uDEC0"},{"unified":"1f6c0-1f3fb","native":"\uD83D\uDEC0\uD83C\uDFFB"},{"unified":"1f6c0-1f3fc","native":"\uD83D\uDEC0\uD83C\uDFFC"},{"unified":"1f6c0-1f3fd","native":"\uD83D\uDEC0\uD83C\uDFFD"},{"unified":"1f6c0-1f3fe","native":"\uD83D\uDEC0\uD83C\uDFFE"},{"unified":"1f6c0-1f3ff","native":"\uD83D\uDEC0\uD83C\uDFFF"}],"version":1},"sleeping_accommodation":{"id":"sleeping_accommodation","name":"Person in Bed","keywords":["sleeping","accommodation","rest"],"skins":[{"unified":"1f6cc","native":"\uD83D\uDECC"},{"unified":"1f6cc-1f3fb","native":"\uD83D\uDECC\uD83C\uDFFB"},{"unified":"1f6cc-1f3fc","native":"\uD83D\uDECC\uD83C\uDFFC"},{"unified":"1f6cc-1f3fd","native":"\uD83D\uDECC\uD83C\uDFFD"},{"unified":"1f6cc-1f3fe","native":"\uD83D\uDECC\uD83C\uDFFE"},{"unified":"1f6cc-1f3ff","native":"\uD83D\uDECC\uD83C\uDFFF"}],"version":1},"people_holding_hands":{"id":"people_holding_hands","name":"People Holding Hands","keywords":["friendship"],"skins":[{"unified":"1f9d1-200d-1f91d-200d-1f9d1","native":"\uD83E\uDDD1\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1"},{"unified":"1f9d1-1f3fb-200d-1f91d-200d-1f9d1-1f3fb","native":"\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1\uD83C\uDFFB"},{"unified":"1f9d1-1f3fc-200d-1f91d-200d-1f9d1-1f3fc","native":"\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1\uD83C\uDFFC"},{"unified":"1f9d1-1f3fd-200d-1f91d-200d-1f9d1-1f3fd","native":"\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1\uD83C\uDFFD"},{"unified":"1f9d1-1f3fe-200d-1f91d-200d-1f9d1-1f3fe","native":"\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1\uD83C\uDFFE"},{"unified":"1f9d1-1f3ff-200d-1f91d-200d-1f9d1-1f3ff","native":"\uD83E\uDDD1\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1\uD83C\uDFFF"}],"version":12},"two_women_holding_hands":{"id":"two_women_holding_hands","name":"Women Holding Hands","keywords":["two","pair","friendship","couple","love","like","female","people","human"],"skins":[{"unified":"1f46d","native":"\uD83D\uDC6D"},{"unified":"1f46d-1f3fb","native":"\uD83D\uDC6D\uD83C\uDFFB"},{"unified":"1f46d-1f3fc","native":"\uD83D\uDC6D\uD83C\uDFFC"},{"unified":"1f46d-1f3fd","native":"\uD83D\uDC6D\uD83C\uDFFD"},{"unified":"1f46d-1f3fe","native":"\uD83D\uDC6D\uD83C\uDFFE"},{"unified":"1f46d-1f3ff","native":"\uD83D\uDC6D\uD83C\uDFFF"}],"version":1},"man_and_woman_holding_hands":{"id":"man_and_woman_holding_hands","name":"Man and Woman Holding Hands","keywords":["couple","pair","people","human","love","date","dating","like","affection","valentines","marriage"],"skins":[{"unified":"1f46b","native":"\uD83D\uDC6B"},{"unified":"1f46b-1f3fb","native":"\uD83D\uDC6B\uD83C\uDFFB"},{"unified":"1f46b-1f3fc","native":"\uD83D\uDC6B\uD83C\uDFFC"},{"unified":"1f46b-1f3fd","native":"\uD83D\uDC6B\uD83C\uDFFD"},{"unified":"1f46b-1f3fe","native":"\uD83D\uDC6B\uD83C\uDFFE"},{"unified":"1f46b-1f3ff","native":"\uD83D\uDC6B\uD83C\uDFFF"}],"version":1},"two_men_holding_hands":{"id":"two_men_holding_hands","name":"Men Holding Hands","keywords":["two","pair","couple","love","like","bromance","friendship","people","human"],"skins":[{"unified":"1f46c","native":"\uD83D\uDC6C"},{"unified":"1f46c-1f3fb","native":"\uD83D\uDC6C\uD83C\uDFFB"},{"unified":"1f46c-1f3fc","native":"\uD83D\uDC6C\uD83C\uDFFC"},{"unified":"1f46c-1f3fd","native":"\uD83D\uDC6C\uD83C\uDFFD"},{"unified":"1f46c-1f3fe","native":"\uD83D\uDC6C\uD83C\uDFFE"},{"unified":"1f46c-1f3ff","native":"\uD83D\uDC6C\uD83C\uDFFF"}],"version":1},"couplekiss":{"id":"couplekiss","name":"Kiss","keywords":["couplekiss","pair","valentines","love","like","dating","marriage"],"skins":[{"unified":"1f48f","native":"\uD83D\uDC8F"},{"unified":"1f48f-1f3fb","native":"\uD83D\uDC8F\uD83C\uDFFB"},{"unified":"1f48f-1f3fc","native":"\uD83D\uDC8F\uD83C\uDFFC"},{"unified":"1f48f-1f3fd","native":"\uD83D\uDC8F\uD83C\uDFFD"},{"unified":"1f48f-1f3fe","native":"\uD83D\uDC8F\uD83C\uDFFE"},{"unified":"1f48f-1f3ff","native":"\uD83D\uDC8F\uD83C\uDFFF"}],"version":1},"woman-kiss-man":{"id":"woman-kiss-man","name":"Kiss: Woman, Man","keywords":["woman","kiss-man","kiss","love"],"skins":[{"unified":"1f469-200d-2764-fe0f-200d-1f48b-200d-1f468","native":"\uD83D\uDC69\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68"},{"unified":"1f469-1f3fb-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fb","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFB"},{"unified":"1f469-1f3fc-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fc","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFC"},{"unified":"1f469-1f3fd-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fd","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFD"},{"unified":"1f469-1f3fe-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fe","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFE"},{"unified":"1f469-1f3ff-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3ff","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFF"}],"version":2},"man-kiss-man":{"id":"man-kiss-man","name":"Kiss: Man, Man","keywords":["kiss-man","kiss","pair","valentines","love","like","dating","marriage"],"skins":[{"unified":"1f468-200d-2764-fe0f-200d-1f48b-200d-1f468","native":"\uD83D\uDC68\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68"},{"unified":"1f468-1f3fb-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fb","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFB"},{"unified":"1f468-1f3fc-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fc","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFC"},{"unified":"1f468-1f3fd-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fd","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFD"},{"unified":"1f468-1f3fe-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3fe","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFE"},{"unified":"1f468-1f3ff-200d-2764-fe0f-200d-1f48b-200d-1f468-1f3ff","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC68\uD83C\uDFFF"}],"version":2},"woman-kiss-woman":{"id":"woman-kiss-woman","name":"Kiss: Woman, Woman","keywords":["kiss-woman","kiss","pair","valentines","love","like","dating","marriage"],"skins":[{"unified":"1f469-200d-2764-fe0f-200d-1f48b-200d-1f469","native":"\uD83D\uDC69\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69"},{"unified":"1f469-1f3fb-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3fb","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69\uD83C\uDFFB"},{"unified":"1f469-1f3fc-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3fc","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69\uD83C\uDFFC"},{"unified":"1f469-1f3fd-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3fd","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69\uD83C\uDFFD"},{"unified":"1f469-1f3fe-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3fe","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69\uD83C\uDFFE"},{"unified":"1f469-1f3ff-200d-2764-fe0f-200d-1f48b-200d-1f469-1f3ff","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\u2764\uFE0F\u200D\uD83D\uDC8B\u200D\uD83D\uDC69\uD83C\uDFFF"}],"version":2},"couple_with_heart":{"id":"couple_with_heart","name":"Couple with Heart","keywords":["pair","love","like","affection","human","dating","valentines","marriage"],"skins":[{"unified":"1f491","native":"\uD83D\uDC91"},{"unified":"1f491-1f3fb","native":"\uD83D\uDC91\uD83C\uDFFB"},{"unified":"1f491-1f3fc","native":"\uD83D\uDC91\uD83C\uDFFC"},{"unified":"1f491-1f3fd","native":"\uD83D\uDC91\uD83C\uDFFD"},{"unified":"1f491-1f3fe","native":"\uD83D\uDC91\uD83C\uDFFE"},{"unified":"1f491-1f3ff","native":"\uD83D\uDC91\uD83C\uDFFF"}],"version":1},"woman-heart-man":{"id":"woman-heart-man","name":"Couple with Heart: Woman, Man","keywords":["woman","heart-man","heart","love"],"skins":[{"unified":"1f469-200d-2764-fe0f-200d-1f468","native":"\uD83D\uDC69\u200D\u2764\uFE0F\u200D\uD83D\uDC68"},{"unified":"1f469-1f3fb-200d-2764-fe0f-200d-1f468-1f3fb","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFB"},{"unified":"1f469-1f3fc-200d-2764-fe0f-200d-1f468-1f3fc","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFC"},{"unified":"1f469-1f3fd-200d-2764-fe0f-200d-1f468-1f3fd","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFD"},{"unified":"1f469-1f3fe-200d-2764-fe0f-200d-1f468-1f3fe","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFE"},{"unified":"1f469-1f3ff-200d-2764-fe0f-200d-1f468-1f3ff","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFF"}],"version":2},"man-heart-man":{"id":"man-heart-man","name":"Couple with Heart: Man, Man","keywords":["heart-man","heart","pair","love","like","affection","human","dating","valentines","marriage"],"skins":[{"unified":"1f468-200d-2764-fe0f-200d-1f468","native":"\uD83D\uDC68\u200D\u2764\uFE0F\u200D\uD83D\uDC68"},{"unified":"1f468-1f3fb-200d-2764-fe0f-200d-1f468-1f3fb","native":"\uD83D\uDC68\uD83C\uDFFB\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFB"},{"unified":"1f468-1f3fc-200d-2764-fe0f-200d-1f468-1f3fc","native":"\uD83D\uDC68\uD83C\uDFFC\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFC"},{"unified":"1f468-1f3fd-200d-2764-fe0f-200d-1f468-1f3fd","native":"\uD83D\uDC68\uD83C\uDFFD\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFD"},{"unified":"1f468-1f3fe-200d-2764-fe0f-200d-1f468-1f3fe","native":"\uD83D\uDC68\uD83C\uDFFE\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFE"},{"unified":"1f468-1f3ff-200d-2764-fe0f-200d-1f468-1f3ff","native":"\uD83D\uDC68\uD83C\uDFFF\u200D\u2764\uFE0F\u200D\uD83D\uDC68\uD83C\uDFFF"}],"version":2},"woman-heart-woman":{"id":"woman-heart-woman","name":"Couple with Heart: Woman, Woman","keywords":["heart-woman","heart","pair","love","like","affection","human","dating","valentines","marriage"],"skins":[{"unified":"1f469-200d-2764-fe0f-200d-1f469","native":"\uD83D\uDC69\u200D\u2764\uFE0F\u200D\uD83D\uDC69"},{"unified":"1f469-1f3fb-200d-2764-fe0f-200d-1f469-1f3fb","native":"\uD83D\uDC69\uD83C\uDFFB\u200D\u2764\uFE0F\u200D\uD83D\uDC69\uD83C\uDFFB"},{"unified":"1f469-1f3fc-200d-2764-fe0f-200d-1f469-1f3fc","native":"\uD83D\uDC69\uD83C\uDFFC\u200D\u2764\uFE0F\u200D\uD83D\uDC69\uD83C\uDFFC"},{"unified":"1f469-1f3fd-200d-2764-fe0f-200d-1f469-1f3fd","native":"\uD83D\uDC69\uD83C\uDFFD\u200D\u2764\uFE0F\u200D\uD83D\uDC69\uD83C\uDFFD"},{"unified":"1f469-1f3fe-200d-2764-fe0f-200d-1f469-1f3fe","native":"\uD83D\uDC69\uD83C\uDFFE\u200D\u2764\uFE0F\u200D\uD83D\uDC69\uD83C\uDFFE"},{"unified":"1f469-1f3ff-200d-2764-fe0f-200d-1f469-1f3ff","native":"\uD83D\uDC69\uD83C\uDFFF\u200D\u2764\uFE0F\u200D\uD83D\uDC69\uD83C\uDFFF"}],"version":2},"family":{"id":"family","name":"Family","keywords":["home","parents","child","mom","dad","father","mother","people","human"],"skins":[{"unified":"1f46a","native":"\uD83D\uDC6A"}],"version":1},"man-woman-boy":{"id":"man-woman-boy","name":"Family: Man, Woman, Boy","keywords":["man","woman-boy","family","woman","love"],"skins":[{"unified":"1f468-200d-1f469-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66"}],"version":2},"man-woman-girl":{"id":"man-woman-girl","name":"Family: Man, Woman, Girl","keywords":["man","woman-girl","family","woman","home","parents","people","human","child"],"skins":[{"unified":"1f468-200d-1f469-200d-1f467","native":"\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67"}],"version":2},"man-woman-girl-boy":{"id":"man-woman-girl-boy","name":"Family: Man, Woman, Girl, Boy","keywords":["man","woman-girl-boy","family","woman","girl","home","parents","people","human","children"],"skins":[{"unified":"1f468-200d-1f469-200d-1f467-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC66"}],"version":2},"man-woman-boy-boy":{"id":"man-woman-boy-boy","name":"Family: Man, Woman, Boy, Boy","keywords":["man","woman-boy-boy","family","woman","home","parents","people","human","children"],"skins":[{"unified":"1f468-200d-1f469-200d-1f466-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66"}],"version":2},"man-woman-girl-girl":{"id":"man-woman-girl-girl","name":"Family: Man, Woman, Girl, Girl","keywords":["man","woman-girl-girl","family","woman","home","parents","people","human","children"],"skins":[{"unified":"1f468-200d-1f469-200d-1f467-200d-1f467","native":"\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC67"}],"version":2},"man-man-boy":{"id":"man-man-boy","name":"Family: Man, Man, Boy","keywords":["man","man-boy","family","home","parents","people","human","children"],"skins":[{"unified":"1f468-200d-1f468-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC66"}],"version":2},"man-man-girl":{"id":"man-man-girl","name":"Family: Man, Man, Girl","keywords":["man","man-girl","family","home","parents","people","human","children"],"skins":[{"unified":"1f468-200d-1f468-200d-1f467","native":"\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC67"}],"version":2},"man-man-girl-boy":{"id":"man-man-girl-boy","name":"Family: Man, Man, Girl, Boy","keywords":["man","man-girl-boy","family","girl","home","parents","people","human","children"],"skins":[{"unified":"1f468-200d-1f468-200d-1f467-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC67\u200D\uD83D\uDC66"}],"version":2},"man-man-boy-boy":{"id":"man-man-boy-boy","name":"Family: Man, Man, Boy, Boy","keywords":["man","man-boy-boy","family","home","parents","people","human","children"],"skins":[{"unified":"1f468-200d-1f468-200d-1f466-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC66\u200D\uD83D\uDC66"}],"version":2},"man-man-girl-girl":{"id":"man-man-girl-girl","name":"Family: Man, Man, Girl, Girl","keywords":["man","man-girl-girl","family","home","parents","people","human","children"],"skins":[{"unified":"1f468-200d-1f468-200d-1f467-200d-1f467","native":"\uD83D\uDC68\u200D\uD83D\uDC68\u200D\uD83D\uDC67\u200D\uD83D\uDC67"}],"version":2},"woman-woman-boy":{"id":"woman-woman-boy","name":"Family: Woman, Woman, Boy","keywords":["woman","woman-boy","family","home","parents","people","human","children"],"skins":[{"unified":"1f469-200d-1f469-200d-1f466","native":"\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC66"}],"version":2},"woman-woman-girl":{"id":"woman-woman-girl","name":"Family: Woman, Woman, Girl","keywords":["woman","woman-girl","family","home","parents","people","human","children"],"skins":[{"unified":"1f469-200d-1f469-200d-1f467","native":"\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC67"}],"version":2},"woman-woman-girl-boy":{"id":"woman-woman-girl-boy","name":"Family: Woman, Woman, Girl, Boy","keywords":["woman","woman-girl-boy","family","girl","home","parents","people","human","children"],"skins":[{"unified":"1f469-200d-1f469-200d-1f467-200d-1f466","native":"\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC66"}],"version":2},"woman-woman-boy-boy":{"id":"woman-woman-boy-boy","name":"Family: Woman, Woman, Boy, Boy","keywords":["woman","woman-boy-boy","family","home","parents","people","human","children"],"skins":[{"unified":"1f469-200d-1f469-200d-1f466-200d-1f466","native":"\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66"}],"version":2},"woman-woman-girl-girl":{"id":"woman-woman-girl-girl","name":"Family: Woman, Woman, Girl, Girl","keywords":["woman","woman-girl-girl","family","home","parents","people","human","children"],"skins":[{"unified":"1f469-200d-1f469-200d-1f467-200d-1f467","native":"\uD83D\uDC69\u200D\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC67"}],"version":2},"man-boy":{"id":"man-boy","name":"Family: Man, Boy","keywords":["man","family","home","parent","people","human","child"],"skins":[{"unified":"1f468-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC66"}],"version":4},"man-boy-boy":{"id":"man-boy-boy","name":"Family: Man, Boy, Boy","keywords":["man","boy-boy","family","home","parent","people","human","children"],"skins":[{"unified":"1f468-200d-1f466-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC66\u200D\uD83D\uDC66"}],"version":4},"man-girl":{"id":"man-girl","name":"Family: Man, Girl","keywords":["man","family","home","parent","people","human","child"],"skins":[{"unified":"1f468-200d-1f467","native":"\uD83D\uDC68\u200D\uD83D\uDC67"}],"version":4},"man-girl-boy":{"id":"man-girl-boy","name":"Family: Man, Girl, Boy","keywords":["man","girl-boy","family","girl","home","parent","people","human","children"],"skins":[{"unified":"1f468-200d-1f467-200d-1f466","native":"\uD83D\uDC68\u200D\uD83D\uDC67\u200D\uD83D\uDC66"}],"version":4},"man-girl-girl":{"id":"man-girl-girl","name":"Family: Man, Girl, Girl","keywords":["man","girl-girl","family","home","parent","people","human","children"],"skins":[{"unified":"1f468-200d-1f467-200d-1f467","native":"\uD83D\uDC68\u200D\uD83D\uDC67\u200D\uD83D\uDC67"}],"version":4},"woman-boy":{"id":"woman-boy","name":"Family: Woman, Boy","keywords":["woman","family","home","parent","people","human","child"],"skins":[{"unified":"1f469-200d-1f466","native":"\uD83D\uDC69\u200D\uD83D\uDC66"}],"version":4},"woman-boy-boy":{"id":"woman-boy-boy","name":"Family: Woman, Boy, Boy","keywords":["woman","boy-boy","family","home","parent","people","human","children"],"skins":[{"unified":"1f469-200d-1f466-200d-1f466","native":"\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66"}],"version":4},"woman-girl":{"id":"woman-girl","name":"Family: Woman, Girl","keywords":["woman","family","home","parent","people","human","child"],"skins":[{"unified":"1f469-200d-1f467","native":"\uD83D\uDC69\u200D\uD83D\uDC67"}],"version":4},"woman-girl-boy":{"id":"woman-girl-boy","name":"Family: Woman, Girl, Boy","keywords":["woman","girl-boy","family","girl","home","parent","people","human","children"],"skins":[{"unified":"1f469-200d-1f467-200d-1f466","native":"\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC66"}],"version":4},"woman-girl-girl":{"id":"woman-girl-girl","name":"Family: Woman, Girl, Girl","keywords":["woman","girl-girl","family","home","parent","people","human","children"],"skins":[{"unified":"1f469-200d-1f467-200d-1f467","native":"\uD83D\uDC69\u200D\uD83D\uDC67\u200D\uD83D\uDC67"}],"version":4},"speaking_head_in_silhouette":{"id":"speaking_head_in_silhouette","name":"Speaking Head","keywords":["in","silhouette","user","person","human","sing","say","talk"],"skins":[{"unified":"1f5e3-fe0f","native":"\uD83D\uDDE3\uFE0F"}],"version":1},"bust_in_silhouette":{"id":"bust_in_silhouette","name":"Bust in Silhouette","keywords":["user","person","human"],"skins":[{"unified":"1f464","native":"\uD83D\uDC64"}],"version":1},"busts_in_silhouette":{"id":"busts_in_silhouette","name":"Busts in Silhouette","keywords":["user","person","human","group","team"],"skins":[{"unified":"1f465","native":"\uD83D\uDC65"}],"version":1},"people_hugging":{"id":"people_hugging","name":"People Hugging","keywords":["care"],"skins":[{"unified":"1fac2","native":"\uD83E\uDEC2"}],"version":13},"footprints":{"id":"footprints","name":"Footprints","keywords":["feet","tracking","walking","beach"],"skins":[{"unified":"1f463","native":"\uD83D\uDC63"}],"version":1},"monkey_face":{"id":"monkey_face","name":"Monkey Face","emoticons":[":o)"],"keywords":["animal","nature","circus"],"skins":[{"unified":"1f435","native":"\uD83D\uDC35"}],"version":1},"monkey":{"id":"monkey","name":"Monkey","keywords":["animal","nature","banana","circus"],"skins":[{"unified":"1f412","native":"\uD83D\uDC12"}],"version":1},"gorilla":{"id":"gorilla","name":"Gorilla","keywords":["animal","nature","circus"],"skins":[{"unified":"1f98d","native":"\uD83E\uDD8D"}],"version":3},"orangutan":{"id":"orangutan","name":"Orangutan","keywords":["animal"],"skins":[{"unified":"1f9a7","native":"\uD83E\uDDA7"}],"version":12},"dog":{"id":"dog","name":"Dog Face","keywords":["animal","friend","nature","woof","puppy","pet","faithful"],"skins":[{"unified":"1f436","native":"\uD83D\uDC36"}],"version":1},"dog2":{"id":"dog2","name":"Dog","keywords":["dog2","animal","nature","friend","doge","pet","faithful"],"skins":[{"unified":"1f415","native":"\uD83D\uDC15"}],"version":1},"guide_dog":{"id":"guide_dog","name":"Guide Dog","keywords":["animal","blind"],"skins":[{"unified":"1f9ae","native":"\uD83E\uDDAE"}],"version":12},"service_dog":{"id":"service_dog","name":"Service Dog","keywords":["blind","animal"],"skins":[{"unified":"1f415-200d-1f9ba","native":"\uD83D\uDC15\u200D\uD83E\uDDBA"}],"version":12},"poodle":{"id":"poodle","name":"Poodle","keywords":["dog","animal","101","nature","pet"],"skins":[{"unified":"1f429","native":"\uD83D\uDC29"}],"version":1},"wolf":{"id":"wolf","name":"Wolf","keywords":["animal","nature","wild"],"skins":[{"unified":"1f43a","native":"\uD83D\uDC3A"}],"version":1},"fox_face":{"id":"fox_face","name":"Fox","keywords":["face","animal","nature"],"skins":[{"unified":"1f98a","native":"\uD83E\uDD8A"}],"version":3},"raccoon":{"id":"raccoon","name":"Raccoon","keywords":["animal","nature"],"skins":[{"unified":"1f99d","native":"\uD83E\uDD9D"}],"version":11},"cat":{"id":"cat","name":"Cat Face","keywords":["animal","meow","nature","pet","kitten"],"skins":[{"unified":"1f431","native":"\uD83D\uDC31"}],"version":1},"cat2":{"id":"cat2","name":"Cat","keywords":["cat2","animal","meow","pet","cats"],"skins":[{"unified":"1f408","native":"\uD83D\uDC08"}],"version":1},"black_cat":{"id":"black_cat","name":"Black Cat","keywords":["superstition","luck"],"skins":[{"unified":"1f408-200d-2b1b","native":"\uD83D\uDC08\u200D\u2B1B"}],"version":13},"lion_face":{"id":"lion_face","name":"Lion","keywords":["face","animal","nature"],"skins":[{"unified":"1f981","native":"\uD83E\uDD81"}],"version":1},"tiger":{"id":"tiger","name":"Tiger Face","keywords":["animal","cat","danger","wild","nature","roar"],"skins":[{"unified":"1f42f","native":"\uD83D\uDC2F"}],"version":1},"tiger2":{"id":"tiger2","name":"Tiger","keywords":["tiger2","animal","nature","roar"],"skins":[{"unified":"1f405","native":"\uD83D\uDC05"}],"version":1},"leopard":{"id":"leopard","name":"Leopard","keywords":["animal","nature"],"skins":[{"unified":"1f406","native":"\uD83D\uDC06"}],"version":1},"horse":{"id":"horse","name":"Horse Face","keywords":["animal","brown","nature"],"skins":[{"unified":"1f434","native":"\uD83D\uDC34"}],"version":1},"racehorse":{"id":"racehorse","name":"Horse","keywords":["racehorse","animal","gamble","luck"],"skins":[{"unified":"1f40e","native":"\uD83D\uDC0E"}],"version":1},"unicorn_face":{"id":"unicorn_face","name":"Unicorn","keywords":["face","animal","nature","mystical"],"skins":[{"unified":"1f984","native":"\uD83E\uDD84"}],"version":1},"zebra_face":{"id":"zebra_face","name":"Zebra","keywords":["face","animal","nature","stripes","safari"],"skins":[{"unified":"1f993","native":"\uD83E\uDD93"}],"version":5},"deer":{"id":"deer","name":"Deer","keywords":["animal","nature","horns","venison"],"skins":[{"unified":"1f98c","native":"\uD83E\uDD8C"}],"version":3},"bison":{"id":"bison","name":"Bison","keywords":["ox"],"skins":[{"unified":"1f9ac","native":"\uD83E\uDDAC"}],"version":13},"cow":{"id":"cow","name":"Cow Face","keywords":["beef","ox","animal","nature","moo","milk"],"skins":[{"unified":"1f42e","native":"\uD83D\uDC2E"}],"version":1},"ox":{"id":"ox","name":"Ox","keywords":["animal","cow","beef"],"skins":[{"unified":"1f402","native":"\uD83D\uDC02"}],"version":1},"water_buffalo":{"id":"water_buffalo","name":"Water Buffalo","keywords":["animal","nature","ox","cow"],"skins":[{"unified":"1f403","native":"\uD83D\uDC03"}],"version":1},"cow2":{"id":"cow2","name":"Cow","keywords":["cow2","beef","ox","animal","nature","moo","milk"],"skins":[{"unified":"1f404","native":"\uD83D\uDC04"}],"version":1},"pig":{"id":"pig","name":"Pig Face","keywords":["animal","oink","nature"],"skins":[{"unified":"1f437","native":"\uD83D\uDC37"}],"version":1},"pig2":{"id":"pig2","name":"Pig","keywords":["pig2","animal","nature"],"skins":[{"unified":"1f416","native":"\uD83D\uDC16"}],"version":1},"boar":{"id":"boar","name":"Boar","keywords":["animal","nature"],"skins":[{"unified":"1f417","native":"\uD83D\uDC17"}],"version":1},"pig_nose":{"id":"pig_nose","name":"Pig Nose","keywords":["animal","oink"],"skins":[{"unified":"1f43d","native":"\uD83D\uDC3D"}],"version":1},"ram":{"id":"ram","name":"Ram","keywords":["animal","sheep","nature"],"skins":[{"unified":"1f40f","native":"\uD83D\uDC0F"}],"version":1},"sheep":{"id":"sheep","name":"Ewe","keywords":["sheep","animal","nature","wool","shipit"],"skins":[{"unified":"1f411","native":"\uD83D\uDC11"}],"version":1},"goat":{"id":"goat","name":"Goat","keywords":["animal","nature"],"skins":[{"unified":"1f410","native":"\uD83D\uDC10"}],"version":1},"dromedary_camel":{"id":"dromedary_camel","name":"Camel","keywords":["dromedary","animal","hot","desert","hump"],"skins":[{"unified":"1f42a","native":"\uD83D\uDC2A"}],"version":1},"camel":{"id":"camel","name":"Bactrian Camel","keywords":["two","hump","animal","nature","hot","desert"],"skins":[{"unified":"1f42b","native":"\uD83D\uDC2B"}],"version":1},"llama":{"id":"llama","name":"Llama","keywords":["animal","nature","alpaca"],"skins":[{"unified":"1f999","native":"\uD83E\uDD99"}],"version":11},"giraffe_face":{"id":"giraffe_face","name":"Giraffe","keywords":["face","animal","nature","spots","safari"],"skins":[{"unified":"1f992","native":"\uD83E\uDD92"}],"version":5},"elephant":{"id":"elephant","name":"Elephant","keywords":["animal","nature","nose","th","circus"],"skins":[{"unified":"1f418","native":"\uD83D\uDC18"}],"version":1},"mammoth":{"id":"mammoth","name":"Mammoth","keywords":["elephant","tusks"],"skins":[{"unified":"1f9a3","native":"\uD83E\uDDA3"}],"version":13},"rhinoceros":{"id":"rhinoceros","name":"Rhinoceros","keywords":["animal","nature","horn"],"skins":[{"unified":"1f98f","native":"\uD83E\uDD8F"}],"version":3},"hippopotamus":{"id":"hippopotamus","name":"Hippopotamus","keywords":["animal","nature"],"skins":[{"unified":"1f99b","native":"\uD83E\uDD9B"}],"version":11},"mouse":{"id":"mouse","name":"Mouse Face","keywords":["animal","nature","cheese","wedge","rodent"],"skins":[{"unified":"1f42d","native":"\uD83D\uDC2D"}],"version":1},"mouse2":{"id":"mouse2","name":"Mouse","keywords":["mouse2","animal","nature","rodent"],"skins":[{"unified":"1f401","native":"\uD83D\uDC01"}],"version":1},"rat":{"id":"rat","name":"Rat","keywords":["animal","mouse","rodent"],"skins":[{"unified":"1f400","native":"\uD83D\uDC00"}],"version":1},"hamster":{"id":"hamster","name":"Hamster","keywords":["animal","nature"],"skins":[{"unified":"1f439","native":"\uD83D\uDC39"}],"version":1},"rabbit":{"id":"rabbit","name":"Rabbit Face","keywords":["animal","nature","pet","spring","magic","bunny"],"skins":[{"unified":"1f430","native":"\uD83D\uDC30"}],"version":1},"rabbit2":{"id":"rabbit2","name":"Rabbit","keywords":["rabbit2","animal","nature","pet","magic","spring"],"skins":[{"unified":"1f407","native":"\uD83D\uDC07"}],"version":1},"chipmunk":{"id":"chipmunk","name":"Chipmunk","keywords":["animal","nature","rodent","squirrel"],"skins":[{"unified":"1f43f-fe0f","native":"\uD83D\uDC3F\uFE0F"}],"version":1},"beaver":{"id":"beaver","name":"Beaver","keywords":["animal","rodent"],"skins":[{"unified":"1f9ab","native":"\uD83E\uDDAB"}],"version":13},"hedgehog":{"id":"hedgehog","name":"Hedgehog","keywords":["animal","nature","spiny"],"skins":[{"unified":"1f994","native":"\uD83E\uDD94"}],"version":5},"bat":{"id":"bat","name":"Bat","keywords":["animal","nature","blind","vampire"],"skins":[{"unified":"1f987","native":"\uD83E\uDD87"}],"version":3},"bear":{"id":"bear","name":"Bear","keywords":["animal","nature","wild"],"skins":[{"unified":"1f43b","native":"\uD83D\uDC3B"}],"version":1},"polar_bear":{"id":"polar_bear","name":"Polar Bear","keywords":["animal","arctic"],"skins":[{"unified":"1f43b-200d-2744-fe0f","native":"\uD83D\uDC3B\u200D\u2744\uFE0F"}],"version":13},"koala":{"id":"koala","name":"Koala","keywords":["animal","nature"],"skins":[{"unified":"1f428","native":"\uD83D\uDC28"}],"version":1},"panda_face":{"id":"panda_face","name":"Panda","keywords":["face","animal","nature"],"skins":[{"unified":"1f43c","native":"\uD83D\uDC3C"}],"version":1},"sloth":{"id":"sloth","name":"Sloth","keywords":["animal"],"skins":[{"unified":"1f9a5","native":"\uD83E\uDDA5"}],"version":12},"otter":{"id":"otter","name":"Otter","keywords":["animal"],"skins":[{"unified":"1f9a6","native":"\uD83E\uDDA6"}],"version":12},"skunk":{"id":"skunk","name":"Skunk","keywords":["animal"],"skins":[{"unified":"1f9a8","native":"\uD83E\uDDA8"}],"version":12},"kangaroo":{"id":"kangaroo","name":"Kangaroo","keywords":["animal","nature","australia","joey","hop","marsupial"],"skins":[{"unified":"1f998","native":"\uD83E\uDD98"}],"version":11},"badger":{"id":"badger","name":"Badger","keywords":["animal","nature","honey"],"skins":[{"unified":"1f9a1","native":"\uD83E\uDDA1"}],"version":11},"feet":{"id":"feet","name":"Paw Prints","keywords":["feet","animal","tracking","footprints","dog","cat","pet"],"skins":[{"unified":"1f43e","native":"\uD83D\uDC3E"}],"version":1},"turkey":{"id":"turkey","name":"Turkey","keywords":["animal","bird"],"skins":[{"unified":"1f983","native":"\uD83E\uDD83"}],"version":1},"chicken":{"id":"chicken","name":"Chicken","keywords":["animal","cluck","nature","bird"],"skins":[{"unified":"1f414","native":"\uD83D\uDC14"}],"version":1},"rooster":{"id":"rooster","name":"Rooster","keywords":["animal","nature","chicken"],"skins":[{"unified":"1f413","native":"\uD83D\uDC13"}],"version":1},"hatching_chick":{"id":"hatching_chick","name":"Hatching Chick","keywords":["animal","chicken","egg","born","baby","bird"],"skins":[{"unified":"1f423","native":"\uD83D\uDC23"}],"version":1},"baby_chick":{"id":"baby_chick","name":"Baby Chick","keywords":["animal","chicken","bird"],"skins":[{"unified":"1f424","native":"\uD83D\uDC24"}],"version":1},"hatched_chick":{"id":"hatched_chick","name":"Front-Facing Baby Chick","keywords":["hatched","front","facing","animal","chicken","bird"],"skins":[{"unified":"1f425","native":"\uD83D\uDC25"}],"version":1},"bird":{"id":"bird","name":"Bird","keywords":["animal","nature","fly","tweet","spring"],"skins":[{"unified":"1f426","native":"\uD83D\uDC26"}],"version":1},"penguin":{"id":"penguin","name":"Penguin","keywords":["animal","nature"],"skins":[{"unified":"1f427","native":"\uD83D\uDC27"}],"version":1},"dove_of_peace":{"id":"dove_of_peace","name":"Dove","keywords":["of","peace","animal","bird"],"skins":[{"unified":"1f54a-fe0f","native":"\uD83D\uDD4A\uFE0F"}],"version":1},"eagle":{"id":"eagle","name":"Eagle","keywords":["animal","nature","bird"],"skins":[{"unified":"1f985","native":"\uD83E\uDD85"}],"version":3},"duck":{"id":"duck","name":"Duck","keywords":["animal","nature","bird","mallard"],"skins":[{"unified":"1f986","native":"\uD83E\uDD86"}],"version":3},"swan":{"id":"swan","name":"Swan","keywords":["animal","nature","bird"],"skins":[{"unified":"1f9a2","native":"\uD83E\uDDA2"}],"version":11},"owl":{"id":"owl","name":"Owl","keywords":["animal","nature","bird","hoot"],"skins":[{"unified":"1f989","native":"\uD83E\uDD89"}],"version":3},"dodo":{"id":"dodo","name":"Dodo","keywords":["animal","bird"],"skins":[{"unified":"1f9a4","native":"\uD83E\uDDA4"}],"version":13},"feather":{"id":"feather","name":"Feather","keywords":["bird","fly"],"skins":[{"unified":"1fab6","native":"\uD83E\uDEB6"}],"version":13},"flamingo":{"id":"flamingo","name":"Flamingo","keywords":["animal"],"skins":[{"unified":"1f9a9","native":"\uD83E\uDDA9"}],"version":12},"peacock":{"id":"peacock","name":"Peacock","keywords":["animal","nature","peahen","bird"],"skins":[{"unified":"1f99a","native":"\uD83E\uDD9A"}],"version":11},"parrot":{"id":"parrot","name":"Parrot","keywords":["animal","nature","bird","pirate","talk"],"skins":[{"unified":"1f99c","native":"\uD83E\uDD9C"}],"version":11},"frog":{"id":"frog","name":"Frog","keywords":["animal","nature","croak","toad"],"skins":[{"unified":"1f438","native":"\uD83D\uDC38"}],"version":1},"crocodile":{"id":"crocodile","name":"Crocodile","keywords":["animal","nature","reptile","lizard","alligator"],"skins":[{"unified":"1f40a","native":"\uD83D\uDC0A"}],"version":1},"turtle":{"id":"turtle","name":"Turtle","keywords":["animal","slow","nature","tortoise"],"skins":[{"unified":"1f422","native":"\uD83D\uDC22"}],"version":1},"lizard":{"id":"lizard","name":"Lizard","keywords":["animal","nature","reptile"],"skins":[{"unified":"1f98e","native":"\uD83E\uDD8E"}],"version":3},"snake":{"id":"snake","name":"Snake","keywords":["animal","evil","nature","hiss","python"],"skins":[{"unified":"1f40d","native":"\uD83D\uDC0D"}],"version":1},"dragon_face":{"id":"dragon_face","name":"Dragon Face","keywords":["animal","myth","nature","chinese","green"],"skins":[{"unified":"1f432","native":"\uD83D\uDC32"}],"version":1},"dragon":{"id":"dragon","name":"Dragon","keywords":["animal","myth","nature","chinese","green"],"skins":[{"unified":"1f409","native":"\uD83D\uDC09"}],"version":1},"sauropod":{"id":"sauropod","name":"Sauropod","keywords":["animal","nature","dinosaur","brachiosaurus","brontosaurus","diplodocus","extinct"],"skins":[{"unified":"1f995","native":"\uD83E\uDD95"}],"version":5},"t-rex":{"id":"t-rex","name":"T-Rex","keywords":["t","rex","animal","nature","dinosaur","tyrannosaurus","extinct"],"skins":[{"unified":"1f996","native":"\uD83E\uDD96"}],"version":5},"whale":{"id":"whale","name":"Spouting Whale","keywords":["animal","nature","sea","ocean"],"skins":[{"unified":"1f433","native":"\uD83D\uDC33"}],"version":1},"whale2":{"id":"whale2","name":"Whale","keywords":["whale2","animal","nature","sea","ocean"],"skins":[{"unified":"1f40b","native":"\uD83D\uDC0B"}],"version":1},"dolphin":{"id":"dolphin","name":"Dolphin","keywords":["flipper","animal","nature","fish","sea","ocean","fins","beach"],"skins":[{"unified":"1f42c","native":"\uD83D\uDC2C"}],"version":1},"seal":{"id":"seal","name":"Seal","keywords":["animal","creature","sea"],"skins":[{"unified":"1f9ad","native":"\uD83E\uDDAD"}],"version":13},"fish":{"id":"fish","name":"Fish","keywords":["animal","food","nature"],"skins":[{"unified":"1f41f","native":"\uD83D\uDC1F"}],"version":1},"tropical_fish":{"id":"tropical_fish","name":"Tropical Fish","keywords":["animal","swim","ocean","beach","nemo"],"skins":[{"unified":"1f420","native":"\uD83D\uDC20"}],"version":1},"blowfish":{"id":"blowfish","name":"Blowfish","keywords":["animal","nature","food","sea","ocean"],"skins":[{"unified":"1f421","native":"\uD83D\uDC21"}],"version":1},"shark":{"id":"shark","name":"Shark","keywords":["animal","nature","fish","sea","ocean","jaws","fins","beach"],"skins":[{"unified":"1f988","native":"\uD83E\uDD88"}],"version":3},"octopus":{"id":"octopus","name":"Octopus","keywords":["animal","creature","ocean","sea","nature","beach"],"skins":[{"unified":"1f419","native":"\uD83D\uDC19"}],"version":1},"shell":{"id":"shell","name":"Spiral Shell","keywords":["nature","sea","beach"],"skins":[{"unified":"1f41a","native":"\uD83D\uDC1A"}],"version":1},"coral":{"id":"coral","name":"Coral","keywords":["ocean","sea","reef"],"skins":[{"unified":"1fab8","native":"\uD83E\uDEB8"}],"version":14},"snail":{"id":"snail","name":"Snail","keywords":["slow","animal","shell"],"skins":[{"unified":"1f40c","native":"\uD83D\uDC0C"}],"version":1},"butterfly":{"id":"butterfly","name":"Butterfly","keywords":["animal","insect","nature","caterpillar"],"skins":[{"unified":"1f98b","native":"\uD83E\uDD8B"}],"version":3},"bug":{"id":"bug","name":"Bug","keywords":["animal","insect","nature","worm"],"skins":[{"unified":"1f41b","native":"\uD83D\uDC1B"}],"version":1},"ant":{"id":"ant","name":"Ant","keywords":["animal","insect","nature","bug"],"skins":[{"unified":"1f41c","native":"\uD83D\uDC1C"}],"version":1},"bee":{"id":"bee","name":"Honeybee","keywords":["bee","animal","insect","nature","bug","spring","honey"],"skins":[{"unified":"1f41d","native":"\uD83D\uDC1D"}],"version":1},"beetle":{"id":"beetle","name":"Beetle","keywords":["insect"],"skins":[{"unified":"1fab2","native":"\uD83E\uDEB2"}],"version":13},"ladybug":{"id":"ladybug","name":"Lady Beetle","keywords":["ladybug","animal","insect","nature"],"skins":[{"unified":"1f41e","native":"\uD83D\uDC1E"}],"version":1},"cricket":{"id":"cricket","name":"Cricket","keywords":["animal","chirp"],"skins":[{"unified":"1f997","native":"\uD83E\uDD97"}],"version":5},"cockroach":{"id":"cockroach","name":"Cockroach","keywords":["insect","pests"],"skins":[{"unified":"1fab3","native":"\uD83E\uDEB3"}],"version":13},"spider":{"id":"spider","name":"Spider","keywords":["animal","arachnid"],"skins":[{"unified":"1f577-fe0f","native":"\uD83D\uDD77\uFE0F"}],"version":1},"spider_web":{"id":"spider_web","name":"Spider Web","keywords":["animal","insect","arachnid","silk"],"skins":[{"unified":"1f578-fe0f","native":"\uD83D\uDD78\uFE0F"}],"version":1},"scorpion":{"id":"scorpion","name":"Scorpion","keywords":["animal","arachnid"],"skins":[{"unified":"1f982","native":"\uD83E\uDD82"}],"version":1},"mosquito":{"id":"mosquito","name":"Mosquito","keywords":["animal","nature","insect","malaria"],"skins":[{"unified":"1f99f","native":"\uD83E\uDD9F"}],"version":11},"fly":{"id":"fly","name":"Fly","keywords":["insect"],"skins":[{"unified":"1fab0","native":"\uD83E\uDEB0"}],"version":13},"worm":{"id":"worm","name":"Worm","keywords":["animal"],"skins":[{"unified":"1fab1","native":"\uD83E\uDEB1"}],"version":13},"microbe":{"id":"microbe","name":"Microbe","keywords":["amoeba","bacteria","germs","virus"],"skins":[{"unified":"1f9a0","native":"\uD83E\uDDA0"}],"version":11},"bouquet":{"id":"bouquet","name":"Bouquet","keywords":["flowers","nature","spring"],"skins":[{"unified":"1f490","native":"\uD83D\uDC90"}],"version":1},"cherry_blossom":{"id":"cherry_blossom","name":"Cherry Blossom","keywords":["nature","plant","spring","flower"],"skins":[{"unified":"1f338","native":"\uD83C\uDF38"}],"version":1},"white_flower":{"id":"white_flower","name":"White Flower","keywords":["japanese","spring"],"skins":[{"unified":"1f4ae","native":"\uD83D\uDCAE"}],"version":1},"lotus":{"id":"lotus","name":"Lotus","keywords":["flower","calm","meditation"],"skins":[{"unified":"1fab7","native":"\uD83E\uDEB7"}],"version":14},"rosette":{"id":"rosette","name":"Rosette","keywords":["flower","decoration","military"],"skins":[{"unified":"1f3f5-fe0f","native":"\uD83C\uDFF5\uFE0F"}],"version":1},"rose":{"id":"rose","name":"Rose","keywords":["flowers","valentines","love","spring"],"skins":[{"unified":"1f339","native":"\uD83C\uDF39"}],"version":1},"wilted_flower":{"id":"wilted_flower","name":"Wilted Flower","keywords":["plant","nature"],"skins":[{"unified":"1f940","native":"\uD83E\uDD40"}],"version":3},"hibiscus":{"id":"hibiscus","name":"Hibiscus","keywords":["plant","vegetable","flowers","beach"],"skins":[{"unified":"1f33a","native":"\uD83C\uDF3A"}],"version":1},"sunflower":{"id":"sunflower","name":"Sunflower","keywords":["nature","plant","fall"],"skins":[{"unified":"1f33b","native":"\uD83C\uDF3B"}],"version":1},"blossom":{"id":"blossom","name":"Blossom","keywords":["nature","flowers","yellow"],"skins":[{"unified":"1f33c","native":"\uD83C\uDF3C"}],"version":1},"tulip":{"id":"tulip","name":"Tulip","keywords":["flowers","plant","nature","summer","spring"],"skins":[{"unified":"1f337","native":"\uD83C\uDF37"}],"version":1},"seedling":{"id":"seedling","name":"Seedling","keywords":["plant","nature","grass","lawn","spring"],"skins":[{"unified":"1f331","native":"\uD83C\uDF31"}],"version":1},"potted_plant":{"id":"potted_plant","name":"Potted Plant","keywords":["greenery","house"],"skins":[{"unified":"1fab4","native":"\uD83E\uDEB4"}],"version":13},"evergreen_tree":{"id":"evergreen_tree","name":"Evergreen Tree","keywords":["plant","nature"],"skins":[{"unified":"1f332","native":"\uD83C\uDF32"}],"version":1},"deciduous_tree":{"id":"deciduous_tree","name":"Deciduous Tree","keywords":["plant","nature"],"skins":[{"unified":"1f333","native":"\uD83C\uDF33"}],"version":1},"palm_tree":{"id":"palm_tree","name":"Palm Tree","keywords":["plant","vegetable","nature","summer","beach","mojito","tropical"],"skins":[{"unified":"1f334","native":"\uD83C\uDF34"}],"version":1},"cactus":{"id":"cactus","name":"Cactus","keywords":["vegetable","plant","nature"],"skins":[{"unified":"1f335","native":"\uD83C\uDF35"}],"version":1},"ear_of_rice":{"id":"ear_of_rice","name":"Ear of Rice","keywords":["sheaf","nature","plant"],"skins":[{"unified":"1f33e","native":"\uD83C\uDF3E"}],"version":1},"herb":{"id":"herb","name":"Herb","keywords":["vegetable","plant","medicine","weed","grass","lawn"],"skins":[{"unified":"1f33f","native":"\uD83C\uDF3F"}],"version":1},"shamrock":{"id":"shamrock","name":"Shamrock","keywords":["vegetable","plant","nature","irish","clover"],"skins":[{"unified":"2618-fe0f","native":"\u2618\uFE0F"}],"version":1},"four_leaf_clover":{"id":"four_leaf_clover","name":"Four Leaf Clover","keywords":["vegetable","plant","nature","lucky","irish"],"skins":[{"unified":"1f340","native":"\uD83C\uDF40"}],"version":1},"maple_leaf":{"id":"maple_leaf","name":"Maple Leaf","keywords":["nature","plant","vegetable","ca","fall"],"skins":[{"unified":"1f341","native":"\uD83C\uDF41"}],"version":1},"fallen_leaf":{"id":"fallen_leaf","name":"Fallen Leaf","keywords":["nature","plant","vegetable","leaves"],"skins":[{"unified":"1f342","native":"\uD83C\uDF42"}],"version":1},"leaves":{"id":"leaves","name":"Leaf Fluttering in Wind","keywords":["leaves","nature","plant","tree","vegetable","grass","lawn","spring"],"skins":[{"unified":"1f343","native":"\uD83C\uDF43"}],"version":1},"empty_nest":{"id":"empty_nest","name":"Empty Nest","keywords":["bird"],"skins":[{"unified":"1fab9","native":"\uD83E\uDEB9"}],"version":14},"nest_with_eggs":{"id":"nest_with_eggs","name":"Nest with Eggs","keywords":["bird"],"skins":[{"unified":"1faba","native":"\uD83E\uDEBA"}],"version":14},"grapes":{"id":"grapes","name":"Grapes","keywords":["fruit","food","wine"],"skins":[{"unified":"1f347","native":"\uD83C\uDF47"}],"version":1},"melon":{"id":"melon","name":"Melon","keywords":["fruit","nature","food"],"skins":[{"unified":"1f348","native":"\uD83C\uDF48"}],"version":1},"watermelon":{"id":"watermelon","name":"Watermelon","keywords":["fruit","food","picnic","summer"],"skins":[{"unified":"1f349","native":"\uD83C\uDF49"}],"version":1},"tangerine":{"id":"tangerine","name":"Tangerine","keywords":["food","fruit","nature","orange"],"skins":[{"unified":"1f34a","native":"\uD83C\uDF4A"}],"version":1},"lemon":{"id":"lemon","name":"Lemon","keywords":["fruit","nature"],"skins":[{"unified":"1f34b","native":"\uD83C\uDF4B"}],"version":1},"banana":{"id":"banana","name":"Banana","keywords":["fruit","food","monkey"],"skins":[{"unified":"1f34c","native":"\uD83C\uDF4C"}],"version":1},"pineapple":{"id":"pineapple","name":"Pineapple","keywords":["fruit","nature","food"],"skins":[{"unified":"1f34d","native":"\uD83C\uDF4D"}],"version":1},"mango":{"id":"mango","name":"Mango","keywords":["fruit","food","tropical"],"skins":[{"unified":"1f96d","native":"\uD83E\uDD6D"}],"version":11},"apple":{"id":"apple","name":"Red Apple","keywords":["fruit","mac","school"],"skins":[{"unified":"1f34e","native":"\uD83C\uDF4E"}],"version":1},"green_apple":{"id":"green_apple","name":"Green Apple","keywords":["fruit","nature"],"skins":[{"unified":"1f34f","native":"\uD83C\uDF4F"}],"version":1},"pear":{"id":"pear","name":"Pear","keywords":["fruit","nature","food"],"skins":[{"unified":"1f350","native":"\uD83C\uDF50"}],"version":1},"peach":{"id":"peach","name":"Peach","keywords":["fruit","nature","food"],"skins":[{"unified":"1f351","native":"\uD83C\uDF51"}],"version":1},"cherries":{"id":"cherries","name":"Cherries","keywords":["food","fruit"],"skins":[{"unified":"1f352","native":"\uD83C\uDF52"}],"version":1},"strawberry":{"id":"strawberry","name":"Strawberry","keywords":["fruit","food","nature"],"skins":[{"unified":"1f353","native":"\uD83C\uDF53"}],"version":1},"blueberries":{"id":"blueberries","name":"Blueberries","keywords":["fruit"],"skins":[{"unified":"1fad0","native":"\uD83E\uDED0"}],"version":13},"kiwifruit":{"id":"kiwifruit","name":"Kiwifruit","keywords":["kiwi","fruit","food"],"skins":[{"unified":"1f95d","native":"\uD83E\uDD5D"}],"version":3},"tomato":{"id":"tomato","name":"Tomato","keywords":["fruit","vegetable","nature","food"],"skins":[{"unified":"1f345","native":"\uD83C\uDF45"}],"version":1},"olive":{"id":"olive","name":"Olive","keywords":["fruit"],"skins":[{"unified":"1fad2","native":"\uD83E\uDED2"}],"version":13},"coconut":{"id":"coconut","name":"Coconut","keywords":["fruit","nature","food","palm"],"skins":[{"unified":"1f965","native":"\uD83E\uDD65"}],"version":5},"avocado":{"id":"avocado","name":"Avocado","keywords":["fruit","food"],"skins":[{"unified":"1f951","native":"\uD83E\uDD51"}],"version":3},"eggplant":{"id":"eggplant","name":"Eggplant","keywords":["vegetable","nature","food","aubergine"],"skins":[{"unified":"1f346","native":"\uD83C\uDF46"}],"version":1},"potato":{"id":"potato","name":"Potato","keywords":["food","tuber","vegatable","starch"],"skins":[{"unified":"1f954","native":"\uD83E\uDD54"}],"version":3},"carrot":{"id":"carrot","name":"Carrot","keywords":["vegetable","food","orange"],"skins":[{"unified":"1f955","native":"\uD83E\uDD55"}],"version":3},"corn":{"id":"corn","name":"Ear of Corn","keywords":["food","vegetable","plant"],"skins":[{"unified":"1f33d","native":"\uD83C\uDF3D"}],"version":1},"hot_pepper":{"id":"hot_pepper","name":"Hot Pepper","keywords":["food","spicy","chilli","chili"],"skins":[{"unified":"1f336-fe0f","native":"\uD83C\uDF36\uFE0F"}],"version":1},"bell_pepper":{"id":"bell_pepper","name":"Bell Pepper","keywords":["fruit","plant"],"skins":[{"unified":"1fad1","native":"\uD83E\uDED1"}],"version":13},"cucumber":{"id":"cucumber","name":"Cucumber","keywords":["fruit","food","pickle"],"skins":[{"unified":"1f952","native":"\uD83E\uDD52"}],"version":3},"leafy_green":{"id":"leafy_green","name":"Leafy Green","keywords":["food","vegetable","plant","bok","choy","cabbage","kale","lettuce"],"skins":[{"unified":"1f96c","native":"\uD83E\uDD6C"}],"version":11},"broccoli":{"id":"broccoli","name":"Broccoli","keywords":["fruit","food","vegetable"],"skins":[{"unified":"1f966","native":"\uD83E\uDD66"}],"version":5},"garlic":{"id":"garlic","name":"Garlic","keywords":["food","spice","cook"],"skins":[{"unified":"1f9c4","native":"\uD83E\uDDC4"}],"version":12},"onion":{"id":"onion","name":"Onion","keywords":["cook","food","spice"],"skins":[{"unified":"1f9c5","native":"\uD83E\uDDC5"}],"version":12},"mushroom":{"id":"mushroom","name":"Mushroom","keywords":["plant","vegetable"],"skins":[{"unified":"1f344","native":"\uD83C\uDF44"}],"version":1},"peanuts":{"id":"peanuts","name":"Peanuts","keywords":["food","nut"],"skins":[{"unified":"1f95c","native":"\uD83E\uDD5C"}],"version":3},"beans":{"id":"beans","name":"Beans","keywords":["food"],"skins":[{"unified":"1fad8","native":"\uD83E\uDED8"}],"version":14},"chestnut":{"id":"chestnut","name":"Chestnut","keywords":["food","squirrel"],"skins":[{"unified":"1f330","native":"\uD83C\uDF30"}],"version":1},"bread":{"id":"bread","name":"Bread","keywords":["food","wheat","breakfast","toast"],"skins":[{"unified":"1f35e","native":"\uD83C\uDF5E"}],"version":1},"croissant":{"id":"croissant","name":"Croissant","keywords":["food","bread","french"],"skins":[{"unified":"1f950","native":"\uD83E\uDD50"}],"version":3},"baguette_bread":{"id":"baguette_bread","name":"Baguette Bread","keywords":["food","french"],"skins":[{"unified":"1f956","native":"\uD83E\uDD56"}],"version":3},"flatbread":{"id":"flatbread","name":"Flatbread","keywords":["flour","food"],"skins":[{"unified":"1fad3","native":"\uD83E\uDED3"}],"version":13},"pretzel":{"id":"pretzel","name":"Pretzel","keywords":["food","bread","twisted"],"skins":[{"unified":"1f968","native":"\uD83E\uDD68"}],"version":5},"bagel":{"id":"bagel","name":"Bagel","keywords":["food","bread","bakery","schmear"],"skins":[{"unified":"1f96f","native":"\uD83E\uDD6F"}],"version":11},"pancakes":{"id":"pancakes","name":"Pancakes","keywords":["food","breakfast","flapjacks","hotcakes"],"skins":[{"unified":"1f95e","native":"\uD83E\uDD5E"}],"version":3},"waffle":{"id":"waffle","name":"Waffle","keywords":["food","breakfast"],"skins":[{"unified":"1f9c7","native":"\uD83E\uDDC7"}],"version":12},"cheese_wedge":{"id":"cheese_wedge","name":"Cheese Wedge","keywords":["food","chadder"],"skins":[{"unified":"1f9c0","native":"\uD83E\uDDC0"}],"version":1},"meat_on_bone":{"id":"meat_on_bone","name":"Meat on Bone","keywords":["good","food","drumstick"],"skins":[{"unified":"1f356","native":"\uD83C\uDF56"}],"version":1},"poultry_leg":{"id":"poultry_leg","name":"Poultry Leg","keywords":["food","meat","drumstick","bird","chicken","turkey"],"skins":[{"unified":"1f357","native":"\uD83C\uDF57"}],"version":1},"cut_of_meat":{"id":"cut_of_meat","name":"Cut of Meat","keywords":["food","cow","chop","lambchop","porkchop"],"skins":[{"unified":"1f969","native":"\uD83E\uDD69"}],"version":5},"bacon":{"id":"bacon","name":"Bacon","keywords":["food","breakfast","pork","pig","meat"],"skins":[{"unified":"1f953","native":"\uD83E\uDD53"}],"version":3},"hamburger":{"id":"hamburger","name":"Hamburger","keywords":["meat","fast","food","beef","cheeseburger","mcdonalds","burger","king"],"skins":[{"unified":"1f354","native":"\uD83C\uDF54"}],"version":1},"fries":{"id":"fries","name":"French Fries","keywords":["chips","snack","fast","food"],"skins":[{"unified":"1f35f","native":"\uD83C\uDF5F"}],"version":1},"pizza":{"id":"pizza","name":"Pizza","keywords":["food","party"],"skins":[{"unified":"1f355","native":"\uD83C\uDF55"}],"version":1},"hotdog":{"id":"hotdog","name":"Hot Dog","keywords":["hotdog","food","frankfurter"],"skins":[{"unified":"1f32d","native":"\uD83C\uDF2D"}],"version":1},"sandwich":{"id":"sandwich","name":"Sandwich","keywords":["food","lunch","bread"],"skins":[{"unified":"1f96a","native":"\uD83E\uDD6A"}],"version":5},"taco":{"id":"taco","name":"Taco","keywords":["food","mexican"],"skins":[{"unified":"1f32e","native":"\uD83C\uDF2E"}],"version":1},"burrito":{"id":"burrito","name":"Burrito","keywords":["food","mexican"],"skins":[{"unified":"1f32f","native":"\uD83C\uDF2F"}],"version":1},"tamale":{"id":"tamale","name":"Tamale","keywords":["food","masa"],"skins":[{"unified":"1fad4","native":"\uD83E\uDED4"}],"version":13},"stuffed_flatbread":{"id":"stuffed_flatbread","name":"Stuffed Flatbread","keywords":["food","gyro"],"skins":[{"unified":"1f959","native":"\uD83E\uDD59"}],"version":3},"falafel":{"id":"falafel","name":"Falafel","keywords":["food"],"skins":[{"unified":"1f9c6","native":"\uD83E\uDDC6"}],"version":12},"egg":{"id":"egg","name":"Egg","keywords":["food","chicken","breakfast"],"skins":[{"unified":"1f95a","native":"\uD83E\uDD5A"}],"version":3},"fried_egg":{"id":"fried_egg","name":"Cooking","keywords":["fried","egg","food","breakfast","kitchen"],"skins":[{"unified":"1f373","native":"\uD83C\uDF73"}],"version":1},"shallow_pan_of_food":{"id":"shallow_pan_of_food","name":"Shallow Pan of Food","keywords":["cooking","casserole","paella"],"skins":[{"unified":"1f958","native":"\uD83E\uDD58"}],"version":3},"stew":{"id":"stew","name":"Pot of Food","keywords":["stew","meat","soup"],"skins":[{"unified":"1f372","native":"\uD83C\uDF72"}],"version":1},"fondue":{"id":"fondue","name":"Fondue","keywords":["cheese","pot","food"],"skins":[{"unified":"1fad5","native":"\uD83E\uDED5"}],"version":13},"bowl_with_spoon":{"id":"bowl_with_spoon","name":"Bowl with Spoon","keywords":["food","breakfast","cereal","oatmeal","porridge"],"skins":[{"unified":"1f963","native":"\uD83E\uDD63"}],"version":5},"green_salad":{"id":"green_salad","name":"Green Salad","keywords":["food","healthy","lettuce"],"skins":[{"unified":"1f957","native":"\uD83E\uDD57"}],"version":3},"popcorn":{"id":"popcorn","name":"Popcorn","keywords":["food","movie","theater","films","snack"],"skins":[{"unified":"1f37f","native":"\uD83C\uDF7F"}],"version":1},"butter":{"id":"butter","name":"Butter","keywords":["food","cook"],"skins":[{"unified":"1f9c8","native":"\uD83E\uDDC8"}],"version":12},"salt":{"id":"salt","name":"Salt","keywords":["condiment","shaker"],"skins":[{"unified":"1f9c2","native":"\uD83E\uDDC2"}],"version":11},"canned_food":{"id":"canned_food","name":"Canned Food","keywords":["soup"],"skins":[{"unified":"1f96b","native":"\uD83E\uDD6B"}],"version":5},"bento":{"id":"bento","name":"Bento Box","keywords":["food","japanese"],"skins":[{"unified":"1f371","native":"\uD83C\uDF71"}],"version":1},"rice_cracker":{"id":"rice_cracker","name":"Rice Cracker","keywords":["food","japanese"],"skins":[{"unified":"1f358","native":"\uD83C\uDF58"}],"version":1},"rice_ball":{"id":"rice_ball","name":"Rice Ball","keywords":["food","japanese"],"skins":[{"unified":"1f359","native":"\uD83C\uDF59"}],"version":1},"rice":{"id":"rice","name":"Cooked Rice","keywords":["food","china","asian"],"skins":[{"unified":"1f35a","native":"\uD83C\uDF5A"}],"version":1},"curry":{"id":"curry","name":"Curry Rice","keywords":["food","spicy","hot","indian"],"skins":[{"unified":"1f35b","native":"\uD83C\uDF5B"}],"version":1},"ramen":{"id":"ramen","name":"Steaming Bowl","keywords":["ramen","food","japanese","noodle","chopsticks"],"skins":[{"unified":"1f35c","native":"\uD83C\uDF5C"}],"version":1},"spaghetti":{"id":"spaghetti","name":"Spaghetti","keywords":["food","italian","noodle"],"skins":[{"unified":"1f35d","native":"\uD83C\uDF5D"}],"version":1},"sweet_potato":{"id":"sweet_potato","name":"Roasted Sweet Potato","keywords":["food","nature"],"skins":[{"unified":"1f360","native":"\uD83C\uDF60"}],"version":1},"oden":{"id":"oden","name":"Oden","keywords":["food","japanese"],"skins":[{"unified":"1f362","native":"\uD83C\uDF62"}],"version":1},"sushi":{"id":"sushi","name":"Sushi","keywords":["food","fish","japanese","rice"],"skins":[{"unified":"1f363","native":"\uD83C\uDF63"}],"version":1},"fried_shrimp":{"id":"fried_shrimp","name":"Fried Shrimp","keywords":["food","animal","appetizer","summer"],"skins":[{"unified":"1f364","native":"\uD83C\uDF64"}],"version":1},"fish_cake":{"id":"fish_cake","name":"Fish Cake with Swirl","keywords":["food","japan","sea","beach","narutomaki","pink","kamaboko","surimi","ramen"],"skins":[{"unified":"1f365","native":"\uD83C\uDF65"}],"version":1},"moon_cake":{"id":"moon_cake","name":"Moon Cake","keywords":["food","autumn"],"skins":[{"unified":"1f96e","native":"\uD83E\uDD6E"}],"version":11},"dango":{"id":"dango","name":"Dango","keywords":["food","dessert","sweet","japanese","barbecue","meat"],"skins":[{"unified":"1f361","native":"\uD83C\uDF61"}],"version":1},"dumpling":{"id":"dumpling","name":"Dumpling","keywords":["food","empanada","pierogi","potsticker"],"skins":[{"unified":"1f95f","native":"\uD83E\uDD5F"}],"version":5},"fortune_cookie":{"id":"fortune_cookie","name":"Fortune Cookie","keywords":["food","prophecy"],"skins":[{"unified":"1f960","native":"\uD83E\uDD60"}],"version":5},"takeout_box":{"id":"takeout_box","name":"Takeout Box","keywords":["food","leftovers"],"skins":[{"unified":"1f961","native":"\uD83E\uDD61"}],"version":5},"crab":{"id":"crab","name":"Crab","keywords":["animal","crustacean"],"skins":[{"unified":"1f980","native":"\uD83E\uDD80"}],"version":1},"lobster":{"id":"lobster","name":"Lobster","keywords":["animal","nature","bisque","claws","seafood"],"skins":[{"unified":"1f99e","native":"\uD83E\uDD9E"}],"version":11},"shrimp":{"id":"shrimp","name":"Shrimp","keywords":["animal","ocean","nature","seafood"],"skins":[{"unified":"1f990","native":"\uD83E\uDD90"}],"version":3},"squid":{"id":"squid","name":"Squid","keywords":["animal","nature","ocean","sea"],"skins":[{"unified":"1f991","native":"\uD83E\uDD91"}],"version":3},"oyster":{"id":"oyster","name":"Oyster","keywords":["food"],"skins":[{"unified":"1f9aa","native":"\uD83E\uDDAA"}],"version":12},"icecream":{"id":"icecream","name":"Soft Ice Cream","keywords":["icecream","food","hot","dessert","summer"],"skins":[{"unified":"1f366","native":"\uD83C\uDF66"}],"version":1},"shaved_ice":{"id":"shaved_ice","name":"Shaved Ice","keywords":["hot","dessert","summer"],"skins":[{"unified":"1f367","native":"\uD83C\uDF67"}],"version":1},"ice_cream":{"id":"ice_cream","name":"Ice Cream","keywords":["food","hot","dessert"],"skins":[{"unified":"1f368","native":"\uD83C\uDF68"}],"version":1},"doughnut":{"id":"doughnut","name":"Doughnut","keywords":["food","dessert","snack","sweet","donut"],"skins":[{"unified":"1f369","native":"\uD83C\uDF69"}],"version":1},"cookie":{"id":"cookie","name":"Cookie","keywords":["food","snack","oreo","chocolate","sweet","dessert"],"skins":[{"unified":"1f36a","native":"\uD83C\uDF6A"}],"version":1},"birthday":{"id":"birthday","name":"Birthday Cake","keywords":["food","dessert"],"skins":[{"unified":"1f382","native":"\uD83C\uDF82"}],"version":1},"cake":{"id":"cake","name":"Shortcake","keywords":["cake","food","dessert"],"skins":[{"unified":"1f370","native":"\uD83C\uDF70"}],"version":1},"cupcake":{"id":"cupcake","name":"Cupcake","keywords":["food","dessert","bakery","sweet"],"skins":[{"unified":"1f9c1","native":"\uD83E\uDDC1"}],"version":11},"pie":{"id":"pie","name":"Pie","keywords":["food","dessert","pastry"],"skins":[{"unified":"1f967","native":"\uD83E\uDD67"}],"version":5},"chocolate_bar":{"id":"chocolate_bar","name":"Chocolate Bar","keywords":["food","snack","dessert","sweet"],"skins":[{"unified":"1f36b","native":"\uD83C\uDF6B"}],"version":1},"candy":{"id":"candy","name":"Candy","keywords":["snack","dessert","sweet","lolly"],"skins":[{"unified":"1f36c","native":"\uD83C\uDF6C"}],"version":1},"lollipop":{"id":"lollipop","name":"Lollipop","keywords":["food","snack","candy","sweet"],"skins":[{"unified":"1f36d","native":"\uD83C\uDF6D"}],"version":1},"custard":{"id":"custard","name":"Custard","keywords":["dessert","food"],"skins":[{"unified":"1f36e","native":"\uD83C\uDF6E"}],"version":1},"honey_pot":{"id":"honey_pot","name":"Honey Pot","keywords":["bees","sweet","kitchen"],"skins":[{"unified":"1f36f","native":"\uD83C\uDF6F"}],"version":1},"baby_bottle":{"id":"baby_bottle","name":"Baby Bottle","keywords":["food","container","milk"],"skins":[{"unified":"1f37c","native":"\uD83C\uDF7C"}],"version":1},"glass_of_milk":{"id":"glass_of_milk","name":"Glass of Milk","keywords":["beverage","drink","cow"],"skins":[{"unified":"1f95b","native":"\uD83E\uDD5B"}],"version":3},"coffee":{"id":"coffee","name":"Hot Beverage","keywords":["coffee","caffeine","latte","espresso"],"skins":[{"unified":"2615","native":"\u2615"}],"version":1},"teapot":{"id":"teapot","name":"Teapot","keywords":["drink","hot"],"skins":[{"unified":"1fad6","native":"\uD83E\uDED6"}],"version":13},"tea":{"id":"tea","name":"Teacup Without Handle","keywords":["tea","drink","bowl","breakfast","green","british"],"skins":[{"unified":"1f375","native":"\uD83C\uDF75"}],"version":1},"sake":{"id":"sake","name":"Sake","keywords":["wine","drink","drunk","beverage","japanese","alcohol","booze"],"skins":[{"unified":"1f376","native":"\uD83C\uDF76"}],"version":1},"champagne":{"id":"champagne","name":"Bottle with Popping Cork","keywords":["champagne","drink","wine","celebration"],"skins":[{"unified":"1f37e","native":"\uD83C\uDF7E"}],"version":1},"wine_glass":{"id":"wine_glass","name":"Wine Glass","keywords":["drink","beverage","drunk","alcohol","booze"],"skins":[{"unified":"1f377","native":"\uD83C\uDF77"}],"version":1},"cocktail":{"id":"cocktail","name":"Cocktail Glass","keywords":["drink","drunk","alcohol","beverage","booze","mojito"],"skins":[{"unified":"1f378","native":"\uD83C\uDF78"}],"version":1},"tropical_drink":{"id":"tropical_drink","name":"Tropical Drink","keywords":["beverage","cocktail","summer","beach","alcohol","booze","mojito"],"skins":[{"unified":"1f379","native":"\uD83C\uDF79"}],"version":1},"beer":{"id":"beer","name":"Beer Mug","keywords":["relax","beverage","drink","drunk","party","pub","summer","alcohol","booze"],"skins":[{"unified":"1f37a","native":"\uD83C\uDF7A"}],"version":1},"beers":{"id":"beers","name":"Clinking Beer Mugs","keywords":["beers","relax","beverage","drink","drunk","party","pub","summer","alcohol","booze"],"skins":[{"unified":"1f37b","native":"\uD83C\uDF7B"}],"version":1},"clinking_glasses":{"id":"clinking_glasses","name":"Clinking Glasses","keywords":["beverage","drink","party","alcohol","celebrate","cheers","wine","champagne","toast"],"skins":[{"unified":"1f942","native":"\uD83E\uDD42"}],"version":3},"tumbler_glass":{"id":"tumbler_glass","name":"Tumbler Glass","keywords":["drink","beverage","drunk","alcohol","liquor","booze","bourbon","scotch","whisky","shot"],"skins":[{"unified":"1f943","native":"\uD83E\uDD43"}],"version":3},"pouring_liquid":{"id":"pouring_liquid","name":"Pouring Liquid","keywords":["cup","water"],"skins":[{"unified":"1fad7","native":"\uD83E\uDED7"}],"version":14},"cup_with_straw":{"id":"cup_with_straw","name":"Cup with Straw","keywords":["drink","soda"],"skins":[{"unified":"1f964","native":"\uD83E\uDD64"}],"version":5},"bubble_tea":{"id":"bubble_tea","name":"Bubble Tea","keywords":["taiwan","boba","milk","straw"],"skins":[{"unified":"1f9cb","native":"\uD83E\uDDCB"}],"version":13},"beverage_box":{"id":"beverage_box","name":"Beverage Box","keywords":["drink"],"skins":[{"unified":"1f9c3","native":"\uD83E\uDDC3"}],"version":12},"mate_drink":{"id":"mate_drink","name":"Mate","keywords":["drink","tea","beverage"],"skins":[{"unified":"1f9c9","native":"\uD83E\uDDC9"}],"version":12},"ice_cube":{"id":"ice_cube","name":"Ice","keywords":["cube","water","cold"],"skins":[{"unified":"1f9ca","native":"\uD83E\uDDCA"}],"version":12},"chopsticks":{"id":"chopsticks","name":"Chopsticks","keywords":["food"],"skins":[{"unified":"1f962","native":"\uD83E\uDD62"}],"version":5},"knife_fork_plate":{"id":"knife_fork_plate","name":"Fork and Knife with Plate","keywords":["food","eat","meal","lunch","dinner","restaurant"],"skins":[{"unified":"1f37d-fe0f","native":"\uD83C\uDF7D\uFE0F"}],"version":1},"fork_and_knife":{"id":"fork_and_knife","name":"Fork and Knife","keywords":["cutlery","kitchen"],"skins":[{"unified":"1f374","native":"\uD83C\uDF74"}],"version":1},"spoon":{"id":"spoon","name":"Spoon","keywords":["cutlery","kitchen","tableware"],"skins":[{"unified":"1f944","native":"\uD83E\uDD44"}],"version":3},"hocho":{"id":"hocho","name":"Hocho","keywords":["knife","kitchen","blade","cutlery","weapon"],"skins":[{"unified":"1f52a","native":"\uD83D\uDD2A"}],"version":1},"jar":{"id":"jar","name":"Jar","keywords":["container","sauce"],"skins":[{"unified":"1fad9","native":"\uD83E\uDED9"}],"version":14},"amphora":{"id":"amphora","name":"Amphora","keywords":["vase","jar"],"skins":[{"unified":"1f3fa","native":"\uD83C\uDFFA"}],"version":1},"earth_africa":{"id":"earth_africa","name":"Earth Globe Europe-Africa","keywords":["africa","showing","europe","world","international"],"skins":[{"unified":"1f30d","native":"\uD83C\uDF0D"}],"version":1},"earth_americas":{"id":"earth_americas","name":"Earth Globe Americas","keywords":["showing","world","USA","international"],"skins":[{"unified":"1f30e","native":"\uD83C\uDF0E"}],"version":1},"earth_asia":{"id":"earth_asia","name":"Earth Globe Asia-Australia","keywords":["asia","showing","australia","world","east","international"],"skins":[{"unified":"1f30f","native":"\uD83C\uDF0F"}],"version":1},"globe_with_meridians":{"id":"globe_with_meridians","name":"Globe with Meridians","keywords":["earth","international","world","internet","interweb","i18n"],"skins":[{"unified":"1f310","native":"\uD83C\uDF10"}],"version":1},"world_map":{"id":"world_map","name":"World Map","keywords":["location","direction"],"skins":[{"unified":"1f5fa-fe0f","native":"\uD83D\uDDFA\uFE0F"}],"version":1},"japan":{"id":"japan","name":"Map of Japan","keywords":["nation","country","japanese","asia"],"skins":[{"unified":"1f5fe","native":"\uD83D\uDDFE"}],"version":1},"compass":{"id":"compass","name":"Compass","keywords":["magnetic","navigation","orienteering"],"skins":[{"unified":"1f9ed","native":"\uD83E\uDDED"}],"version":11},"snow_capped_mountain":{"id":"snow_capped_mountain","name":"Snow-Capped Mountain","keywords":["snow","capped","photo","nature","environment","winter","cold"],"skins":[{"unified":"1f3d4-fe0f","native":"\uD83C\uDFD4\uFE0F"}],"version":1},"mountain":{"id":"mountain","name":"Mountain","keywords":["photo","nature","environment"],"skins":[{"unified":"26f0-fe0f","native":"\u26F0\uFE0F"}],"version":1},"volcano":{"id":"volcano","name":"Volcano","keywords":["photo","nature","disaster"],"skins":[{"unified":"1f30b","native":"\uD83C\uDF0B"}],"version":1},"mount_fuji":{"id":"mount_fuji","name":"Mount Fuji","keywords":["photo","mountain","nature","japanese"],"skins":[{"unified":"1f5fb","native":"\uD83D\uDDFB"}],"version":1},"camping":{"id":"camping","name":"Camping","keywords":["photo","outdoors","tent"],"skins":[{"unified":"1f3d5-fe0f","native":"\uD83C\uDFD5\uFE0F"}],"version":1},"beach_with_umbrella":{"id":"beach_with_umbrella","name":"Beach with Umbrella","keywords":["weather","summer","sunny","sand","mojito"],"skins":[{"unified":"1f3d6-fe0f","native":"\uD83C\uDFD6\uFE0F"}],"version":1},"desert":{"id":"desert","name":"Desert","keywords":["photo","warm","saharah"],"skins":[{"unified":"1f3dc-fe0f","native":"\uD83C\uDFDC\uFE0F"}],"version":1},"desert_island":{"id":"desert_island","name":"Desert Island","keywords":["photo","tropical","mojito"],"skins":[{"unified":"1f3dd-fe0f","native":"\uD83C\uDFDD\uFE0F"}],"version":1},"national_park":{"id":"national_park","name":"National Park","keywords":["photo","environment","nature"],"skins":[{"unified":"1f3de-fe0f","native":"\uD83C\uDFDE\uFE0F"}],"version":1},"stadium":{"id":"stadium","name":"Stadium","keywords":["photo","place","sports","concert","venue"],"skins":[{"unified":"1f3df-fe0f","native":"\uD83C\uDFDF\uFE0F"}],"version":1},"classical_building":{"id":"classical_building","name":"Classical Building","keywords":["art","culture","history"],"skins":[{"unified":"1f3db-fe0f","native":"\uD83C\uDFDB\uFE0F"}],"version":1},"building_construction":{"id":"building_construction","name":"Building Construction","keywords":["wip","working","progress"],"skins":[{"unified":"1f3d7-fe0f","native":"\uD83C\uDFD7\uFE0F"}],"version":1},"bricks":{"id":"bricks","name":"Brick","keywords":["bricks"],"skins":[{"unified":"1f9f1","native":"\uD83E\uDDF1"}],"version":11},"rock":{"id":"rock","name":"Rock","keywords":["stone"],"skins":[{"unified":"1faa8","native":"\uD83E\uDEA8"}],"version":13},"wood":{"id":"wood","name":"Wood","keywords":["nature","timber","trunk"],"skins":[{"unified":"1fab5","native":"\uD83E\uDEB5"}],"version":13},"hut":{"id":"hut","name":"Hut","keywords":["house","structure"],"skins":[{"unified":"1f6d6","native":"\uD83D\uDED6"}],"version":13},"house_buildings":{"id":"house_buildings","name":"Houses","keywords":["house","buildings","photo"],"skins":[{"unified":"1f3d8-fe0f","native":"\uD83C\uDFD8\uFE0F"}],"version":1},"derelict_house_building":{"id":"derelict_house_building","name":"Derelict House","keywords":["building","abandon","evict","broken"],"skins":[{"unified":"1f3da-fe0f","native":"\uD83C\uDFDA\uFE0F"}],"version":1},"house":{"id":"house","name":"House","keywords":["building","home"],"skins":[{"unified":"1f3e0","native":"\uD83C\uDFE0"}],"version":1},"house_with_garden":{"id":"house_with_garden","name":"House with Garden","keywords":["home","plant","nature"],"skins":[{"unified":"1f3e1","native":"\uD83C\uDFE1"}],"version":1},"office":{"id":"office","name":"Office Building","keywords":["bureau","work"],"skins":[{"unified":"1f3e2","native":"\uD83C\uDFE2"}],"version":1},"post_office":{"id":"post_office","name":"Japanese Post Office","keywords":["building","envelope","communication"],"skins":[{"unified":"1f3e3","native":"\uD83C\uDFE3"}],"version":1},"european_post_office":{"id":"european_post_office","name":"Post Office","keywords":["european","building","email"],"skins":[{"unified":"1f3e4","native":"\uD83C\uDFE4"}],"version":1},"hospital":{"id":"hospital","name":"Hospital","keywords":["building","health","surgery","doctor"],"skins":[{"unified":"1f3e5","native":"\uD83C\uDFE5"}],"version":1},"bank":{"id":"bank","name":"Bank","keywords":["building","money","sales","cash","business","enterprise"],"skins":[{"unified":"1f3e6","native":"\uD83C\uDFE6"}],"version":1},"hotel":{"id":"hotel","name":"Hotel","keywords":["building","accomodation","checkin"],"skins":[{"unified":"1f3e8","native":"\uD83C\uDFE8"}],"version":1},"love_hotel":{"id":"love_hotel","name":"Love Hotel","keywords":["like","affection","dating"],"skins":[{"unified":"1f3e9","native":"\uD83C\uDFE9"}],"version":1},"convenience_store":{"id":"convenience_store","name":"Convenience Store","keywords":["building","shopping","groceries"],"skins":[{"unified":"1f3ea","native":"\uD83C\uDFEA"}],"version":1},"school":{"id":"school","name":"School","keywords":["building","student","education","learn","teach"],"skins":[{"unified":"1f3eb","native":"\uD83C\uDFEB"}],"version":1},"department_store":{"id":"department_store","name":"Department Store","keywords":["building","shopping","mall"],"skins":[{"unified":"1f3ec","native":"\uD83C\uDFEC"}],"version":1},"factory":{"id":"factory","name":"Factory","keywords":["building","industry","pollution","smoke"],"skins":[{"unified":"1f3ed","native":"\uD83C\uDFED"}],"version":1},"japanese_castle":{"id":"japanese_castle","name":"Japanese Castle","keywords":["photo","building"],"skins":[{"unified":"1f3ef","native":"\uD83C\uDFEF"}],"version":1},"european_castle":{"id":"european_castle","name":"Castle","keywords":["european","building","royalty","history"],"skins":[{"unified":"1f3f0","native":"\uD83C\uDFF0"}],"version":1},"wedding":{"id":"wedding","name":"Wedding","keywords":["love","like","affection","couple","marriage","bride","groom"],"skins":[{"unified":"1f492","native":"\uD83D\uDC92"}],"version":1},"tokyo_tower":{"id":"tokyo_tower","name":"Tokyo Tower","keywords":["photo","japanese"],"skins":[{"unified":"1f5fc","native":"\uD83D\uDDFC"}],"version":1},"statue_of_liberty":{"id":"statue_of_liberty","name":"Statue of Liberty","keywords":["american","newyork"],"skins":[{"unified":"1f5fd","native":"\uD83D\uDDFD"}],"version":1},"church":{"id":"church","name":"Church","keywords":["building","religion","christ"],"skins":[{"unified":"26ea","native":"\u26EA"}],"version":1},"mosque":{"id":"mosque","name":"Mosque","keywords":["islam","worship","minaret"],"skins":[{"unified":"1f54c","native":"\uD83D\uDD4C"}],"version":1},"hindu_temple":{"id":"hindu_temple","name":"Hindu Temple","keywords":["religion"],"skins":[{"unified":"1f6d5","native":"\uD83D\uDED5"}],"version":12},"synagogue":{"id":"synagogue","name":"Synagogue","keywords":["judaism","worship","temple","jewish"],"skins":[{"unified":"1f54d","native":"\uD83D\uDD4D"}],"version":1},"shinto_shrine":{"id":"shinto_shrine","name":"Shinto Shrine","keywords":["temple","japan","kyoto"],"skins":[{"unified":"26e9-fe0f","native":"\u26E9\uFE0F"}],"version":1},"kaaba":{"id":"kaaba","name":"Kaaba","keywords":["mecca","mosque","islam"],"skins":[{"unified":"1f54b","native":"\uD83D\uDD4B"}],"version":1},"fountain":{"id":"fountain","name":"Fountain","keywords":["photo","summer","water","fresh"],"skins":[{"unified":"26f2","native":"\u26F2"}],"version":1},"tent":{"id":"tent","name":"Tent","keywords":["photo","camping","outdoors"],"skins":[{"unified":"26fa","native":"\u26FA"}],"version":1},"foggy":{"id":"foggy","name":"Foggy","keywords":["photo","mountain"],"skins":[{"unified":"1f301","native":"\uD83C\uDF01"}],"version":1},"night_with_stars":{"id":"night_with_stars","name":"Night with Stars","keywords":["evening","city","downtown"],"skins":[{"unified":"1f303","native":"\uD83C\uDF03"}],"version":1},"cityscape":{"id":"cityscape","name":"Cityscape","keywords":["photo","night","life","urban"],"skins":[{"unified":"1f3d9-fe0f","native":"\uD83C\uDFD9\uFE0F"}],"version":1},"sunrise_over_mountains":{"id":"sunrise_over_mountains","name":"Sunrise over Mountains","keywords":["view","vacation","photo"],"skins":[{"unified":"1f304","native":"\uD83C\uDF04"}],"version":1},"sunrise":{"id":"sunrise","name":"Sunrise","keywords":["morning","view","vacation","photo"],"skins":[{"unified":"1f305","native":"\uD83C\uDF05"}],"version":1},"city_sunset":{"id":"city_sunset","name":"Cityscape at Dusk","keywords":["city","sunset","photo","evening","sky","buildings"],"skins":[{"unified":"1f306","native":"\uD83C\uDF06"}],"version":1},"city_sunrise":{"id":"city_sunrise","name":"Sunset","keywords":["city","sunrise","photo","good","morning","dawn"],"skins":[{"unified":"1f307","native":"\uD83C\uDF07"}],"version":1},"bridge_at_night":{"id":"bridge_at_night","name":"Bridge at Night","keywords":["photo","sanfrancisco"],"skins":[{"unified":"1f309","native":"\uD83C\uDF09"}],"version":1},"hotsprings":{"id":"hotsprings","name":"Hot Springs","keywords":["hotsprings","bath","warm","relax"],"skins":[{"unified":"2668-fe0f","native":"\u2668\uFE0F"}],"version":1},"carousel_horse":{"id":"carousel_horse","name":"Carousel Horse","keywords":["photo","carnival"],"skins":[{"unified":"1f3a0","native":"\uD83C\uDFA0"}],"version":1},"playground_slide":{"id":"playground_slide","name":"Playground Slide","keywords":["fun","park"],"skins":[{"unified":"1f6dd","native":"\uD83D\uDEDD"}],"version":14},"ferris_wheel":{"id":"ferris_wheel","name":"Ferris Wheel","keywords":["photo","carnival","londoneye"],"skins":[{"unified":"1f3a1","native":"\uD83C\uDFA1"}],"version":1},"roller_coaster":{"id":"roller_coaster","name":"Roller Coaster","keywords":["carnival","playground","photo","fun"],"skins":[{"unified":"1f3a2","native":"\uD83C\uDFA2"}],"version":1},"barber":{"id":"barber","name":"Barber Pole","keywords":["hair","salon","style"],"skins":[{"unified":"1f488","native":"\uD83D\uDC88"}],"version":1},"circus_tent":{"id":"circus_tent","name":"Circus Tent","keywords":["festival","carnival","party"],"skins":[{"unified":"1f3aa","native":"\uD83C\uDFAA"}],"version":1},"steam_locomotive":{"id":"steam_locomotive","name":"Locomotive","keywords":["steam","transportation","vehicle","train"],"skins":[{"unified":"1f682","native":"\uD83D\uDE82"}],"version":1},"railway_car":{"id":"railway_car","name":"Railway Car","keywords":["transportation","vehicle"],"skins":[{"unified":"1f683","native":"\uD83D\uDE83"}],"version":1},"bullettrain_side":{"id":"bullettrain_side","name":"High-Speed Train","keywords":["bullettrain","side","high","speed","transportation","vehicle"],"skins":[{"unified":"1f684","native":"\uD83D\uDE84"}],"version":1},"bullettrain_front":{"id":"bullettrain_front","name":"Bullet Train","keywords":["bullettrain","front","transportation","vehicle","speed","fast","public","travel"],"skins":[{"unified":"1f685","native":"\uD83D\uDE85"}],"version":1},"train2":{"id":"train2","name":"Train","keywords":["train2","transportation","vehicle"],"skins":[{"unified":"1f686","native":"\uD83D\uDE86"}],"version":1},"metro":{"id":"metro","name":"Metro","keywords":["transportation","blue","square","mrt","underground","tube"],"skins":[{"unified":"1f687","native":"\uD83D\uDE87"}],"version":1},"light_rail":{"id":"light_rail","name":"Light Rail","keywords":["transportation","vehicle"],"skins":[{"unified":"1f688","native":"\uD83D\uDE88"}],"version":1},"station":{"id":"station","name":"Station","keywords":["transportation","vehicle","public"],"skins":[{"unified":"1f689","native":"\uD83D\uDE89"}],"version":1},"tram":{"id":"tram","name":"Tram","keywords":["transportation","vehicle"],"skins":[{"unified":"1f68a","native":"\uD83D\uDE8A"}],"version":1},"monorail":{"id":"monorail","name":"Monorail","keywords":["transportation","vehicle"],"skins":[{"unified":"1f69d","native":"\uD83D\uDE9D"}],"version":1},"mountain_railway":{"id":"mountain_railway","name":"Mountain Railway","keywords":["transportation","vehicle"],"skins":[{"unified":"1f69e","native":"\uD83D\uDE9E"}],"version":1},"train":{"id":"train","name":"Tram Car","keywords":["train","transportation","vehicle","carriage","public","travel"],"skins":[{"unified":"1f68b","native":"\uD83D\uDE8B"}],"version":1},"bus":{"id":"bus","name":"Bus","keywords":["car","vehicle","transportation"],"skins":[{"unified":"1f68c","native":"\uD83D\uDE8C"}],"version":1},"oncoming_bus":{"id":"oncoming_bus","name":"Oncoming Bus","keywords":["vehicle","transportation"],"skins":[{"unified":"1f68d","native":"\uD83D\uDE8D"}],"version":1},"trolleybus":{"id":"trolleybus","name":"Trolleybus","keywords":["bart","transportation","vehicle"],"skins":[{"unified":"1f68e","native":"\uD83D\uDE8E"}],"version":1},"minibus":{"id":"minibus","name":"Minibus","keywords":["vehicle","car","transportation"],"skins":[{"unified":"1f690","native":"\uD83D\uDE90"}],"version":1},"ambulance":{"id":"ambulance","name":"Ambulance","keywords":["health","911","hospital"],"skins":[{"unified":"1f691","native":"\uD83D\uDE91"}],"version":1},"fire_engine":{"id":"fire_engine","name":"Fire Engine","keywords":["transportation","cars","vehicle"],"skins":[{"unified":"1f692","native":"\uD83D\uDE92"}],"version":1},"police_car":{"id":"police_car","name":"Police Car","keywords":["vehicle","cars","transportation","law","legal","enforcement"],"skins":[{"unified":"1f693","native":"\uD83D\uDE93"}],"version":1},"oncoming_police_car":{"id":"oncoming_police_car","name":"Oncoming Police Car","keywords":["vehicle","law","legal","enforcement","911"],"skins":[{"unified":"1f694","native":"\uD83D\uDE94"}],"version":1},"taxi":{"id":"taxi","name":"Taxi","keywords":["uber","vehicle","cars","transportation"],"skins":[{"unified":"1f695","native":"\uD83D\uDE95"}],"version":1},"oncoming_taxi":{"id":"oncoming_taxi","name":"Oncoming Taxi","keywords":["vehicle","cars","uber"],"skins":[{"unified":"1f696","native":"\uD83D\uDE96"}],"version":1},"car":{"id":"car","name":"Automobile","keywords":["car","red","transportation","vehicle"],"skins":[{"unified":"1f697","native":"\uD83D\uDE97"}],"version":1},"oncoming_automobile":{"id":"oncoming_automobile","name":"Oncoming Automobile","keywords":["car","vehicle","transportation"],"skins":[{"unified":"1f698","native":"\uD83D\uDE98"}],"version":1},"blue_car":{"id":"blue_car","name":"Recreational Vehicle","keywords":["blue","car","sport","utility","transportation"],"skins":[{"unified":"1f699","native":"\uD83D\uDE99"}],"version":1},"pickup_truck":{"id":"pickup_truck","name":"Pickup Truck","keywords":["car","transportation"],"skins":[{"unified":"1f6fb","native":"\uD83D\uDEFB"}],"version":13},"truck":{"id":"truck","name":"Delivery Truck","keywords":["cars","transportation"],"skins":[{"unified":"1f69a","native":"\uD83D\uDE9A"}],"version":1},"articulated_lorry":{"id":"articulated_lorry","name":"Articulated Lorry","keywords":["vehicle","cars","transportation","express"],"skins":[{"unified":"1f69b","native":"\uD83D\uDE9B"}],"version":1},"tractor":{"id":"tractor","name":"Tractor","keywords":["vehicle","car","farming","agriculture"],"skins":[{"unified":"1f69c","native":"\uD83D\uDE9C"}],"version":1},"racing_car":{"id":"racing_car","name":"Racing Car","keywords":["sports","race","fast","formula","f1"],"skins":[{"unified":"1f3ce-fe0f","native":"\uD83C\uDFCE\uFE0F"}],"version":1},"racing_motorcycle":{"id":"racing_motorcycle","name":"Motorcycle","keywords":["racing","race","sports","fast"],"skins":[{"unified":"1f3cd-fe0f","native":"\uD83C\uDFCD\uFE0F"}],"version":1},"motor_scooter":{"id":"motor_scooter","name":"Motor Scooter","keywords":["vehicle","vespa","sasha"],"skins":[{"unified":"1f6f5","native":"\uD83D\uDEF5"}],"version":3},"manual_wheelchair":{"id":"manual_wheelchair","name":"Manual Wheelchair","keywords":["accessibility"],"skins":[{"unified":"1f9bd","native":"\uD83E\uDDBD"}],"version":12},"motorized_wheelchair":{"id":"motorized_wheelchair","name":"Motorized Wheelchair","keywords":["accessibility"],"skins":[{"unified":"1f9bc","native":"\uD83E\uDDBC"}],"version":12},"auto_rickshaw":{"id":"auto_rickshaw","name":"Auto Rickshaw","keywords":["move","transportation"],"skins":[{"unified":"1f6fa","native":"\uD83D\uDEFA"}],"version":12},"bike":{"id":"bike","name":"Bicycle","keywords":["bike","sports","exercise","hipster"],"skins":[{"unified":"1f6b2","native":"\uD83D\uDEB2"}],"version":1},"scooter":{"id":"scooter","name":"Scooter","keywords":["kick","vehicle","razor"],"skins":[{"unified":"1f6f4","native":"\uD83D\uDEF4"}],"version":3},"skateboard":{"id":"skateboard","name":"Skateboard","keywords":["board"],"skins":[{"unified":"1f6f9","native":"\uD83D\uDEF9"}],"version":11},"roller_skate":{"id":"roller_skate","name":"Roller Skate","keywords":["footwear","sports"],"skins":[{"unified":"1f6fc","native":"\uD83D\uDEFC"}],"version":13},"busstop":{"id":"busstop","name":"Bus Stop","keywords":["busstop","transportation","wait"],"skins":[{"unified":"1f68f","native":"\uD83D\uDE8F"}],"version":1},"motorway":{"id":"motorway","name":"Motorway","keywords":["road","cupertino","interstate","highway"],"skins":[{"unified":"1f6e3-fe0f","native":"\uD83D\uDEE3\uFE0F"}],"version":1},"railway_track":{"id":"railway_track","name":"Railway Track","keywords":["train","transportation"],"skins":[{"unified":"1f6e4-fe0f","native":"\uD83D\uDEE4\uFE0F"}],"version":1},"oil_drum":{"id":"oil_drum","name":"Oil Drum","keywords":["barrell"],"skins":[{"unified":"1f6e2-fe0f","native":"\uD83D\uDEE2\uFE0F"}],"version":1},"fuelpump":{"id":"fuelpump","name":"Fuel Pump","keywords":["fuelpump","gas","station","petroleum"],"skins":[{"unified":"26fd","native":"\u26FD"}],"version":1},"wheel":{"id":"wheel","name":"Wheel","keywords":["car","transport"],"skins":[{"unified":"1f6de","native":"\uD83D\uDEDE"}],"version":14},"rotating_light":{"id":"rotating_light","name":"Police Car Light","keywords":["rotating","ambulance","911","emergency","alert","error","pinged","law","legal"],"skins":[{"unified":"1f6a8","native":"\uD83D\uDEA8"}],"version":1},"traffic_light":{"id":"traffic_light","name":"Horizontal Traffic Light","keywords":["transportation","signal"],"skins":[{"unified":"1f6a5","native":"\uD83D\uDEA5"}],"version":1},"vertical_traffic_light":{"id":"vertical_traffic_light","name":"Vertical Traffic Light","keywords":["transportation","driving"],"skins":[{"unified":"1f6a6","native":"\uD83D\uDEA6"}],"version":1},"octagonal_sign":{"id":"octagonal_sign","name":"Stop Sign","keywords":["octagonal"],"skins":[{"unified":"1f6d1","native":"\uD83D\uDED1"}],"version":3},"construction":{"id":"construction","name":"Construction","keywords":["wip","progress","caution","warning"],"skins":[{"unified":"1f6a7","native":"\uD83D\uDEA7"}],"version":1},"anchor":{"id":"anchor","name":"Anchor","keywords":["ship","ferry","sea","boat"],"skins":[{"unified":"2693","native":"\u2693"}],"version":1},"ring_buoy":{"id":"ring_buoy","name":"Ring Buoy","keywords":["life","saver","preserver"],"skins":[{"unified":"1f6df","native":"\uD83D\uDEDF"}],"version":14},"boat":{"id":"boat","name":"Sailboat","keywords":["boat","ship","summer","transportation","water","sailing"],"skins":[{"unified":"26f5","native":"\u26F5"}],"version":1},"canoe":{"id":"canoe","name":"Canoe","keywords":["boat","paddle","water","ship"],"skins":[{"unified":"1f6f6","native":"\uD83D\uDEF6"}],"version":3},"speedboat":{"id":"speedboat","name":"Speedboat","keywords":["ship","transportation","vehicle","summer"],"skins":[{"unified":"1f6a4","native":"\uD83D\uDEA4"}],"version":1},"passenger_ship":{"id":"passenger_ship","name":"Passenger Ship","keywords":["yacht","cruise","ferry"],"skins":[{"unified":"1f6f3-fe0f","native":"\uD83D\uDEF3\uFE0F"}],"version":1},"ferry":{"id":"ferry","name":"Ferry","keywords":["boat","ship","yacht"],"skins":[{"unified":"26f4-fe0f","native":"\u26F4\uFE0F"}],"version":1},"motor_boat":{"id":"motor_boat","name":"Motor Boat","keywords":["ship"],"skins":[{"unified":"1f6e5-fe0f","native":"\uD83D\uDEE5\uFE0F"}],"version":1},"ship":{"id":"ship","name":"Ship","keywords":["transportation","titanic","deploy"],"skins":[{"unified":"1f6a2","native":"\uD83D\uDEA2"}],"version":1},"airplane":{"id":"airplane","name":"Airplane","keywords":["vehicle","transportation","flight","fly"],"skins":[{"unified":"2708-fe0f","native":"\u2708\uFE0F"}],"version":1},"small_airplane":{"id":"small_airplane","name":"Small Airplane","keywords":["flight","transportation","fly","vehicle"],"skins":[{"unified":"1f6e9-fe0f","native":"\uD83D\uDEE9\uFE0F"}],"version":1},"airplane_departure":{"id":"airplane_departure","name":"Airplane Departure","keywords":["airport","flight","landing"],"skins":[{"unified":"1f6eb","native":"\uD83D\uDEEB"}],"version":1},"airplane_arriving":{"id":"airplane_arriving","name":"Airplane Arrival","keywords":["arriving","airport","flight","boarding"],"skins":[{"unified":"1f6ec","native":"\uD83D\uDEEC"}],"version":1},"parachute":{"id":"parachute","name":"Parachute","keywords":["fly","glide"],"skins":[{"unified":"1fa82","native":"\uD83E\uDE82"}],"version":12},"seat":{"id":"seat","name":"Seat","keywords":["sit","airplane","transport","bus","flight","fly"],"skins":[{"unified":"1f4ba","native":"\uD83D\uDCBA"}],"version":1},"helicopter":{"id":"helicopter","name":"Helicopter","keywords":["transportation","vehicle","fly"],"skins":[{"unified":"1f681","native":"\uD83D\uDE81"}],"version":1},"suspension_railway":{"id":"suspension_railway","name":"Suspension Railway","keywords":["vehicle","transportation"],"skins":[{"unified":"1f69f","native":"\uD83D\uDE9F"}],"version":1},"mountain_cableway":{"id":"mountain_cableway","name":"Mountain Cableway","keywords":["transportation","vehicle","ski"],"skins":[{"unified":"1f6a0","native":"\uD83D\uDEA0"}],"version":1},"aerial_tramway":{"id":"aerial_tramway","name":"Aerial Tramway","keywords":["transportation","vehicle","ski"],"skins":[{"unified":"1f6a1","native":"\uD83D\uDEA1"}],"version":1},"satellite":{"id":"satellite","name":"Satellite","keywords":["communication","gps","orbit","spaceflight","NASA","ISS"],"skins":[{"unified":"1f6f0-fe0f","native":"\uD83D\uDEF0\uFE0F"}],"version":1},"rocket":{"id":"rocket","name":"Rocket","keywords":["launch","ship","staffmode","NASA","outer","space","fly"],"skins":[{"unified":"1f680","native":"\uD83D\uDE80"}],"version":1},"flying_saucer":{"id":"flying_saucer","name":"Flying Saucer","keywords":["transportation","vehicle","ufo"],"skins":[{"unified":"1f6f8","native":"\uD83D\uDEF8"}],"version":5},"bellhop_bell":{"id":"bellhop_bell","name":"Bellhop Bell","keywords":["service"],"skins":[{"unified":"1f6ce-fe0f","native":"\uD83D\uDECE\uFE0F"}],"version":1},"luggage":{"id":"luggage","name":"Luggage","keywords":["packing","travel"],"skins":[{"unified":"1f9f3","native":"\uD83E\uDDF3"}],"version":11},"hourglass":{"id":"hourglass","name":"Hourglass","keywords":["done","time","clock","oldschool","limit","exam","quiz","test"],"skins":[{"unified":"231b","native":"\u231B"}],"version":1},"hourglass_flowing_sand":{"id":"hourglass_flowing_sand","name":"Hourglass Not Done","keywords":["flowing","sand","oldschool","time","countdown"],"skins":[{"unified":"23f3","native":"\u23F3"}],"version":1},"watch":{"id":"watch","name":"Watch","keywords":["time","accessories"],"skins":[{"unified":"231a","native":"\u231A"}],"version":1},"alarm_clock":{"id":"alarm_clock","name":"Alarm Clock","keywords":["time","wake"],"skins":[{"unified":"23f0","native":"\u23F0"}],"version":1},"stopwatch":{"id":"stopwatch","name":"Stopwatch","keywords":["time","deadline"],"skins":[{"unified":"23f1-fe0f","native":"\u23F1\uFE0F"}],"version":1},"timer_clock":{"id":"timer_clock","name":"Timer Clock","keywords":["alarm"],"skins":[{"unified":"23f2-fe0f","native":"\u23F2\uFE0F"}],"version":1},"mantelpiece_clock":{"id":"mantelpiece_clock","name":"Mantelpiece Clock","keywords":["time"],"skins":[{"unified":"1f570-fe0f","native":"\uD83D\uDD70\uFE0F"}],"version":1},"clock12":{"id":"clock12","name":"Twelve O\u2019clock","keywords":["clock12","o","clock","time","noon","midnight","midday","late","early","schedule"],"skins":[{"unified":"1f55b","native":"\uD83D\uDD5B"}],"version":1},"clock1230":{"id":"clock1230","name":"Twelve-Thirty","keywords":["clock1230","twelve","thirty","time","late","early","schedule"],"skins":[{"unified":"1f567","native":"\uD83D\uDD67"}],"version":1},"clock1":{"id":"clock1","name":"One O\u2019clock","keywords":["clock1","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f550","native":"\uD83D\uDD50"}],"version":1},"clock130":{"id":"clock130","name":"One-Thirty","keywords":["clock130","one","thirty","time","late","early","schedule"],"skins":[{"unified":"1f55c","native":"\uD83D\uDD5C"}],"version":1},"clock2":{"id":"clock2","name":"Two O\u2019clock","keywords":["clock2","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f551","native":"\uD83D\uDD51"}],"version":1},"clock230":{"id":"clock230","name":"Two-Thirty","keywords":["clock230","two","thirty","time","late","early","schedule"],"skins":[{"unified":"1f55d","native":"\uD83D\uDD5D"}],"version":1},"clock3":{"id":"clock3","name":"Three O\u2019clock","keywords":["clock3","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f552","native":"\uD83D\uDD52"}],"version":1},"clock330":{"id":"clock330","name":"Three-Thirty","keywords":["clock330","three","thirty","time","late","early","schedule"],"skins":[{"unified":"1f55e","native":"\uD83D\uDD5E"}],"version":1},"clock4":{"id":"clock4","name":"Four O\u2019clock","keywords":["clock4","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f553","native":"\uD83D\uDD53"}],"version":1},"clock430":{"id":"clock430","name":"Four-Thirty","keywords":["clock430","four","thirty","time","late","early","schedule"],"skins":[{"unified":"1f55f","native":"\uD83D\uDD5F"}],"version":1},"clock5":{"id":"clock5","name":"Five O\u2019clock","keywords":["clock5","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f554","native":"\uD83D\uDD54"}],"version":1},"clock530":{"id":"clock530","name":"Five-Thirty","keywords":["clock530","five","thirty","time","late","early","schedule"],"skins":[{"unified":"1f560","native":"\uD83D\uDD60"}],"version":1},"clock6":{"id":"clock6","name":"Six O\u2019clock","keywords":["clock6","o","clock","time","late","early","schedule","dawn","dusk"],"skins":[{"unified":"1f555","native":"\uD83D\uDD55"}],"version":1},"clock630":{"id":"clock630","name":"Six-Thirty","keywords":["clock630","six","thirty","time","late","early","schedule"],"skins":[{"unified":"1f561","native":"\uD83D\uDD61"}],"version":1},"clock7":{"id":"clock7","name":"Seven O\u2019clock","keywords":["clock7","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f556","native":"\uD83D\uDD56"}],"version":1},"clock730":{"id":"clock730","name":"Seven-Thirty","keywords":["clock730","seven","thirty","time","late","early","schedule"],"skins":[{"unified":"1f562","native":"\uD83D\uDD62"}],"version":1},"clock8":{"id":"clock8","name":"Eight O\u2019clock","keywords":["clock8","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f557","native":"\uD83D\uDD57"}],"version":1},"clock830":{"id":"clock830","name":"Eight-Thirty","keywords":["clock830","eight","thirty","time","late","early","schedule"],"skins":[{"unified":"1f563","native":"\uD83D\uDD63"}],"version":1},"clock9":{"id":"clock9","name":"Nine O\u2019clock","keywords":["clock9","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f558","native":"\uD83D\uDD58"}],"version":1},"clock930":{"id":"clock930","name":"Nine-Thirty","keywords":["clock930","nine","thirty","time","late","early","schedule"],"skins":[{"unified":"1f564","native":"\uD83D\uDD64"}],"version":1},"clock10":{"id":"clock10","name":"Ten O\u2019clock","keywords":["clock10","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f559","native":"\uD83D\uDD59"}],"version":1},"clock1030":{"id":"clock1030","name":"Ten-Thirty","keywords":["clock1030","ten","thirty","time","late","early","schedule"],"skins":[{"unified":"1f565","native":"\uD83D\uDD65"}],"version":1},"clock11":{"id":"clock11","name":"Eleven O\u2019clock","keywords":["clock11","o","clock","time","late","early","schedule"],"skins":[{"unified":"1f55a","native":"\uD83D\uDD5A"}],"version":1},"clock1130":{"id":"clock1130","name":"Eleven-Thirty","keywords":["clock1130","eleven","thirty","time","late","early","schedule"],"skins":[{"unified":"1f566","native":"\uD83D\uDD66"}],"version":1},"new_moon":{"id":"new_moon","name":"New Moon","keywords":["nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f311","native":"\uD83C\uDF11"}],"version":1},"waxing_crescent_moon":{"id":"waxing_crescent_moon","name":"Waxing Crescent Moon","keywords":["nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f312","native":"\uD83C\uDF12"}],"version":1},"first_quarter_moon":{"id":"first_quarter_moon","name":"First Quarter Moon","keywords":["nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f313","native":"\uD83C\uDF13"}],"version":1},"moon":{"id":"moon","name":"Waxing Gibbous Moon","keywords":["nature","night","sky","gray","twilight","planet","space","evening","sleep"],"skins":[{"unified":"1f314","native":"\uD83C\uDF14"}],"version":1},"full_moon":{"id":"full_moon","name":"Full Moon","keywords":["nature","yellow","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f315","native":"\uD83C\uDF15"}],"version":1},"waning_gibbous_moon":{"id":"waning_gibbous_moon","name":"Waning Gibbous Moon","keywords":["nature","twilight","planet","space","night","evening","sleep","waxing"],"skins":[{"unified":"1f316","native":"\uD83C\uDF16"}],"version":1},"last_quarter_moon":{"id":"last_quarter_moon","name":"Last Quarter Moon","keywords":["nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f317","native":"\uD83C\uDF17"}],"version":1},"waning_crescent_moon":{"id":"waning_crescent_moon","name":"Waning Crescent Moon","keywords":["nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f318","native":"\uD83C\uDF18"}],"version":1},"crescent_moon":{"id":"crescent_moon","name":"Crescent Moon","keywords":["night","sleep","sky","evening","magic"],"skins":[{"unified":"1f319","native":"\uD83C\uDF19"}],"version":1},"new_moon_with_face":{"id":"new_moon_with_face","name":"New Moon Face","keywords":["with","nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f31a","native":"\uD83C\uDF1A"}],"version":1},"first_quarter_moon_with_face":{"id":"first_quarter_moon_with_face","name":"First Quarter Moon Face","keywords":["with","nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f31b","native":"\uD83C\uDF1B"}],"version":1},"last_quarter_moon_with_face":{"id":"last_quarter_moon_with_face","name":"Last Quarter Moon Face","keywords":["with","nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f31c","native":"\uD83C\uDF1C"}],"version":1},"thermometer":{"id":"thermometer","name":"Thermometer","keywords":["weather","temperature","hot","cold"],"skins":[{"unified":"1f321-fe0f","native":"\uD83C\uDF21\uFE0F"}],"version":1},"sunny":{"id":"sunny","name":"Sun","keywords":["sunny","weather","nature","brightness","summer","beach","spring"],"skins":[{"unified":"2600-fe0f","native":"\u2600\uFE0F"}],"version":1},"full_moon_with_face":{"id":"full_moon_with_face","name":"Full Moon Face","keywords":["with","nature","twilight","planet","space","night","evening","sleep"],"skins":[{"unified":"1f31d","native":"\uD83C\uDF1D"}],"version":1},"sun_with_face":{"id":"sun_with_face","name":"Sun with Face","keywords":["nature","morning","sky"],"skins":[{"unified":"1f31e","native":"\uD83C\uDF1E"}],"version":1},"ringed_planet":{"id":"ringed_planet","name":"Ringed Planet","keywords":["outerspace"],"skins":[{"unified":"1fa90","native":"\uD83E\uDE90"}],"version":12},"star":{"id":"star","name":"Star","keywords":["night","yellow"],"skins":[{"unified":"2b50","native":"\u2B50"}],"version":1},"star2":{"id":"star2","name":"Glowing Star","keywords":["star2","night","sparkle","awesome","good","magic"],"skins":[{"unified":"1f31f","native":"\uD83C\uDF1F"}],"version":1},"stars":{"id":"stars","name":"Shooting Star","keywords":["stars","night","photo"],"skins":[{"unified":"1f320","native":"\uD83C\uDF20"}],"version":1},"milky_way":{"id":"milky_way","name":"Milky Way","keywords":["photo","space","stars"],"skins":[{"unified":"1f30c","native":"\uD83C\uDF0C"}],"version":1},"cloud":{"id":"cloud","name":"Cloud","keywords":["weather","sky"],"skins":[{"unified":"2601-fe0f","native":"\u2601\uFE0F"}],"version":1},"partly_sunny":{"id":"partly_sunny","name":"Sun Behind Cloud","keywords":["partly","sunny","weather","nature","cloudy","morning","fall","spring"],"skins":[{"unified":"26c5","native":"\u26C5"}],"version":1},"thunder_cloud_and_rain":{"id":"thunder_cloud_and_rain","name":"Cloud with Lightning and Rain","keywords":["thunder","weather"],"skins":[{"unified":"26c8-fe0f","native":"\u26C8\uFE0F"}],"version":1},"mostly_sunny":{"id":"mostly_sunny","name":"Sun Behind Small Cloud","keywords":["mostly","sunny","weather"],"skins":[{"unified":"1f324-fe0f","native":"\uD83C\uDF24\uFE0F"}],"version":1},"barely_sunny":{"id":"barely_sunny","name":"Sun Behind Large Cloud","keywords":["barely","sunny","weather"],"skins":[{"unified":"1f325-fe0f","native":"\uD83C\uDF25\uFE0F"}],"version":1},"partly_sunny_rain":{"id":"partly_sunny_rain","name":"Sun Behind Rain Cloud","keywords":["partly","sunny","weather"],"skins":[{"unified":"1f326-fe0f","native":"\uD83C\uDF26\uFE0F"}],"version":1},"rain_cloud":{"id":"rain_cloud","name":"Cloud with Rain","keywords":["weather"],"skins":[{"unified":"1f327-fe0f","native":"\uD83C\uDF27\uFE0F"}],"version":1},"snow_cloud":{"id":"snow_cloud","name":"Cloud with Snow","keywords":["weather"],"skins":[{"unified":"1f328-fe0f","native":"\uD83C\uDF28\uFE0F"}],"version":1},"lightning":{"id":"lightning","name":"Cloud with Lightning","keywords":["weather","thunder"],"skins":[{"unified":"1f329-fe0f","native":"\uD83C\uDF29\uFE0F"}],"version":1},"tornado":{"id":"tornado","name":"Tornado","keywords":["cloud","weather","cyclone","twister"],"skins":[{"unified":"1f32a-fe0f","native":"\uD83C\uDF2A\uFE0F"}],"version":1},"fog":{"id":"fog","name":"Fog","keywords":["weather"],"skins":[{"unified":"1f32b-fe0f","native":"\uD83C\uDF2B\uFE0F"}],"version":1},"wind_blowing_face":{"id":"wind_blowing_face","name":"Wind Face","keywords":["blowing","gust","air"],"skins":[{"unified":"1f32c-fe0f","native":"\uD83C\uDF2C\uFE0F"}],"version":1},"cyclone":{"id":"cyclone","name":"Cyclone","keywords":["weather","swirl","blue","cloud","vortex","spiral","whirlpool","spin","tornado","hurricane","typhoon"],"skins":[{"unified":"1f300","native":"\uD83C\uDF00"}],"version":1},"rainbow":{"id":"rainbow","name":"Rainbow","keywords":["nature","happy","unicorn","face","photo","sky","spring"],"skins":[{"unified":"1f308","native":"\uD83C\uDF08"}],"version":1},"closed_umbrella":{"id":"closed_umbrella","name":"Closed Umbrella","keywords":["weather","rain","drizzle"],"skins":[{"unified":"1f302","native":"\uD83C\uDF02"}],"version":1},"umbrella":{"id":"umbrella","name":"Umbrella","keywords":["weather","spring"],"skins":[{"unified":"2602-fe0f","native":"\u2602\uFE0F"}],"version":1},"umbrella_with_rain_drops":{"id":"umbrella_with_rain_drops","name":"Umbrella with Rain Drops","keywords":["rainy","weather","spring"],"skins":[{"unified":"2614","native":"\u2614"}],"version":1},"umbrella_on_ground":{"id":"umbrella_on_ground","name":"Umbrella on Ground","keywords":["weather","summer"],"skins":[{"unified":"26f1-fe0f","native":"\u26F1\uFE0F"}],"version":1},"zap":{"id":"zap","name":"High Voltage","keywords":["zap","thunder","weather","lightning","bolt","fast"],"skins":[{"unified":"26a1","native":"\u26A1"}],"version":1},"snowflake":{"id":"snowflake","name":"Snowflake","keywords":["winter","season","cold","weather","christmas","xmas"],"skins":[{"unified":"2744-fe0f","native":"\u2744\uFE0F"}],"version":1},"snowman":{"id":"snowman","name":"Snowman","keywords":["winter","season","cold","weather","christmas","xmas","frozen"],"skins":[{"unified":"2603-fe0f","native":"\u2603\uFE0F"}],"version":1},"snowman_without_snow":{"id":"snowman_without_snow","name":"Snowman Without Snow","keywords":["winter","season","cold","weather","christmas","xmas","frozen"],"skins":[{"unified":"26c4","native":"\u26C4"}],"version":1},"comet":{"id":"comet","name":"Comet","keywords":["space"],"skins":[{"unified":"2604-fe0f","native":"\u2604\uFE0F"}],"version":1},"fire":{"id":"fire","name":"Fire","keywords":["hot","cook","flame"],"skins":[{"unified":"1f525","native":"\uD83D\uDD25"}],"version":1},"droplet":{"id":"droplet","name":"Droplet","keywords":["water","drip","faucet","spring"],"skins":[{"unified":"1f4a7","native":"\uD83D\uDCA7"}],"version":1},"ocean":{"id":"ocean","name":"Water Wave","keywords":["ocean","sea","nature","tsunami","disaster"],"skins":[{"unified":"1f30a","native":"\uD83C\uDF0A"}],"version":1},"jack_o_lantern":{"id":"jack_o_lantern","name":"Jack-O-Lantern","keywords":["jack","o","lantern","halloween","light","pumpkin","creepy","fall"],"skins":[{"unified":"1f383","native":"\uD83C\uDF83"}],"version":1},"christmas_tree":{"id":"christmas_tree","name":"Christmas Tree","keywords":["festival","vacation","december","xmas","celebration"],"skins":[{"unified":"1f384","native":"\uD83C\uDF84"}],"version":1},"fireworks":{"id":"fireworks","name":"Fireworks","keywords":["photo","festival","carnival","congratulations"],"skins":[{"unified":"1f386","native":"\uD83C\uDF86"}],"version":1},"sparkler":{"id":"sparkler","name":"Sparkler","keywords":["stars","night","shine"],"skins":[{"unified":"1f387","native":"\uD83C\uDF87"}],"version":1},"firecracker":{"id":"firecracker","name":"Firecracker","keywords":["dynamite","boom","explode","explosion","explosive"],"skins":[{"unified":"1f9e8","native":"\uD83E\uDDE8"}],"version":11},"sparkles":{"id":"sparkles","name":"Sparkles","keywords":["stars","shine","shiny","cool","awesome","good","magic"],"skins":[{"unified":"2728","native":"\u2728"}],"version":1},"balloon":{"id":"balloon","name":"Balloon","keywords":["party","celebration","birthday","circus"],"skins":[{"unified":"1f388","native":"\uD83C\uDF88"}],"version":1},"tada":{"id":"tada","name":"Party Popper","keywords":["tada","congratulations","birthday","magic","circus","celebration"],"skins":[{"unified":"1f389","native":"\uD83C\uDF89"}],"version":1},"confetti_ball":{"id":"confetti_ball","name":"Confetti Ball","keywords":["festival","party","birthday","circus"],"skins":[{"unified":"1f38a","native":"\uD83C\uDF8A"}],"version":1},"tanabata_tree":{"id":"tanabata_tree","name":"Tanabata Tree","keywords":["plant","nature","branch","summer"],"skins":[{"unified":"1f38b","native":"\uD83C\uDF8B"}],"version":1},"bamboo":{"id":"bamboo","name":"Pine Decoration","keywords":["bamboo","plant","nature","vegetable","panda"],"skins":[{"unified":"1f38d","native":"\uD83C\uDF8D"}],"version":1},"dolls":{"id":"dolls","name":"Japanese Dolls","keywords":["toy","kimono"],"skins":[{"unified":"1f38e","native":"\uD83C\uDF8E"}],"version":1},"flags":{"id":"flags","name":"Carp Streamer","keywords":["flags","fish","japanese","koinobori","banner"],"skins":[{"unified":"1f38f","native":"\uD83C\uDF8F"}],"version":1},"wind_chime":{"id":"wind_chime","name":"Wind Chime","keywords":["nature","ding","spring","bell"],"skins":[{"unified":"1f390","native":"\uD83C\uDF90"}],"version":1},"rice_scene":{"id":"rice_scene","name":"Moon Viewing Ceremony","keywords":["rice","scene","photo","japan","asia","tsukimi"],"skins":[{"unified":"1f391","native":"\uD83C\uDF91"}],"version":1},"red_envelope":{"id":"red_envelope","name":"Red Envelope","keywords":["gift"],"skins":[{"unified":"1f9e7","native":"\uD83E\uDDE7"}],"version":11},"ribbon":{"id":"ribbon","name":"Ribbon","keywords":["decoration","pink","girl","bowtie"],"skins":[{"unified":"1f380","native":"\uD83C\uDF80"}],"version":1},"gift":{"id":"gift","name":"Wrapped Gift","keywords":["present","birthday","christmas","xmas"],"skins":[{"unified":"1f381","native":"\uD83C\uDF81"}],"version":1},"reminder_ribbon":{"id":"reminder_ribbon","name":"Reminder Ribbon","keywords":["sports","cause","support","awareness"],"skins":[{"unified":"1f397-fe0f","native":"\uD83C\uDF97\uFE0F"}],"version":1},"admission_tickets":{"id":"admission_tickets","name":"Admission Tickets","keywords":["sports","concert","entrance"],"skins":[{"unified":"1f39f-fe0f","native":"\uD83C\uDF9F\uFE0F"}],"version":1},"ticket":{"id":"ticket","name":"Ticket","keywords":["event","concert","pass"],"skins":[{"unified":"1f3ab","native":"\uD83C\uDFAB"}],"version":1},"medal":{"id":"medal","name":"Military Medal","keywords":["award","winning","army"],"skins":[{"unified":"1f396-fe0f","native":"\uD83C\uDF96\uFE0F"}],"version":1},"trophy":{"id":"trophy","name":"Trophy","keywords":["win","award","contest","place","ftw","ceremony"],"skins":[{"unified":"1f3c6","native":"\uD83C\uDFC6"}],"version":1},"sports_medal":{"id":"sports_medal","name":"Sports Medal","keywords":["award","winning"],"skins":[{"unified":"1f3c5","native":"\uD83C\uDFC5"}],"version":1},"first_place_medal":{"id":"first_place_medal","name":"1st Place Medal","keywords":["first","award","winning"],"skins":[{"unified":"1f947","native":"\uD83E\uDD47"}],"version":3},"second_place_medal":{"id":"second_place_medal","name":"2nd Place Medal","keywords":["second","award"],"skins":[{"unified":"1f948","native":"\uD83E\uDD48"}],"version":3},"third_place_medal":{"id":"third_place_medal","name":"3rd Place Medal","keywords":["third","award"],"skins":[{"unified":"1f949","native":"\uD83E\uDD49"}],"version":3},"soccer":{"id":"soccer","name":"Soccer Ball","keywords":["sports","football"],"skins":[{"unified":"26bd","native":"\u26BD"}],"version":1},"baseball":{"id":"baseball","name":"Baseball","keywords":["sports","balls"],"skins":[{"unified":"26be","native":"\u26BE"}],"version":1},"softball":{"id":"softball","name":"Softball","keywords":["sports","balls"],"skins":[{"unified":"1f94e","native":"\uD83E\uDD4E"}],"version":11},"basketball":{"id":"basketball","name":"Basketball","keywords":["sports","balls","NBA"],"skins":[{"unified":"1f3c0","native":"\uD83C\uDFC0"}],"version":1},"volleyball":{"id":"volleyball","name":"Volleyball","keywords":["sports","balls"],"skins":[{"unified":"1f3d0","native":"\uD83C\uDFD0"}],"version":1},"football":{"id":"football","name":"American Football","keywords":["sports","balls","NFL"],"skins":[{"unified":"1f3c8","native":"\uD83C\uDFC8"}],"version":1},"rugby_football":{"id":"rugby_football","name":"Rugby Football","keywords":["sports","team"],"skins":[{"unified":"1f3c9","native":"\uD83C\uDFC9"}],"version":1},"tennis":{"id":"tennis","name":"Tennis","keywords":["sports","balls","green"],"skins":[{"unified":"1f3be","native":"\uD83C\uDFBE"}],"version":1},"flying_disc":{"id":"flying_disc","name":"Flying Disc","keywords":["sports","frisbee","ultimate"],"skins":[{"unified":"1f94f","native":"\uD83E\uDD4F"}],"version":11},"bowling":{"id":"bowling","name":"Bowling","keywords":["sports","fun","play"],"skins":[{"unified":"1f3b3","native":"\uD83C\uDFB3"}],"version":1},"cricket_bat_and_ball":{"id":"cricket_bat_and_ball","name":"Cricket Game","keywords":["bat","and","ball","sports"],"skins":[{"unified":"1f3cf","native":"\uD83C\uDFCF"}],"version":1},"field_hockey_stick_and_ball":{"id":"field_hockey_stick_and_ball","name":"Field Hockey","keywords":["stick","and","ball","sports"],"skins":[{"unified":"1f3d1","native":"\uD83C\uDFD1"}],"version":1},"ice_hockey_stick_and_puck":{"id":"ice_hockey_stick_and_puck","name":"Ice Hockey","keywords":["stick","and","puck","sports"],"skins":[{"unified":"1f3d2","native":"\uD83C\uDFD2"}],"version":1},"lacrosse":{"id":"lacrosse","name":"Lacrosse","keywords":["sports","ball","stick"],"skins":[{"unified":"1f94d","native":"\uD83E\uDD4D"}],"version":11},"table_tennis_paddle_and_ball":{"id":"table_tennis_paddle_and_ball","name":"Ping Pong","keywords":["table","tennis","paddle","and","ball","sports","pingpong"],"skins":[{"unified":"1f3d3","native":"\uD83C\uDFD3"}],"version":1},"badminton_racquet_and_shuttlecock":{"id":"badminton_racquet_and_shuttlecock","name":"Badminton","keywords":["racquet","and","shuttlecock","sports"],"skins":[{"unified":"1f3f8","native":"\uD83C\uDFF8"}],"version":1},"boxing_glove":{"id":"boxing_glove","name":"Boxing Glove","keywords":["sports","fighting"],"skins":[{"unified":"1f94a","native":"\uD83E\uDD4A"}],"version":3},"martial_arts_uniform":{"id":"martial_arts_uniform","name":"Martial Arts Uniform","keywords":["judo","karate","taekwondo"],"skins":[{"unified":"1f94b","native":"\uD83E\uDD4B"}],"version":3},"goal_net":{"id":"goal_net","name":"Goal Net","keywords":["sports"],"skins":[{"unified":"1f945","native":"\uD83E\uDD45"}],"version":3},"golf":{"id":"golf","name":"Flag in Hole","keywords":["golf","sports","business","summer"],"skins":[{"unified":"26f3","native":"\u26F3"}],"version":1},"ice_skate":{"id":"ice_skate","name":"Ice Skate","keywords":["sports"],"skins":[{"unified":"26f8-fe0f","native":"\u26F8\uFE0F"}],"version":1},"fishing_pole_and_fish":{"id":"fishing_pole_and_fish","name":"Fishing Pole","keywords":["and","fish","food","hobby","summer"],"skins":[{"unified":"1f3a3","native":"\uD83C\uDFA3"}],"version":1},"diving_mask":{"id":"diving_mask","name":"Diving Mask","keywords":["sport","ocean"],"skins":[{"unified":"1f93f","native":"\uD83E\uDD3F"}],"version":12},"running_shirt_with_sash":{"id":"running_shirt_with_sash","name":"Running Shirt","keywords":["with","sash","play","pageant"],"skins":[{"unified":"1f3bd","native":"\uD83C\uDFBD"}],"version":1},"ski":{"id":"ski","name":"Skis","keywords":["ski","sports","winter","cold","snow"],"skins":[{"unified":"1f3bf","native":"\uD83C\uDFBF"}],"version":1},"sled":{"id":"sled","name":"Sled","keywords":["sleigh","luge","toboggan"],"skins":[{"unified":"1f6f7","native":"\uD83D\uDEF7"}],"version":5},"curling_stone":{"id":"curling_stone","name":"Curling Stone","keywords":["sports"],"skins":[{"unified":"1f94c","native":"\uD83E\uDD4C"}],"version":5},"dart":{"id":"dart","name":"Bullseye","keywords":["dart","direct","hit","game","play","bar","target"],"skins":[{"unified":"1f3af","native":"\uD83C\uDFAF"}],"version":1},"yo-yo":{"id":"yo-yo","name":"Yo-Yo","keywords":["yo","toy"],"skins":[{"unified":"1fa80","native":"\uD83E\uDE80"}],"version":12},"kite":{"id":"kite","name":"Kite","keywords":["wind","fly"],"skins":[{"unified":"1fa81","native":"\uD83E\uDE81"}],"version":12},"8ball":{"id":"8ball","name":"Billiards","keywords":["8ball","pool","8","ball","hobby","game","luck","magic"],"skins":[{"unified":"1f3b1","native":"\uD83C\uDFB1"}],"version":1},"crystal_ball":{"id":"crystal_ball","name":"Crystal Ball","keywords":["disco","party","magic","circus","fortune","teller"],"skins":[{"unified":"1f52e","native":"\uD83D\uDD2E"}],"version":1},"magic_wand":{"id":"magic_wand","name":"Magic Wand","keywords":["supernature","power"],"skins":[{"unified":"1fa84","native":"\uD83E\uDE84"}],"version":13},"nazar_amulet":{"id":"nazar_amulet","name":"Nazar Amulet","keywords":["bead","charm"],"skins":[{"unified":"1f9ff","native":"\uD83E\uDDFF"}],"version":11},"hamsa":{"id":"hamsa","name":"Hamsa","keywords":["religion","protection"],"skins":[{"unified":"1faac","native":"\uD83E\uDEAC"}],"version":14},"video_game":{"id":"video_game","name":"Video Game","keywords":["play","console","PS4","controller"],"skins":[{"unified":"1f3ae","native":"\uD83C\uDFAE"}],"version":1},"joystick":{"id":"joystick","name":"Joystick","keywords":["game","play"],"skins":[{"unified":"1f579-fe0f","native":"\uD83D\uDD79\uFE0F"}],"version":1},"slot_machine":{"id":"slot_machine","name":"Slot Machine","keywords":["bet","gamble","vegas","fruit","luck","casino"],"skins":[{"unified":"1f3b0","native":"\uD83C\uDFB0"}],"version":1},"game_die":{"id":"game_die","name":"Game Die","keywords":["dice","random","tabletop","play","luck"],"skins":[{"unified":"1f3b2","native":"\uD83C\uDFB2"}],"version":1},"jigsaw":{"id":"jigsaw","name":"Puzzle Piece","keywords":["jigsaw","interlocking"],"skins":[{"unified":"1f9e9","native":"\uD83E\uDDE9"}],"version":11},"teddy_bear":{"id":"teddy_bear","name":"Teddy Bear","keywords":["plush","stuffed"],"skins":[{"unified":"1f9f8","native":"\uD83E\uDDF8"}],"version":11},"pinata":{"id":"pinata","name":"Pinata","keywords":["mexico","candy","celebration"],"skins":[{"unified":"1fa85","native":"\uD83E\uDE85"}],"version":13},"mirror_ball":{"id":"mirror_ball","name":"Mirror Ball","keywords":["disco","dance","party"],"skins":[{"unified":"1faa9","native":"\uD83E\uDEA9"}],"version":14},"nesting_dolls":{"id":"nesting_dolls","name":"Nesting Dolls","keywords":["matryoshka","toy"],"skins":[{"unified":"1fa86","native":"\uD83E\uDE86"}],"version":13},"spades":{"id":"spades","name":"Spade Suit","keywords":["spades","poker","cards","suits","magic"],"skins":[{"unified":"2660-fe0f","native":"\u2660\uFE0F"}],"version":1},"hearts":{"id":"hearts","name":"Heart Suit","keywords":["hearts","poker","cards","magic","suits"],"skins":[{"unified":"2665-fe0f","native":"\u2665\uFE0F"}],"version":1},"diamonds":{"id":"diamonds","name":"Diamond Suit","keywords":["diamonds","poker","cards","magic","suits"],"skins":[{"unified":"2666-fe0f","native":"\u2666\uFE0F"}],"version":1},"clubs":{"id":"clubs","name":"Club Suit","keywords":["clubs","poker","cards","magic","suits"],"skins":[{"unified":"2663-fe0f","native":"\u2663\uFE0F"}],"version":1},"chess_pawn":{"id":"chess_pawn","name":"Chess Pawn","keywords":["expendable"],"skins":[{"unified":"265f-fe0f","native":"\u265F\uFE0F"}],"version":11},"black_joker":{"id":"black_joker","name":"Joker","keywords":["black","poker","cards","game","play","magic"],"skins":[{"unified":"1f0cf","native":"\uD83C\uDCCF"}],"version":1},"mahjong":{"id":"mahjong","name":"Mahjong Red Dragon","keywords":["game","play","chinese","kanji"],"skins":[{"unified":"1f004","native":"\uD83C\uDC04"}],"version":1},"flower_playing_cards":{"id":"flower_playing_cards","name":"Flower Playing Cards","keywords":["game","sunset","red"],"skins":[{"unified":"1f3b4","native":"\uD83C\uDFB4"}],"version":1},"performing_arts":{"id":"performing_arts","name":"Performing Arts","keywords":["acting","theater","drama"],"skins":[{"unified":"1f3ad","native":"\uD83C\uDFAD"}],"version":1},"frame_with_picture":{"id":"frame_with_picture","name":"Framed Picture","keywords":["frame","with","photography"],"skins":[{"unified":"1f5bc-fe0f","native":"\uD83D\uDDBC\uFE0F"}],"version":1},"art":{"id":"art","name":"Artist Palette","keywords":["art","design","paint","draw","colors"],"skins":[{"unified":"1f3a8","native":"\uD83C\uDFA8"}],"version":1},"thread":{"id":"thread","name":"Thread","keywords":["needle","sewing","spool","string"],"skins":[{"unified":"1f9f5","native":"\uD83E\uDDF5"}],"version":11},"sewing_needle":{"id":"sewing_needle","name":"Sewing Needle","keywords":["stitches"],"skins":[{"unified":"1faa1","native":"\uD83E\uDEA1"}],"version":13},"yarn":{"id":"yarn","name":"Yarn","keywords":["ball","crochet","knit"],"skins":[{"unified":"1f9f6","native":"\uD83E\uDDF6"}],"version":11},"knot":{"id":"knot","name":"Knot","keywords":["rope","scout"],"skins":[{"unified":"1faa2","native":"\uD83E\uDEA2"}],"version":13},"eyeglasses":{"id":"eyeglasses","name":"Glasses","keywords":["eyeglasses","fashion","accessories","eyesight","nerdy","dork","geek"],"skins":[{"unified":"1f453","native":"\uD83D\uDC53"}],"version":1},"dark_sunglasses":{"id":"dark_sunglasses","name":"Sunglasses","keywords":["dark","face","cool","accessories"],"skins":[{"unified":"1f576-fe0f","native":"\uD83D\uDD76\uFE0F"}],"version":1},"goggles":{"id":"goggles","name":"Goggles","keywords":["eyes","protection","safety"],"skins":[{"unified":"1f97d","native":"\uD83E\uDD7D"}],"version":11},"lab_coat":{"id":"lab_coat","name":"Lab Coat","keywords":["doctor","experiment","scientist","chemist"],"skins":[{"unified":"1f97c","native":"\uD83E\uDD7C"}],"version":11},"safety_vest":{"id":"safety_vest","name":"Safety Vest","keywords":["protection"],"skins":[{"unified":"1f9ba","native":"\uD83E\uDDBA"}],"version":12},"necktie":{"id":"necktie","name":"Necktie","keywords":["shirt","suitup","formal","fashion","cloth","business"],"skins":[{"unified":"1f454","native":"\uD83D\uDC54"}],"version":1},"shirt":{"id":"shirt","name":"T-Shirt","keywords":["shirt","tshirt","t","fashion","cloth","casual","tee"],"skins":[{"unified":"1f455","native":"\uD83D\uDC55"}],"version":1},"jeans":{"id":"jeans","name":"Jeans","keywords":["fashion","shopping"],"skins":[{"unified":"1f456","native":"\uD83D\uDC56"}],"version":1},"scarf":{"id":"scarf","name":"Scarf","keywords":["neck","winter","clothes"],"skins":[{"unified":"1f9e3","native":"\uD83E\uDDE3"}],"version":5},"gloves":{"id":"gloves","name":"Gloves","keywords":["hands","winter","clothes"],"skins":[{"unified":"1f9e4","native":"\uD83E\uDDE4"}],"version":5},"coat":{"id":"coat","name":"Coat","keywords":["jacket"],"skins":[{"unified":"1f9e5","native":"\uD83E\uDDE5"}],"version":5},"socks":{"id":"socks","name":"Socks","keywords":["stockings","clothes"],"skins":[{"unified":"1f9e6","native":"\uD83E\uDDE6"}],"version":5},"dress":{"id":"dress","name":"Dress","keywords":["clothes","fashion","shopping"],"skins":[{"unified":"1f457","native":"\uD83D\uDC57"}],"version":1},"kimono":{"id":"kimono","name":"Kimono","keywords":["dress","fashion","women","female","japanese"],"skins":[{"unified":"1f458","native":"\uD83D\uDC58"}],"version":1},"sari":{"id":"sari","name":"Sari","keywords":["dress"],"skins":[{"unified":"1f97b","native":"\uD83E\uDD7B"}],"version":12},"one-piece_swimsuit":{"id":"one-piece_swimsuit","name":"One-Piece Swimsuit","keywords":["one","piece","fashion"],"skins":[{"unified":"1fa71","native":"\uD83E\uDE71"}],"version":12},"briefs":{"id":"briefs","name":"Briefs","keywords":["clothing"],"skins":[{"unified":"1fa72","native":"\uD83E\uDE72"}],"version":12},"shorts":{"id":"shorts","name":"Shorts","keywords":["clothing"],"skins":[{"unified":"1fa73","native":"\uD83E\uDE73"}],"version":12},"bikini":{"id":"bikini","name":"Bikini","keywords":["swimming","female","woman","girl","fashion","beach","summer"],"skins":[{"unified":"1f459","native":"\uD83D\uDC59"}],"version":1},"womans_clothes":{"id":"womans_clothes","name":"Womans Clothes","keywords":["woman","s","fashion","shopping","bags","female"],"skins":[{"unified":"1f45a","native":"\uD83D\uDC5A"}],"version":1},"purse":{"id":"purse","name":"Purse","keywords":["fashion","accessories","money","sales","shopping"],"skins":[{"unified":"1f45b","native":"\uD83D\uDC5B"}],"version":1},"handbag":{"id":"handbag","name":"Handbag","keywords":["fashion","accessory","accessories","shopping"],"skins":[{"unified":"1f45c","native":"\uD83D\uDC5C"}],"version":1},"pouch":{"id":"pouch","name":"Pouch","keywords":["clutch","bag","accessories","shopping"],"skins":[{"unified":"1f45d","native":"\uD83D\uDC5D"}],"version":1},"shopping_bags":{"id":"shopping_bags","name":"Shopping Bags","keywords":["mall","buy","purchase"],"skins":[{"unified":"1f6cd-fe0f","native":"\uD83D\uDECD\uFE0F"}],"version":1},"school_satchel":{"id":"school_satchel","name":"Backpack","keywords":["school","satchel","student","education","bag"],"skins":[{"unified":"1f392","native":"\uD83C\uDF92"}],"version":1},"thong_sandal":{"id":"thong_sandal","name":"Thong Sandal","keywords":["footwear","summer"],"skins":[{"unified":"1fa74","native":"\uD83E\uDE74"}],"version":13},"mans_shoe":{"id":"mans_shoe","name":"Mans Shoe","keywords":["man","s","fashion","male"],"skins":[{"unified":"1f45e","native":"\uD83D\uDC5E"}],"version":1},"athletic_shoe":{"id":"athletic_shoe","name":"Running Shoe","keywords":["athletic","shoes","sports","sneakers"],"skins":[{"unified":"1f45f","native":"\uD83D\uDC5F"}],"version":1},"hiking_boot":{"id":"hiking_boot","name":"Hiking Boot","keywords":["backpacking","camping"],"skins":[{"unified":"1f97e","native":"\uD83E\uDD7E"}],"version":11},"womans_flat_shoe":{"id":"womans_flat_shoe","name":"Flat Shoe","keywords":["womans","ballet","slip","on","slipper"],"skins":[{"unified":"1f97f","native":"\uD83E\uDD7F"}],"version":11},"high_heel":{"id":"high_heel","name":"High-Heeled Shoe","keywords":["high","heel","heeled","fashion","shoes","female","pumps","stiletto"],"skins":[{"unified":"1f460","native":"\uD83D\uDC60"}],"version":1},"sandal":{"id":"sandal","name":"Womans Sandal","keywords":["woman","s","shoes","fashion","flip","flops"],"skins":[{"unified":"1f461","native":"\uD83D\uDC61"}],"version":1},"ballet_shoes":{"id":"ballet_shoes","name":"Ballet Shoes","keywords":["dance"],"skins":[{"unified":"1fa70","native":"\uD83E\uDE70"}],"version":12},"boot":{"id":"boot","name":"Womans Boots","keywords":["boot","woman","s","shoes","fashion"],"skins":[{"unified":"1f462","native":"\uD83D\uDC62"}],"version":1},"crown":{"id":"crown","name":"Crown","keywords":["king","kod","leader","royalty","lord"],"skins":[{"unified":"1f451","native":"\uD83D\uDC51"}],"version":1},"womans_hat":{"id":"womans_hat","name":"Womans Hat","keywords":["woman","s","fashion","accessories","female","lady","spring"],"skins":[{"unified":"1f452","native":"\uD83D\uDC52"}],"version":1},"tophat":{"id":"tophat","name":"Top Hat","keywords":["tophat","magic","gentleman","classy","circus"],"skins":[{"unified":"1f3a9","native":"\uD83C\uDFA9"}],"version":1},"mortar_board":{"id":"mortar_board","name":"Graduation Cap","keywords":["mortar","board","school","college","degree","university","hat","legal","learn","education"],"skins":[{"unified":"1f393","native":"\uD83C\uDF93"}],"version":1},"billed_cap":{"id":"billed_cap","name":"Billed Cap","keywords":["baseball"],"skins":[{"unified":"1f9e2","native":"\uD83E\uDDE2"}],"version":5},"military_helmet":{"id":"military_helmet","name":"Military Helmet","keywords":["army","protection"],"skins":[{"unified":"1fa96","native":"\uD83E\uDE96"}],"version":13},"helmet_with_white_cross":{"id":"helmet_with_white_cross","name":"Rescue Worker\u2019s Helmet","keywords":["with","white","cross","worker","s","construction","build"],"skins":[{"unified":"26d1-fe0f","native":"\u26D1\uFE0F"}],"version":1},"prayer_beads":{"id":"prayer_beads","name":"Prayer Beads","keywords":["dhikr","religious"],"skins":[{"unified":"1f4ff","native":"\uD83D\uDCFF"}],"version":1},"lipstick":{"id":"lipstick","name":"Lipstick","keywords":["female","girl","fashion","woman"],"skins":[{"unified":"1f484","native":"\uD83D\uDC84"}],"version":1},"ring":{"id":"ring","name":"Ring","keywords":["wedding","propose","marriage","valentines","diamond","fashion","jewelry","gem","engagement"],"skins":[{"unified":"1f48d","native":"\uD83D\uDC8D"}],"version":1},"gem":{"id":"gem","name":"Gem Stone","keywords":["blue","ruby","diamond","jewelry"],"skins":[{"unified":"1f48e","native":"\uD83D\uDC8E"}],"version":1},"mute":{"id":"mute","name":"Muted Speaker","keywords":["mute","sound","volume","silence","quiet"],"skins":[{"unified":"1f507","native":"\uD83D\uDD07"}],"version":1},"speaker":{"id":"speaker","name":"Speaker","keywords":["low","volume","sound","silence","broadcast"],"skins":[{"unified":"1f508","native":"\uD83D\uDD08"}],"version":1},"sound":{"id":"sound","name":"Speaker Medium Volume","keywords":["sound","broadcast"],"skins":[{"unified":"1f509","native":"\uD83D\uDD09"}],"version":1},"loud_sound":{"id":"loud_sound","name":"Speaker High Volume","keywords":["loud","sound","noise","noisy","broadcast"],"skins":[{"unified":"1f50a","native":"\uD83D\uDD0A"}],"version":1},"loudspeaker":{"id":"loudspeaker","name":"Loudspeaker","keywords":["volume","sound"],"skins":[{"unified":"1f4e2","native":"\uD83D\uDCE2"}],"version":1},"mega":{"id":"mega","name":"Megaphone","keywords":["mega","sound","speaker","volume"],"skins":[{"unified":"1f4e3","native":"\uD83D\uDCE3"}],"version":1},"postal_horn":{"id":"postal_horn","name":"Postal Horn","keywords":["instrument","music"],"skins":[{"unified":"1f4ef","native":"\uD83D\uDCEF"}],"version":1},"bell":{"id":"bell","name":"Bell","keywords":["sound","notification","christmas","xmas","chime"],"skins":[{"unified":"1f514","native":"\uD83D\uDD14"}],"version":1},"no_bell":{"id":"no_bell","name":"Bell with Slash","keywords":["no","sound","volume","mute","quiet","silent"],"skins":[{"unified":"1f515","native":"\uD83D\uDD15"}],"version":1},"musical_score":{"id":"musical_score","name":"Musical Score","keywords":["treble","clef","compose"],"skins":[{"unified":"1f3bc","native":"\uD83C\uDFBC"}],"version":1},"musical_note":{"id":"musical_note","name":"Musical Note","keywords":["score","tone","sound"],"skins":[{"unified":"1f3b5","native":"\uD83C\uDFB5"}],"version":1},"notes":{"id":"notes","name":"Musical Notes","keywords":["music","score"],"skins":[{"unified":"1f3b6","native":"\uD83C\uDFB6"}],"version":1},"studio_microphone":{"id":"studio_microphone","name":"Studio Microphone","keywords":["sing","recording","artist","talkshow"],"skins":[{"unified":"1f399-fe0f","native":"\uD83C\uDF99\uFE0F"}],"version":1},"level_slider":{"id":"level_slider","name":"Level Slider","keywords":["scale"],"skins":[{"unified":"1f39a-fe0f","native":"\uD83C\uDF9A\uFE0F"}],"version":1},"control_knobs":{"id":"control_knobs","name":"Control Knobs","keywords":["dial"],"skins":[{"unified":"1f39b-fe0f","native":"\uD83C\uDF9B\uFE0F"}],"version":1},"microphone":{"id":"microphone","name":"Microphone","keywords":["sound","music","PA","sing","talkshow"],"skins":[{"unified":"1f3a4","native":"\uD83C\uDFA4"}],"version":1},"headphones":{"id":"headphones","name":"Headphone","keywords":["headphones","music","score","gadgets"],"skins":[{"unified":"1f3a7","native":"\uD83C\uDFA7"}],"version":1},"radio":{"id":"radio","name":"Radio","keywords":["communication","music","podcast","program"],"skins":[{"unified":"1f4fb","native":"\uD83D\uDCFB"}],"version":1},"saxophone":{"id":"saxophone","name":"Saxophone","keywords":["music","instrument","jazz","blues"],"skins":[{"unified":"1f3b7","native":"\uD83C\uDFB7"}],"version":1},"accordion":{"id":"accordion","name":"Accordion","keywords":["music"],"skins":[{"unified":"1fa97","native":"\uD83E\uDE97"}],"version":13},"guitar":{"id":"guitar","name":"Guitar","keywords":["music","instrument"],"skins":[{"unified":"1f3b8","native":"\uD83C\uDFB8"}],"version":1},"musical_keyboard":{"id":"musical_keyboard","name":"Musical Keyboard","keywords":["piano","instrument","compose"],"skins":[{"unified":"1f3b9","native":"\uD83C\uDFB9"}],"version":1},"trumpet":{"id":"trumpet","name":"Trumpet","keywords":["music","brass"],"skins":[{"unified":"1f3ba","native":"\uD83C\uDFBA"}],"version":1},"violin":{"id":"violin","name":"Violin","keywords":["music","instrument","orchestra","symphony"],"skins":[{"unified":"1f3bb","native":"\uD83C\uDFBB"}],"version":1},"banjo":{"id":"banjo","name":"Banjo","keywords":["music","instructment"],"skins":[{"unified":"1fa95","native":"\uD83E\uDE95"}],"version":12},"drum_with_drumsticks":{"id":"drum_with_drumsticks","name":"Drum","keywords":["with","drumsticks","music","instrument","snare"],"skins":[{"unified":"1f941","native":"\uD83E\uDD41"}],"version":3},"long_drum":{"id":"long_drum","name":"Long Drum","keywords":["music"],"skins":[{"unified":"1fa98","native":"\uD83E\uDE98"}],"version":13},"iphone":{"id":"iphone","name":"Mobile Phone","keywords":["iphone","technology","apple","gadgets","dial"],"skins":[{"unified":"1f4f1","native":"\uD83D\uDCF1"}],"version":1},"calling":{"id":"calling","name":"Mobile Phone with Arrow","keywords":["calling","iphone","incoming"],"skins":[{"unified":"1f4f2","native":"\uD83D\uDCF2"}],"version":1},"phone":{"id":"phone","name":"Telephone","keywords":["phone","technology","communication","dial"],"skins":[{"unified":"260e-fe0f","native":"\u260E\uFE0F"}],"version":1},"telephone_receiver":{"id":"telephone_receiver","name":"Telephone Receiver","keywords":["technology","communication","dial"],"skins":[{"unified":"1f4de","native":"\uD83D\uDCDE"}],"version":1},"pager":{"id":"pager","name":"Pager","keywords":["bbcall","oldschool","90s"],"skins":[{"unified":"1f4df","native":"\uD83D\uDCDF"}],"version":1},"fax":{"id":"fax","name":"Fax Machine","keywords":["communication","technology"],"skins":[{"unified":"1f4e0","native":"\uD83D\uDCE0"}],"version":1},"battery":{"id":"battery","name":"Battery","keywords":["power","energy","sustain"],"skins":[{"unified":"1f50b","native":"\uD83D\uDD0B"}],"version":1},"low_battery":{"id":"low_battery","name":"Low Battery","keywords":["drained","dead"],"skins":[{"unified":"1faab","native":"\uD83E\uDEAB"}],"version":14},"electric_plug":{"id":"electric_plug","name":"Electric Plug","keywords":["charger","power"],"skins":[{"unified":"1f50c","native":"\uD83D\uDD0C"}],"version":1},"computer":{"id":"computer","name":"Laptop","keywords":["computer","technology","screen","display","monitor"],"skins":[{"unified":"1f4bb","native":"\uD83D\uDCBB"}],"version":1},"desktop_computer":{"id":"desktop_computer","name":"Desktop Computer","keywords":["technology","computing","screen"],"skins":[{"unified":"1f5a5-fe0f","native":"\uD83D\uDDA5\uFE0F"}],"version":1},"printer":{"id":"printer","name":"Printer","keywords":["paper","ink"],"skins":[{"unified":"1f5a8-fe0f","native":"\uD83D\uDDA8\uFE0F"}],"version":1},"keyboard":{"id":"keyboard","name":"Keyboard","keywords":["technology","computer","type","input","text"],"skins":[{"unified":"2328-fe0f","native":"\u2328\uFE0F"}],"version":1},"three_button_mouse":{"id":"three_button_mouse","name":"Computer Mouse","keywords":["three","button","click"],"skins":[{"unified":"1f5b1-fe0f","native":"\uD83D\uDDB1\uFE0F"}],"version":1},"trackball":{"id":"trackball","name":"Trackball","keywords":["technology","trackpad"],"skins":[{"unified":"1f5b2-fe0f","native":"\uD83D\uDDB2\uFE0F"}],"version":1},"minidisc":{"id":"minidisc","name":"Minidisc","keywords":["computer","disk","technology","record","data","90s"],"skins":[{"unified":"1f4bd","native":"\uD83D\uDCBD"}],"version":1},"floppy_disk":{"id":"floppy_disk","name":"Floppy Disk","keywords":["oldschool","technology","save","90s","80s"],"skins":[{"unified":"1f4be","native":"\uD83D\uDCBE"}],"version":1},"cd":{"id":"cd","name":"Optical Disc","keywords":["cd","disk","technology","dvd","90s"],"skins":[{"unified":"1f4bf","native":"\uD83D\uDCBF"}],"version":1},"dvd":{"id":"dvd","name":"Dvd","keywords":["cd","disk","disc"],"skins":[{"unified":"1f4c0","native":"\uD83D\uDCC0"}],"version":1},"abacus":{"id":"abacus","name":"Abacus","keywords":["calculation"],"skins":[{"unified":"1f9ee","native":"\uD83E\uDDEE"}],"version":11},"movie_camera":{"id":"movie_camera","name":"Movie Camera","keywords":["film","record"],"skins":[{"unified":"1f3a5","native":"\uD83C\uDFA5"}],"version":1},"film_frames":{"id":"film_frames","name":"Film Frames","keywords":["movie"],"skins":[{"unified":"1f39e-fe0f","native":"\uD83C\uDF9E\uFE0F"}],"version":1},"film_projector":{"id":"film_projector","name":"Film Projector","keywords":["video","tape","record","movie"],"skins":[{"unified":"1f4fd-fe0f","native":"\uD83D\uDCFD\uFE0F"}],"version":1},"clapper":{"id":"clapper","name":"Clapper Board","keywords":["movie","film","record"],"skins":[{"unified":"1f3ac","native":"\uD83C\uDFAC"}],"version":1},"tv":{"id":"tv","name":"Television","keywords":["tv","technology","program","oldschool","show"],"skins":[{"unified":"1f4fa","native":"\uD83D\uDCFA"}],"version":1},"camera":{"id":"camera","name":"Camera","keywords":["gadgets","photography"],"skins":[{"unified":"1f4f7","native":"\uD83D\uDCF7"}],"version":1},"camera_with_flash":{"id":"camera_with_flash","name":"Camera with Flash","keywords":["photography","gadgets"],"skins":[{"unified":"1f4f8","native":"\uD83D\uDCF8"}],"version":1},"video_camera":{"id":"video_camera","name":"Video Camera","keywords":["film","record"],"skins":[{"unified":"1f4f9","native":"\uD83D\uDCF9"}],"version":1},"vhs":{"id":"vhs","name":"Videocassette","keywords":["vhs","record","video","oldschool","90s","80s"],"skins":[{"unified":"1f4fc","native":"\uD83D\uDCFC"}],"version":1},"mag":{"id":"mag","name":"Magnifying Glass Tilted Left","keywords":["mag","search","zoom","find","detective"],"skins":[{"unified":"1f50d","native":"\uD83D\uDD0D"}],"version":1},"mag_right":{"id":"mag_right","name":"Magnifying Glass Tilted Right","keywords":["mag","search","zoom","find","detective"],"skins":[{"unified":"1f50e","native":"\uD83D\uDD0E"}],"version":1},"candle":{"id":"candle","name":"Candle","keywords":["fire","wax"],"skins":[{"unified":"1f56f-fe0f","native":"\uD83D\uDD6F\uFE0F"}],"version":1},"bulb":{"id":"bulb","name":"Light Bulb","keywords":["electricity","idea"],"skins":[{"unified":"1f4a1","native":"\uD83D\uDCA1"}],"version":1},"flashlight":{"id":"flashlight","name":"Flashlight","keywords":["dark","camping","sight","night"],"skins":[{"unified":"1f526","native":"\uD83D\uDD26"}],"version":1},"izakaya_lantern":{"id":"izakaya_lantern","name":"Izakaya Lantern","keywords":["red","paper","light","halloween","spooky"],"skins":[{"unified":"1f3ee","native":"\uD83C\uDFEE"}],"version":1},"diya_lamp":{"id":"diya_lamp","name":"Diya Lamp","keywords":["lighting"],"skins":[{"unified":"1fa94","native":"\uD83E\uDE94"}],"version":12},"notebook_with_decorative_cover":{"id":"notebook_with_decorative_cover","name":"Notebook with Decorative Cover","keywords":["classroom","notes","record","paper","study"],"skins":[{"unified":"1f4d4","native":"\uD83D\uDCD4"}],"version":1},"closed_book":{"id":"closed_book","name":"Closed Book","keywords":["read","library","knowledge","textbook","learn"],"skins":[{"unified":"1f4d5","native":"\uD83D\uDCD5"}],"version":1},"book":{"id":"book","name":"Open Book","keywords":["read","library","knowledge","literature","learn","study"],"skins":[{"unified":"1f4d6","native":"\uD83D\uDCD6"}],"version":1},"green_book":{"id":"green_book","name":"Green Book","keywords":["read","library","knowledge","study"],"skins":[{"unified":"1f4d7","native":"\uD83D\uDCD7"}],"version":1},"blue_book":{"id":"blue_book","name":"Blue Book","keywords":["read","library","knowledge","learn","study"],"skins":[{"unified":"1f4d8","native":"\uD83D\uDCD8"}],"version":1},"orange_book":{"id":"orange_book","name":"Orange Book","keywords":["read","library","knowledge","textbook","study"],"skins":[{"unified":"1f4d9","native":"\uD83D\uDCD9"}],"version":1},"books":{"id":"books","name":"Books","keywords":["literature","library","study"],"skins":[{"unified":"1f4da","native":"\uD83D\uDCDA"}],"version":1},"notebook":{"id":"notebook","name":"Notebook","keywords":["stationery","record","notes","paper","study"],"skins":[{"unified":"1f4d3","native":"\uD83D\uDCD3"}],"version":1},"ledger":{"id":"ledger","name":"Ledger","keywords":["notes","paper"],"skins":[{"unified":"1f4d2","native":"\uD83D\uDCD2"}],"version":1},"page_with_curl":{"id":"page_with_curl","name":"Page with Curl","keywords":["documents","office","paper"],"skins":[{"unified":"1f4c3","native":"\uD83D\uDCC3"}],"version":1},"scroll":{"id":"scroll","name":"Scroll","keywords":["documents","ancient","history","paper"],"skins":[{"unified":"1f4dc","native":"\uD83D\uDCDC"}],"version":1},"page_facing_up":{"id":"page_facing_up","name":"Page Facing Up","keywords":["documents","office","paper","information"],"skins":[{"unified":"1f4c4","native":"\uD83D\uDCC4"}],"version":1},"newspaper":{"id":"newspaper","name":"Newspaper","keywords":["press","headline"],"skins":[{"unified":"1f4f0","native":"\uD83D\uDCF0"}],"version":1},"rolled_up_newspaper":{"id":"rolled_up_newspaper","name":"Rolled-Up Newspaper","keywords":["rolled","up","press","headline"],"skins":[{"unified":"1f5de-fe0f","native":"\uD83D\uDDDE\uFE0F"}],"version":1},"bookmark_tabs":{"id":"bookmark_tabs","name":"Bookmark Tabs","keywords":["favorite","save","order","tidy"],"skins":[{"unified":"1f4d1","native":"\uD83D\uDCD1"}],"version":1},"bookmark":{"id":"bookmark","name":"Bookmark","keywords":["favorite","label","save"],"skins":[{"unified":"1f516","native":"\uD83D\uDD16"}],"version":1},"label":{"id":"label","name":"Label","keywords":["sale","tag"],"skins":[{"unified":"1f3f7-fe0f","native":"\uD83C\uDFF7\uFE0F"}],"version":1},"moneybag":{"id":"moneybag","name":"Money Bag","keywords":["moneybag","dollar","payment","coins","sale"],"skins":[{"unified":"1f4b0","native":"\uD83D\uDCB0"}],"version":1},"coin":{"id":"coin","name":"Coin","keywords":["money","currency"],"skins":[{"unified":"1fa99","native":"\uD83E\uDE99"}],"version":13},"yen":{"id":"yen","name":"Yen Banknote","keywords":["money","sales","japanese","dollar","currency"],"skins":[{"unified":"1f4b4","native":"\uD83D\uDCB4"}],"version":1},"dollar":{"id":"dollar","name":"Dollar Banknote","keywords":["money","sales","bill","currency"],"skins":[{"unified":"1f4b5","native":"\uD83D\uDCB5"}],"version":1},"euro":{"id":"euro","name":"Euro Banknote","keywords":["money","sales","dollar","currency"],"skins":[{"unified":"1f4b6","native":"\uD83D\uDCB6"}],"version":1},"pound":{"id":"pound","name":"Pound Banknote","keywords":["british","sterling","money","sales","bills","uk","england","currency"],"skins":[{"unified":"1f4b7","native":"\uD83D\uDCB7"}],"version":1},"money_with_wings":{"id":"money_with_wings","name":"Money with Wings","keywords":["dollar","bills","payment","sale"],"skins":[{"unified":"1f4b8","native":"\uD83D\uDCB8"}],"version":1},"credit_card":{"id":"credit_card","name":"Credit Card","keywords":["money","sales","dollar","bill","payment","shopping"],"skins":[{"unified":"1f4b3","native":"\uD83D\uDCB3"}],"version":1},"receipt":{"id":"receipt","name":"Receipt","keywords":["accounting","expenses"],"skins":[{"unified":"1f9fe","native":"\uD83E\uDDFE"}],"version":11},"chart":{"id":"chart","name":"Chart Increasing with Yen","keywords":["green","square","graph","presentation","stats"],"skins":[{"unified":"1f4b9","native":"\uD83D\uDCB9"}],"version":1},"email":{"id":"email","name":"Envelope","keywords":["email","letter","postal","inbox","communication"],"skins":[{"unified":"2709-fe0f","native":"\u2709\uFE0F"}],"version":1},"e-mail":{"id":"e-mail","name":"E-Mail","keywords":["e","mail","communication","inbox"],"skins":[{"unified":"1f4e7","native":"\uD83D\uDCE7"}],"version":1},"incoming_envelope":{"id":"incoming_envelope","name":"Incoming Envelope","keywords":["email","inbox"],"skins":[{"unified":"1f4e8","native":"\uD83D\uDCE8"}],"version":1},"envelope_with_arrow":{"id":"envelope_with_arrow","name":"Envelope with Arrow","keywords":["email","communication"],"skins":[{"unified":"1f4e9","native":"\uD83D\uDCE9"}],"version":1},"outbox_tray":{"id":"outbox_tray","name":"Outbox Tray","keywords":["inbox","email"],"skins":[{"unified":"1f4e4","native":"\uD83D\uDCE4"}],"version":1},"inbox_tray":{"id":"inbox_tray","name":"Inbox Tray","keywords":["email","documents"],"skins":[{"unified":"1f4e5","native":"\uD83D\uDCE5"}],"version":1},"package":{"id":"package","name":"Package","keywords":["mail","gift","cardboard","box","moving"],"skins":[{"unified":"1f4e6","native":"\uD83D\uDCE6"}],"version":1},"mailbox":{"id":"mailbox","name":"Closed Mailbox with Raised Flag","keywords":["email","inbox","communication"],"skins":[{"unified":"1f4eb","native":"\uD83D\uDCEB"}],"version":1},"mailbox_closed":{"id":"mailbox_closed","name":"Closed Mailbox with Lowered Flag","keywords":["email","communication","inbox"],"skins":[{"unified":"1f4ea","native":"\uD83D\uDCEA"}],"version":1},"mailbox_with_mail":{"id":"mailbox_with_mail","name":"Open Mailbox with Raised Flag","keywords":["mail","email","inbox","communication"],"skins":[{"unified":"1f4ec","native":"\uD83D\uDCEC"}],"version":1},"mailbox_with_no_mail":{"id":"mailbox_with_no_mail","name":"Open Mailbox with Lowered Flag","keywords":["no","mail","email","inbox"],"skins":[{"unified":"1f4ed","native":"\uD83D\uDCED"}],"version":1},"postbox":{"id":"postbox","name":"Postbox","keywords":["email","letter","envelope"],"skins":[{"unified":"1f4ee","native":"\uD83D\uDCEE"}],"version":1},"ballot_box_with_ballot":{"id":"ballot_box_with_ballot","name":"Ballot Box with Ballot","keywords":["election","vote"],"skins":[{"unified":"1f5f3-fe0f","native":"\uD83D\uDDF3\uFE0F"}],"version":1},"pencil2":{"id":"pencil2","name":"Pencil","keywords":["pencil2","stationery","write","paper","writing","school","study"],"skins":[{"unified":"270f-fe0f","native":"\u270F\uFE0F"}],"version":1},"black_nib":{"id":"black_nib","name":"Black Nib","keywords":["pen","stationery","writing","write"],"skins":[{"unified":"2712-fe0f","native":"\u2712\uFE0F"}],"version":1},"lower_left_fountain_pen":{"id":"lower_left_fountain_pen","name":"Fountain Pen","keywords":["lower","left","stationery","writing","write"],"skins":[{"unified":"1f58b-fe0f","native":"\uD83D\uDD8B\uFE0F"}],"version":1},"lower_left_ballpoint_pen":{"id":"lower_left_ballpoint_pen","name":"Pen","keywords":["lower","left","ballpoint","stationery","writing","write"],"skins":[{"unified":"1f58a-fe0f","native":"\uD83D\uDD8A\uFE0F"}],"version":1},"lower_left_paintbrush":{"id":"lower_left_paintbrush","name":"Paintbrush","keywords":["lower","left","drawing","creativity","art"],"skins":[{"unified":"1f58c-fe0f","native":"\uD83D\uDD8C\uFE0F"}],"version":1},"lower_left_crayon":{"id":"lower_left_crayon","name":"Crayon","keywords":["lower","left","drawing","creativity"],"skins":[{"unified":"1f58d-fe0f","native":"\uD83D\uDD8D\uFE0F"}],"version":1},"memo":{"id":"memo","name":"Memo","keywords":["pencil","write","documents","stationery","paper","writing","legal","exam","quiz","test","study","compose"],"skins":[{"unified":"1f4dd","native":"\uD83D\uDCDD"}],"version":1},"briefcase":{"id":"briefcase","name":"Briefcase","keywords":["business","documents","work","law","legal","job","career"],"skins":[{"unified":"1f4bc","native":"\uD83D\uDCBC"}],"version":1},"file_folder":{"id":"file_folder","name":"File Folder","keywords":["documents","business","office"],"skins":[{"unified":"1f4c1","native":"\uD83D\uDCC1"}],"version":1},"open_file_folder":{"id":"open_file_folder","name":"Open File Folder","keywords":["documents","load"],"skins":[{"unified":"1f4c2","native":"\uD83D\uDCC2"}],"version":1},"card_index_dividers":{"id":"card_index_dividers","name":"Card Index Dividers","keywords":["organizing","business","stationery"],"skins":[{"unified":"1f5c2-fe0f","native":"\uD83D\uDDC2\uFE0F"}],"version":1},"date":{"id":"date","name":"Calendar","keywords":["date","schedule"],"skins":[{"unified":"1f4c5","native":"\uD83D\uDCC5"}],"version":1},"calendar":{"id":"calendar","name":"Tear-off Calendar","keywords":["tear","off","schedule","date","planning"],"skins":[{"unified":"1f4c6","native":"\uD83D\uDCC6"}],"version":1},"spiral_note_pad":{"id":"spiral_note_pad","name":"Spiral Notepad","keywords":["note","pad","memo","stationery"],"skins":[{"unified":"1f5d2-fe0f","native":"\uD83D\uDDD2\uFE0F"}],"version":1},"spiral_calendar_pad":{"id":"spiral_calendar_pad","name":"Spiral Calendar","keywords":["pad","date","schedule","planning"],"skins":[{"unified":"1f5d3-fe0f","native":"\uD83D\uDDD3\uFE0F"}],"version":1},"card_index":{"id":"card_index","name":"Card Index","keywords":["business","stationery"],"skins":[{"unified":"1f4c7","native":"\uD83D\uDCC7"}],"version":1},"chart_with_upwards_trend":{"id":"chart_with_upwards_trend","name":"Chart Increasing","keywords":["with","upwards","trend","graph","presentation","stats","recovery","business","economics","money","sales","good","success"],"skins":[{"unified":"1f4c8","native":"\uD83D\uDCC8"}],"version":1},"chart_with_downwards_trend":{"id":"chart_with_downwards_trend","name":"Chart Decreasing","keywords":["with","downwards","trend","graph","presentation","stats","recession","business","economics","money","sales","bad","failure"],"skins":[{"unified":"1f4c9","native":"\uD83D\uDCC9"}],"version":1},"bar_chart":{"id":"bar_chart","name":"Bar Chart","keywords":["graph","presentation","stats"],"skins":[{"unified":"1f4ca","native":"\uD83D\uDCCA"}],"version":1},"clipboard":{"id":"clipboard","name":"Clipboard","keywords":["stationery","documents"],"skins":[{"unified":"1f4cb","native":"\uD83D\uDCCB"}],"version":1},"pushpin":{"id":"pushpin","name":"Pushpin","keywords":["stationery","mark","here"],"skins":[{"unified":"1f4cc","native":"\uD83D\uDCCC"}],"version":1},"round_pushpin":{"id":"round_pushpin","name":"Round Pushpin","keywords":["stationery","location","map","here"],"skins":[{"unified":"1f4cd","native":"\uD83D\uDCCD"}],"version":1},"paperclip":{"id":"paperclip","name":"Paperclip","keywords":["documents","stationery"],"skins":[{"unified":"1f4ce","native":"\uD83D\uDCCE"}],"version":1},"linked_paperclips":{"id":"linked_paperclips","name":"Linked Paperclips","keywords":["documents","stationery"],"skins":[{"unified":"1f587-fe0f","native":"\uD83D\uDD87\uFE0F"}],"version":1},"straight_ruler":{"id":"straight_ruler","name":"Straight Ruler","keywords":["stationery","calculate","length","math","school","drawing","architect","sketch"],"skins":[{"unified":"1f4cf","native":"\uD83D\uDCCF"}],"version":1},"triangular_ruler":{"id":"triangular_ruler","name":"Triangular Ruler","keywords":["stationery","math","architect","sketch"],"skins":[{"unified":"1f4d0","native":"\uD83D\uDCD0"}],"version":1},"scissors":{"id":"scissors","name":"Scissors","keywords":["stationery","cut"],"skins":[{"unified":"2702-fe0f","native":"\u2702\uFE0F"}],"version":1},"card_file_box":{"id":"card_file_box","name":"Card File Box","keywords":["business","stationery"],"skins":[{"unified":"1f5c3-fe0f","native":"\uD83D\uDDC3\uFE0F"}],"version":1},"file_cabinet":{"id":"file_cabinet","name":"File Cabinet","keywords":["filing","organizing"],"skins":[{"unified":"1f5c4-fe0f","native":"\uD83D\uDDC4\uFE0F"}],"version":1},"wastebasket":{"id":"wastebasket","name":"Wastebasket","keywords":["bin","trash","rubbish","garbage","toss"],"skins":[{"unified":"1f5d1-fe0f","native":"\uD83D\uDDD1\uFE0F"}],"version":1},"lock":{"id":"lock","name":"Lock","keywords":["locked","security","password","padlock"],"skins":[{"unified":"1f512","native":"\uD83D\uDD12"}],"version":1},"unlock":{"id":"unlock","name":"Unlocked","keywords":["unlock","privacy","security"],"skins":[{"unified":"1f513","native":"\uD83D\uDD13"}],"version":1},"lock_with_ink_pen":{"id":"lock_with_ink_pen","name":"Locked with Pen","keywords":["lock","ink","security","secret"],"skins":[{"unified":"1f50f","native":"\uD83D\uDD0F"}],"version":1},"closed_lock_with_key":{"id":"closed_lock_with_key","name":"Locked with Key","keywords":["closed","lock","security","privacy"],"skins":[{"unified":"1f510","native":"\uD83D\uDD10"}],"version":1},"key":{"id":"key","name":"Key","keywords":["lock","door","password"],"skins":[{"unified":"1f511","native":"\uD83D\uDD11"}],"version":1},"old_key":{"id":"old_key","name":"Old Key","keywords":["lock","door","password"],"skins":[{"unified":"1f5dd-fe0f","native":"\uD83D\uDDDD\uFE0F"}],"version":1},"hammer":{"id":"hammer","name":"Hammer","keywords":["tools","build","create"],"skins":[{"unified":"1f528","native":"\uD83D\uDD28"}],"version":1},"axe":{"id":"axe","name":"Axe","keywords":["tool","chop","cut"],"skins":[{"unified":"1fa93","native":"\uD83E\uDE93"}],"version":12},"pick":{"id":"pick","name":"Pick","keywords":["tools","dig"],"skins":[{"unified":"26cf-fe0f","native":"\u26CF\uFE0F"}],"version":1},"hammer_and_pick":{"id":"hammer_and_pick","name":"Hammer and Pick","keywords":["tools","build","create"],"skins":[{"unified":"2692-fe0f","native":"\u2692\uFE0F"}],"version":1},"hammer_and_wrench":{"id":"hammer_and_wrench","name":"Hammer and Wrench","keywords":["tools","build","create"],"skins":[{"unified":"1f6e0-fe0f","native":"\uD83D\uDEE0\uFE0F"}],"version":1},"dagger_knife":{"id":"dagger_knife","name":"Dagger","keywords":["knife","weapon"],"skins":[{"unified":"1f5e1-fe0f","native":"\uD83D\uDDE1\uFE0F"}],"version":1},"crossed_swords":{"id":"crossed_swords","name":"Crossed Swords","keywords":["weapon"],"skins":[{"unified":"2694-fe0f","native":"\u2694\uFE0F"}],"version":1},"gun":{"id":"gun","name":"Pistol","keywords":["gun","violence","weapon","revolver"],"skins":[{"unified":"1f52b","native":"\uD83D\uDD2B"}],"version":1},"boomerang":{"id":"boomerang","name":"Boomerang","keywords":["weapon"],"skins":[{"unified":"1fa83","native":"\uD83E\uDE83"}],"version":13},"bow_and_arrow":{"id":"bow_and_arrow","name":"Bow and Arrow","keywords":["sports"],"skins":[{"unified":"1f3f9","native":"\uD83C\uDFF9"}],"version":1},"shield":{"id":"shield","name":"Shield","keywords":["protection","security"],"skins":[{"unified":"1f6e1-fe0f","native":"\uD83D\uDEE1\uFE0F"}],"version":1},"carpentry_saw":{"id":"carpentry_saw","name":"Carpentry Saw","keywords":["cut","chop"],"skins":[{"unified":"1fa9a","native":"\uD83E\uDE9A"}],"version":13},"wrench":{"id":"wrench","name":"Wrench","keywords":["tools","diy","ikea","fix","maintainer"],"skins":[{"unified":"1f527","native":"\uD83D\uDD27"}],"version":1},"screwdriver":{"id":"screwdriver","name":"Screwdriver","keywords":["tools"],"skins":[{"unified":"1fa9b","native":"\uD83E\uDE9B"}],"version":13},"nut_and_bolt":{"id":"nut_and_bolt","name":"Nut and Bolt","keywords":["handy","tools","fix"],"skins":[{"unified":"1f529","native":"\uD83D\uDD29"}],"version":1},"gear":{"id":"gear","name":"Gear","keywords":["cog"],"skins":[{"unified":"2699-fe0f","native":"\u2699\uFE0F"}],"version":1},"compression":{"id":"compression","name":"Clamp","keywords":["compression","tool"],"skins":[{"unified":"1f5dc-fe0f","native":"\uD83D\uDDDC\uFE0F"}],"version":1},"scales":{"id":"scales","name":"Balance Scale","keywords":["scales","law","fairness","weight"],"skins":[{"unified":"2696-fe0f","native":"\u2696\uFE0F"}],"version":1},"probing_cane":{"id":"probing_cane","name":"White Cane","keywords":["probing","accessibility"],"skins":[{"unified":"1f9af","native":"\uD83E\uDDAF"}],"version":12},"link":{"id":"link","name":"Link","keywords":["rings","url"],"skins":[{"unified":"1f517","native":"\uD83D\uDD17"}],"version":1},"chains":{"id":"chains","name":"Chains","keywords":["lock","arrest"],"skins":[{"unified":"26d3-fe0f","native":"\u26D3\uFE0F"}],"version":1},"hook":{"id":"hook","name":"Hook","keywords":["tools"],"skins":[{"unified":"1fa9d","native":"\uD83E\uDE9D"}],"version":13},"toolbox":{"id":"toolbox","name":"Toolbox","keywords":["tools","diy","fix","maintainer","mechanic"],"skins":[{"unified":"1f9f0","native":"\uD83E\uDDF0"}],"version":11},"magnet":{"id":"magnet","name":"Magnet","keywords":["attraction","magnetic"],"skins":[{"unified":"1f9f2","native":"\uD83E\uDDF2"}],"version":11},"ladder":{"id":"ladder","name":"Ladder","keywords":["tools"],"skins":[{"unified":"1fa9c","native":"\uD83E\uDE9C"}],"version":13},"alembic":{"id":"alembic","name":"Alembic","keywords":["distilling","science","experiment","chemistry"],"skins":[{"unified":"2697-fe0f","native":"\u2697\uFE0F"}],"version":1},"test_tube":{"id":"test_tube","name":"Test Tube","keywords":["chemistry","experiment","lab","science"],"skins":[{"unified":"1f9ea","native":"\uD83E\uDDEA"}],"version":11},"petri_dish":{"id":"petri_dish","name":"Petri Dish","keywords":["bacteria","biology","culture","lab"],"skins":[{"unified":"1f9eb","native":"\uD83E\uDDEB"}],"version":11},"dna":{"id":"dna","name":"Dna","keywords":["biologist","genetics","life"],"skins":[{"unified":"1f9ec","native":"\uD83E\uDDEC"}],"version":11},"microscope":{"id":"microscope","name":"Microscope","keywords":["laboratory","experiment","zoomin","science","study"],"skins":[{"unified":"1f52c","native":"\uD83D\uDD2C"}],"version":1},"telescope":{"id":"telescope","name":"Telescope","keywords":["stars","space","zoom","science","astronomy"],"skins":[{"unified":"1f52d","native":"\uD83D\uDD2D"}],"version":1},"satellite_antenna":{"id":"satellite_antenna","name":"Satellite Antenna","keywords":["communication","future","radio","space"],"skins":[{"unified":"1f4e1","native":"\uD83D\uDCE1"}],"version":1},"syringe":{"id":"syringe","name":"Syringe","keywords":["health","hospital","drugs","blood","medicine","needle","doctor","nurse"],"skins":[{"unified":"1f489","native":"\uD83D\uDC89"}],"version":1},"drop_of_blood":{"id":"drop_of_blood","name":"Drop of Blood","keywords":["period","hurt","harm","wound"],"skins":[{"unified":"1fa78","native":"\uD83E\uDE78"}],"version":12},"pill":{"id":"pill","name":"Pill","keywords":["health","medicine","doctor","pharmacy","drug"],"skins":[{"unified":"1f48a","native":"\uD83D\uDC8A"}],"version":1},"adhesive_bandage":{"id":"adhesive_bandage","name":"Adhesive Bandage","keywords":["heal"],"skins":[{"unified":"1fa79","native":"\uD83E\uDE79"}],"version":12},"crutch":{"id":"crutch","name":"Crutch","keywords":["accessibility","assist"],"skins":[{"unified":"1fa7c","native":"\uD83E\uDE7C"}],"version":14},"stethoscope":{"id":"stethoscope","name":"Stethoscope","keywords":["health"],"skins":[{"unified":"1fa7a","native":"\uD83E\uDE7A"}],"version":12},"x-ray":{"id":"x-ray","name":"X-Ray","keywords":["x","ray","skeleton","medicine"],"skins":[{"unified":"1fa7b","native":"\uD83E\uDE7B"}],"version":14},"door":{"id":"door","name":"Door","keywords":["house","entry","exit"],"skins":[{"unified":"1f6aa","native":"\uD83D\uDEAA"}],"version":1},"elevator":{"id":"elevator","name":"Elevator","keywords":["lift"],"skins":[{"unified":"1f6d7","native":"\uD83D\uDED7"}],"version":13},"mirror":{"id":"mirror","name":"Mirror","keywords":["reflection"],"skins":[{"unified":"1fa9e","native":"\uD83E\uDE9E"}],"version":13},"window":{"id":"window","name":"Window","keywords":["scenery"],"skins":[{"unified":"1fa9f","native":"\uD83E\uDE9F"}],"version":13},"bed":{"id":"bed","name":"Bed","keywords":["sleep","rest"],"skins":[{"unified":"1f6cf-fe0f","native":"\uD83D\uDECF\uFE0F"}],"version":1},"couch_and_lamp":{"id":"couch_and_lamp","name":"Couch and Lamp","keywords":["read","chill"],"skins":[{"unified":"1f6cb-fe0f","native":"\uD83D\uDECB\uFE0F"}],"version":1},"chair":{"id":"chair","name":"Chair","keywords":["sit","furniture"],"skins":[{"unified":"1fa91","native":"\uD83E\uDE91"}],"version":12},"toilet":{"id":"toilet","name":"Toilet","keywords":["restroom","wc","washroom","bathroom","potty"],"skins":[{"unified":"1f6bd","native":"\uD83D\uDEBD"}],"version":1},"plunger":{"id":"plunger","name":"Plunger","keywords":["toilet"],"skins":[{"unified":"1faa0","native":"\uD83E\uDEA0"}],"version":13},"shower":{"id":"shower","name":"Shower","keywords":["clean","water","bathroom"],"skins":[{"unified":"1f6bf","native":"\uD83D\uDEBF"}],"version":1},"bathtub":{"id":"bathtub","name":"Bathtub","keywords":["clean","shower","bathroom"],"skins":[{"unified":"1f6c1","native":"\uD83D\uDEC1"}],"version":1},"mouse_trap":{"id":"mouse_trap","name":"Mouse Trap","keywords":["cheese"],"skins":[{"unified":"1faa4","native":"\uD83E\uDEA4"}],"version":13},"razor":{"id":"razor","name":"Razor","keywords":["cut"],"skins":[{"unified":"1fa92","native":"\uD83E\uDE92"}],"version":12},"lotion_bottle":{"id":"lotion_bottle","name":"Lotion Bottle","keywords":["moisturizer","sunscreen"],"skins":[{"unified":"1f9f4","native":"\uD83E\uDDF4"}],"version":11},"safety_pin":{"id":"safety_pin","name":"Safety Pin","keywords":["diaper"],"skins":[{"unified":"1f9f7","native":"\uD83E\uDDF7"}],"version":11},"broom":{"id":"broom","name":"Broom","keywords":["cleaning","sweeping","witch"],"skins":[{"unified":"1f9f9","native":"\uD83E\uDDF9"}],"version":11},"basket":{"id":"basket","name":"Basket","keywords":["laundry"],"skins":[{"unified":"1f9fa","native":"\uD83E\uDDFA"}],"version":11},"roll_of_paper":{"id":"roll_of_paper","name":"Roll of Paper","keywords":[],"skins":[{"unified":"1f9fb","native":"\uD83E\uDDFB"}],"version":11},"bucket":{"id":"bucket","name":"Bucket","keywords":["water","container"],"skins":[{"unified":"1faa3","native":"\uD83E\uDEA3"}],"version":13},"soap":{"id":"soap","name":"Soap","keywords":["bar","bathing","cleaning","lather"],"skins":[{"unified":"1f9fc","native":"\uD83E\uDDFC"}],"version":11},"bubbles":{"id":"bubbles","name":"Bubbles","keywords":["soap","fun","carbonation","sparkling"],"skins":[{"unified":"1fae7","native":"\uD83E\uDEE7"}],"version":14},"toothbrush":{"id":"toothbrush","name":"Toothbrush","keywords":["hygiene","dental"],"skins":[{"unified":"1faa5","native":"\uD83E\uDEA5"}],"version":13},"sponge":{"id":"sponge","name":"Sponge","keywords":["absorbing","cleaning","porous"],"skins":[{"unified":"1f9fd","native":"\uD83E\uDDFD"}],"version":11},"fire_extinguisher":{"id":"fire_extinguisher","name":"Fire Extinguisher","keywords":["quench"],"skins":[{"unified":"1f9ef","native":"\uD83E\uDDEF"}],"version":11},"shopping_trolley":{"id":"shopping_trolley","name":"Shopping Cart","keywords":["trolley"],"skins":[{"unified":"1f6d2","native":"\uD83D\uDED2"}],"version":3},"smoking":{"id":"smoking","name":"Cigarette","keywords":["smoking","kills","tobacco","joint","smoke"],"skins":[{"unified":"1f6ac","native":"\uD83D\uDEAC"}],"version":1},"coffin":{"id":"coffin","name":"Coffin","keywords":["vampire","dead","die","death","rip","graveyard","cemetery","casket","funeral","box"],"skins":[{"unified":"26b0-fe0f","native":"\u26B0\uFE0F"}],"version":1},"headstone":{"id":"headstone","name":"Headstone","keywords":["death","rip","grave"],"skins":[{"unified":"1faa6","native":"\uD83E\uDEA6"}],"version":13},"funeral_urn":{"id":"funeral_urn","name":"Funeral Urn","keywords":["dead","die","death","rip","ashes"],"skins":[{"unified":"26b1-fe0f","native":"\u26B1\uFE0F"}],"version":1},"moyai":{"id":"moyai","name":"Moai","keywords":["moyai","rock","easter","island"],"skins":[{"unified":"1f5ff","native":"\uD83D\uDDFF"}],"version":1},"placard":{"id":"placard","name":"Placard","keywords":["announcement"],"skins":[{"unified":"1faa7","native":"\uD83E\uDEA7"}],"version":13},"identification_card":{"id":"identification_card","name":"Identification Card","keywords":["document"],"skins":[{"unified":"1faaa","native":"\uD83E\uDEAA"}],"version":14},"atm":{"id":"atm","name":"Atm Sign","keywords":["money","sales","cash","blue","square","payment","bank"],"skins":[{"unified":"1f3e7","native":"\uD83C\uDFE7"}],"version":1},"put_litter_in_its_place":{"id":"put_litter_in_its_place","name":"Litter in Bin Sign","keywords":["put","its","place","blue","square","human","info"],"skins":[{"unified":"1f6ae","native":"\uD83D\uDEAE"}],"version":1},"potable_water":{"id":"potable_water","name":"Potable Water","keywords":["blue","square","liquid","restroom","cleaning","faucet"],"skins":[{"unified":"1f6b0","native":"\uD83D\uDEB0"}],"version":1},"wheelchair":{"id":"wheelchair","name":"Wheelchair Symbol","keywords":["blue","square","disabled","accessibility"],"skins":[{"unified":"267f","native":"\u267F"}],"version":1},"mens":{"id":"mens","name":"Men\u2019s Room","keywords":["mens","men","s","toilet","restroom","wc","blue","square","gender","male"],"skins":[{"unified":"1f6b9","native":"\uD83D\uDEB9"}],"version":1},"womens":{"id":"womens","name":"Women\u2019s Room","keywords":["womens","women","s","purple","square","woman","female","toilet","loo","restroom","gender"],"skins":[{"unified":"1f6ba","native":"\uD83D\uDEBA"}],"version":1},"restroom":{"id":"restroom","name":"Restroom","keywords":["blue","square","toilet","refresh","wc","gender"],"skins":[{"unified":"1f6bb","native":"\uD83D\uDEBB"}],"version":1},"baby_symbol":{"id":"baby_symbol","name":"Baby Symbol","keywords":["orange","square","child"],"skins":[{"unified":"1f6bc","native":"\uD83D\uDEBC"}],"version":1},"wc":{"id":"wc","name":"Water Closet","keywords":["wc","toilet","restroom","blue","square"],"skins":[{"unified":"1f6be","native":"\uD83D\uDEBE"}],"version":1},"passport_control":{"id":"passport_control","name":"Passport Control","keywords":["custom","blue","square"],"skins":[{"unified":"1f6c2","native":"\uD83D\uDEC2"}],"version":1},"customs":{"id":"customs","name":"Customs","keywords":["passport","border","blue","square"],"skins":[{"unified":"1f6c3","native":"\uD83D\uDEC3"}],"version":1},"baggage_claim":{"id":"baggage_claim","name":"Baggage Claim","keywords":["blue","square","airport","transport"],"skins":[{"unified":"1f6c4","native":"\uD83D\uDEC4"}],"version":1},"left_luggage":{"id":"left_luggage","name":"Left Luggage","keywords":["blue","square","travel"],"skins":[{"unified":"1f6c5","native":"\uD83D\uDEC5"}],"version":1},"warning":{"id":"warning","name":"Warning","keywords":["exclamation","wip","alert","error","problem","issue"],"skins":[{"unified":"26a0-fe0f","native":"\u26A0\uFE0F"}],"version":1},"children_crossing":{"id":"children_crossing","name":"Children Crossing","keywords":["school","warning","danger","sign","driving","yellow","diamond"],"skins":[{"unified":"1f6b8","native":"\uD83D\uDEB8"}],"version":1},"no_entry":{"id":"no_entry","name":"No Entry","keywords":["limit","security","privacy","bad","denied","stop","circle"],"skins":[{"unified":"26d4","native":"\u26D4"}],"version":1},"no_entry_sign":{"id":"no_entry_sign","name":"Prohibited","keywords":["no","entry","sign","forbid","stop","limit","denied","disallow","circle"],"skins":[{"unified":"1f6ab","native":"\uD83D\uDEAB"}],"version":1},"no_bicycles":{"id":"no_bicycles","name":"No Bicycles","keywords":["cyclist","prohibited","circle"],"skins":[{"unified":"1f6b3","native":"\uD83D\uDEB3"}],"version":1},"no_smoking":{"id":"no_smoking","name":"No Smoking","keywords":["cigarette","blue","square","smell","smoke"],"skins":[{"unified":"1f6ad","native":"\uD83D\uDEAD"}],"version":1},"do_not_litter":{"id":"do_not_litter","name":"No Littering","keywords":["do","not","litter","trash","bin","garbage","circle"],"skins":[{"unified":"1f6af","native":"\uD83D\uDEAF"}],"version":1},"non-potable_water":{"id":"non-potable_water","name":"Non-Potable Water","keywords":["non","potable","drink","faucet","tap","circle"],"skins":[{"unified":"1f6b1","native":"\uD83D\uDEB1"}],"version":1},"no_pedestrians":{"id":"no_pedestrians","name":"No Pedestrians","keywords":["rules","crossing","walking","circle"],"skins":[{"unified":"1f6b7","native":"\uD83D\uDEB7"}],"version":1},"no_mobile_phones":{"id":"no_mobile_phones","name":"No Mobile Phones","keywords":["iphone","mute","circle"],"skins":[{"unified":"1f4f5","native":"\uD83D\uDCF5"}],"version":1},"underage":{"id":"underage","name":"No One Under Eighteen","keywords":["underage","18","drink","pub","night","minor","circle"],"skins":[{"unified":"1f51e","native":"\uD83D\uDD1E"}],"version":1},"radioactive_sign":{"id":"radioactive_sign","name":"Radioactive","keywords":["sign","nuclear","danger"],"skins":[{"unified":"2622-fe0f","native":"\u2622\uFE0F"}],"version":1},"biohazard_sign":{"id":"biohazard_sign","name":"Biohazard","keywords":["sign","danger"],"skins":[{"unified":"2623-fe0f","native":"\u2623\uFE0F"}],"version":1},"arrow_up":{"id":"arrow_up","name":"Up Arrow","keywords":["blue","square","continue","top","direction"],"skins":[{"unified":"2b06-fe0f","native":"\u2B06\uFE0F"}],"version":1},"arrow_upper_right":{"id":"arrow_upper_right","name":"Up-Right Arrow","keywords":["upper","right","up","blue","square","point","direction","diagonal","northeast"],"skins":[{"unified":"2197-fe0f","native":"\u2197\uFE0F"}],"version":1},"arrow_right":{"id":"arrow_right","name":"Right Arrow","keywords":["blue","square","next"],"skins":[{"unified":"27a1-fe0f","native":"\u27A1\uFE0F"}],"version":1},"arrow_lower_right":{"id":"arrow_lower_right","name":"South East Arrow","keywords":["lower","right","down","blue","square","direction","diagonal","southeast"],"skins":[{"unified":"2198-fe0f","native":"\u2198\uFE0F"}],"version":1},"arrow_down":{"id":"arrow_down","name":"Down Arrow","keywords":["blue","square","direction","bottom"],"skins":[{"unified":"2b07-fe0f","native":"\u2B07\uFE0F"}],"version":1},"arrow_lower_left":{"id":"arrow_lower_left","name":"Down-Left Arrow","keywords":["lower","left","down","blue","square","direction","diagonal","southwest"],"skins":[{"unified":"2199-fe0f","native":"\u2199\uFE0F"}],"version":1},"arrow_left":{"id":"arrow_left","name":"Left Arrow","keywords":["blue","square","previous","back"],"skins":[{"unified":"2b05-fe0f","native":"\u2B05\uFE0F"}],"version":1},"arrow_upper_left":{"id":"arrow_upper_left","name":"Up-Left Arrow","keywords":["upper","left","up","blue","square","point","direction","diagonal","northwest"],"skins":[{"unified":"2196-fe0f","native":"\u2196\uFE0F"}],"version":1},"arrow_up_down":{"id":"arrow_up_down","name":"Up Down Arrow","keywords":["blue","square","direction","way","vertical"],"skins":[{"unified":"2195-fe0f","native":"\u2195\uFE0F"}],"version":1},"left_right_arrow":{"id":"left_right_arrow","name":"Left Right Arrow","keywords":["shape","direction","horizontal","sideways"],"skins":[{"unified":"2194-fe0f","native":"\u2194\uFE0F"}],"version":1},"leftwards_arrow_with_hook":{"id":"leftwards_arrow_with_hook","name":"Right Arrow Curving Left","keywords":["leftwards","with","hook","back","return","blue","square","undo","enter"],"skins":[{"unified":"21a9-fe0f","native":"\u21A9\uFE0F"}],"version":1},"arrow_right_hook":{"id":"arrow_right_hook","name":"Left Arrow Curving Right","keywords":["hook","blue","square","return","rotate","direction"],"skins":[{"unified":"21aa-fe0f","native":"\u21AA\uFE0F"}],"version":1},"arrow_heading_up":{"id":"arrow_heading_up","name":"Right Arrow Curving Up","keywords":["heading","blue","square","direction","top"],"skins":[{"unified":"2934-fe0f","native":"\u2934\uFE0F"}],"version":1},"arrow_heading_down":{"id":"arrow_heading_down","name":"Right Arrow Curving Down","keywords":["heading","blue","square","direction","bottom"],"skins":[{"unified":"2935-fe0f","native":"\u2935\uFE0F"}],"version":1},"arrows_clockwise":{"id":"arrows_clockwise","name":"Clockwise Vertical Arrows","keywords":["sync","cycle","round","repeat"],"skins":[{"unified":"1f503","native":"\uD83D\uDD03"}],"version":1},"arrows_counterclockwise":{"id":"arrows_counterclockwise","name":"Counterclockwise Arrows Button","keywords":["blue","square","sync","cycle"],"skins":[{"unified":"1f504","native":"\uD83D\uDD04"}],"version":1},"back":{"id":"back","name":"Back Arrow","keywords":["words","return"],"skins":[{"unified":"1f519","native":"\uD83D\uDD19"}],"version":1},"end":{"id":"end","name":"End Arrow","keywords":["words"],"skins":[{"unified":"1f51a","native":"\uD83D\uDD1A"}],"version":1},"on":{"id":"on","name":"On! Arrow","keywords":["on","words"],"skins":[{"unified":"1f51b","native":"\uD83D\uDD1B"}],"version":1},"soon":{"id":"soon","name":"Soon Arrow","keywords":["words"],"skins":[{"unified":"1f51c","native":"\uD83D\uDD1C"}],"version":1},"top":{"id":"top","name":"Top Arrow","keywords":["words","blue","square"],"skins":[{"unified":"1f51d","native":"\uD83D\uDD1D"}],"version":1},"place_of_worship":{"id":"place_of_worship","name":"Place of Worship","keywords":["religion","church","temple","prayer"],"skins":[{"unified":"1f6d0","native":"\uD83D\uDED0"}],"version":1},"atom_symbol":{"id":"atom_symbol","name":"Atom Symbol","keywords":["science","physics","chemistry"],"skins":[{"unified":"269b-fe0f","native":"\u269B\uFE0F"}],"version":1},"om_symbol":{"id":"om_symbol","name":"Om","keywords":["symbol","hinduism","buddhism","sikhism","jainism"],"skins":[{"unified":"1f549-fe0f","native":"\uD83D\uDD49\uFE0F"}],"version":1},"star_of_david":{"id":"star_of_david","name":"Star of David","keywords":["judaism"],"skins":[{"unified":"2721-fe0f","native":"\u2721\uFE0F"}],"version":1},"wheel_of_dharma":{"id":"wheel_of_dharma","name":"Wheel of Dharma","keywords":["hinduism","buddhism","sikhism","jainism"],"skins":[{"unified":"2638-fe0f","native":"\u2638\uFE0F"}],"version":1},"yin_yang":{"id":"yin_yang","name":"Yin Yang","keywords":["balance"],"skins":[{"unified":"262f-fe0f","native":"\u262F\uFE0F"}],"version":1},"latin_cross":{"id":"latin_cross","name":"Latin Cross","keywords":["christianity"],"skins":[{"unified":"271d-fe0f","native":"\u271D\uFE0F"}],"version":1},"orthodox_cross":{"id":"orthodox_cross","name":"Orthodox Cross","keywords":["suppedaneum","religion"],"skins":[{"unified":"2626-fe0f","native":"\u2626\uFE0F"}],"version":1},"star_and_crescent":{"id":"star_and_crescent","name":"Star and Crescent","keywords":["islam"],"skins":[{"unified":"262a-fe0f","native":"\u262A\uFE0F"}],"version":1},"peace_symbol":{"id":"peace_symbol","name":"Peace Symbol","keywords":["hippie"],"skins":[{"unified":"262e-fe0f","native":"\u262E\uFE0F"}],"version":1},"menorah_with_nine_branches":{"id":"menorah_with_nine_branches","name":"Menorah","keywords":["with","nine","branches","hanukkah","candles","jewish"],"skins":[{"unified":"1f54e","native":"\uD83D\uDD4E"}],"version":1},"six_pointed_star":{"id":"six_pointed_star","name":"Dotted Six-Pointed Star","keywords":["six","pointed","purple","square","religion","jewish","hexagram"],"skins":[{"unified":"1f52f","native":"\uD83D\uDD2F"}],"version":1},"aries":{"id":"aries","name":"Aries","keywords":["sign","purple","square","zodiac","astrology"],"skins":[{"unified":"2648","native":"\u2648"}],"version":1},"taurus":{"id":"taurus","name":"Taurus","keywords":["purple","square","sign","zodiac","astrology"],"skins":[{"unified":"2649","native":"\u2649"}],"version":1},"gemini":{"id":"gemini","name":"Gemini","keywords":["sign","zodiac","purple","square","astrology"],"skins":[{"unified":"264a","native":"\u264A"}],"version":1},"cancer":{"id":"cancer","name":"Cancer","keywords":["sign","zodiac","purple","square","astrology"],"skins":[{"unified":"264b","native":"\u264B"}],"version":1},"leo":{"id":"leo","name":"Leo","keywords":["sign","purple","square","zodiac","astrology"],"skins":[{"unified":"264c","native":"\u264C"}],"version":1},"virgo":{"id":"virgo","name":"Virgo","keywords":["sign","zodiac","purple","square","astrology"],"skins":[{"unified":"264d","native":"\u264D"}],"version":1},"libra":{"id":"libra","name":"Libra","keywords":["sign","purple","square","zodiac","astrology"],"skins":[{"unified":"264e","native":"\u264E"}],"version":1},"scorpius":{"id":"scorpius","name":"Scorpio","keywords":["scorpius","sign","zodiac","purple","square","astrology"],"skins":[{"unified":"264f","native":"\u264F"}],"version":1},"sagittarius":{"id":"sagittarius","name":"Sagittarius","keywords":["sign","zodiac","purple","square","astrology"],"skins":[{"unified":"2650","native":"\u2650"}],"version":1},"capricorn":{"id":"capricorn","name":"Capricorn","keywords":["sign","zodiac","purple","square","astrology"],"skins":[{"unified":"2651","native":"\u2651"}],"version":1},"aquarius":{"id":"aquarius","name":"Aquarius","keywords":["sign","purple","square","zodiac","astrology"],"skins":[{"unified":"2652","native":"\u2652"}],"version":1},"pisces":{"id":"pisces","name":"Pisces","keywords":["purple","square","sign","zodiac","astrology"],"skins":[{"unified":"2653","native":"\u2653"}],"version":1},"ophiuchus":{"id":"ophiuchus","name":"Ophiuchus","keywords":["sign","purple","square","constellation","astrology"],"skins":[{"unified":"26ce","native":"\u26CE"}],"version":1},"twisted_rightwards_arrows":{"id":"twisted_rightwards_arrows","name":"Shuffle Tracks Button","keywords":["twisted","rightwards","arrows","blue","square","music","random"],"skins":[{"unified":"1f500","native":"\uD83D\uDD00"}],"version":1},"repeat":{"id":"repeat","name":"Repeat Button","keywords":["loop","record"],"skins":[{"unified":"1f501","native":"\uD83D\uDD01"}],"version":1},"repeat_one":{"id":"repeat_one","name":"Repeat Single Button","keywords":["one","blue","square","loop"],"skins":[{"unified":"1f502","native":"\uD83D\uDD02"}],"version":1},"arrow_forward":{"id":"arrow_forward","name":"Play Button","keywords":["arrow","forward","blue","square","right","direction"],"skins":[{"unified":"25b6-fe0f","native":"\u25B6\uFE0F"}],"version":1},"fast_forward":{"id":"fast_forward","name":"Fast-Forward Button","keywords":["fast","forward","blue","square","play","speed","continue"],"skins":[{"unified":"23e9","native":"\u23E9"}],"version":1},"black_right_pointing_double_triangle_with_vertical_bar":{"id":"black_right_pointing_double_triangle_with_vertical_bar","name":"Next Track Button","keywords":["black","right","pointing","double","triangle","with","vertical","bar","forward","blue","square"],"skins":[{"unified":"23ed-fe0f","native":"\u23ED\uFE0F"}],"version":1},"black_right_pointing_triangle_with_double_vertical_bar":{"id":"black_right_pointing_triangle_with_double_vertical_bar","name":"Play or Pause Button","keywords":["black","right","pointing","triangle","with","double","vertical","bar","blue","square"],"skins":[{"unified":"23ef-fe0f","native":"\u23EF\uFE0F"}],"version":1},"arrow_backward":{"id":"arrow_backward","name":"Reverse Button","keywords":["arrow","backward","blue","square","left","direction"],"skins":[{"unified":"25c0-fe0f","native":"\u25C0\uFE0F"}],"version":1},"rewind":{"id":"rewind","name":"Fast Reverse Button","keywords":["rewind","play","blue","square"],"skins":[{"unified":"23ea","native":"\u23EA"}],"version":1},"black_left_pointing_double_triangle_with_vertical_bar":{"id":"black_left_pointing_double_triangle_with_vertical_bar","name":"Last Track Button","keywords":["black","left","pointing","double","triangle","with","vertical","bar","backward"],"skins":[{"unified":"23ee-fe0f","native":"\u23EE\uFE0F"}],"version":1},"arrow_up_small":{"id":"arrow_up_small","name":"Upwards Button","keywords":["arrow","up","small","blue","square","triangle","direction","point","forward","top"],"skins":[{"unified":"1f53c","native":"\uD83D\uDD3C"}],"version":1},"arrow_double_up":{"id":"arrow_double_up","name":"Fast Up Button","keywords":["arrow","double","blue","square","direction","top"],"skins":[{"unified":"23eb","native":"\u23EB"}],"version":1},"arrow_down_small":{"id":"arrow_down_small","name":"Downwards Button","keywords":["arrow","down","small","blue","square","direction","bottom"],"skins":[{"unified":"1f53d","native":"\uD83D\uDD3D"}],"version":1},"arrow_double_down":{"id":"arrow_double_down","name":"Fast Down Button","keywords":["arrow","double","blue","square","direction","bottom"],"skins":[{"unified":"23ec","native":"\u23EC"}],"version":1},"double_vertical_bar":{"id":"double_vertical_bar","name":"Pause Button","keywords":["double","vertical","bar","blue","square"],"skins":[{"unified":"23f8-fe0f","native":"\u23F8\uFE0F"}],"version":1},"black_square_for_stop":{"id":"black_square_for_stop","name":"Stop Button","keywords":["black","square","for","blue"],"skins":[{"unified":"23f9-fe0f","native":"\u23F9\uFE0F"}],"version":1},"black_circle_for_record":{"id":"black_circle_for_record","name":"Record Button","keywords":["black","circle","for","blue","square"],"skins":[{"unified":"23fa-fe0f","native":"\u23FA\uFE0F"}],"version":1},"eject":{"id":"eject","name":"Eject Button","keywords":["blue","square"],"skins":[{"unified":"23cf-fe0f","native":"\u23CF\uFE0F"}],"version":1},"cinema":{"id":"cinema","name":"Cinema","keywords":["blue","square","record","film","movie","curtain","stage","theater"],"skins":[{"unified":"1f3a6","native":"\uD83C\uDFA6"}],"version":1},"low_brightness":{"id":"low_brightness","name":"Dim Button","keywords":["low","brightness","sun","afternoon","warm","summer"],"skins":[{"unified":"1f505","native":"\uD83D\uDD05"}],"version":1},"high_brightness":{"id":"high_brightness","name":"Bright Button","keywords":["high","brightness","sun","light"],"skins":[{"unified":"1f506","native":"\uD83D\uDD06"}],"version":1},"signal_strength":{"id":"signal_strength","name":"Antenna Bars","keywords":["signal","strength","blue","square","reception","phone","internet","connection","wifi","bluetooth"],"skins":[{"unified":"1f4f6","native":"\uD83D\uDCF6"}],"version":1},"vibration_mode":{"id":"vibration_mode","name":"Vibration Mode","keywords":["orange","square","phone"],"skins":[{"unified":"1f4f3","native":"\uD83D\uDCF3"}],"version":1},"mobile_phone_off":{"id":"mobile_phone_off","name":"Mobile Phone off","keywords":["mute","orange","square","silence","quiet"],"skins":[{"unified":"1f4f4","native":"\uD83D\uDCF4"}],"version":1},"female_sign":{"id":"female_sign","name":"Female Sign","keywords":["woman","women","lady","girl"],"skins":[{"unified":"2640-fe0f","native":"\u2640\uFE0F"}],"version":4},"male_sign":{"id":"male_sign","name":"Male Sign","keywords":["man","boy","men"],"skins":[{"unified":"2642-fe0f","native":"\u2642\uFE0F"}],"version":4},"transgender_symbol":{"id":"transgender_symbol","name":"Transgender Symbol","keywords":["lgbtq"],"skins":[{"unified":"26a7-fe0f","native":"\u26A7\uFE0F"}],"version":13},"heavy_multiplication_x":{"id":"heavy_multiplication_x","name":"Multiply","keywords":["heavy","multiplication","x","sign","math","calculation"],"skins":[{"unified":"2716-fe0f","native":"\u2716\uFE0F"}],"version":1},"heavy_plus_sign":{"id":"heavy_plus_sign","name":"Plus","keywords":["heavy","sign","math","calculation","addition","more","increase"],"skins":[{"unified":"2795","native":"\u2795"}],"version":1},"heavy_minus_sign":{"id":"heavy_minus_sign","name":"Minus","keywords":["heavy","sign","math","calculation","subtract","less"],"skins":[{"unified":"2796","native":"\u2796"}],"version":1},"heavy_division_sign":{"id":"heavy_division_sign","name":"Divide","keywords":["heavy","division","sign","math","calculation"],"skins":[{"unified":"2797","native":"\u2797"}],"version":1},"heavy_equals_sign":{"id":"heavy_equals_sign","name":"Heavy Equals Sign","keywords":["math"],"skins":[{"unified":"1f7f0","native":"\uD83D\uDFF0"}],"version":14},"infinity":{"id":"infinity","name":"Infinity","keywords":["forever"],"skins":[{"unified":"267e-fe0f","native":"\u267E\uFE0F"}],"version":11},"bangbang":{"id":"bangbang","name":"Double Exclamation Mark","keywords":["bangbang","surprise"],"skins":[{"unified":"203c-fe0f","native":"\u203C\uFE0F"}],"version":1},"interrobang":{"id":"interrobang","name":"Exclamation Question Mark","keywords":["interrobang","wat","punctuation","surprise"],"skins":[{"unified":"2049-fe0f","native":"\u2049\uFE0F"}],"version":1},"question":{"id":"question","name":"Red Question Mark","keywords":["doubt","confused"],"skins":[{"unified":"2753","native":"\u2753"}],"version":1},"grey_question":{"id":"grey_question","name":"White Question Mark","keywords":["grey","doubts","gray","huh","confused"],"skins":[{"unified":"2754","native":"\u2754"}],"version":1},"grey_exclamation":{"id":"grey_exclamation","name":"White Exclamation Mark","keywords":["grey","surprise","punctuation","gray","wow","warning"],"skins":[{"unified":"2755","native":"\u2755"}],"version":1},"exclamation":{"id":"exclamation","name":"Red Exclamation Mark","keywords":["heavy","danger","surprise","punctuation","wow","warning"],"skins":[{"unified":"2757","native":"\u2757"}],"version":1},"wavy_dash":{"id":"wavy_dash","name":"Wavy Dash","keywords":["draw","line","moustache","mustache","squiggle","scribble"],"skins":[{"unified":"3030-fe0f","native":"\u3030\uFE0F"}],"version":1},"currency_exchange":{"id":"currency_exchange","name":"Currency Exchange","keywords":["money","sales","dollar","travel"],"skins":[{"unified":"1f4b1","native":"\uD83D\uDCB1"}],"version":1},"heavy_dollar_sign":{"id":"heavy_dollar_sign","name":"Heavy Dollar Sign","keywords":["money","sales","payment","currency","buck"],"skins":[{"unified":"1f4b2","native":"\uD83D\uDCB2"}],"version":1},"medical_symbol":{"id":"medical_symbol","name":"Medical Symbol","keywords":["staff","of","aesculapius","health","hospital"],"skins":[{"unified":"2695-fe0f","native":"\u2695\uFE0F"}],"version":4},"recycle":{"id":"recycle","name":"Recycling Symbol","keywords":["recycle","arrow","environment","garbage","trash"],"skins":[{"unified":"267b-fe0f","native":"\u267B\uFE0F"}],"version":1},"fleur_de_lis":{"id":"fleur_de_lis","name":"Fleur-De-Lis","keywords":["fleur","de","lis","decorative","scout"],"skins":[{"unified":"269c-fe0f","native":"\u269C\uFE0F"}],"version":1},"trident":{"id":"trident","name":"Trident Emblem","keywords":["weapon","spear"],"skins":[{"unified":"1f531","native":"\uD83D\uDD31"}],"version":1},"name_badge":{"id":"name_badge","name":"Name Badge","keywords":["fire","forbid"],"skins":[{"unified":"1f4db","native":"\uD83D\uDCDB"}],"version":1},"beginner":{"id":"beginner","name":"Japanese Symbol for Beginner","keywords":["badge","shield"],"skins":[{"unified":"1f530","native":"\uD83D\uDD30"}],"version":1},"o":{"id":"o","name":"Hollow Red Circle","keywords":["o","round"],"skins":[{"unified":"2b55","native":"\u2B55"}],"version":1},"white_check_mark":{"id":"white_check_mark","name":"Check Mark Button","keywords":["white","green","square","ok","agree","vote","election","answer","tick"],"skins":[{"unified":"2705","native":"\u2705"}],"version":1},"ballot_box_with_check":{"id":"ballot_box_with_check","name":"Check Box with Check","keywords":["ballot","ok","agree","confirm","black","square","vote","election","yes","tick"],"skins":[{"unified":"2611-fe0f","native":"\u2611\uFE0F"}],"version":1},"heavy_check_mark":{"id":"heavy_check_mark","name":"Check Mark","keywords":["heavy","ok","nike","answer","yes","tick"],"skins":[{"unified":"2714-fe0f","native":"\u2714\uFE0F"}],"version":1},"x":{"id":"x","name":"Cross Mark","keywords":["x","no","delete","remove","cancel","red"],"skins":[{"unified":"274c","native":"\u274C"}],"version":1},"negative_squared_cross_mark":{"id":"negative_squared_cross_mark","name":"Cross Mark Button","keywords":["negative","squared","x","green","square","no","deny"],"skins":[{"unified":"274e","native":"\u274E"}],"version":1},"curly_loop":{"id":"curly_loop","name":"Curly Loop","keywords":["scribble","draw","shape","squiggle"],"skins":[{"unified":"27b0","native":"\u27B0"}],"version":1},"loop":{"id":"loop","name":"Double Curly Loop","keywords":["tape","cassette"],"skins":[{"unified":"27bf","native":"\u27BF"}],"version":1},"part_alternation_mark":{"id":"part_alternation_mark","name":"Part Alternation Mark","keywords":["graph","presentation","stats","business","economics","bad"],"skins":[{"unified":"303d-fe0f","native":"\u303D\uFE0F"}],"version":1},"eight_spoked_asterisk":{"id":"eight_spoked_asterisk","name":"Eight Spoked Asterisk","keywords":["star","sparkle","green","square"],"skins":[{"unified":"2733-fe0f","native":"\u2733\uFE0F"}],"version":1},"eight_pointed_black_star":{"id":"eight_pointed_black_star","name":"Eight-Pointed Star","keywords":["eight","pointed","black","orange","square","shape","polygon"],"skins":[{"unified":"2734-fe0f","native":"\u2734\uFE0F"}],"version":1},"sparkle":{"id":"sparkle","name":"Sparkle","keywords":["stars","green","square","awesome","good","fireworks"],"skins":[{"unified":"2747-fe0f","native":"\u2747\uFE0F"}],"version":1},"copyright":{"id":"copyright","name":"Copyright","keywords":["ip","license","circle","law","legal"],"skins":[{"unified":"00a9-fe0f","native":"\xa9\uFE0F"}],"version":1},"registered":{"id":"registered","name":"Registered","keywords":["alphabet","circle"],"skins":[{"unified":"00ae-fe0f","native":"\xae\uFE0F"}],"version":1},"tm":{"id":"tm","name":"Trade Mark","keywords":["tm","trademark","brand","law","legal"],"skins":[{"unified":"2122-fe0f","native":"\u2122\uFE0F"}],"version":1},"hash":{"id":"hash","name":"Hash Key","keywords":["keycap","","symbol","blue","square","twitter"],"skins":[{"unified":"0023-fe0f-20e3","native":"#\uFE0F\u20E3"}],"version":1},"keycap_star":{"id":"keycap_star","name":"Keycap: *","keywords":["keycap","star",""],"skins":[{"unified":"002a-fe0f-20e3","native":"*\uFE0F\u20E3"}],"version":2},"zero":{"id":"zero","name":"Keycap 0","keywords":["zero","numbers","blue","square","null"],"skins":[{"unified":"0030-fe0f-20e3","native":"0\uFE0F\u20E3"}],"version":1},"one":{"id":"one","name":"Keycap 1","keywords":["one","blue","square","numbers"],"skins":[{"unified":"0031-fe0f-20e3","native":"1\uFE0F\u20E3"}],"version":1},"two":{"id":"two","name":"Keycap 2","keywords":["two","numbers","prime","blue","square"],"skins":[{"unified":"0032-fe0f-20e3","native":"2\uFE0F\u20E3"}],"version":1},"three":{"id":"three","name":"Keycap 3","keywords":["three","numbers","prime","blue","square"],"skins":[{"unified":"0033-fe0f-20e3","native":"3\uFE0F\u20E3"}],"version":1},"four":{"id":"four","name":"Keycap 4","keywords":["four","numbers","blue","square"],"skins":[{"unified":"0034-fe0f-20e3","native":"4\uFE0F\u20E3"}],"version":1},"five":{"id":"five","name":"Keycap 5","keywords":["five","numbers","blue","square","prime"],"skins":[{"unified":"0035-fe0f-20e3","native":"5\uFE0F\u20E3"}],"version":1},"six":{"id":"six","name":"Keycap 6","keywords":["six","numbers","blue","square"],"skins":[{"unified":"0036-fe0f-20e3","native":"6\uFE0F\u20E3"}],"version":1},"seven":{"id":"seven","name":"Keycap 7","keywords":["seven","numbers","blue","square","prime"],"skins":[{"unified":"0037-fe0f-20e3","native":"7\uFE0F\u20E3"}],"version":1},"eight":{"id":"eight","name":"Keycap 8","keywords":["eight","blue","square","numbers"],"skins":[{"unified":"0038-fe0f-20e3","native":"8\uFE0F\u20E3"}],"version":1},"nine":{"id":"nine","name":"Keycap 9","keywords":["nine","blue","square","numbers"],"skins":[{"unified":"0039-fe0f-20e3","native":"9\uFE0F\u20E3"}],"version":1},"keycap_ten":{"id":"keycap_ten","name":"Keycap 10","keywords":["ten","numbers","blue","square"],"skins":[{"unified":"1f51f","native":"\uD83D\uDD1F"}],"version":1},"capital_abcd":{"id":"capital_abcd","name":"Input Latin Uppercase","keywords":["capital","abcd","alphabet","words","blue","square"],"skins":[{"unified":"1f520","native":"\uD83D\uDD20"}],"version":1},"abcd":{"id":"abcd","name":"Input Latin Lowercase","keywords":["abcd","blue","square","alphabet"],"skins":[{"unified":"1f521","native":"\uD83D\uDD21"}],"version":1},"symbols":{"id":"symbols","name":"Input Symbols","keywords":["blue","square","music","note","ampersand","percent","glyphs","characters"],"skins":[{"unified":"1f523","native":"\uD83D\uDD23"}],"version":1},"abc":{"id":"abc","name":"Input Latin Letters","keywords":["abc","blue","square","alphabet"],"skins":[{"unified":"1f524","native":"\uD83D\uDD24"}],"version":1},"a":{"id":"a","name":"A Button (blood Type)","keywords":["red","square","alphabet","letter"],"skins":[{"unified":"1f170-fe0f","native":"\uD83C\uDD70\uFE0F"}],"version":1},"ab":{"id":"ab","name":"Negative Squared Ab","keywords":["button","red","square","alphabet"],"skins":[{"unified":"1f18e","native":"\uD83C\uDD8E"}],"version":1},"b":{"id":"b","name":"B Button (blood Type)","keywords":["red","square","alphabet","letter"],"skins":[{"unified":"1f171-fe0f","native":"\uD83C\uDD71\uFE0F"}],"version":1},"cl":{"id":"cl","name":"Cl Button","keywords":["alphabet","words","red","square"],"skins":[{"unified":"1f191","native":"\uD83C\uDD91"}],"version":1},"cool":{"id":"cool","name":"Cool Button","keywords":["words","blue","square"],"skins":[{"unified":"1f192","native":"\uD83C\uDD92"}],"version":1},"free":{"id":"free","name":"Free Button","keywords":["blue","square","words"],"skins":[{"unified":"1f193","native":"\uD83C\uDD93"}],"version":1},"information_source":{"id":"information_source","name":"Information","keywords":["source","blue","square","alphabet","letter"],"skins":[{"unified":"2139-fe0f","native":"\u2139\uFE0F"}],"version":1},"id":{"id":"id","name":"Id Button","keywords":["purple","square","words"],"skins":[{"unified":"1f194","native":"\uD83C\uDD94"}],"version":1},"m":{"id":"m","name":"Circled M","keywords":["alphabet","blue","circle","letter"],"skins":[{"unified":"24c2-fe0f","native":"\u24C2\uFE0F"}],"version":1},"new":{"id":"new","name":"New Button","keywords":["blue","square","words","start"],"skins":[{"unified":"1f195","native":"\uD83C\uDD95"}],"version":1},"ng":{"id":"ng","name":"Ng Button","keywords":["blue","square","words","shape","icon"],"skins":[{"unified":"1f196","native":"\uD83C\uDD96"}],"version":1},"o2":{"id":"o2","name":"O Button (blood Type)","keywords":["o2","alphabet","red","square","letter"],"skins":[{"unified":"1f17e-fe0f","native":"\uD83C\uDD7E\uFE0F"}],"version":1},"ok":{"id":"ok","name":"Ok Button","keywords":["good","agree","yes","blue","square"],"skins":[{"unified":"1f197","native":"\uD83C\uDD97"}],"version":1},"parking":{"id":"parking","name":"P Button","keywords":["parking","cars","blue","square","alphabet","letter"],"skins":[{"unified":"1f17f-fe0f","native":"\uD83C\uDD7F\uFE0F"}],"version":1},"sos":{"id":"sos","name":"Sos Button","keywords":["help","red","square","words","emergency","911"],"skins":[{"unified":"1f198","native":"\uD83C\uDD98"}],"version":1},"up":{"id":"up","name":"Up! Button","keywords":["up","blue","square","above","high"],"skins":[{"unified":"1f199","native":"\uD83C\uDD99"}],"version":1},"vs":{"id":"vs","name":"Vs Button","keywords":["words","orange","square"],"skins":[{"unified":"1f19a","native":"\uD83C\uDD9A"}],"version":1},"koko":{"id":"koko","name":"Squared Katakana Koko","keywords":["japanese","here","button","blue","square","destination"],"skins":[{"unified":"1f201","native":"\uD83C\uDE01"}],"version":1},"sa":{"id":"sa","name":"Squared Katakana Sa","keywords":["japanese","service","charge","button","blue","square"],"skins":[{"unified":"1f202-fe0f","native":"\uD83C\uDE02\uFE0F"}],"version":1},"u6708":{"id":"u6708","name":"Japanese \u201Cmonthly Amount\u201D Button","keywords":["u6708","monthly","amount","chinese","month","moon","orange","square","kanji"],"skins":[{"unified":"1f237-fe0f","native":"\uD83C\uDE37\uFE0F"}],"version":1},"u6709":{"id":"u6709","name":"Squared Cjk Unified Ideograph-6709","keywords":["u6709","japanese","not","free","of","charge","button","orange","square","chinese","have","kanji"],"skins":[{"unified":"1f236","native":"\uD83C\uDE36"}],"version":1},"u6307":{"id":"u6307","name":"Japanese \u201Creserved\u201D Button","keywords":["u6307","reserved","chinese","point","green","square","kanji"],"skins":[{"unified":"1f22f","native":"\uD83C\uDE2F"}],"version":1},"ideograph_advantage":{"id":"ideograph_advantage","name":"Japanese \u201Cbargain\u201D Button","keywords":["ideograph","advantage","bargain","chinese","kanji","obtain","get","circle"],"skins":[{"unified":"1f250","native":"\uD83C\uDE50"}],"version":1},"u5272":{"id":"u5272","name":"Japanese \u201Cdiscount\u201D Button","keywords":["u5272","discount","cut","divide","chinese","kanji","pink","square"],"skins":[{"unified":"1f239","native":"\uD83C\uDE39"}],"version":1},"u7121":{"id":"u7121","name":"Japanese \u201Cfree of Charge\u201D Button","keywords":["u7121","free","charge","nothing","chinese","kanji","orange","square"],"skins":[{"unified":"1f21a","native":"\uD83C\uDE1A"}],"version":1},"u7981":{"id":"u7981","name":"Japanese \u201Cprohibited\u201D Button","keywords":["u7981","prohibited","kanji","chinese","forbidden","limit","restricted","red","square"],"skins":[{"unified":"1f232","native":"\uD83C\uDE32"}],"version":1},"accept":{"id":"accept","name":"Circled Ideograph Accept","keywords":["japanese","acceptable","button","ok","good","chinese","kanji","agree","yes","orange","circle"],"skins":[{"unified":"1f251","native":"\uD83C\uDE51"}],"version":1},"u7533":{"id":"u7533","name":"Japanese \u201Capplication\u201D Button","keywords":["u7533","application","chinese","kanji","orange","square"],"skins":[{"unified":"1f238","native":"\uD83C\uDE38"}],"version":1},"u5408":{"id":"u5408","name":"Japanese \u201Cpassing Grade\u201D Button","keywords":["u5408","passing","grade","chinese","join","kanji","red","square"],"skins":[{"unified":"1f234","native":"\uD83C\uDE34"}],"version":1},"u7a7a":{"id":"u7a7a","name":"Japanese \u201Cvacancy\u201D Button","keywords":["u7a7a","vacancy","kanji","chinese","empty","sky","blue","square"],"skins":[{"unified":"1f233","native":"\uD83C\uDE33"}],"version":1},"congratulations":{"id":"congratulations","name":"Circled Ideograph Congratulation","keywords":["congratulations","japanese","button","chinese","kanji","red","circle"],"skins":[{"unified":"3297-fe0f","native":"\u3297\uFE0F"}],"version":1},"secret":{"id":"secret","name":"Circled Ideograph Secret","keywords":["japanese","button","privacy","chinese","sshh","kanji","red","circle"],"skins":[{"unified":"3299-fe0f","native":"\u3299\uFE0F"}],"version":1},"u55b6":{"id":"u55b6","name":"Squared Cjk Unified Ideograph-55b6","keywords":["u55b6","japanese","open","for","business","button","opening","hours","orange","square"],"skins":[{"unified":"1f23a","native":"\uD83C\uDE3A"}],"version":1},"u6e80":{"id":"u6e80","name":"Japanese \u201Cno Vacancy\u201D Button","keywords":["u6e80","no","vacancy","full","chinese","red","square","kanji"],"skins":[{"unified":"1f235","native":"\uD83C\uDE35"}],"version":1},"red_circle":{"id":"red_circle","name":"Red Circle","keywords":["shape","error","danger"],"skins":[{"unified":"1f534","native":"\uD83D\uDD34"}],"version":1},"large_orange_circle":{"id":"large_orange_circle","name":"Orange Circle","keywords":["large","round"],"skins":[{"unified":"1f7e0","native":"\uD83D\uDFE0"}],"version":12},"large_yellow_circle":{"id":"large_yellow_circle","name":"Yellow Circle","keywords":["large","round"],"skins":[{"unified":"1f7e1","native":"\uD83D\uDFE1"}],"version":12},"large_green_circle":{"id":"large_green_circle","name":"Green Circle","keywords":["large","round"],"skins":[{"unified":"1f7e2","native":"\uD83D\uDFE2"}],"version":12},"large_blue_circle":{"id":"large_blue_circle","name":"Blue Circle","keywords":["large","shape","icon","button"],"skins":[{"unified":"1f535","native":"\uD83D\uDD35"}],"version":1},"large_purple_circle":{"id":"large_purple_circle","name":"Purple Circle","keywords":["large","round"],"skins":[{"unified":"1f7e3","native":"\uD83D\uDFE3"}],"version":12},"large_brown_circle":{"id":"large_brown_circle","name":"Brown Circle","keywords":["large","round"],"skins":[{"unified":"1f7e4","native":"\uD83D\uDFE4"}],"version":12},"black_circle":{"id":"black_circle","name":"Black Circle","keywords":["shape","button","round"],"skins":[{"unified":"26ab","native":"\u26AB"}],"version":1},"white_circle":{"id":"white_circle","name":"White Circle","keywords":["shape","round"],"skins":[{"unified":"26aa","native":"\u26AA"}],"version":1},"large_red_square":{"id":"large_red_square","name":"Red Square","keywords":["large"],"skins":[{"unified":"1f7e5","native":"\uD83D\uDFE5"}],"version":12},"large_orange_square":{"id":"large_orange_square","name":"Orange Square","keywords":["large"],"skins":[{"unified":"1f7e7","native":"\uD83D\uDFE7"}],"version":12},"large_yellow_square":{"id":"large_yellow_square","name":"Yellow Square","keywords":["large"],"skins":[{"unified":"1f7e8","native":"\uD83D\uDFE8"}],"version":12},"large_green_square":{"id":"large_green_square","name":"Green Square","keywords":["large"],"skins":[{"unified":"1f7e9","native":"\uD83D\uDFE9"}],"version":12},"large_blue_square":{"id":"large_blue_square","name":"Blue Square","keywords":["large"],"skins":[{"unified":"1f7e6","native":"\uD83D\uDFE6"}],"version":12},"large_purple_square":{"id":"large_purple_square","name":"Purple Square","keywords":["large"],"skins":[{"unified":"1f7ea","native":"\uD83D\uDFEA"}],"version":12},"large_brown_square":{"id":"large_brown_square","name":"Brown Square","keywords":["large"],"skins":[{"unified":"1f7eb","native":"\uD83D\uDFEB"}],"version":12},"black_large_square":{"id":"black_large_square","name":"Black Large Square","keywords":["shape","icon","button"],"skins":[{"unified":"2b1b","native":"\u2B1B"}],"version":1},"white_large_square":{"id":"white_large_square","name":"White Large Square","keywords":["shape","icon","stone","button"],"skins":[{"unified":"2b1c","native":"\u2B1C"}],"version":1},"black_medium_square":{"id":"black_medium_square","name":"Black Medium Square","keywords":["shape","button","icon"],"skins":[{"unified":"25fc-fe0f","native":"\u25FC\uFE0F"}],"version":1},"white_medium_square":{"id":"white_medium_square","name":"White Medium Square","keywords":["shape","stone","icon"],"skins":[{"unified":"25fb-fe0f","native":"\u25FB\uFE0F"}],"version":1},"black_medium_small_square":{"id":"black_medium_small_square","name":"Black Medium Small Square","keywords":["icon","shape","button"],"skins":[{"unified":"25fe","native":"\u25FE"}],"version":1},"white_medium_small_square":{"id":"white_medium_small_square","name":"White Medium Small Square","keywords":["shape","stone","icon","button"],"skins":[{"unified":"25fd","native":"\u25FD"}],"version":1},"black_small_square":{"id":"black_small_square","name":"Black Small Square","keywords":["shape","icon"],"skins":[{"unified":"25aa-fe0f","native":"\u25AA\uFE0F"}],"version":1},"white_small_square":{"id":"white_small_square","name":"White Small Square","keywords":["shape","icon"],"skins":[{"unified":"25ab-fe0f","native":"\u25AB\uFE0F"}],"version":1},"large_orange_diamond":{"id":"large_orange_diamond","name":"Large Orange Diamond","keywords":["shape","jewel","gem"],"skins":[{"unified":"1f536","native":"\uD83D\uDD36"}],"version":1},"large_blue_diamond":{"id":"large_blue_diamond","name":"Large Blue Diamond","keywords":["shape","jewel","gem"],"skins":[{"unified":"1f537","native":"\uD83D\uDD37"}],"version":1},"small_orange_diamond":{"id":"small_orange_diamond","name":"Small Orange Diamond","keywords":["shape","jewel","gem"],"skins":[{"unified":"1f538","native":"\uD83D\uDD38"}],"version":1},"small_blue_diamond":{"id":"small_blue_diamond","name":"Small Blue Diamond","keywords":["shape","jewel","gem"],"skins":[{"unified":"1f539","native":"\uD83D\uDD39"}],"version":1},"small_red_triangle":{"id":"small_red_triangle","name":"Red Triangle Pointed Up","keywords":["small","shape","direction","top"],"skins":[{"unified":"1f53a","native":"\uD83D\uDD3A"}],"version":1},"small_red_triangle_down":{"id":"small_red_triangle_down","name":"Red Triangle Pointed Down","keywords":["small","shape","direction","bottom"],"skins":[{"unified":"1f53b","native":"\uD83D\uDD3B"}],"version":1},"diamond_shape_with_a_dot_inside":{"id":"diamond_shape_with_a_dot_inside","name":"Diamond with a Dot","keywords":["shape","inside","jewel","blue","gem","crystal","fancy"],"skins":[{"unified":"1f4a0","native":"\uD83D\uDCA0"}],"version":1},"radio_button":{"id":"radio_button","name":"Radio Button","keywords":["input","old","music","circle"],"skins":[{"unified":"1f518","native":"\uD83D\uDD18"}],"version":1},"white_square_button":{"id":"white_square_button","name":"White Square Button","keywords":["shape","input"],"skins":[{"unified":"1f533","native":"\uD83D\uDD33"}],"version":1},"black_square_button":{"id":"black_square_button","name":"Black Square Button","keywords":["shape","input","frame"],"skins":[{"unified":"1f532","native":"\uD83D\uDD32"}],"version":1},"checkered_flag":{"id":"checkered_flag","name":"Chequered Flag","keywords":["checkered","contest","finishline","race","gokart"],"skins":[{"unified":"1f3c1","native":"\uD83C\uDFC1"}],"version":1},"triangular_flag_on_post":{"id":"triangular_flag_on_post","name":"Triangular Flag","keywords":["on","post","mark","milestone","place"],"skins":[{"unified":"1f6a9","native":"\uD83D\uDEA9"}],"version":1},"crossed_flags":{"id":"crossed_flags","name":"Crossed Flags","keywords":["japanese","nation","country","border"],"skins":[{"unified":"1f38c","native":"\uD83C\uDF8C"}],"version":1},"waving_black_flag":{"id":"waving_black_flag","name":"Black Flag","keywords":["waving","pirate"],"skins":[{"unified":"1f3f4","native":"\uD83C\uDFF4"}],"version":1},"waving_white_flag":{"id":"waving_white_flag","name":"White Flag","keywords":["waving","losing","loser","lost","surrender","give","up","fail"],"skins":[{"unified":"1f3f3-fe0f","native":"\uD83C\uDFF3\uFE0F"}],"version":1},"rainbow-flag":{"id":"rainbow-flag","name":"Rainbow Flag","keywords":["pride","gay","lgbt","glbt","queer","homosexual","lesbian","bisexual","transgender"],"skins":[{"unified":"1f3f3-fe0f-200d-1f308","native":"\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08"}],"version":4},"transgender_flag":{"id":"transgender_flag","name":"Transgender Flag","keywords":["lgbtq"],"skins":[{"unified":"1f3f3-fe0f-200d-26a7-fe0f","native":"\uD83C\uDFF3\uFE0F\u200D\u26A7\uFE0F"}],"version":13},"pirate_flag":{"id":"pirate_flag","name":"Pirate Flag","keywords":["skull","crossbones","banner"],"skins":[{"unified":"1f3f4-200d-2620-fe0f","native":"\uD83C\uDFF4\u200D\u2620\uFE0F"}],"version":11},"flag-ac":{"id":"flag-ac","name":"Ascension Island Flag","keywords":["ac"],"skins":[{"unified":"1f1e6-1f1e8","native":"\uD83C\uDDE6\uD83C\uDDE8"}],"version":2},"flag-ad":{"id":"flag-ad","name":"Andorra Flag","keywords":["ad","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1e9","native":"\uD83C\uDDE6\uD83C\uDDE9"}],"version":2},"flag-ae":{"id":"flag-ae","name":"United Arab Emirates Flag","keywords":["ae","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1ea","native":"\uD83C\uDDE6\uD83C\uDDEA"}],"version":2},"flag-af":{"id":"flag-af","name":"Afghanistan Flag","keywords":["af","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1eb","native":"\uD83C\uDDE6\uD83C\uDDEB"}],"version":2},"flag-ag":{"id":"flag-ag","name":"Antigua & Barbuda Flag","keywords":["ag","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1ec","native":"\uD83C\uDDE6\uD83C\uDDEC"}],"version":2},"flag-ai":{"id":"flag-ai","name":"Anguilla Flag","keywords":["ai","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1ee","native":"\uD83C\uDDE6\uD83C\uDDEE"}],"version":2},"flag-al":{"id":"flag-al","name":"Albania Flag","keywords":["al","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1f1","native":"\uD83C\uDDE6\uD83C\uDDF1"}],"version":2},"flag-am":{"id":"flag-am","name":"Armenia Flag","keywords":["am","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1f2","native":"\uD83C\uDDE6\uD83C\uDDF2"}],"version":2},"flag-ao":{"id":"flag-ao","name":"Angola Flag","keywords":["ao","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1f4","native":"\uD83C\uDDE6\uD83C\uDDF4"}],"version":2},"flag-aq":{"id":"flag-aq","name":"Antarctica Flag","keywords":["aq","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1f6","native":"\uD83C\uDDE6\uD83C\uDDF6"}],"version":2},"flag-ar":{"id":"flag-ar","name":"Argentina Flag","keywords":["ar","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1f7","native":"\uD83C\uDDE6\uD83C\uDDF7"}],"version":2},"flag-as":{"id":"flag-as","name":"American Samoa Flag","keywords":["as","ws","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1f8","native":"\uD83C\uDDE6\uD83C\uDDF8"}],"version":2},"flag-at":{"id":"flag-at","name":"Austria Flag","keywords":["at","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1f9","native":"\uD83C\uDDE6\uD83C\uDDF9"}],"version":2},"flag-au":{"id":"flag-au","name":"Australia Flag","keywords":["au","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1fa","native":"\uD83C\uDDE6\uD83C\uDDFA"}],"version":2},"flag-aw":{"id":"flag-aw","name":"Aruba Flag","keywords":["aw","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1fc","native":"\uD83C\uDDE6\uD83C\uDDFC"}],"version":2},"flag-ax":{"id":"flag-ax","name":"\xc5land Islands Flag","keywords":["ax","aland","Aland","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1fd","native":"\uD83C\uDDE6\uD83C\uDDFD"}],"version":2},"flag-az":{"id":"flag-az","name":"Azerbaijan Flag","keywords":["az","nation","country","banner"],"skins":[{"unified":"1f1e6-1f1ff","native":"\uD83C\uDDE6\uD83C\uDDFF"}],"version":2},"flag-ba":{"id":"flag-ba","name":"Bosnia & Herzegovina Flag","keywords":["ba","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1e6","native":"\uD83C\uDDE7\uD83C\uDDE6"}],"version":2},"flag-bb":{"id":"flag-bb","name":"Barbados Flag","keywords":["bb","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1e7","native":"\uD83C\uDDE7\uD83C\uDDE7"}],"version":2},"flag-bd":{"id":"flag-bd","name":"Bangladesh Flag","keywords":["bd","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1e9","native":"\uD83C\uDDE7\uD83C\uDDE9"}],"version":2},"flag-be":{"id":"flag-be","name":"Belgium Flag","keywords":["be","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1ea","native":"\uD83C\uDDE7\uD83C\uDDEA"}],"version":2},"flag-bf":{"id":"flag-bf","name":"Burkina Faso Flag","keywords":["bf","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1eb","native":"\uD83C\uDDE7\uD83C\uDDEB"}],"version":2},"flag-bg":{"id":"flag-bg","name":"Bulgaria Flag","keywords":["bg","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1ec","native":"\uD83C\uDDE7\uD83C\uDDEC"}],"version":2},"flag-bh":{"id":"flag-bh","name":"Bahrain Flag","keywords":["bh","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1ed","native":"\uD83C\uDDE7\uD83C\uDDED"}],"version":2},"flag-bi":{"id":"flag-bi","name":"Burundi Flag","keywords":["bi","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1ee","native":"\uD83C\uDDE7\uD83C\uDDEE"}],"version":2},"flag-bj":{"id":"flag-bj","name":"Benin Flag","keywords":["bj","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1ef","native":"\uD83C\uDDE7\uD83C\uDDEF"}],"version":2},"flag-bl":{"id":"flag-bl","name":"St. Barth\xe9lemy Flag","keywords":["bl","st","barthelemy","saint","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1f1","native":"\uD83C\uDDE7\uD83C\uDDF1"}],"version":2},"flag-bm":{"id":"flag-bm","name":"Bermuda Flag","keywords":["bm","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1f2","native":"\uD83C\uDDE7\uD83C\uDDF2"}],"version":2},"flag-bn":{"id":"flag-bn","name":"Brunei Flag","keywords":["bn","darussalam","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1f3","native":"\uD83C\uDDE7\uD83C\uDDF3"}],"version":2},"flag-bo":{"id":"flag-bo","name":"Bolivia Flag","keywords":["bo","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1f4","native":"\uD83C\uDDE7\uD83C\uDDF4"}],"version":2},"flag-bq":{"id":"flag-bq","name":"Caribbean Netherlands Flag","keywords":["bq","bonaire","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1f6","native":"\uD83C\uDDE7\uD83C\uDDF6"}],"version":2},"flag-br":{"id":"flag-br","name":"Brazil Flag","keywords":["br","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1f7","native":"\uD83C\uDDE7\uD83C\uDDF7"}],"version":2},"flag-bs":{"id":"flag-bs","name":"Bahamas Flag","keywords":["bs","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1f8","native":"\uD83C\uDDE7\uD83C\uDDF8"}],"version":2},"flag-bt":{"id":"flag-bt","name":"Bhutan Flag","keywords":["bt","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1f9","native":"\uD83C\uDDE7\uD83C\uDDF9"}],"version":2},"flag-bv":{"id":"flag-bv","name":"Bouvet Island Flag","keywords":["bv","norway"],"skins":[{"unified":"1f1e7-1f1fb","native":"\uD83C\uDDE7\uD83C\uDDFB"}],"version":2},"flag-bw":{"id":"flag-bw","name":"Botswana Flag","keywords":["bw","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1fc","native":"\uD83C\uDDE7\uD83C\uDDFC"}],"version":2},"flag-by":{"id":"flag-by","name":"Belarus Flag","keywords":["by","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1fe","native":"\uD83C\uDDE7\uD83C\uDDFE"}],"version":2},"flag-bz":{"id":"flag-bz","name":"Belize Flag","keywords":["bz","nation","country","banner"],"skins":[{"unified":"1f1e7-1f1ff","native":"\uD83C\uDDE7\uD83C\uDDFF"}],"version":2},"flag-ca":{"id":"flag-ca","name":"Canada Flag","keywords":["ca","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1e6","native":"\uD83C\uDDE8\uD83C\uDDE6"}],"version":2},"flag-cc":{"id":"flag-cc","name":"Cocos (keeling) Islands Flag","keywords":["cc","keeling","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1e8","native":"\uD83C\uDDE8\uD83C\uDDE8"}],"version":2},"flag-cd":{"id":"flag-cd","name":"Congo - Kinshasa Flag","keywords":["cd","democratic","republic","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1e9","native":"\uD83C\uDDE8\uD83C\uDDE9"}],"version":2},"flag-cf":{"id":"flag-cf","name":"Central African Republic Flag","keywords":["cf","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1eb","native":"\uD83C\uDDE8\uD83C\uDDEB"}],"version":2},"flag-cg":{"id":"flag-cg","name":"Congo - Brazzaville Flag","keywords":["cg","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1ec","native":"\uD83C\uDDE8\uD83C\uDDEC"}],"version":2},"flag-ch":{"id":"flag-ch","name":"Switzerland Flag","keywords":["ch","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1ed","native":"\uD83C\uDDE8\uD83C\uDDED"}],"version":2},"flag-ci":{"id":"flag-ci","name":"C\xf4te D\u2019ivoire Flag","keywords":["ci","cote","d","ivoire","ivory","coast","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1ee","native":"\uD83C\uDDE8\uD83C\uDDEE"}],"version":2},"flag-ck":{"id":"flag-ck","name":"Cook Islands Flag","keywords":["ck","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1f0","native":"\uD83C\uDDE8\uD83C\uDDF0"}],"version":2},"flag-cl":{"id":"flag-cl","name":"Chile Flag","keywords":["cl","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1f1","native":"\uD83C\uDDE8\uD83C\uDDF1"}],"version":2},"flag-cm":{"id":"flag-cm","name":"Cameroon Flag","keywords":["cm","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1f2","native":"\uD83C\uDDE8\uD83C\uDDF2"}],"version":2},"cn":{"id":"cn","name":"China Flag","keywords":["cn","chinese","prc","country","nation","banner"],"skins":[{"unified":"1f1e8-1f1f3","native":"\uD83C\uDDE8\uD83C\uDDF3"}],"version":1},"flag-co":{"id":"flag-co","name":"Colombia Flag","keywords":["co","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1f4","native":"\uD83C\uDDE8\uD83C\uDDF4"}],"version":2},"flag-cp":{"id":"flag-cp","name":"Clipperton Island Flag","keywords":["cp"],"skins":[{"unified":"1f1e8-1f1f5","native":"\uD83C\uDDE8\uD83C\uDDF5"}],"version":2},"flag-cr":{"id":"flag-cr","name":"Costa Rica Flag","keywords":["cr","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1f7","native":"\uD83C\uDDE8\uD83C\uDDF7"}],"version":2},"flag-cu":{"id":"flag-cu","name":"Cuba Flag","keywords":["cu","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1fa","native":"\uD83C\uDDE8\uD83C\uDDFA"}],"version":2},"flag-cv":{"id":"flag-cv","name":"Cape Verde Flag","keywords":["cv","cabo","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1fb","native":"\uD83C\uDDE8\uD83C\uDDFB"}],"version":2},"flag-cw":{"id":"flag-cw","name":"Cura\xe7ao Flag","keywords":["cw","curacao","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1fc","native":"\uD83C\uDDE8\uD83C\uDDFC"}],"version":2},"flag-cx":{"id":"flag-cx","name":"Christmas Island Flag","keywords":["cx","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1fd","native":"\uD83C\uDDE8\uD83C\uDDFD"}],"version":2},"flag-cy":{"id":"flag-cy","name":"Cyprus Flag","keywords":["cy","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1fe","native":"\uD83C\uDDE8\uD83C\uDDFE"}],"version":2},"flag-cz":{"id":"flag-cz","name":"Czechia Flag","keywords":["cz","nation","country","banner"],"skins":[{"unified":"1f1e8-1f1ff","native":"\uD83C\uDDE8\uD83C\uDDFF"}],"version":2},"de":{"id":"de","name":"Germany Flag","keywords":["de","german","nation","country","banner"],"skins":[{"unified":"1f1e9-1f1ea","native":"\uD83C\uDDE9\uD83C\uDDEA"}],"version":1},"flag-dg":{"id":"flag-dg","name":"Diego Garcia Flag","keywords":["dg"],"skins":[{"unified":"1f1e9-1f1ec","native":"\uD83C\uDDE9\uD83C\uDDEC"}],"version":2},"flag-dj":{"id":"flag-dj","name":"Djibouti Flag","keywords":["dj","nation","country","banner"],"skins":[{"unified":"1f1e9-1f1ef","native":"\uD83C\uDDE9\uD83C\uDDEF"}],"version":2},"flag-dk":{"id":"flag-dk","name":"Denmark Flag","keywords":["dk","nation","country","banner"],"skins":[{"unified":"1f1e9-1f1f0","native":"\uD83C\uDDE9\uD83C\uDDF0"}],"version":2},"flag-dm":{"id":"flag-dm","name":"Dominica Flag","keywords":["dm","nation","country","banner"],"skins":[{"unified":"1f1e9-1f1f2","native":"\uD83C\uDDE9\uD83C\uDDF2"}],"version":2},"flag-do":{"id":"flag-do","name":"Dominican Republic Flag","keywords":["do","nation","country","banner"],"skins":[{"unified":"1f1e9-1f1f4","native":"\uD83C\uDDE9\uD83C\uDDF4"}],"version":2},"flag-dz":{"id":"flag-dz","name":"Algeria Flag","keywords":["dz","nation","country","banner"],"skins":[{"unified":"1f1e9-1f1ff","native":"\uD83C\uDDE9\uD83C\uDDFF"}],"version":2},"flag-ea":{"id":"flag-ea","name":"Ceuta & Melilla Flag","keywords":["ea"],"skins":[{"unified":"1f1ea-1f1e6","native":"\uD83C\uDDEA\uD83C\uDDE6"}],"version":2},"flag-ec":{"id":"flag-ec","name":"Ecuador Flag","keywords":["ec","nation","country","banner"],"skins":[{"unified":"1f1ea-1f1e8","native":"\uD83C\uDDEA\uD83C\uDDE8"}],"version":2},"flag-ee":{"id":"flag-ee","name":"Estonia Flag","keywords":["ee","nation","country","banner"],"skins":[{"unified":"1f1ea-1f1ea","native":"\uD83C\uDDEA\uD83C\uDDEA"}],"version":2},"flag-eg":{"id":"flag-eg","name":"Egypt Flag","keywords":["eg","nation","country","banner"],"skins":[{"unified":"1f1ea-1f1ec","native":"\uD83C\uDDEA\uD83C\uDDEC"}],"version":2},"flag-eh":{"id":"flag-eh","name":"Western Sahara Flag","keywords":["eh","nation","country","banner"],"skins":[{"unified":"1f1ea-1f1ed","native":"\uD83C\uDDEA\uD83C\uDDED"}],"version":2},"flag-er":{"id":"flag-er","name":"Eritrea Flag","keywords":["er","nation","country","banner"],"skins":[{"unified":"1f1ea-1f1f7","native":"\uD83C\uDDEA\uD83C\uDDF7"}],"version":2},"es":{"id":"es","name":"Spain Flag","keywords":["es","nation","country","banner"],"skins":[{"unified":"1f1ea-1f1f8","native":"\uD83C\uDDEA\uD83C\uDDF8"}],"version":1},"flag-et":{"id":"flag-et","name":"Ethiopia Flag","keywords":["et","nation","country","banner"],"skins":[{"unified":"1f1ea-1f1f9","native":"\uD83C\uDDEA\uD83C\uDDF9"}],"version":2},"flag-eu":{"id":"flag-eu","name":"European Union Flag","keywords":["eu","banner"],"skins":[{"unified":"1f1ea-1f1fa","native":"\uD83C\uDDEA\uD83C\uDDFA"}],"version":2},"flag-fi":{"id":"flag-fi","name":"Finland Flag","keywords":["fi","nation","country","banner"],"skins":[{"unified":"1f1eb-1f1ee","native":"\uD83C\uDDEB\uD83C\uDDEE"}],"version":2},"flag-fj":{"id":"flag-fj","name":"Fiji Flag","keywords":["fj","nation","country","banner"],"skins":[{"unified":"1f1eb-1f1ef","native":"\uD83C\uDDEB\uD83C\uDDEF"}],"version":2},"flag-fk":{"id":"flag-fk","name":"Falkland Islands Flag","keywords":["fk","malvinas","nation","country","banner"],"skins":[{"unified":"1f1eb-1f1f0","native":"\uD83C\uDDEB\uD83C\uDDF0"}],"version":2},"flag-fm":{"id":"flag-fm","name":"Micronesia Flag","keywords":["fm","federated","states","nation","country","banner"],"skins":[{"unified":"1f1eb-1f1f2","native":"\uD83C\uDDEB\uD83C\uDDF2"}],"version":2},"flag-fo":{"id":"flag-fo","name":"Faroe Islands Flag","keywords":["fo","nation","country","banner"],"skins":[{"unified":"1f1eb-1f1f4","native":"\uD83C\uDDEB\uD83C\uDDF4"}],"version":2},"fr":{"id":"fr","name":"France Flag","keywords":["fr","banner","nation","french","country"],"skins":[{"unified":"1f1eb-1f1f7","native":"\uD83C\uDDEB\uD83C\uDDF7"}],"version":1},"flag-ga":{"id":"flag-ga","name":"Gabon Flag","keywords":["ga","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1e6","native":"\uD83C\uDDEC\uD83C\uDDE6"}],"version":2},"gb":{"id":"gb","name":"United Kingdom Flag","keywords":["gb","uk","great","britain","northern","ireland","nation","country","banner","british","UK","english","england","union","jack"],"skins":[{"unified":"1f1ec-1f1e7","native":"\uD83C\uDDEC\uD83C\uDDE7"}],"version":1},"flag-gd":{"id":"flag-gd","name":"Grenada Flag","keywords":["gd","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1e9","native":"\uD83C\uDDEC\uD83C\uDDE9"}],"version":2},"flag-ge":{"id":"flag-ge","name":"Georgia Flag","keywords":["ge","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1ea","native":"\uD83C\uDDEC\uD83C\uDDEA"}],"version":2},"flag-gf":{"id":"flag-gf","name":"French Guiana Flag","keywords":["gf","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1eb","native":"\uD83C\uDDEC\uD83C\uDDEB"}],"version":2},"flag-gg":{"id":"flag-gg","name":"Guernsey Flag","keywords":["gg","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1ec","native":"\uD83C\uDDEC\uD83C\uDDEC"}],"version":2},"flag-gh":{"id":"flag-gh","name":"Ghana Flag","keywords":["gh","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1ed","native":"\uD83C\uDDEC\uD83C\uDDED"}],"version":2},"flag-gi":{"id":"flag-gi","name":"Gibraltar Flag","keywords":["gi","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1ee","native":"\uD83C\uDDEC\uD83C\uDDEE"}],"version":2},"flag-gl":{"id":"flag-gl","name":"Greenland Flag","keywords":["gl","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1f1","native":"\uD83C\uDDEC\uD83C\uDDF1"}],"version":2},"flag-gm":{"id":"flag-gm","name":"Gambia Flag","keywords":["gm","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1f2","native":"\uD83C\uDDEC\uD83C\uDDF2"}],"version":2},"flag-gn":{"id":"flag-gn","name":"Guinea Flag","keywords":["gn","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1f3","native":"\uD83C\uDDEC\uD83C\uDDF3"}],"version":2},"flag-gp":{"id":"flag-gp","name":"Guadeloupe Flag","keywords":["gp","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1f5","native":"\uD83C\uDDEC\uD83C\uDDF5"}],"version":2},"flag-gq":{"id":"flag-gq","name":"Equatorial Guinea Flag","keywords":["gq","gn","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1f6","native":"\uD83C\uDDEC\uD83C\uDDF6"}],"version":2},"flag-gr":{"id":"flag-gr","name":"Greece Flag","keywords":["gr","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1f7","native":"\uD83C\uDDEC\uD83C\uDDF7"}],"version":2},"flag-gs":{"id":"flag-gs","name":"South Georgia & South Sandwich Islands Flag","keywords":["gs","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1f8","native":"\uD83C\uDDEC\uD83C\uDDF8"}],"version":2},"flag-gt":{"id":"flag-gt","name":"Guatemala Flag","keywords":["gt","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1f9","native":"\uD83C\uDDEC\uD83C\uDDF9"}],"version":2},"flag-gu":{"id":"flag-gu","name":"Guam Flag","keywords":["gu","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1fa","native":"\uD83C\uDDEC\uD83C\uDDFA"}],"version":2},"flag-gw":{"id":"flag-gw","name":"Guinea-Bissau Flag","keywords":["gw","guinea","bissau","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1fc","native":"\uD83C\uDDEC\uD83C\uDDFC"}],"version":2},"flag-gy":{"id":"flag-gy","name":"Guyana Flag","keywords":["gy","nation","country","banner"],"skins":[{"unified":"1f1ec-1f1fe","native":"\uD83C\uDDEC\uD83C\uDDFE"}],"version":2},"flag-hk":{"id":"flag-hk","name":"Hong Kong Sar China Flag","keywords":["hk","nation","country","banner"],"skins":[{"unified":"1f1ed-1f1f0","native":"\uD83C\uDDED\uD83C\uDDF0"}],"version":2},"flag-hm":{"id":"flag-hm","name":"Heard & Mcdonald Islands Flag","keywords":["hm"],"skins":[{"unified":"1f1ed-1f1f2","native":"\uD83C\uDDED\uD83C\uDDF2"}],"version":2},"flag-hn":{"id":"flag-hn","name":"Honduras Flag","keywords":["hn","nation","country","banner"],"skins":[{"unified":"1f1ed-1f1f3","native":"\uD83C\uDDED\uD83C\uDDF3"}],"version":2},"flag-hr":{"id":"flag-hr","name":"Croatia Flag","keywords":["hr","nation","country","banner"],"skins":[{"unified":"1f1ed-1f1f7","native":"\uD83C\uDDED\uD83C\uDDF7"}],"version":2},"flag-ht":{"id":"flag-ht","name":"Haiti Flag","keywords":["ht","nation","country","banner"],"skins":[{"unified":"1f1ed-1f1f9","native":"\uD83C\uDDED\uD83C\uDDF9"}],"version":2},"flag-hu":{"id":"flag-hu","name":"Hungary Flag","keywords":["hu","nation","country","banner"],"skins":[{"unified":"1f1ed-1f1fa","native":"\uD83C\uDDED\uD83C\uDDFA"}],"version":2},"flag-ic":{"id":"flag-ic","name":"Canary Islands Flag","keywords":["ic","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1e8","native":"\uD83C\uDDEE\uD83C\uDDE8"}],"version":2},"flag-id":{"id":"flag-id","name":"Indonesia Flag","keywords":["id","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1e9","native":"\uD83C\uDDEE\uD83C\uDDE9"}],"version":2},"flag-ie":{"id":"flag-ie","name":"Ireland Flag","keywords":["ie","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1ea","native":"\uD83C\uDDEE\uD83C\uDDEA"}],"version":2},"flag-il":{"id":"flag-il","name":"Israel Flag","keywords":["il","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1f1","native":"\uD83C\uDDEE\uD83C\uDDF1"}],"version":2},"flag-im":{"id":"flag-im","name":"Isle of Man Flag","keywords":["im","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1f2","native":"\uD83C\uDDEE\uD83C\uDDF2"}],"version":2},"flag-in":{"id":"flag-in","name":"India Flag","keywords":["in","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1f3","native":"\uD83C\uDDEE\uD83C\uDDF3"}],"version":2},"flag-io":{"id":"flag-io","name":"British Indian Ocean Territory Flag","keywords":["io","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1f4","native":"\uD83C\uDDEE\uD83C\uDDF4"}],"version":2},"flag-iq":{"id":"flag-iq","name":"Iraq Flag","keywords":["iq","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1f6","native":"\uD83C\uDDEE\uD83C\uDDF6"}],"version":2},"flag-ir":{"id":"flag-ir","name":"Iran Flag","keywords":["ir","islamic","republic","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1f7","native":"\uD83C\uDDEE\uD83C\uDDF7"}],"version":2},"flag-is":{"id":"flag-is","name":"Iceland Flag","keywords":["is","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1f8","native":"\uD83C\uDDEE\uD83C\uDDF8"}],"version":2},"it":{"id":"it","name":"Italy Flag","keywords":["it","nation","country","banner"],"skins":[{"unified":"1f1ee-1f1f9","native":"\uD83C\uDDEE\uD83C\uDDF9"}],"version":1},"flag-je":{"id":"flag-je","name":"Jersey Flag","keywords":["je","nation","country","banner"],"skins":[{"unified":"1f1ef-1f1ea","native":"\uD83C\uDDEF\uD83C\uDDEA"}],"version":2},"flag-jm":{"id":"flag-jm","name":"Jamaica Flag","keywords":["jm","nation","country","banner"],"skins":[{"unified":"1f1ef-1f1f2","native":"\uD83C\uDDEF\uD83C\uDDF2"}],"version":2},"flag-jo":{"id":"flag-jo","name":"Jordan Flag","keywords":["jo","nation","country","banner"],"skins":[{"unified":"1f1ef-1f1f4","native":"\uD83C\uDDEF\uD83C\uDDF4"}],"version":2},"jp":{"id":"jp","name":"Japan Flag","keywords":["jp","japanese","nation","country","banner"],"skins":[{"unified":"1f1ef-1f1f5","native":"\uD83C\uDDEF\uD83C\uDDF5"}],"version":1},"flag-ke":{"id":"flag-ke","name":"Kenya Flag","keywords":["ke","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1ea","native":"\uD83C\uDDF0\uD83C\uDDEA"}],"version":2},"flag-kg":{"id":"flag-kg","name":"Kyrgyzstan Flag","keywords":["kg","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1ec","native":"\uD83C\uDDF0\uD83C\uDDEC"}],"version":2},"flag-kh":{"id":"flag-kh","name":"Cambodia Flag","keywords":["kh","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1ed","native":"\uD83C\uDDF0\uD83C\uDDED"}],"version":2},"flag-ki":{"id":"flag-ki","name":"Kiribati Flag","keywords":["ki","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1ee","native":"\uD83C\uDDF0\uD83C\uDDEE"}],"version":2},"flag-km":{"id":"flag-km","name":"Comoros Flag","keywords":["km","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1f2","native":"\uD83C\uDDF0\uD83C\uDDF2"}],"version":2},"flag-kn":{"id":"flag-kn","name":"St. Kitts & Nevis Flag","keywords":["kn","st","saint","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1f3","native":"\uD83C\uDDF0\uD83C\uDDF3"}],"version":2},"flag-kp":{"id":"flag-kp","name":"North Korea Flag","keywords":["kp","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1f5","native":"\uD83C\uDDF0\uD83C\uDDF5"}],"version":2},"kr":{"id":"kr","name":"South Korea Flag","keywords":["kr","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1f7","native":"\uD83C\uDDF0\uD83C\uDDF7"}],"version":1},"flag-kw":{"id":"flag-kw","name":"Kuwait Flag","keywords":["kw","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1fc","native":"\uD83C\uDDF0\uD83C\uDDFC"}],"version":2},"flag-ky":{"id":"flag-ky","name":"Cayman Islands Flag","keywords":["ky","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1fe","native":"\uD83C\uDDF0\uD83C\uDDFE"}],"version":2},"flag-kz":{"id":"flag-kz","name":"Kazakhstan Flag","keywords":["kz","nation","country","banner"],"skins":[{"unified":"1f1f0-1f1ff","native":"\uD83C\uDDF0\uD83C\uDDFF"}],"version":2},"flag-la":{"id":"flag-la","name":"Laos Flag","keywords":["la","lao","democratic","republic","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1e6","native":"\uD83C\uDDF1\uD83C\uDDE6"}],"version":2},"flag-lb":{"id":"flag-lb","name":"Lebanon Flag","keywords":["lb","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1e7","native":"\uD83C\uDDF1\uD83C\uDDE7"}],"version":2},"flag-lc":{"id":"flag-lc","name":"St. Lucia Flag","keywords":["lc","st","saint","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1e8","native":"\uD83C\uDDF1\uD83C\uDDE8"}],"version":2},"flag-li":{"id":"flag-li","name":"Liechtenstein Flag","keywords":["li","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1ee","native":"\uD83C\uDDF1\uD83C\uDDEE"}],"version":2},"flag-lk":{"id":"flag-lk","name":"Sri Lanka Flag","keywords":["lk","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1f0","native":"\uD83C\uDDF1\uD83C\uDDF0"}],"version":2},"flag-lr":{"id":"flag-lr","name":"Liberia Flag","keywords":["lr","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1f7","native":"\uD83C\uDDF1\uD83C\uDDF7"}],"version":2},"flag-ls":{"id":"flag-ls","name":"Lesotho Flag","keywords":["ls","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1f8","native":"\uD83C\uDDF1\uD83C\uDDF8"}],"version":2},"flag-lt":{"id":"flag-lt","name":"Lithuania Flag","keywords":["lt","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1f9","native":"\uD83C\uDDF1\uD83C\uDDF9"}],"version":2},"flag-lu":{"id":"flag-lu","name":"Luxembourg Flag","keywords":["lu","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1fa","native":"\uD83C\uDDF1\uD83C\uDDFA"}],"version":2},"flag-lv":{"id":"flag-lv","name":"Latvia Flag","keywords":["lv","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1fb","native":"\uD83C\uDDF1\uD83C\uDDFB"}],"version":2},"flag-ly":{"id":"flag-ly","name":"Libya Flag","keywords":["ly","nation","country","banner"],"skins":[{"unified":"1f1f1-1f1fe","native":"\uD83C\uDDF1\uD83C\uDDFE"}],"version":2},"flag-ma":{"id":"flag-ma","name":"Morocco Flag","keywords":["ma","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1e6","native":"\uD83C\uDDF2\uD83C\uDDE6"}],"version":2},"flag-mc":{"id":"flag-mc","name":"Monaco Flag","keywords":["mc","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1e8","native":"\uD83C\uDDF2\uD83C\uDDE8"}],"version":2},"flag-md":{"id":"flag-md","name":"Moldova Flag","keywords":["md","republic","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1e9","native":"\uD83C\uDDF2\uD83C\uDDE9"}],"version":2},"flag-me":{"id":"flag-me","name":"Montenegro Flag","keywords":["me","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1ea","native":"\uD83C\uDDF2\uD83C\uDDEA"}],"version":2},"flag-mf":{"id":"flag-mf","name":"St. Martin Flag","keywords":["mf","st"],"skins":[{"unified":"1f1f2-1f1eb","native":"\uD83C\uDDF2\uD83C\uDDEB"}],"version":2},"flag-mg":{"id":"flag-mg","name":"Madagascar Flag","keywords":["mg","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1ec","native":"\uD83C\uDDF2\uD83C\uDDEC"}],"version":2},"flag-mh":{"id":"flag-mh","name":"Marshall Islands Flag","keywords":["mh","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1ed","native":"\uD83C\uDDF2\uD83C\uDDED"}],"version":2},"flag-mk":{"id":"flag-mk","name":"North Macedonia Flag","keywords":["mk","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f0","native":"\uD83C\uDDF2\uD83C\uDDF0"}],"version":2},"flag-ml":{"id":"flag-ml","name":"Mali Flag","keywords":["ml","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f1","native":"\uD83C\uDDF2\uD83C\uDDF1"}],"version":2},"flag-mm":{"id":"flag-mm","name":"Myanmar (burma) Flag","keywords":["mm","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f2","native":"\uD83C\uDDF2\uD83C\uDDF2"}],"version":2},"flag-mn":{"id":"flag-mn","name":"Mongolia Flag","keywords":["mn","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f3","native":"\uD83C\uDDF2\uD83C\uDDF3"}],"version":2},"flag-mo":{"id":"flag-mo","name":"Macao Sar China Flag","keywords":["mo","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f4","native":"\uD83C\uDDF2\uD83C\uDDF4"}],"version":2},"flag-mp":{"id":"flag-mp","name":"Northern Mariana Islands Flag","keywords":["mp","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f5","native":"\uD83C\uDDF2\uD83C\uDDF5"}],"version":2},"flag-mq":{"id":"flag-mq","name":"Martinique Flag","keywords":["mq","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f6","native":"\uD83C\uDDF2\uD83C\uDDF6"}],"version":2},"flag-mr":{"id":"flag-mr","name":"Mauritania Flag","keywords":["mr","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f7","native":"\uD83C\uDDF2\uD83C\uDDF7"}],"version":2},"flag-ms":{"id":"flag-ms","name":"Montserrat Flag","keywords":["ms","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f8","native":"\uD83C\uDDF2\uD83C\uDDF8"}],"version":2},"flag-mt":{"id":"flag-mt","name":"Malta Flag","keywords":["mt","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1f9","native":"\uD83C\uDDF2\uD83C\uDDF9"}],"version":2},"flag-mu":{"id":"flag-mu","name":"Mauritius Flag","keywords":["mu","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1fa","native":"\uD83C\uDDF2\uD83C\uDDFA"}],"version":2},"flag-mv":{"id":"flag-mv","name":"Maldives Flag","keywords":["mv","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1fb","native":"\uD83C\uDDF2\uD83C\uDDFB"}],"version":2},"flag-mw":{"id":"flag-mw","name":"Malawi Flag","keywords":["mw","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1fc","native":"\uD83C\uDDF2\uD83C\uDDFC"}],"version":2},"flag-mx":{"id":"flag-mx","name":"Mexico Flag","keywords":["mx","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1fd","native":"\uD83C\uDDF2\uD83C\uDDFD"}],"version":2},"flag-my":{"id":"flag-my","name":"Malaysia Flag","keywords":["my","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1fe","native":"\uD83C\uDDF2\uD83C\uDDFE"}],"version":2},"flag-mz":{"id":"flag-mz","name":"Mozambique Flag","keywords":["mz","nation","country","banner"],"skins":[{"unified":"1f1f2-1f1ff","native":"\uD83C\uDDF2\uD83C\uDDFF"}],"version":2},"flag-na":{"id":"flag-na","name":"Namibia Flag","keywords":["na","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1e6","native":"\uD83C\uDDF3\uD83C\uDDE6"}],"version":2},"flag-nc":{"id":"flag-nc","name":"New Caledonia Flag","keywords":["nc","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1e8","native":"\uD83C\uDDF3\uD83C\uDDE8"}],"version":2},"flag-ne":{"id":"flag-ne","name":"Niger Flag","keywords":["ne","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1ea","native":"\uD83C\uDDF3\uD83C\uDDEA"}],"version":2},"flag-nf":{"id":"flag-nf","name":"Norfolk Island Flag","keywords":["nf","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1eb","native":"\uD83C\uDDF3\uD83C\uDDEB"}],"version":2},"flag-ng":{"id":"flag-ng","name":"Nigeria Flag","keywords":["ng","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1ec","native":"\uD83C\uDDF3\uD83C\uDDEC"}],"version":2},"flag-ni":{"id":"flag-ni","name":"Nicaragua Flag","keywords":["ni","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1ee","native":"\uD83C\uDDF3\uD83C\uDDEE"}],"version":2},"flag-nl":{"id":"flag-nl","name":"Netherlands Flag","keywords":["nl","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1f1","native":"\uD83C\uDDF3\uD83C\uDDF1"}],"version":2},"flag-no":{"id":"flag-no","name":"Norway Flag","keywords":["no","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1f4","native":"\uD83C\uDDF3\uD83C\uDDF4"}],"version":2},"flag-np":{"id":"flag-np","name":"Nepal Flag","keywords":["np","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1f5","native":"\uD83C\uDDF3\uD83C\uDDF5"}],"version":2},"flag-nr":{"id":"flag-nr","name":"Nauru Flag","keywords":["nr","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1f7","native":"\uD83C\uDDF3\uD83C\uDDF7"}],"version":2},"flag-nu":{"id":"flag-nu","name":"Niue Flag","keywords":["nu","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1fa","native":"\uD83C\uDDF3\uD83C\uDDFA"}],"version":2},"flag-nz":{"id":"flag-nz","name":"New Zealand Flag","keywords":["nz","nation","country","banner"],"skins":[{"unified":"1f1f3-1f1ff","native":"\uD83C\uDDF3\uD83C\uDDFF"}],"version":2},"flag-om":{"id":"flag-om","name":"Oman Flag","keywords":["om","symbol","nation","country","banner"],"skins":[{"unified":"1f1f4-1f1f2","native":"\uD83C\uDDF4\uD83C\uDDF2"}],"version":2},"flag-pa":{"id":"flag-pa","name":"Panama Flag","keywords":["pa","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1e6","native":"\uD83C\uDDF5\uD83C\uDDE6"}],"version":2},"flag-pe":{"id":"flag-pe","name":"Peru Flag","keywords":["pe","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1ea","native":"\uD83C\uDDF5\uD83C\uDDEA"}],"version":2},"flag-pf":{"id":"flag-pf","name":"French Polynesia Flag","keywords":["pf","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1eb","native":"\uD83C\uDDF5\uD83C\uDDEB"}],"version":2},"flag-pg":{"id":"flag-pg","name":"Papua New Guinea Flag","keywords":["pg","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1ec","native":"\uD83C\uDDF5\uD83C\uDDEC"}],"version":2},"flag-ph":{"id":"flag-ph","name":"Philippines Flag","keywords":["ph","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1ed","native":"\uD83C\uDDF5\uD83C\uDDED"}],"version":2},"flag-pk":{"id":"flag-pk","name":"Pakistan Flag","keywords":["pk","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1f0","native":"\uD83C\uDDF5\uD83C\uDDF0"}],"version":2},"flag-pl":{"id":"flag-pl","name":"Poland Flag","keywords":["pl","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1f1","native":"\uD83C\uDDF5\uD83C\uDDF1"}],"version":2},"flag-pm":{"id":"flag-pm","name":"St. Pierre & Miquelon Flag","keywords":["pm","st","saint","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1f2","native":"\uD83C\uDDF5\uD83C\uDDF2"}],"version":2},"flag-pn":{"id":"flag-pn","name":"Pitcairn Islands Flag","keywords":["pn","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1f3","native":"\uD83C\uDDF5\uD83C\uDDF3"}],"version":2},"flag-pr":{"id":"flag-pr","name":"Puerto Rico Flag","keywords":["pr","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1f7","native":"\uD83C\uDDF5\uD83C\uDDF7"}],"version":2},"flag-ps":{"id":"flag-ps","name":"Palestinian Territories Flag","keywords":["ps","palestine","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1f8","native":"\uD83C\uDDF5\uD83C\uDDF8"}],"version":2},"flag-pt":{"id":"flag-pt","name":"Portugal Flag","keywords":["pt","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1f9","native":"\uD83C\uDDF5\uD83C\uDDF9"}],"version":2},"flag-pw":{"id":"flag-pw","name":"Palau Flag","keywords":["pw","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1fc","native":"\uD83C\uDDF5\uD83C\uDDFC"}],"version":2},"flag-py":{"id":"flag-py","name":"Paraguay Flag","keywords":["py","nation","country","banner"],"skins":[{"unified":"1f1f5-1f1fe","native":"\uD83C\uDDF5\uD83C\uDDFE"}],"version":2},"flag-qa":{"id":"flag-qa","name":"Qatar Flag","keywords":["qa","nation","country","banner"],"skins":[{"unified":"1f1f6-1f1e6","native":"\uD83C\uDDF6\uD83C\uDDE6"}],"version":2},"flag-re":{"id":"flag-re","name":"R\xe9union Flag","keywords":["re","reunion","nation","country","banner"],"skins":[{"unified":"1f1f7-1f1ea","native":"\uD83C\uDDF7\uD83C\uDDEA"}],"version":2},"flag-ro":{"id":"flag-ro","name":"Romania Flag","keywords":["ro","nation","country","banner"],"skins":[{"unified":"1f1f7-1f1f4","native":"\uD83C\uDDF7\uD83C\uDDF4"}],"version":2},"flag-rs":{"id":"flag-rs","name":"Serbia Flag","keywords":["rs","nation","country","banner"],"skins":[{"unified":"1f1f7-1f1f8","native":"\uD83C\uDDF7\uD83C\uDDF8"}],"version":2},"ru":{"id":"ru","name":"Russia Flag","keywords":["ru","russian","federation","nation","country","banner"],"skins":[{"unified":"1f1f7-1f1fa","native":"\uD83C\uDDF7\uD83C\uDDFA"}],"version":1},"flag-rw":{"id":"flag-rw","name":"Rwanda Flag","keywords":["rw","nation","country","banner"],"skins":[{"unified":"1f1f7-1f1fc","native":"\uD83C\uDDF7\uD83C\uDDFC"}],"version":2},"flag-sa":{"id":"flag-sa","name":"Saudi Arabia Flag","keywords":["sa","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1e6","native":"\uD83C\uDDF8\uD83C\uDDE6"}],"version":2},"flag-sb":{"id":"flag-sb","name":"Solomon Islands Flag","keywords":["sb","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1e7","native":"\uD83C\uDDF8\uD83C\uDDE7"}],"version":2},"flag-sc":{"id":"flag-sc","name":"Seychelles Flag","keywords":["sc","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1e8","native":"\uD83C\uDDF8\uD83C\uDDE8"}],"version":2},"flag-sd":{"id":"flag-sd","name":"Sudan Flag","keywords":["sd","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1e9","native":"\uD83C\uDDF8\uD83C\uDDE9"}],"version":2},"flag-se":{"id":"flag-se","name":"Sweden Flag","keywords":["se","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1ea","native":"\uD83C\uDDF8\uD83C\uDDEA"}],"version":2},"flag-sg":{"id":"flag-sg","name":"Singapore Flag","keywords":["sg","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1ec","native":"\uD83C\uDDF8\uD83C\uDDEC"}],"version":2},"flag-sh":{"id":"flag-sh","name":"St. Helena Flag","keywords":["sh","st","saint","ascension","tristan","cunha","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1ed","native":"\uD83C\uDDF8\uD83C\uDDED"}],"version":2},"flag-si":{"id":"flag-si","name":"Slovenia Flag","keywords":["si","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1ee","native":"\uD83C\uDDF8\uD83C\uDDEE"}],"version":2},"flag-sj":{"id":"flag-sj","name":"Svalbard & Jan Mayen Flag","keywords":["sj"],"skins":[{"unified":"1f1f8-1f1ef","native":"\uD83C\uDDF8\uD83C\uDDEF"}],"version":2},"flag-sk":{"id":"flag-sk","name":"Slovakia Flag","keywords":["sk","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1f0","native":"\uD83C\uDDF8\uD83C\uDDF0"}],"version":2},"flag-sl":{"id":"flag-sl","name":"Sierra Leone Flag","keywords":["sl","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1f1","native":"\uD83C\uDDF8\uD83C\uDDF1"}],"version":2},"flag-sm":{"id":"flag-sm","name":"San Marino Flag","keywords":["sm","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1f2","native":"\uD83C\uDDF8\uD83C\uDDF2"}],"version":2},"flag-sn":{"id":"flag-sn","name":"Senegal Flag","keywords":["sn","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1f3","native":"\uD83C\uDDF8\uD83C\uDDF3"}],"version":2},"flag-so":{"id":"flag-so","name":"Somalia Flag","keywords":["so","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1f4","native":"\uD83C\uDDF8\uD83C\uDDF4"}],"version":2},"flag-sr":{"id":"flag-sr","name":"Suriname Flag","keywords":["sr","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1f7","native":"\uD83C\uDDF8\uD83C\uDDF7"}],"version":2},"flag-ss":{"id":"flag-ss","name":"South Sudan Flag","keywords":["ss","sd","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1f8","native":"\uD83C\uDDF8\uD83C\uDDF8"}],"version":2},"flag-st":{"id":"flag-st","name":"S\xe3o Tom\xe9 & Pr\xedncipe Flag","keywords":["st","sao","tome","principe","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1f9","native":"\uD83C\uDDF8\uD83C\uDDF9"}],"version":2},"flag-sv":{"id":"flag-sv","name":"El Salvador Flag","keywords":["sv","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1fb","native":"\uD83C\uDDF8\uD83C\uDDFB"}],"version":2},"flag-sx":{"id":"flag-sx","name":"Sint Maarten Flag","keywords":["sx","dutch","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1fd","native":"\uD83C\uDDF8\uD83C\uDDFD"}],"version":2},"flag-sy":{"id":"flag-sy","name":"Syria Flag","keywords":["sy","syrian","arab","republic","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1fe","native":"\uD83C\uDDF8\uD83C\uDDFE"}],"version":2},"flag-sz":{"id":"flag-sz","name":"Eswatini Flag","keywords":["sz","nation","country","banner"],"skins":[{"unified":"1f1f8-1f1ff","native":"\uD83C\uDDF8\uD83C\uDDFF"}],"version":2},"flag-ta":{"id":"flag-ta","name":"Tristan Da Cunha Flag","keywords":["ta"],"skins":[{"unified":"1f1f9-1f1e6","native":"\uD83C\uDDF9\uD83C\uDDE6"}],"version":2},"flag-tc":{"id":"flag-tc","name":"Turks & Caicos Islands Flag","keywords":["tc","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1e8","native":"\uD83C\uDDF9\uD83C\uDDE8"}],"version":2},"flag-td":{"id":"flag-td","name":"Chad Flag","keywords":["td","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1e9","native":"\uD83C\uDDF9\uD83C\uDDE9"}],"version":2},"flag-tf":{"id":"flag-tf","name":"French Southern Territories Flag","keywords":["tf","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1eb","native":"\uD83C\uDDF9\uD83C\uDDEB"}],"version":2},"flag-tg":{"id":"flag-tg","name":"Togo Flag","keywords":["tg","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1ec","native":"\uD83C\uDDF9\uD83C\uDDEC"}],"version":2},"flag-th":{"id":"flag-th","name":"Thailand Flag","keywords":["th","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1ed","native":"\uD83C\uDDF9\uD83C\uDDED"}],"version":2},"flag-tj":{"id":"flag-tj","name":"Tajikistan Flag","keywords":["tj","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1ef","native":"\uD83C\uDDF9\uD83C\uDDEF"}],"version":2},"flag-tk":{"id":"flag-tk","name":"Tokelau Flag","keywords":["tk","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1f0","native":"\uD83C\uDDF9\uD83C\uDDF0"}],"version":2},"flag-tl":{"id":"flag-tl","name":"Timor-Leste Flag","keywords":["tl","timor","leste","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1f1","native":"\uD83C\uDDF9\uD83C\uDDF1"}],"version":2},"flag-tm":{"id":"flag-tm","name":"Turkmenistan Flag","keywords":["tm","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1f2","native":"\uD83C\uDDF9\uD83C\uDDF2"}],"version":2},"flag-tn":{"id":"flag-tn","name":"Tunisia Flag","keywords":["tn","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1f3","native":"\uD83C\uDDF9\uD83C\uDDF3"}],"version":2},"flag-to":{"id":"flag-to","name":"Tonga Flag","keywords":["to","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1f4","native":"\uD83C\uDDF9\uD83C\uDDF4"}],"version":2},"flag-tr":{"id":"flag-tr","name":"Turkey Flag","keywords":["tr","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1f7","native":"\uD83C\uDDF9\uD83C\uDDF7"}],"version":2},"flag-tt":{"id":"flag-tt","name":"Trinidad & Tobago Flag","keywords":["tt","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1f9","native":"\uD83C\uDDF9\uD83C\uDDF9"}],"version":2},"flag-tv":{"id":"flag-tv","name":"Tuvalu Flag","keywords":["tv","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1fb","native":"\uD83C\uDDF9\uD83C\uDDFB"}],"version":2},"flag-tw":{"id":"flag-tw","name":"Taiwan Flag","keywords":["tw","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1fc","native":"\uD83C\uDDF9\uD83C\uDDFC"}],"version":2},"flag-tz":{"id":"flag-tz","name":"Tanzania Flag","keywords":["tz","united","republic","nation","country","banner"],"skins":[{"unified":"1f1f9-1f1ff","native":"\uD83C\uDDF9\uD83C\uDDFF"}],"version":2},"flag-ua":{"id":"flag-ua","name":"Ukraine Flag","keywords":["ua","nation","country","banner"],"skins":[{"unified":"1f1fa-1f1e6","native":"\uD83C\uDDFA\uD83C\uDDE6"}],"version":2},"flag-ug":{"id":"flag-ug","name":"Uganda Flag","keywords":["ug","nation","country","banner"],"skins":[{"unified":"1f1fa-1f1ec","native":"\uD83C\uDDFA\uD83C\uDDEC"}],"version":2},"flag-um":{"id":"flag-um","name":"U.s. Outlying Islands Flag","keywords":["um","u","s"],"skins":[{"unified":"1f1fa-1f1f2","native":"\uD83C\uDDFA\uD83C\uDDF2"}],"version":2},"flag-un":{"id":"flag-un","name":"United Nations Flag","keywords":["un","banner"],"skins":[{"unified":"1f1fa-1f1f3","native":"\uD83C\uDDFA\uD83C\uDDF3"}],"version":4},"us":{"id":"us","name":"United States Flag","keywords":["us","america","nation","country","banner"],"skins":[{"unified":"1f1fa-1f1f8","native":"\uD83C\uDDFA\uD83C\uDDF8"}],"version":1},"flag-uy":{"id":"flag-uy","name":"Uruguay Flag","keywords":["uy","nation","country","banner"],"skins":[{"unified":"1f1fa-1f1fe","native":"\uD83C\uDDFA\uD83C\uDDFE"}],"version":2},"flag-uz":{"id":"flag-uz","name":"Uzbekistan Flag","keywords":["uz","nation","country","banner"],"skins":[{"unified":"1f1fa-1f1ff","native":"\uD83C\uDDFA\uD83C\uDDFF"}],"version":2},"flag-va":{"id":"flag-va","name":"Vatican City Flag","keywords":["va","nation","country","banner"],"skins":[{"unified":"1f1fb-1f1e6","native":"\uD83C\uDDFB\uD83C\uDDE6"}],"version":2},"flag-vc":{"id":"flag-vc","name":"St. Vincent & Grenadines Flag","keywords":["vc","st","saint","nation","country","banner"],"skins":[{"unified":"1f1fb-1f1e8","native":"\uD83C\uDDFB\uD83C\uDDE8"}],"version":2},"flag-ve":{"id":"flag-ve","name":"Venezuela Flag","keywords":["ve","bolivarian","republic","nation","country","banner"],"skins":[{"unified":"1f1fb-1f1ea","native":"\uD83C\uDDFB\uD83C\uDDEA"}],"version":2},"flag-vg":{"id":"flag-vg","name":"British Virgin Islands Flag","keywords":["vg","bvi","nation","country","banner"],"skins":[{"unified":"1f1fb-1f1ec","native":"\uD83C\uDDFB\uD83C\uDDEC"}],"version":2},"flag-vi":{"id":"flag-vi","name":"U.s. Virgin Islands Flag","keywords":["vi","u","s","us","nation","country","banner"],"skins":[{"unified":"1f1fb-1f1ee","native":"\uD83C\uDDFB\uD83C\uDDEE"}],"version":2},"flag-vn":{"id":"flag-vn","name":"Vietnam Flag","keywords":["vn","viet","nam","nation","country","banner"],"skins":[{"unified":"1f1fb-1f1f3","native":"\uD83C\uDDFB\uD83C\uDDF3"}],"version":2},"flag-vu":{"id":"flag-vu","name":"Vanuatu Flag","keywords":["vu","nation","country","banner"],"skins":[{"unified":"1f1fb-1f1fa","native":"\uD83C\uDDFB\uD83C\uDDFA"}],"version":2},"flag-wf":{"id":"flag-wf","name":"Wallis & Futuna Flag","keywords":["wf","nation","country","banner"],"skins":[{"unified":"1f1fc-1f1eb","native":"\uD83C\uDDFC\uD83C\uDDEB"}],"version":2},"flag-ws":{"id":"flag-ws","name":"Samoa Flag","keywords":["ws","nation","country","banner"],"skins":[{"unified":"1f1fc-1f1f8","native":"\uD83C\uDDFC\uD83C\uDDF8"}],"version":2},"flag-xk":{"id":"flag-xk","name":"Kosovo Flag","keywords":["xk","nation","country","banner"],"skins":[{"unified":"1f1fd-1f1f0","native":"\uD83C\uDDFD\uD83C\uDDF0"}],"version":2},"flag-ye":{"id":"flag-ye","name":"Yemen Flag","keywords":["ye","nation","country","banner"],"skins":[{"unified":"1f1fe-1f1ea","native":"\uD83C\uDDFE\uD83C\uDDEA"}],"version":2},"flag-yt":{"id":"flag-yt","name":"Mayotte Flag","keywords":["yt","nation","country","banner"],"skins":[{"unified":"1f1fe-1f1f9","native":"\uD83C\uDDFE\uD83C\uDDF9"}],"version":2},"flag-za":{"id":"flag-za","name":"South Africa Flag","keywords":["za","nation","country","banner"],"skins":[{"unified":"1f1ff-1f1e6","native":"\uD83C\uDDFF\uD83C\uDDE6"}],"version":2},"flag-zm":{"id":"flag-zm","name":"Zambia Flag","keywords":["zm","nation","country","banner"],"skins":[{"unified":"1f1ff-1f1f2","native":"\uD83C\uDDFF\uD83C\uDDF2"}],"version":2},"flag-zw":{"id":"flag-zw","name":"Zimbabwe Flag","keywords":["zw","nation","country","banner"],"skins":[{"unified":"1f1ff-1f1fc","native":"\uD83C\uDDFF\uD83C\uDDFC"}],"version":2},"flag-england":{"id":"flag-england","name":"England Flag","keywords":["english"],"skins":[{"unified":"1f3f4-e0067-e0062-e0065-e006e-e0067-e007f","native":"\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67\uDB40\uDC7F"}],"version":5},"flag-scotland":{"id":"flag-scotland","name":"Scotland Flag","keywords":["scottish"],"skins":[{"unified":"1f3f4-e0067-e0062-e0073-e0063-e0074-e007f","native":"\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74\uDB40\uDC7F"}],"version":5},"flag-wales":{"id":"flag-wales","name":"Wales Flag","keywords":["welsh"],"skins":[{"unified":"1f3f4-e0067-e0062-e0077-e006c-e0073-e007f","native":"\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73\uDB40\uDC7F"}],"version":5}},"aliases":{"satisfied":"laughing","grinning_face_with_star_eyes":"star-struck","grinning_face_with_one_large_and_one_small_eye":"zany_face","smiling_face_with_smiling_eyes_and_hand_covering_mouth":"face_with_hand_over_mouth","face_with_finger_covering_closed_lips":"shushing_face","face_with_one_eyebrow_raised":"face_with_raised_eyebrow","face_with_open_mouth_vomiting":"face_vomiting","shocked_face_with_exploding_head":"exploding_head","serious_face_with_symbols_covering_mouth":"face_with_symbols_on_mouth","poop":"hankey","shit":"hankey","collision":"boom","raised_hand":"hand","hand_with_index_and_middle_fingers_crossed":"crossed_fingers","sign_of_the_horns":"the_horns","reversed_hand_with_middle_finger_extended":"middle_finger","thumbsup":"+1","thumbsdown":"-1","punch":"facepunch","mother_christmas":"mrs_claus","running":"runner","man-with-bunny-ears-partying":"men-with-bunny-ears-partying","woman-with-bunny-ears-partying":"women-with-bunny-ears-partying","women_holding_hands":"two_women_holding_hands","woman_and_man_holding_hands":"man_and_woman_holding_hands","couple":"man_and_woman_holding_hands","men_holding_hands":"two_men_holding_hands","paw_prints":"feet","flipper":"dolphin","honeybee":"bee","lady_beetle":"ladybug","cooking":"fried_egg","knife":"hocho","red_car":"car","sailboat":"boat","waxing_gibbous_moon":"moon","sun_small_cloud":"mostly_sunny","sun_behind_cloud":"barely_sunny","sun_behind_rain_cloud":"partly_sunny_rain","lightning_cloud":"lightning","tornado_cloud":"tornado","tshirt":"shirt","shoe":"mans_shoe","telephone":"phone","lantern":"izakaya_lantern","open_book":"book","envelope":"email","pencil":"memo","heavy_exclamation_mark":"exclamation","staff_of_aesculapius":"medical_symbol","flag-cn":"cn","flag-de":"de","flag-es":"es","flag-fr":"fr","uk":"gb","flag-gb":"gb","flag-it":"it","flag-jp":"jp","flag-kr":"kr","flag-ru":"ru","flag-us":"us"},"sheet":{"cols":61,"rows":61}}');

},{}],"8FG86":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>$e5534fc185f7111e$export$2e2bcd8739ae039);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _emojiMart = require("emoji-mart");
function $e5534fc185f7111e$export$2e2bcd8739ae039(props) {
    const ref = (0, _react.useRef)(null);
    const instance = (0, _react.useRef)(null);
    if (instance.current) instance.current.update(props);
    (0, _react.useEffect)(()=>{
        instance.current = new (0, _emojiMart.Picker)({
            ...props,
            ref: ref
        });
        return ()=>{
            instance.current = null;
        };
    }, []);
    return (0, _reactDefault.default).createElement("div", {
        ref: ref
    });
}

},{"react":"21dqq","emoji-mart":"kjyZx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kjyZx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Picker", ()=>$efa000751917694d$export$2e2bcd8739ae039);
parcelHelpers.export(exports, "Emoji", ()=>$331b4160623139bf$export$2e2bcd8739ae039);
parcelHelpers.export(exports, "FrequentlyUsed", ()=>$b22cfd0a55410b4f$export$2e2bcd8739ae039);
parcelHelpers.export(exports, "SafeFlags", ()=>$e6eae5155b87f591$export$bcb25aa587e9cb13);
parcelHelpers.export(exports, "SearchIndex", ()=>$c4d155af13ad4d4b$export$2e2bcd8739ae039);
parcelHelpers.export(exports, "Store", ()=>$f72b75cf796873c7$export$2e2bcd8739ae039);
parcelHelpers.export(exports, "init", ()=>$7adb23b0109cc36a$export$2cd8252107eb640b);
parcelHelpers.export(exports, "Data", ()=>$7adb23b0109cc36a$export$2d0294657ab35f1b);
parcelHelpers.export(exports, "I18n", ()=>$7adb23b0109cc36a$export$dbe3113d60765c1a);
parcelHelpers.export(exports, "getEmojiDataFromNative", ()=>$693b183b0a78708f$export$5ef5574deca44bc0);
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
function $c770c458706daa72$export$2e2bcd8739ae039(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var $fb96b826c0c5f37a$var$n, $fb96b826c0c5f37a$export$41c562ebe57d11e2, $fb96b826c0c5f37a$var$u, $fb96b826c0c5f37a$export$a8257692ac88316c, $fb96b826c0c5f37a$var$t, $fb96b826c0c5f37a$var$r, $fb96b826c0c5f37a$var$o, $fb96b826c0c5f37a$var$f, $fb96b826c0c5f37a$var$e = {}, $fb96b826c0c5f37a$var$c = [], $fb96b826c0c5f37a$var$s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function $fb96b826c0c5f37a$var$a(n1, l1) {
    for(var u1 in l1)n1[u1] = l1[u1];
    return n1;
}
function $fb96b826c0c5f37a$var$h(n2) {
    var l2 = n2.parentNode;
    l2 && l2.removeChild(n2);
}
function $fb96b826c0c5f37a$export$c8a8987d4410bf2d(l3, u2, i1) {
    var t1, r1, o1, f1 = {};
    for(o1 in u2)"key" == o1 ? t1 = u2[o1] : "ref" == o1 ? r1 = u2[o1] : f1[o1] = u2[o1];
    if (arguments.length > 2 && (f1.children = arguments.length > 3 ? $fb96b826c0c5f37a$var$n.call(arguments, 2) : i1), "function" == typeof l3 && null != l3.defaultProps) for(o1 in l3.defaultProps)void 0 === f1[o1] && (f1[o1] = l3.defaultProps[o1]);
    return $fb96b826c0c5f37a$var$y(l3, f1, t1, r1, null);
}
function $fb96b826c0c5f37a$var$y(n3, i2, t2, r2, o2) {
    var f2 = {
        type: n3,
        props: i2,
        key: t2,
        ref: r2,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == o2 ? ++$fb96b826c0c5f37a$var$u : o2
    };
    return null == o2 && null != $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode && $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode(f2), f2;
}
function $fb96b826c0c5f37a$export$7d1e3a5e95ceca43() {
    return {
        current: null
    };
}
function $fb96b826c0c5f37a$export$ffb0004e005737fa(n4) {
    return n4.children;
}
function $fb96b826c0c5f37a$export$16fa2f45be04daa8(n5, l4) {
    this.props = n5, this.context = l4;
}
function $fb96b826c0c5f37a$var$k(n6, l5) {
    if (null == l5) return n6.__ ? $fb96b826c0c5f37a$var$k(n6.__, n6.__.__k.indexOf(n6) + 1) : null;
    for(var u3; l5 < n6.__k.length; l5++)if (null != (u3 = n6.__k[l5]) && null != u3.__e) return u3.__e;
    return "function" == typeof n6.type ? $fb96b826c0c5f37a$var$k(n6) : null;
}
function $fb96b826c0c5f37a$var$b(n7) {
    var l6, u4;
    if (null != (n7 = n7.__) && null != n7.__c) {
        for(n7.__e = n7.__c.base = null, l6 = 0; l6 < n7.__k.length; l6++)if (null != (u4 = n7.__k[l6]) && null != u4.__e) {
            n7.__e = n7.__c.base = u4.__e;
            break;
        }
        return $fb96b826c0c5f37a$var$b(n7);
    }
}
function $fb96b826c0c5f37a$var$m(n8) {
    (!n8.__d && (n8.__d = !0) && $fb96b826c0c5f37a$var$t.push(n8) && !$fb96b826c0c5f37a$var$g.__r++ || $fb96b826c0c5f37a$var$o !== $fb96b826c0c5f37a$export$41c562ebe57d11e2.debounceRendering) && (($fb96b826c0c5f37a$var$o = $fb96b826c0c5f37a$export$41c562ebe57d11e2.debounceRendering) || $fb96b826c0c5f37a$var$r)($fb96b826c0c5f37a$var$g);
}
function $fb96b826c0c5f37a$var$g() {
    for(var n9; $fb96b826c0c5f37a$var$g.__r = $fb96b826c0c5f37a$var$t.length;)n9 = $fb96b826c0c5f37a$var$t.sort(function(n10, l7) {
        return n10.__v.__b - l7.__v.__b;
    }), $fb96b826c0c5f37a$var$t = [], n9.some(function(n11) {
        var l8, u5, i3, t3, r3, o3;
        n11.__d && (r3 = (t3 = (l8 = n11).__v).__e, (o3 = l8.__P) && (u5 = [], (i3 = $fb96b826c0c5f37a$var$a({}, t3)).__v = t3.__v + 1, $fb96b826c0c5f37a$var$j(o3, t3, i3, l8.__n, void 0 !== o3.ownerSVGElement, null != t3.__h ? [
            r3
        ] : null, u5, null == r3 ? $fb96b826c0c5f37a$var$k(t3) : r3, t3.__h), $fb96b826c0c5f37a$var$z(u5, t3), t3.__e != r3 && $fb96b826c0c5f37a$var$b(t3)));
    });
}
function $fb96b826c0c5f37a$var$w(n12, l9, u6, i4, t4, r4, o4, f3, s1, a1) {
    var h1, v1, p1, _1, b1, m1, g1, w1 = i4 && i4.__k || $fb96b826c0c5f37a$var$c, A1 = w1.length;
    for(u6.__k = [], h1 = 0; h1 < l9.length; h1++)if (null != (_1 = u6.__k[h1] = null == (_1 = l9[h1]) || "boolean" == typeof _1 ? null : "string" == typeof _1 || "number" == typeof _1 || "bigint" == typeof _1 ? $fb96b826c0c5f37a$var$y(null, _1, null, null, _1) : Array.isArray(_1) ? $fb96b826c0c5f37a$var$y($fb96b826c0c5f37a$export$ffb0004e005737fa, {
        children: _1
    }, null, null, null) : _1.__b > 0 ? $fb96b826c0c5f37a$var$y(_1.type, _1.props, _1.key, null, _1.__v) : _1)) {
        if (_1.__ = u6, _1.__b = u6.__b + 1, null === (p1 = w1[h1]) || p1 && _1.key == p1.key && _1.type === p1.type) w1[h1] = void 0;
        else for(v1 = 0; v1 < A1; v1++){
            if ((p1 = w1[v1]) && _1.key == p1.key && _1.type === p1.type) {
                w1[v1] = void 0;
                break;
            }
            p1 = null;
        }
        $fb96b826c0c5f37a$var$j(n12, _1, p1 = p1 || $fb96b826c0c5f37a$var$e, t4, r4, o4, f3, s1, a1), b1 = _1.__e, (v1 = _1.ref) && p1.ref != v1 && (g1 || (g1 = []), p1.ref && g1.push(p1.ref, null, _1), g1.push(v1, _1.__c || b1, _1)), null != b1 ? (null == m1 && (m1 = b1), "function" == typeof _1.type && _1.__k === p1.__k ? _1.__d = s1 = $fb96b826c0c5f37a$var$x(_1, s1, n12) : s1 = $fb96b826c0c5f37a$var$P(n12, _1, p1, w1, b1, s1), "function" == typeof u6.type && (u6.__d = s1)) : s1 && p1.__e == s1 && s1.parentNode != n12 && (s1 = $fb96b826c0c5f37a$var$k(p1));
    }
    for(u6.__e = m1, h1 = A1; h1--;)null != w1[h1] && ("function" == typeof u6.type && null != w1[h1].__e && w1[h1].__e == u6.__d && (u6.__d = $fb96b826c0c5f37a$var$k(i4, h1 + 1)), $fb96b826c0c5f37a$var$N(w1[h1], w1[h1]));
    if (g1) for(h1 = 0; h1 < g1.length; h1++)$fb96b826c0c5f37a$var$M(g1[h1], g1[++h1], g1[++h1]);
}
function $fb96b826c0c5f37a$var$x(n13, l10, u7) {
    for(var i5, t5 = n13.__k, r5 = 0; t5 && r5 < t5.length; r5++)(i5 = t5[r5]) && (i5.__ = n13, l10 = "function" == typeof i5.type ? $fb96b826c0c5f37a$var$x(i5, l10, u7) : $fb96b826c0c5f37a$var$P(u7, i5, i5, t5, i5.__e, l10));
    return l10;
}
function $fb96b826c0c5f37a$export$47e4c5b300681277(n14, l11) {
    return l11 = l11 || [], null == n14 || "boolean" == typeof n14 || (Array.isArray(n14) ? n14.some(function(n15) {
        $fb96b826c0c5f37a$export$47e4c5b300681277(n15, l11);
    }) : l11.push(n14)), l11;
}
function $fb96b826c0c5f37a$var$P(n16, l12, u8, i6, t6, r6) {
    var o5, f4, e1;
    if (void 0 !== l12.__d) o5 = l12.__d, l12.__d = void 0;
    else if (null == u8 || t6 != r6 || null == t6.parentNode) n: if (null == r6 || r6.parentNode !== n16) n16.appendChild(t6), o5 = null;
    else {
        for(f4 = r6, e1 = 0; (f4 = f4.nextSibling) && e1 < i6.length; e1 += 2)if (f4 == t6) break n;
        n16.insertBefore(t6, r6), o5 = r6;
    }
    return void 0 !== o5 ? o5 : t6.nextSibling;
}
function $fb96b826c0c5f37a$var$C(n17, l13, u9, i7, t7) {
    var r7;
    for(r7 in u9)"children" === r7 || "key" === r7 || r7 in l13 || $fb96b826c0c5f37a$var$H(n17, r7, null, u9[r7], i7);
    for(r7 in l13)t7 && "function" != typeof l13[r7] || "children" === r7 || "key" === r7 || "value" === r7 || "checked" === r7 || u9[r7] === l13[r7] || $fb96b826c0c5f37a$var$H(n17, r7, l13[r7], u9[r7], i7);
}
function $fb96b826c0c5f37a$var$$(n18, l14, u10) {
    "-" === l14[0] ? n18.setProperty(l14, u10) : n18[l14] = null == u10 ? "" : "number" != typeof u10 || $fb96b826c0c5f37a$var$s.test(l14) ? u10 : u10 + "px";
}
function $fb96b826c0c5f37a$var$H(n19, l15, u11, i8, t8) {
    var r8;
    n: if ("style" === l15) {
        if ("string" == typeof u11) n19.style.cssText = u11;
        else {
            if ("string" == typeof i8 && (n19.style.cssText = i8 = ""), i8) for(l15 in i8)u11 && l15 in u11 || $fb96b826c0c5f37a$var$$(n19.style, l15, "");
            if (u11) for(l15 in u11)i8 && u11[l15] === i8[l15] || $fb96b826c0c5f37a$var$$(n19.style, l15, u11[l15]);
        }
    } else if ("o" === l15[0] && "n" === l15[1]) r8 = l15 !== (l15 = l15.replace(/Capture$/, "")), l15 = l15.toLowerCase() in n19 ? l15.toLowerCase().slice(2) : l15.slice(2), n19.l || (n19.l = {}), n19.l[l15 + r8] = u11, u11 ? i8 || n19.addEventListener(l15, r8 ? $fb96b826c0c5f37a$var$T : $fb96b826c0c5f37a$var$I, r8) : n19.removeEventListener(l15, r8 ? $fb96b826c0c5f37a$var$T : $fb96b826c0c5f37a$var$I, r8);
    else if ("dangerouslySetInnerHTML" !== l15) {
        if (t8) l15 = l15.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");
        else if ("href" !== l15 && "list" !== l15 && "form" !== l15 && "tabIndex" !== l15 && "download" !== l15 && l15 in n19) try {
            n19[l15] = null == u11 ? "" : u11;
            break n;
        } catch (n) {}
        "function" == typeof u11 || (null != u11 && (!1 !== u11 || "a" === l15[0] && "r" === l15[1]) ? n19.setAttribute(l15, u11) : n19.removeAttribute(l15));
    }
}
function $fb96b826c0c5f37a$var$I(n20) {
    this.l[n20.type + !1]($fb96b826c0c5f37a$export$41c562ebe57d11e2.event ? $fb96b826c0c5f37a$export$41c562ebe57d11e2.event(n20) : n20);
}
function $fb96b826c0c5f37a$var$T(n21) {
    this.l[n21.type + !0]($fb96b826c0c5f37a$export$41c562ebe57d11e2.event ? $fb96b826c0c5f37a$export$41c562ebe57d11e2.event(n21) : n21);
}
function $fb96b826c0c5f37a$var$j(n22, u12, i9, t9, r9, o6, f5, e2, c1) {
    var s2, h2, v2, y1, p2, k1, b2, m2, g2, x1, A2, P1 = u12.type;
    if (void 0 !== u12.constructor) return null;
    null != i9.__h && (c1 = i9.__h, e2 = u12.__e = i9.__e, u12.__h = null, o6 = [
        e2
    ]), (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__b) && s2(u12);
    try {
        n: if ("function" == typeof P1) {
            if (m2 = u12.props, g2 = (s2 = P1.contextType) && t9[s2.__c], x1 = s2 ? g2 ? g2.props.value : s2.__ : t9, i9.__c ? b2 = (h2 = u12.__c = i9.__c).__ = h2.__E : ("prototype" in P1 && P1.prototype.render ? u12.__c = h2 = new P1(m2, x1) : (u12.__c = h2 = new $fb96b826c0c5f37a$export$16fa2f45be04daa8(m2, x1), h2.constructor = P1, h2.render = $fb96b826c0c5f37a$var$O), g2 && g2.sub(h2), h2.props = m2, h2.state || (h2.state = {}), h2.context = x1, h2.__n = t9, v2 = h2.__d = !0, h2.__h = []), null == h2.__s && (h2.__s = h2.state), null != P1.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = $fb96b826c0c5f37a$var$a({}, h2.__s)), $fb96b826c0c5f37a$var$a(h2.__s, P1.getDerivedStateFromProps(m2, h2.__s))), y1 = h2.props, p2 = h2.state, v2) null == P1.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
            else {
                if (null == P1.getDerivedStateFromProps && m2 !== y1 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(m2, x1), !h2.__e && null != h2.shouldComponentUpdate && !1 === h2.shouldComponentUpdate(m2, h2.__s, x1) || u12.__v === i9.__v) {
                    h2.props = m2, h2.state = h2.__s, u12.__v !== i9.__v && (h2.__d = !1), h2.__v = u12, u12.__e = i9.__e, u12.__k = i9.__k, u12.__k.forEach(function(n23) {
                        n23 && (n23.__ = u12);
                    }), h2.__h.length && f5.push(h2);
                    break n;
                }
                null != h2.componentWillUpdate && h2.componentWillUpdate(m2, h2.__s, x1), null != h2.componentDidUpdate && h2.__h.push(function() {
                    h2.componentDidUpdate(y1, p2, k1);
                });
            }
            h2.context = x1, h2.props = m2, h2.state = h2.__s, (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__r) && s2(u12), h2.__d = !1, h2.__v = u12, h2.__P = n22, s2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s, null != h2.getChildContext && (t9 = $fb96b826c0c5f37a$var$a($fb96b826c0c5f37a$var$a({}, t9), h2.getChildContext())), v2 || null == h2.getSnapshotBeforeUpdate || (k1 = h2.getSnapshotBeforeUpdate(y1, p2)), A2 = null != s2 && s2.type === $fb96b826c0c5f37a$export$ffb0004e005737fa && null == s2.key ? s2.props.children : s2, $fb96b826c0c5f37a$var$w(n22, Array.isArray(A2) ? A2 : [
                A2
            ], u12, i9, t9, r9, o6, f5, e2, c1), h2.base = u12.__e, u12.__h = null, h2.__h.length && f5.push(h2), b2 && (h2.__E = h2.__ = null), h2.__e = !1;
        } else null == o6 && u12.__v === i9.__v ? (u12.__k = i9.__k, u12.__e = i9.__e) : u12.__e = $fb96b826c0c5f37a$var$L(i9.__e, u12, i9, t9, r9, o6, f5, c1);
        (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.diffed) && s2(u12);
    } catch (n24) {
        u12.__v = null, (c1 || null != o6) && (u12.__e = e2, u12.__h = !!c1, o6[o6.indexOf(e2)] = null), $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n24, u12, i9);
    }
}
function $fb96b826c0c5f37a$var$z(n25, u13) {
    $fb96b826c0c5f37a$export$41c562ebe57d11e2.__c && $fb96b826c0c5f37a$export$41c562ebe57d11e2.__c(u13, n25), n25.some(function(u14) {
        try {
            n25 = u14.__h, u14.__h = [], n25.some(function(n26) {
                n26.call(u14);
            });
        } catch (n27) {
            $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n27, u14.__v);
        }
    });
}
function $fb96b826c0c5f37a$var$L(l16, u15, i10, t10, r10, o7, f6, c2) {
    var s3, a2, v3, y2 = i10.props, p3 = u15.props, d1 = u15.type, _2 = 0;
    if ("svg" === d1 && (r10 = !0), null != o7) {
        for(; _2 < o7.length; _2++)if ((s3 = o7[_2]) && "setAttribute" in s3 == !!d1 && (d1 ? s3.localName === d1 : 3 === s3.nodeType)) {
            l16 = s3, o7[_2] = null;
            break;
        }
    }
    if (null == l16) {
        if (null === d1) return document.createTextNode(p3);
        l16 = r10 ? document.createElementNS("http://www.w3.org/2000/svg", d1) : document.createElement(d1, p3.is && p3), o7 = null, c2 = !1;
    }
    if (null === d1) y2 === p3 || c2 && l16.data === p3 || (l16.data = p3);
    else {
        if (o7 = o7 && $fb96b826c0c5f37a$var$n.call(l16.childNodes), a2 = (y2 = i10.props || $fb96b826c0c5f37a$var$e).dangerouslySetInnerHTML, v3 = p3.dangerouslySetInnerHTML, !c2) {
            if (null != o7) for(y2 = {}, _2 = 0; _2 < l16.attributes.length; _2++)y2[l16.attributes[_2].name] = l16.attributes[_2].value;
            (v3 || a2) && (v3 && (a2 && v3.__html == a2.__html || v3.__html === l16.innerHTML) || (l16.innerHTML = v3 && v3.__html || ""));
        }
        if ($fb96b826c0c5f37a$var$C(l16, p3, y2, r10, c2), v3) u15.__k = [];
        else if (_2 = u15.props.children, $fb96b826c0c5f37a$var$w(l16, Array.isArray(_2) ? _2 : [
            _2
        ], u15, i10, t10, r10 && "foreignObject" !== d1, o7, f6, o7 ? o7[0] : i10.__k && $fb96b826c0c5f37a$var$k(i10, 0), c2), null != o7) for(_2 = o7.length; _2--;)null != o7[_2] && $fb96b826c0c5f37a$var$h(o7[_2]);
        c2 || ("value" in p3 && void 0 !== (_2 = p3.value) && (_2 !== y2.value || _2 !== l16.value || "progress" === d1 && !_2) && $fb96b826c0c5f37a$var$H(l16, "value", _2, y2.value, !1), "checked" in p3 && void 0 !== (_2 = p3.checked) && _2 !== l16.checked && $fb96b826c0c5f37a$var$H(l16, "checked", _2, y2.checked, !1));
    }
    return l16;
}
function $fb96b826c0c5f37a$var$M(n28, u16, i11) {
    try {
        "function" == typeof n28 ? n28(u16) : n28.current = u16;
    } catch (n29) {
        $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n29, i11);
    }
}
function $fb96b826c0c5f37a$var$N(n30, u17, i12) {
    var t11, r11;
    if ($fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount && $fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount(n30), (t11 = n30.ref) && (t11.current && t11.current !== n30.__e || $fb96b826c0c5f37a$var$M(t11, null, u17)), null != (t11 = n30.__c)) {
        if (t11.componentWillUnmount) try {
            t11.componentWillUnmount();
        } catch (n31) {
            $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n31, u17);
        }
        t11.base = t11.__P = null;
    }
    if (t11 = n30.__k) for(r11 = 0; r11 < t11.length; r11++)t11[r11] && $fb96b826c0c5f37a$var$N(t11[r11], u17, "function" != typeof n30.type);
    i12 || null == n30.__e || $fb96b826c0c5f37a$var$h(n30.__e), n30.__e = n30.__d = void 0;
}
function $fb96b826c0c5f37a$var$O(n32, l, u18) {
    return this.constructor(n32, u18);
}
function $fb96b826c0c5f37a$export$b3890eb0ae9dca99(u19, i13, t12) {
    var r12, o8, f7;
    $fb96b826c0c5f37a$export$41c562ebe57d11e2.__ && $fb96b826c0c5f37a$export$41c562ebe57d11e2.__(u19, i13), o8 = (r12 = "function" == typeof t12) ? null : t12 && t12.__k || i13.__k, f7 = [], $fb96b826c0c5f37a$var$j(i13, u19 = (!r12 && t12 || i13).__k = $fb96b826c0c5f37a$export$c8a8987d4410bf2d($fb96b826c0c5f37a$export$ffb0004e005737fa, null, [
        u19
    ]), o8 || $fb96b826c0c5f37a$var$e, $fb96b826c0c5f37a$var$e, void 0 !== i13.ownerSVGElement, !r12 && t12 ? [
        t12
    ] : o8 ? null : i13.firstChild ? $fb96b826c0c5f37a$var$n.call(i13.childNodes) : null, f7, !r12 && t12 ? t12 : o8 ? o8.__e : i13.firstChild, r12), $fb96b826c0c5f37a$var$z(f7, u19);
}
function $fb96b826c0c5f37a$export$fa8d919ba61d84db(n33, l17) {
    $fb96b826c0c5f37a$export$b3890eb0ae9dca99(n33, l17, $fb96b826c0c5f37a$export$fa8d919ba61d84db);
}
function $fb96b826c0c5f37a$export$e530037191fcd5d7(l18, u20, i14) {
    var t13, r13, o9, f8 = $fb96b826c0c5f37a$var$a({}, l18.props);
    for(o9 in u20)"key" == o9 ? t13 = u20[o9] : "ref" == o9 ? r13 = u20[o9] : f8[o9] = u20[o9];
    return arguments.length > 2 && (f8.children = arguments.length > 3 ? $fb96b826c0c5f37a$var$n.call(arguments, 2) : i14), $fb96b826c0c5f37a$var$y(l18.type, f8, t13 || l18.key, r13 || l18.ref, null);
}
function $fb96b826c0c5f37a$export$fd42f52fd3ae1109(n34, l19) {
    var u21 = {
        __c: l19 = "__cC" + $fb96b826c0c5f37a$var$f++,
        __: n34,
        Consumer: function(n35, l20) {
            return n35.children(l20);
        },
        Provider: function(n36) {
            var u22, i15;
            return this.getChildContext || (u22 = [], (i15 = {})[l19] = this, this.getChildContext = function() {
                return i15;
            }, this.shouldComponentUpdate = function(n37) {
                this.props.value !== n37.value && u22.some($fb96b826c0c5f37a$var$m);
            }, this.sub = function(n38) {
                u22.push(n38);
                var l21 = n38.componentWillUnmount;
                n38.componentWillUnmount = function() {
                    u22.splice(u22.indexOf(n38), 1), l21 && l21.call(n38);
                };
            }), n36.children;
        }
    };
    return u21.Provider.__ = u21.Consumer.contextType = u21;
}
$fb96b826c0c5f37a$var$n = $fb96b826c0c5f37a$var$c.slice, $fb96b826c0c5f37a$export$41c562ebe57d11e2 = {
    __e: function(n39, l22) {
        for(var u23, i16, t14; l22 = l22.__;)if ((u23 = l22.__c) && !u23.__) try {
            if ((i16 = u23.constructor) && null != i16.getDerivedStateFromError && (u23.setState(i16.getDerivedStateFromError(n39)), t14 = u23.__d), null != u23.componentDidCatch && (u23.componentDidCatch(n39), t14 = u23.__d), t14) return u23.__E = u23;
        } catch (l23) {
            n39 = l23;
        }
        throw n39;
    }
}, $fb96b826c0c5f37a$var$u = 0, $fb96b826c0c5f37a$export$a8257692ac88316c = function(n40) {
    return null != n40 && void 0 === n40.constructor;
}, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.setState = function(n41, l24) {
    var u24;
    u24 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = $fb96b826c0c5f37a$var$a({}, this.state), "function" == typeof n41 && (n41 = n41($fb96b826c0c5f37a$var$a({}, u24), this.props)), n41 && $fb96b826c0c5f37a$var$a(u24, n41), null != n41 && this.__v && (l24 && this.__h.push(l24), $fb96b826c0c5f37a$var$m(this));
}, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.forceUpdate = function(n42) {
    this.__v && (this.__e = !0, n42 && this.__h.push(n42), $fb96b826c0c5f37a$var$m(this));
}, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.render = $fb96b826c0c5f37a$export$ffb0004e005737fa, $fb96b826c0c5f37a$var$t = [], $fb96b826c0c5f37a$var$r = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, $fb96b826c0c5f37a$var$g.__r = 0, $fb96b826c0c5f37a$var$f = 0;
var $bd9dd35321b03dd4$var$o = 0;
function $bd9dd35321b03dd4$export$34b9dba7ce09269b(_1, e1, n, t, f) {
    var l, s, u = {};
    for(s in e1)"ref" == s ? l = e1[s] : u[s] = e1[s];
    var a = {
        type: _1,
        props: u,
        key: n,
        ref: l,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: --$bd9dd35321b03dd4$var$o,
        __source: t,
        __self: f
    };
    if ("function" == typeof _1 && (l = _1.defaultProps)) for(s in l)void 0 === u[s] && (u[s] = l[s]);
    return $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode && $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode(a), a;
}
function $f72b75cf796873c7$var$set(key, value) {
    try {
        window.localStorage[`emoji-mart.${key}`] = JSON.stringify(value);
    } catch (error) {}
}
function $f72b75cf796873c7$var$get(key) {
    try {
        const value = window.localStorage[`emoji-mart.${key}`];
        if (value) return JSON.parse(value);
    } catch (error) {}
}
var $f72b75cf796873c7$export$2e2bcd8739ae039 = {
    set: $f72b75cf796873c7$var$set,
    get: $f72b75cf796873c7$var$get
};
const $c84d045dcc34faf5$var$CACHE = new Map();
const $c84d045dcc34faf5$var$VERSIONS = [
    {
        v: 14,
        emoji: "\uD83E\uDEE0"
    },
    {
        v: 13.1,
        emoji: "\uD83D\uDE36\u200D\uD83C\uDF2B\uFE0F"
    },
    {
        v: 13,
        emoji: "\uD83E\uDD78"
    },
    {
        v: 12.1,
        emoji: "\uD83E\uDDD1\u200D\uD83E\uDDB0"
    },
    {
        v: 12,
        emoji: "\uD83E\uDD71"
    },
    {
        v: 11,
        emoji: "\uD83E\uDD70"
    },
    {
        v: 5,
        emoji: "\uD83E\uDD29"
    },
    {
        v: 4,
        emoji: "\uD83D\uDC71\u200D\u2640\uFE0F"
    },
    {
        v: 3,
        emoji: "\uD83E\uDD23"
    },
    {
        v: 2,
        emoji: "\uD83D\uDC4B\uD83C\uDFFB"
    },
    {
        v: 1,
        emoji: "\uD83D\uDE43"
    }
];
function $c84d045dcc34faf5$var$latestVersion() {
    for (const { v: v, emoji: emoji } of $c84d045dcc34faf5$var$VERSIONS){
        if ($c84d045dcc34faf5$var$isSupported(emoji)) return v;
    }
}
function $c84d045dcc34faf5$var$noCountryFlags() {
    if ($c84d045dcc34faf5$var$isSupported("\uD83C\uDDE8\uD83C\uDDE6")) return false;
    return true;
}
function $c84d045dcc34faf5$var$isSupported(emoji) {
    if ($c84d045dcc34faf5$var$CACHE.has(emoji)) return $c84d045dcc34faf5$var$CACHE.get(emoji);
    const supported = $c84d045dcc34faf5$var$isEmojiSupported(emoji);
    $c84d045dcc34faf5$var$CACHE.set(emoji, supported);
    return supported;
}
// https://github.com/koala-interactive/is-emoji-supported
const $c84d045dcc34faf5$var$isEmojiSupported = (()=>{
    let ctx = null;
    try {
        if (!navigator.userAgent.includes("jsdom")) ctx = document.createElement("canvas").getContext("2d", {
            willReadFrequently: true
        });
    } catch  {}
    // Not in browser env
    if (!ctx) return ()=>false;
    const CANVAS_HEIGHT = 25;
    const CANVAS_WIDTH = 20;
    const textSize = Math.floor(CANVAS_HEIGHT / 2);
    // Initialize convas context
    ctx.font = textSize + "px Arial, Sans-Serif";
    ctx.textBaseline = "top";
    ctx.canvas.width = CANVAS_WIDTH * 2;
    ctx.canvas.height = CANVAS_HEIGHT;
    return (unicode)=>{
        ctx.clearRect(0, 0, CANVAS_WIDTH * 2, CANVAS_HEIGHT);
        // Draw in red on the left
        ctx.fillStyle = "#FF0000";
        ctx.fillText(unicode, 0, 22);
        // Draw in blue on right
        ctx.fillStyle = "#0000FF";
        ctx.fillText(unicode, CANVAS_WIDTH, 22);
        const a = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT).data;
        const count = a.length;
        let i = 0;
        // Search the first visible pixel
        for(; i < count && !a[i + 3]; i += 4);
        // No visible pixel
        if (i >= count) return false;
        // Emoji has immutable color, so we check the color of the emoji in two different colors
        // the result show be the same.
        const x = CANVAS_WIDTH + i / 4 % CANVAS_WIDTH;
        const y = Math.floor(i / 4 / CANVAS_WIDTH);
        const b = ctx.getImageData(x, y, 1, 1).data;
        if (a[i] !== b[0] || a[i + 2] !== b[2]) return false;
        // Some emojis are a contraction of different ones, so if it's not
        // supported, it will show multiple characters
        if (ctx.measureText(unicode).width >= CANVAS_WIDTH) return false;
        // Supported
        return true;
    };
})();
var $c84d045dcc34faf5$export$2e2bcd8739ae039 = {
    latestVersion: $c84d045dcc34faf5$var$latestVersion,
    noCountryFlags: $c84d045dcc34faf5$var$noCountryFlags
};
const $b22cfd0a55410b4f$var$DEFAULTS = [
    "+1",
    "grinning",
    "kissing_heart",
    "heart_eyes",
    "laughing",
    "stuck_out_tongue_winking_eye",
    "sweat_smile",
    "joy",
    "scream",
    "disappointed",
    "unamused",
    "weary",
    "sob",
    "sunglasses",
    "heart"
];
let $b22cfd0a55410b4f$var$Index = null;
function $b22cfd0a55410b4f$var$add(emoji) {
    $b22cfd0a55410b4f$var$Index || ($b22cfd0a55410b4f$var$Index = $f72b75cf796873c7$export$2e2bcd8739ae039.get("frequently") || {});
    const emojiId = emoji.id || emoji;
    if (!emojiId) return;
    $b22cfd0a55410b4f$var$Index[emojiId] || ($b22cfd0a55410b4f$var$Index[emojiId] = 0);
    $b22cfd0a55410b4f$var$Index[emojiId] += 1;
    $f72b75cf796873c7$export$2e2bcd8739ae039.set("last", emojiId);
    $f72b75cf796873c7$export$2e2bcd8739ae039.set("frequently", $b22cfd0a55410b4f$var$Index);
}
function $b22cfd0a55410b4f$var$get({ maxFrequentRows: maxFrequentRows, perLine: perLine }) {
    if (!maxFrequentRows) return [];
    $b22cfd0a55410b4f$var$Index || ($b22cfd0a55410b4f$var$Index = $f72b75cf796873c7$export$2e2bcd8739ae039.get("frequently"));
    let emojiIds = [];
    if (!$b22cfd0a55410b4f$var$Index) {
        $b22cfd0a55410b4f$var$Index = {};
        for(let i in $b22cfd0a55410b4f$var$DEFAULTS.slice(0, perLine)){
            const emojiId = $b22cfd0a55410b4f$var$DEFAULTS[i];
            $b22cfd0a55410b4f$var$Index[emojiId] = perLine - i;
            emojiIds.push(emojiId);
        }
        return emojiIds;
    }
    const max = maxFrequentRows * perLine;
    const last = $f72b75cf796873c7$export$2e2bcd8739ae039.get("last");
    for(let emojiId in $b22cfd0a55410b4f$var$Index)emojiIds.push(emojiId);
    emojiIds.sort((a, b)=>{
        const aScore = $b22cfd0a55410b4f$var$Index[b];
        const bScore = $b22cfd0a55410b4f$var$Index[a];
        if (aScore == bScore) return a.localeCompare(b);
        return aScore - bScore;
    });
    if (emojiIds.length > max) {
        const removedIds = emojiIds.slice(max);
        emojiIds = emojiIds.slice(0, max);
        for (let removedId of removedIds){
            if (removedId == last) continue;
            delete $b22cfd0a55410b4f$var$Index[removedId];
        }
        if (last && emojiIds.indexOf(last) == -1) {
            delete $b22cfd0a55410b4f$var$Index[emojiIds[emojiIds.length - 1]];
            emojiIds.splice(-1, 1, last);
        }
        $f72b75cf796873c7$export$2e2bcd8739ae039.set("frequently", $b22cfd0a55410b4f$var$Index);
    }
    return emojiIds;
}
var $b22cfd0a55410b4f$export$2e2bcd8739ae039 = {
    add: $b22cfd0a55410b4f$var$add,
    get: $b22cfd0a55410b4f$var$get,
    DEFAULTS: $b22cfd0a55410b4f$var$DEFAULTS
};
var $8d50d93417ef682a$exports = {};
$8d50d93417ef682a$exports = JSON.parse('{"search":"Search","search_no_results_1":"Oh no!","search_no_results_2":"That emoji couldn\u2019t be found","pick":"Pick an emoji\u2026","add_custom":"Add custom emoji","categories":{"activity":"Activity","custom":"Custom","flags":"Flags","foods":"Food & Drink","frequent":"Frequently used","nature":"Animals & Nature","objects":"Objects","people":"Smileys & People","places":"Travel & Places","search":"Search Results","symbols":"Symbols"},"skins":{"1":"Default","2":"Light","3":"Medium-Light","4":"Medium","5":"Medium-Dark","6":"Dark","choose":"Choose default skin tone"}}');
var $b247ea80b67298d5$export$2e2bcd8739ae039 = {
    autoFocus: {
        value: false
    },
    dynamicWidth: {
        value: false
    },
    emojiButtonColors: {
        value: null
    },
    emojiButtonRadius: {
        value: "100%"
    },
    emojiButtonSize: {
        value: 36
    },
    emojiSize: {
        value: 24
    },
    emojiVersion: {
        value: 14,
        choices: [
            1,
            2,
            3,
            4,
            5,
            11,
            12,
            12.1,
            13,
            13.1,
            14
        ]
    },
    exceptEmojis: {
        value: []
    },
    icons: {
        value: "auto",
        choices: [
            "auto",
            "outline",
            "solid"
        ]
    },
    locale: {
        value: "en",
        choices: [
            "en",
            "ar",
            "be",
            "cs",
            "de",
            "es",
            "fa",
            "fi",
            "fr",
            "hi",
            "it",
            "ja",
            "kr",
            "nl",
            "pl",
            "pt",
            "ru",
            "sa",
            "tr",
            "uk",
            "vi",
            "zh"
        ]
    },
    maxFrequentRows: {
        value: 4
    },
    navPosition: {
        value: "top",
        choices: [
            "top",
            "bottom",
            "none"
        ]
    },
    noCountryFlags: {
        value: false
    },
    noResultsEmoji: {
        value: null
    },
    perLine: {
        value: 9
    },
    previewEmoji: {
        value: null
    },
    previewPosition: {
        value: "bottom",
        choices: [
            "top",
            "bottom",
            "none"
        ]
    },
    searchPosition: {
        value: "sticky",
        choices: [
            "sticky",
            "static",
            "none"
        ]
    },
    set: {
        value: "native",
        choices: [
            "native",
            "apple",
            "facebook",
            "google",
            "twitter"
        ]
    },
    skin: {
        value: 1,
        choices: [
            1,
            2,
            3,
            4,
            5,
            6
        ]
    },
    skinTonePosition: {
        value: "preview",
        choices: [
            "preview",
            "search",
            "none"
        ]
    },
    theme: {
        value: "auto",
        choices: [
            "auto",
            "light",
            "dark"
        ]
    },
    // Data
    categories: null,
    categoryIcons: null,
    custom: null,
    data: null,
    i18n: null,
    // Callbacks
    getImageURL: null,
    getSpritesheetURL: null,
    onAddCustomEmoji: null,
    onClickOutside: null,
    onEmojiSelect: null,
    // Deprecated
    stickySearch: {
        deprecated: true,
        value: true
    }
};
let $7adb23b0109cc36a$export$dbe3113d60765c1a = null;
let $7adb23b0109cc36a$export$2d0294657ab35f1b = null;
const $7adb23b0109cc36a$var$fetchCache = {};
async function $7adb23b0109cc36a$var$fetchJSON(src) {
    if ($7adb23b0109cc36a$var$fetchCache[src]) return $7adb23b0109cc36a$var$fetchCache[src];
    const response = await fetch(src);
    const json = await response.json();
    $7adb23b0109cc36a$var$fetchCache[src] = json;
    return json;
}
let $7adb23b0109cc36a$var$promise = null;
let $7adb23b0109cc36a$var$initiated = false;
let $7adb23b0109cc36a$var$initCallback = null;
let $7adb23b0109cc36a$var$initialized = false;
function $7adb23b0109cc36a$export$2cd8252107eb640b(options, { caller: caller } = {}) {
    $7adb23b0109cc36a$var$promise || ($7adb23b0109cc36a$var$promise = new Promise((resolve)=>{
        $7adb23b0109cc36a$var$initCallback = resolve;
    }));
    if (options) $7adb23b0109cc36a$var$_init(options);
    else if (caller && !$7adb23b0109cc36a$var$initialized) console.warn(`\`${caller}\` requires data to be initialized first. Promise will be pending until \`init\` is called.`);
    return $7adb23b0109cc36a$var$promise;
}
async function $7adb23b0109cc36a$var$_init(props) {
    $7adb23b0109cc36a$var$initialized = true;
    let { emojiVersion: emojiVersion, set: set, locale: locale } = props;
    emojiVersion || (emojiVersion = $b247ea80b67298d5$export$2e2bcd8739ae039.emojiVersion.value);
    set || (set = $b247ea80b67298d5$export$2e2bcd8739ae039.set.value);
    locale || (locale = $b247ea80b67298d5$export$2e2bcd8739ae039.locale.value);
    if (!$7adb23b0109cc36a$export$2d0294657ab35f1b) {
        $7adb23b0109cc36a$export$2d0294657ab35f1b = (typeof props.data === "function" ? await props.data() : props.data) || await $7adb23b0109cc36a$var$fetchJSON(`https://cdn.jsdelivr.net/npm/@emoji-mart/data@latest/sets/${emojiVersion}/${set}.json`);
        $7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons = {};
        $7adb23b0109cc36a$export$2d0294657ab35f1b.natives = {};
        $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.unshift({
            id: "frequent",
            emojis: []
        });
        for(const alias in $7adb23b0109cc36a$export$2d0294657ab35f1b.aliases){
            const emojiId = $7adb23b0109cc36a$export$2d0294657ab35f1b.aliases[alias];
            const emoji = $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emojiId];
            if (!emoji) continue;
            emoji.aliases || (emoji.aliases = []);
            emoji.aliases.push(alias);
        }
        $7adb23b0109cc36a$export$2d0294657ab35f1b.originalCategories = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories;
    } else $7adb23b0109cc36a$export$2d0294657ab35f1b.categories = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.filter((c)=>{
        const isCustom = !!c.name;
        if (!isCustom) return true;
        return false;
    });
    $7adb23b0109cc36a$export$dbe3113d60765c1a = (typeof props.i18n === "function" ? await props.i18n() : props.i18n) || (locale == "en" ? /*@__PURE__*/ $parcel$interopDefault($8d50d93417ef682a$exports) : await $7adb23b0109cc36a$var$fetchJSON(`https://cdn.jsdelivr.net/npm/@emoji-mart/data@latest/i18n/${locale}.json`));
    if (props.custom) for(let i in props.custom){
        i = parseInt(i);
        const category = props.custom[i];
        const prevCategory = props.custom[i - 1];
        if (!category.emojis || !category.emojis.length) continue;
        category.id || (category.id = `custom_${i + 1}`);
        category.name || (category.name = $7adb23b0109cc36a$export$dbe3113d60765c1a.categories.custom);
        if (prevCategory && !category.icon) category.target = prevCategory.target || prevCategory;
        $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.push(category);
        for (const emoji of category.emojis)$7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emoji.id] = emoji;
    }
    if (props.categories) $7adb23b0109cc36a$export$2d0294657ab35f1b.categories = $7adb23b0109cc36a$export$2d0294657ab35f1b.originalCategories.filter((c)=>{
        return props.categories.indexOf(c.id) != -1;
    }).sort((c1, c2)=>{
        const i1 = props.categories.indexOf(c1.id);
        const i2 = props.categories.indexOf(c2.id);
        return i1 - i2;
    });
    let latestVersionSupport = null;
    let noCountryFlags = null;
    if (set == "native") {
        latestVersionSupport = $c84d045dcc34faf5$export$2e2bcd8739ae039.latestVersion();
        noCountryFlags = props.noCountryFlags || $c84d045dcc34faf5$export$2e2bcd8739ae039.noCountryFlags();
    }
    let categoryIndex = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.length;
    let resetSearchIndex = false;
    while(categoryIndex--){
        const category = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories[categoryIndex];
        if (category.id == "frequent") {
            let { maxFrequentRows: maxFrequentRows, perLine: perLine } = props;
            maxFrequentRows = maxFrequentRows >= 0 ? maxFrequentRows : $b247ea80b67298d5$export$2e2bcd8739ae039.maxFrequentRows.value;
            perLine || (perLine = $b247ea80b67298d5$export$2e2bcd8739ae039.perLine.value);
            category.emojis = $b22cfd0a55410b4f$export$2e2bcd8739ae039.get({
                maxFrequentRows: maxFrequentRows,
                perLine: perLine
            });
        }
        if (!category.emojis || !category.emojis.length) {
            $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.splice(categoryIndex, 1);
            continue;
        }
        const { categoryIcons: categoryIcons } = props;
        if (categoryIcons) {
            const icon = categoryIcons[category.id];
            if (icon && !category.icon) category.icon = icon;
        }
        let emojiIndex = category.emojis.length;
        while(emojiIndex--){
            const emojiId = category.emojis[emojiIndex];
            const emoji = emojiId.id ? emojiId : $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emojiId];
            const ignore = ()=>{
                category.emojis.splice(emojiIndex, 1);
            };
            if (!emoji || props.exceptEmojis && props.exceptEmojis.includes(emoji.id)) {
                ignore();
                continue;
            }
            if (latestVersionSupport && emoji.version > latestVersionSupport) {
                ignore();
                continue;
            }
            if (noCountryFlags && category.id == "flags") {
                if (!$e6eae5155b87f591$export$bcb25aa587e9cb13.includes(emoji.id)) {
                    ignore();
                    continue;
                }
            }
            if (!emoji.search) {
                resetSearchIndex = true;
                emoji.search = "," + [
                    [
                        emoji.id,
                        false
                    ],
                    [
                        emoji.name,
                        true
                    ],
                    [
                        emoji.keywords,
                        false
                    ],
                    [
                        emoji.emoticons,
                        false
                    ]
                ].map(([strings, split])=>{
                    if (!strings) return;
                    return (Array.isArray(strings) ? strings : [
                        strings
                    ]).map((string)=>{
                        return (split ? string.split(/[-|_|\s]+/) : [
                            string
                        ]).map((s)=>s.toLowerCase());
                    }).flat();
                }).flat().filter((a)=>a && a.trim()).join(",");
                if (emoji.emoticons) for (const emoticon of emoji.emoticons){
                    if ($7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons[emoticon]) continue;
                    $7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons[emoticon] = emoji.id;
                }
                let skinIndex = 0;
                for (const skin of emoji.skins){
                    if (!skin) continue;
                    skinIndex++;
                    const { native: native } = skin;
                    if (native) {
                        $7adb23b0109cc36a$export$2d0294657ab35f1b.natives[native] = emoji.id;
                        emoji.search += `,${native}`;
                    }
                    const skinShortcodes = skinIndex == 1 ? "" : `:skin-tone-${skinIndex}:`;
                    skin.shortcodes = `:${emoji.id}:${skinShortcodes}`;
                }
            }
        }
    }
    if (resetSearchIndex) $c4d155af13ad4d4b$export$2e2bcd8739ae039.reset();
    $7adb23b0109cc36a$var$initCallback();
}
function $7adb23b0109cc36a$export$75fe5f91d452f94b(props, defaultProps, element) {
    props || (props = {});
    const _props = {};
    for(let k in defaultProps)_props[k] = $7adb23b0109cc36a$export$88c9ddb45cea7241(k, props, defaultProps, element);
    return _props;
}
function $7adb23b0109cc36a$export$88c9ddb45cea7241(propName, props, defaultProps, element) {
    const defaults = defaultProps[propName];
    let value = element && element.getAttribute(propName) || (props[propName] != null && props[propName] != undefined ? props[propName] : null);
    if (!defaults) return value;
    if (value != null && defaults.value && typeof defaults.value != typeof value) {
        if (typeof defaults.value == "boolean") value = value == "false" ? false : true;
        else value = defaults.value.constructor(value);
    }
    if (defaults.transform && value) value = defaults.transform(value);
    if (value == null || defaults.choices && defaults.choices.indexOf(value) == -1) value = defaults.value;
    return value;
}
const $c4d155af13ad4d4b$var$SHORTCODES_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
let $c4d155af13ad4d4b$var$Pool = null;
function $c4d155af13ad4d4b$var$get(emojiId) {
    if (emojiId.id) return emojiId;
    return $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emojiId] || $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[$7adb23b0109cc36a$export$2d0294657ab35f1b.aliases[emojiId]] || $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[$7adb23b0109cc36a$export$2d0294657ab35f1b.natives[emojiId]];
}
function $c4d155af13ad4d4b$var$reset() {
    $c4d155af13ad4d4b$var$Pool = null;
}
async function $c4d155af13ad4d4b$var$search(value, { maxResults: maxResults, caller: caller } = {}) {
    if (!value || !value.trim().length) return null;
    maxResults || (maxResults = 90);
    await $7adb23b0109cc36a$export$2cd8252107eb640b(null, {
        caller: caller || "SearchIndex.search"
    });
    const values = value.toLowerCase().replace(/(\w)-/, "$1 ").split(/[\s|,]+/).filter((word, i, words)=>{
        return word.trim() && words.indexOf(word) == i;
    });
    if (!values.length) return;
    let pool = $c4d155af13ad4d4b$var$Pool || ($c4d155af13ad4d4b$var$Pool = Object.values($7adb23b0109cc36a$export$2d0294657ab35f1b.emojis));
    let results, scores;
    for (const value1 of values){
        if (!pool.length) break;
        results = [];
        scores = {};
        for (const emoji of pool){
            if (!emoji.search) continue;
            const score = emoji.search.indexOf(`,${value1}`);
            if (score == -1) continue;
            results.push(emoji);
            scores[emoji.id] || (scores[emoji.id] = 0);
            scores[emoji.id] += emoji.id == value1 ? 0 : score + 1;
        }
        pool = results;
    }
    if (results.length < 2) return results;
    results.sort((a, b)=>{
        const aScore = scores[a.id];
        const bScore = scores[b.id];
        if (aScore == bScore) return a.id.localeCompare(b.id);
        return aScore - bScore;
    });
    if (results.length > maxResults) results = results.slice(0, maxResults);
    return results;
}
var $c4d155af13ad4d4b$export$2e2bcd8739ae039 = {
    search: $c4d155af13ad4d4b$var$search,
    get: $c4d155af13ad4d4b$var$get,
    reset: $c4d155af13ad4d4b$var$reset,
    SHORTCODES_REGEX: $c4d155af13ad4d4b$var$SHORTCODES_REGEX
};
const $e6eae5155b87f591$export$bcb25aa587e9cb13 = [
    "checkered_flag",
    "crossed_flags",
    "pirate_flag",
    "rainbow-flag",
    "transgender_flag",
    "triangular_flag_on_post",
    "waving_black_flag",
    "waving_white_flag"
];
function $693b183b0a78708f$export$9cb4719e2e525b7a(a, b) {
    return Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((val, index)=>val == b[index]);
}
async function $693b183b0a78708f$export$e772c8ff12451969(frames = 1) {
    for(let _ in [
        ...Array(frames).keys()
    ])await new Promise(requestAnimationFrame);
}
function $693b183b0a78708f$export$d10ac59fbe52a745(emoji, { skinIndex: skinIndex = 0 } = {}) {
    const skin = emoji.skins[skinIndex] || (()=>{
        skinIndex = 0;
        return emoji.skins[skinIndex];
    })();
    const emojiData = {
        id: emoji.id,
        name: emoji.name,
        native: skin.native,
        unified: skin.unified,
        keywords: emoji.keywords,
        shortcodes: skin.shortcodes || emoji.shortcodes
    };
    if (emoji.skins.length > 1) emojiData.skin = skinIndex + 1;
    if (skin.src) emojiData.src = skin.src;
    if (emoji.aliases && emoji.aliases.length) emojiData.aliases = emoji.aliases;
    if (emoji.emoticons && emoji.emoticons.length) emojiData.emoticons = emoji.emoticons;
    return emojiData;
}
async function $693b183b0a78708f$export$5ef5574deca44bc0(nativeString) {
    const results = await $c4d155af13ad4d4b$export$2e2bcd8739ae039.search(nativeString, {
        maxResults: 1,
        caller: "getEmojiDataFromNative"
    });
    if (!results || !results.length) return null;
    const emoji = results[0];
    let skinIndex = 0;
    for (let skin of emoji.skins){
        if (skin.native == nativeString) break;
        skinIndex++;
    }
    return $693b183b0a78708f$export$d10ac59fbe52a745(emoji, {
        skinIndex: skinIndex
    });
}
const $fcccfb36ed0cde68$var$categories = {
    activity: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M12 0C5.373 0 0 5.372 0 12c0 6.627 5.373 12 12 12 6.628 0 12-5.373 12-12 0-6.628-5.372-12-12-12m9.949 11H17.05c.224-2.527 1.232-4.773 1.968-6.113A9.966 9.966 0 0 1 21.949 11M13 11V2.051a9.945 9.945 0 0 1 4.432 1.564c-.858 1.491-2.156 4.22-2.392 7.385H13zm-2 0H8.961c-.238-3.165-1.536-5.894-2.393-7.385A9.95 9.95 0 0 1 11 2.051V11zm0 2v8.949a9.937 9.937 0 0 1-4.432-1.564c.857-1.492 2.155-4.221 2.393-7.385H11zm4.04 0c.236 3.164 1.534 5.893 2.392 7.385A9.92 9.92 0 0 1 13 21.949V13h2.04zM4.982 4.887C5.718 6.227 6.726 8.473 6.951 11h-4.9a9.977 9.977 0 0 1 2.931-6.113M2.051 13h4.9c-.226 2.527-1.233 4.771-1.969 6.113A9.972 9.972 0 0 1 2.051 13m16.967 6.113c-.735-1.342-1.744-3.586-1.968-6.113h4.899a9.961 9.961 0 0 1-2.931 6.113"
            })
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M16.17 337.5c0 44.98 7.565 83.54 13.98 107.9C35.22 464.3 50.46 496 174.9 496c9.566 0 19.59-.4707 29.84-1.271L17.33 307.3C16.53 317.6 16.17 327.7 16.17 337.5zM495.8 174.5c0-44.98-7.565-83.53-13.98-107.9c-4.688-17.54-18.34-31.23-36.04-35.95C435.5 27.91 392.9 16 337 16c-9.564 0-19.59 .4707-29.84 1.271l187.5 187.5C495.5 194.4 495.8 184.3 495.8 174.5zM26.77 248.8l236.3 236.3c142-36.1 203.9-150.4 222.2-221.1L248.9 26.87C106.9 62.96 45.07 177.2 26.77 248.8zM256 335.1c0 9.141-7.474 16-16 16c-4.094 0-8.188-1.564-11.31-4.689L164.7 283.3C161.6 280.2 160 276.1 160 271.1c0-8.529 6.865-16 16-16c4.095 0 8.189 1.562 11.31 4.688l64.01 64C254.4 327.8 256 331.9 256 335.1zM304 287.1c0 9.141-7.474 16-16 16c-4.094 0-8.188-1.564-11.31-4.689L212.7 235.3C209.6 232.2 208 228.1 208 223.1c0-9.141 7.473-16 16-16c4.094 0 8.188 1.562 11.31 4.688l64.01 64.01C302.5 279.8 304 283.9 304 287.1zM256 175.1c0-9.141 7.473-16 16-16c4.094 0 8.188 1.562 11.31 4.688l64.01 64.01c3.125 3.125 4.688 7.219 4.688 11.31c0 9.133-7.468 16-16 16c-4.094 0-8.189-1.562-11.31-4.688l-64.01-64.01C257.6 184.2 256 180.1 256 175.1z"
            })
        })
    },
    custom: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 448 512",
        children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
            d: "M417.1 368c-5.937 10.27-16.69 16-27.75 16c-5.422 0-10.92-1.375-15.97-4.281L256 311.4V448c0 17.67-14.33 32-31.1 32S192 465.7 192 448V311.4l-118.3 68.29C68.67 382.6 63.17 384 57.75 384c-11.06 0-21.81-5.734-27.75-16c-8.828-15.31-3.594-34.88 11.72-43.72L159.1 256L41.72 187.7C26.41 178.9 21.17 159.3 29.1 144C36.63 132.5 49.26 126.7 61.65 128.2C65.78 128.7 69.88 130.1 73.72 132.3L192 200.6V64c0-17.67 14.33-32 32-32S256 46.33 256 64v136.6l118.3-68.29c3.838-2.213 7.939-3.539 12.07-4.051C398.7 126.7 411.4 132.5 417.1 144c8.828 15.31 3.594 34.88-11.72 43.72L288 256l118.3 68.28C421.6 333.1 426.8 352.7 417.1 368z"
        })
    }),
    flags: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M0 0l6.084 24H8L1.916 0zM21 5h-4l-1-4H4l3 12h3l1 4h13L21 5zM6.563 3h7.875l2 8H8.563l-2-8zm8.832 10l-2.856 1.904L12.063 13h3.332zM19 13l-1.5-6h1.938l2 8H16l3-2z"
            })
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M64 496C64 504.8 56.75 512 48 512h-32C7.25 512 0 504.8 0 496V32c0-17.75 14.25-32 32-32s32 14.25 32 32V496zM476.3 0c-6.365 0-13.01 1.35-19.34 4.233c-45.69 20.86-79.56 27.94-107.8 27.94c-59.96 0-94.81-31.86-163.9-31.87C160.9 .3055 131.6 4.867 96 15.75v350.5c32-9.984 59.87-14.1 84.85-14.1c73.63 0 124.9 31.78 198.6 31.78c31.91 0 68.02-5.971 111.1-23.09C504.1 355.9 512 344.4 512 332.1V30.73C512 11.1 495.3 0 476.3 0z"
            })
        })
    },
    foods: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M17 4.978c-1.838 0-2.876.396-3.68.934.513-1.172 1.768-2.934 4.68-2.934a1 1 0 0 0 0-2c-2.921 0-4.629 1.365-5.547 2.512-.064.078-.119.162-.18.244C11.73 1.838 10.798.023 9.207.023 8.579.022 7.85.306 7 .978 5.027 2.54 5.329 3.902 6.492 4.999 3.609 5.222 0 7.352 0 12.969c0 4.582 4.961 11.009 9 11.009 1.975 0 2.371-.486 3-1 .629.514 1.025 1 3 1 4.039 0 9-6.418 9-11 0-5.953-4.055-8-7-8M8.242 2.546c.641-.508.943-.523.965-.523.426.169.975 1.405 1.357 3.055-1.527-.629-2.741-1.352-2.98-1.846.059-.112.241-.356.658-.686M15 21.978c-1.08 0-1.21-.109-1.559-.402l-.176-.146c-.367-.302-.816-.452-1.266-.452s-.898.15-1.266.452l-.176.146c-.347.292-.477.402-1.557.402-2.813 0-7-5.389-7-9.009 0-5.823 4.488-5.991 5-5.991 1.939 0 2.484.471 3.387 1.251l.323.276a1.995 1.995 0 0 0 2.58 0l.323-.276c.902-.78 1.447-1.251 3.387-1.251.512 0 5 .168 5 6 0 3.617-4.187 9-7 9"
            })
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M481.9 270.1C490.9 279.1 496 291.3 496 304C496 316.7 490.9 328.9 481.9 337.9C472.9 346.9 460.7 352 448 352H64C51.27 352 39.06 346.9 30.06 337.9C21.06 328.9 16 316.7 16 304C16 291.3 21.06 279.1 30.06 270.1C39.06 261.1 51.27 256 64 256H448C460.7 256 472.9 261.1 481.9 270.1zM475.3 388.7C478.3 391.7 480 395.8 480 400V416C480 432.1 473.3 449.3 461.3 461.3C449.3 473.3 432.1 480 416 480H96C79.03 480 62.75 473.3 50.75 461.3C38.74 449.3 32 432.1 32 416V400C32 395.8 33.69 391.7 36.69 388.7C39.69 385.7 43.76 384 48 384H464C468.2 384 472.3 385.7 475.3 388.7zM50.39 220.8C45.93 218.6 42.03 215.5 38.97 211.6C35.91 207.7 33.79 203.2 32.75 198.4C31.71 193.5 31.8 188.5 32.99 183.7C54.98 97.02 146.5 32 256 32C365.5 32 457 97.02 479 183.7C480.2 188.5 480.3 193.5 479.2 198.4C478.2 203.2 476.1 207.7 473 211.6C469.1 215.5 466.1 218.6 461.6 220.8C457.2 222.9 452.3 224 447.3 224H64.67C59.73 224 54.84 222.9 50.39 220.8zM372.7 116.7C369.7 119.7 368 123.8 368 128C368 131.2 368.9 134.3 370.7 136.9C372.5 139.5 374.1 141.6 377.9 142.8C380.8 143.1 384 144.3 387.1 143.7C390.2 143.1 393.1 141.6 395.3 139.3C397.6 137.1 399.1 134.2 399.7 131.1C400.3 128 399.1 124.8 398.8 121.9C397.6 118.1 395.5 116.5 392.9 114.7C390.3 112.9 387.2 111.1 384 111.1C379.8 111.1 375.7 113.7 372.7 116.7V116.7zM244.7 84.69C241.7 87.69 240 91.76 240 96C240 99.16 240.9 102.3 242.7 104.9C244.5 107.5 246.1 109.6 249.9 110.8C252.8 111.1 256 112.3 259.1 111.7C262.2 111.1 265.1 109.6 267.3 107.3C269.6 105.1 271.1 102.2 271.7 99.12C272.3 96.02 271.1 92.8 270.8 89.88C269.6 86.95 267.5 84.45 264.9 82.7C262.3 80.94 259.2 79.1 256 79.1C251.8 79.1 247.7 81.69 244.7 84.69V84.69zM116.7 116.7C113.7 119.7 112 123.8 112 128C112 131.2 112.9 134.3 114.7 136.9C116.5 139.5 118.1 141.6 121.9 142.8C124.8 143.1 128 144.3 131.1 143.7C134.2 143.1 137.1 141.6 139.3 139.3C141.6 137.1 143.1 134.2 143.7 131.1C144.3 128 143.1 124.8 142.8 121.9C141.6 118.1 139.5 116.5 136.9 114.7C134.3 112.9 131.2 111.1 128 111.1C123.8 111.1 119.7 113.7 116.7 116.7L116.7 116.7z"
            })
        })
    },
    frequent: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M13 4h-2l-.001 7H9v2h2v2h2v-2h4v-2h-4z"
                }),
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10"
                })
            ]
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512zM232 256C232 264 236 271.5 242.7 275.1L338.7 339.1C349.7 347.3 364.6 344.3 371.1 333.3C379.3 322.3 376.3 307.4 365.3 300L280 243.2V120C280 106.7 269.3 96 255.1 96C242.7 96 231.1 106.7 231.1 120L232 256z"
            })
        })
    },
    nature: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M15.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 15.5 8M8.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 8.5 8"
                }),
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M18.933 0h-.027c-.97 0-2.138.787-3.018 1.497-1.274-.374-2.612-.51-3.887-.51-1.285 0-2.616.133-3.874.517C7.245.79 6.069 0 5.093 0h-.027C3.352 0 .07 2.67.002 7.026c-.039 2.479.276 4.238 1.04 5.013.254.258.882.677 1.295.882.191 3.177.922 5.238 2.536 6.38.897.637 2.187.949 3.2 1.102C8.04 20.6 8 20.795 8 21c0 1.773 2.35 3 4 3 1.648 0 4-1.227 4-3 0-.201-.038-.393-.072-.586 2.573-.385 5.435-1.877 5.925-7.587.396-.22.887-.568 1.104-.788.763-.774 1.079-2.534 1.04-5.013C23.929 2.67 20.646 0 18.933 0M3.223 9.135c-.237.281-.837 1.155-.884 1.238-.15-.41-.368-1.349-.337-3.291.051-3.281 2.478-4.972 3.091-5.031.256.015.731.27 1.265.646-1.11 1.171-2.275 2.915-2.352 5.125-.133.546-.398.858-.783 1.313M12 22c-.901 0-1.954-.693-2-1 0-.654.475-1.236 1-1.602V20a1 1 0 1 0 2 0v-.602c.524.365 1 .947 1 1.602-.046.307-1.099 1-2 1m3-3.48v.02a4.752 4.752 0 0 0-1.262-1.02c1.092-.516 2.239-1.334 2.239-2.217 0-1.842-1.781-2.195-3.977-2.195-2.196 0-3.978.354-3.978 2.195 0 .883 1.148 1.701 2.238 2.217A4.8 4.8 0 0 0 9 18.539v-.025c-1-.076-2.182-.281-2.973-.842-1.301-.92-1.838-3.045-1.853-6.478l.023-.041c.496-.826 1.49-1.45 1.804-3.102 0-2.047 1.357-3.631 2.362-4.522C9.37 3.178 10.555 3 11.948 3c1.447 0 2.685.192 3.733.57 1 .9 2.316 2.465 2.316 4.48.313 1.651 1.307 2.275 1.803 3.102.035.058.068.117.102.178-.059 5.967-1.949 7.01-4.902 7.19m6.628-8.202c-.037-.065-.074-.13-.113-.195a7.587 7.587 0 0 0-.739-.987c-.385-.455-.648-.768-.782-1.313-.076-2.209-1.241-3.954-2.353-5.124.531-.376 1.004-.63 1.261-.647.636.071 3.044 1.764 3.096 5.031.027 1.81-.347 3.218-.37 3.235"
                })
            ]
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 576 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M332.7 19.85C334.6 8.395 344.5 0 356.1 0C363.6 0 370.6 3.52 375.1 9.502L392 32H444.1C456.8 32 469.1 37.06 478.1 46.06L496 64H552C565.3 64 576 74.75 576 88V112C576 156.2 540.2 192 496 192H426.7L421.6 222.5L309.6 158.5L332.7 19.85zM448 64C439.2 64 432 71.16 432 80C432 88.84 439.2 96 448 96C456.8 96 464 88.84 464 80C464 71.16 456.8 64 448 64zM416 256.1V480C416 497.7 401.7 512 384 512H352C334.3 512 320 497.7 320 480V364.8C295.1 377.1 268.8 384 240 384C211.2 384 184 377.1 160 364.8V480C160 497.7 145.7 512 128 512H96C78.33 512 64 497.7 64 480V249.8C35.23 238.9 12.64 214.5 4.836 183.3L.9558 167.8C-3.331 150.6 7.094 133.2 24.24 128.1C41.38 124.7 58.76 135.1 63.05 152.2L66.93 167.8C70.49 182 83.29 191.1 97.97 191.1H303.8L416 256.1z"
            })
        })
    },
    objects: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M12 0a9 9 0 0 0-5 16.482V21s2.035 3 5 3 5-3 5-3v-4.518A9 9 0 0 0 12 0zm0 2c3.86 0 7 3.141 7 7s-3.14 7-7 7-7-3.141-7-7 3.14-7 7-7zM9 17.477c.94.332 1.946.523 3 .523s2.06-.19 3-.523v.834c-.91.436-1.925.689-3 .689a6.924 6.924 0 0 1-3-.69v-.833zm.236 3.07A8.854 8.854 0 0 0 12 21c.965 0 1.888-.167 2.758-.451C14.155 21.173 13.153 22 12 22c-1.102 0-2.117-.789-2.764-1.453z"
                }),
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M14.745 12.449h-.004c-.852-.024-1.188-.858-1.577-1.824-.421-1.061-.703-1.561-1.182-1.566h-.009c-.481 0-.783.497-1.235 1.537-.436.982-.801 1.811-1.636 1.791l-.276-.043c-.565-.171-.853-.691-1.284-1.794-.125-.313-.202-.632-.27-.913-.051-.213-.127-.53-.195-.634C7.067 9.004 7.039 9 6.99 9A1 1 0 0 1 7 7h.01c1.662.017 2.015 1.373 2.198 2.134.486-.981 1.304-2.058 2.797-2.075 1.531.018 2.28 1.153 2.731 2.141l.002-.008C14.944 8.424 15.327 7 16.979 7h.032A1 1 0 1 1 17 9h-.011c-.149.076-.256.474-.319.709a6.484 6.484 0 0 1-.311.951c-.429.973-.79 1.789-1.614 1.789"
                })
            ]
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 384 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M112.1 454.3c0 6.297 1.816 12.44 5.284 17.69l17.14 25.69c5.25 7.875 17.17 14.28 26.64 14.28h61.67c9.438 0 21.36-6.401 26.61-14.28l17.08-25.68c2.938-4.438 5.348-12.37 5.348-17.7L272 415.1h-160L112.1 454.3zM191.4 .0132C89.44 .3257 16 82.97 16 175.1c0 44.38 16.44 84.84 43.56 115.8c16.53 18.84 42.34 58.23 52.22 91.45c.0313 .25 .0938 .5166 .125 .7823h160.2c.0313-.2656 .0938-.5166 .125-.7823c9.875-33.22 35.69-72.61 52.22-91.45C351.6 260.8 368 220.4 368 175.1C368 78.61 288.9-.2837 191.4 .0132zM192 96.01c-44.13 0-80 35.89-80 79.1C112 184.8 104.8 192 96 192S80 184.8 80 176c0-61.76 50.25-111.1 112-111.1c8.844 0 16 7.159 16 16S200.8 96.01 192 96.01z"
            })
        })
    },
    people: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10"
                }),
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M8 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 8 7M16 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 16 7M15.232 15c-.693 1.195-1.87 2-3.349 2-1.477 0-2.655-.805-3.347-2H15m3-2H6a6 6 0 1 0 12 0"
                })
            ]
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM256 432C332.1 432 396.2 382 415.2 314.1C419.1 300.4 407.8 288 393.6 288H118.4C104.2 288 92.92 300.4 96.76 314.1C115.8 382 179.9 432 256 432V432zM176.4 160C158.7 160 144.4 174.3 144.4 192C144.4 209.7 158.7 224 176.4 224C194 224 208.4 209.7 208.4 192C208.4 174.3 194 160 176.4 160zM336.4 224C354 224 368.4 209.7 368.4 192C368.4 174.3 354 160 336.4 160C318.7 160 304.4 174.3 304.4 192C304.4 209.7 318.7 224 336.4 224z"
            })
        })
    },
    places: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: [
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M6.5 12C5.122 12 4 13.121 4 14.5S5.122 17 6.5 17 9 15.879 9 14.5 7.878 12 6.5 12m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5M17.5 12c-1.378 0-2.5 1.121-2.5 2.5s1.122 2.5 2.5 2.5 2.5-1.121 2.5-2.5-1.122-2.5-2.5-2.5m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5"
                }),
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                    d: "M22.482 9.494l-1.039-.346L21.4 9h.6c.552 0 1-.439 1-.992 0-.006-.003-.008-.003-.008H23c0-1-.889-2-1.984-2h-.642l-.731-1.717C19.262 3.012 18.091 2 16.764 2H7.236C5.909 2 4.738 3.012 4.357 4.283L3.626 6h-.642C1.889 6 1 7 1 8h.003S1 8.002 1 8.008C1 8.561 1.448 9 2 9h.6l-.043.148-1.039.346a2.001 2.001 0 0 0-1.359 2.097l.751 7.508a1 1 0 0 0 .994.901H3v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h6v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h1.096a.999.999 0 0 0 .994-.901l.751-7.508a2.001 2.001 0 0 0-1.359-2.097M6.273 4.857C6.402 4.43 6.788 4 7.236 4h9.527c.448 0 .834.43.963.857L19.313 9H4.688l1.585-4.143zM7 21H5v-1h2v1zm12 0h-2v-1h2v1zm2.189-3H2.811l-.662-6.607L3 11h18l.852.393L21.189 18z"
                })
            ]
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M39.61 196.8L74.8 96.29C88.27 57.78 124.6 32 165.4 32H346.6C387.4 32 423.7 57.78 437.2 96.29L472.4 196.8C495.6 206.4 512 229.3 512 256V448C512 465.7 497.7 480 480 480H448C430.3 480 416 465.7 416 448V400H96V448C96 465.7 81.67 480 64 480H32C14.33 480 0 465.7 0 448V256C0 229.3 16.36 206.4 39.61 196.8V196.8zM109.1 192H402.9L376.8 117.4C372.3 104.6 360.2 96 346.6 96H165.4C151.8 96 139.7 104.6 135.2 117.4L109.1 192zM96 256C78.33 256 64 270.3 64 288C64 305.7 78.33 320 96 320C113.7 320 128 305.7 128 288C128 270.3 113.7 256 96 256zM416 320C433.7 320 448 305.7 448 288C448 270.3 433.7 256 416 256C398.3 256 384 270.3 384 288C384 305.7 398.3 320 416 320z"
            })
        })
    },
    symbols: {
        outline: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 24 24",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M0 0h11v2H0zM4 11h3V6h4V4H0v2h4zM15.5 17c1.381 0 2.5-1.116 2.5-2.493s-1.119-2.493-2.5-2.493S13 13.13 13 14.507 14.119 17 15.5 17m0-2.986c.276 0 .5.222.5.493 0 .272-.224.493-.5.493s-.5-.221-.5-.493.224-.493.5-.493M21.5 19.014c-1.381 0-2.5 1.116-2.5 2.493S20.119 24 21.5 24s2.5-1.116 2.5-2.493-1.119-2.493-2.5-2.493m0 2.986a.497.497 0 0 1-.5-.493c0-.271.224-.493.5-.493s.5.222.5.493a.497.497 0 0 1-.5.493M22 13l-9 9 1.513 1.5 8.99-9.009zM17 11c2.209 0 4-1.119 4-2.5V2s.985-.161 1.498.949C23.01 4.055 23 6 23 6s1-1.119 1-3.135C24-.02 21 0 21 0h-2v6.347A5.853 5.853 0 0 0 17 6c-2.209 0-4 1.119-4 2.5s1.791 2.5 4 2.5M10.297 20.482l-1.475-1.585a47.54 47.54 0 0 1-1.442 1.129c-.307-.288-.989-1.016-2.045-2.183.902-.836 1.479-1.466 1.729-1.892s.376-.871.376-1.336c0-.592-.273-1.178-.818-1.759-.546-.581-1.329-.871-2.349-.871-1.008 0-1.79.293-2.344.879-.556.587-.832 1.181-.832 1.784 0 .813.419 1.748 1.256 2.805-.847.614-1.444 1.208-1.794 1.784a3.465 3.465 0 0 0-.523 1.833c0 .857.308 1.56.924 2.107.616.549 1.423.823 2.42.823 1.173 0 2.444-.379 3.813-1.137L8.235 24h2.819l-2.09-2.383 1.333-1.135zm-6.736-6.389a1.02 1.02 0 0 1 .73-.286c.31 0 .559.085.747.254a.849.849 0 0 1 .283.659c0 .518-.419 1.112-1.257 1.784-.536-.651-.805-1.231-.805-1.742a.901.901 0 0 1 .302-.669M3.74 22c-.427 0-.778-.116-1.057-.349-.279-.232-.418-.487-.418-.766 0-.594.509-1.288 1.527-2.083.968 1.134 1.717 1.946 2.248 2.438-.921.507-1.686.76-2.3.76"
            })
        }),
        solid: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            viewBox: "0 0 512 512",
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
                d: "M500.3 7.251C507.7 13.33 512 22.41 512 31.1V175.1C512 202.5 483.3 223.1 447.1 223.1C412.7 223.1 383.1 202.5 383.1 175.1C383.1 149.5 412.7 127.1 447.1 127.1V71.03L351.1 90.23V207.1C351.1 234.5 323.3 255.1 287.1 255.1C252.7 255.1 223.1 234.5 223.1 207.1C223.1 181.5 252.7 159.1 287.1 159.1V63.1C287.1 48.74 298.8 35.61 313.7 32.62L473.7 .6198C483.1-1.261 492.9 1.173 500.3 7.251H500.3zM74.66 303.1L86.5 286.2C92.43 277.3 102.4 271.1 113.1 271.1H174.9C185.6 271.1 195.6 277.3 201.5 286.2L213.3 303.1H239.1C266.5 303.1 287.1 325.5 287.1 351.1V463.1C287.1 490.5 266.5 511.1 239.1 511.1H47.1C21.49 511.1-.0019 490.5-.0019 463.1V351.1C-.0019 325.5 21.49 303.1 47.1 303.1H74.66zM143.1 359.1C117.5 359.1 95.1 381.5 95.1 407.1C95.1 434.5 117.5 455.1 143.1 455.1C170.5 455.1 191.1 434.5 191.1 407.1C191.1 381.5 170.5 359.1 143.1 359.1zM440.3 367.1H496C502.7 367.1 508.6 372.1 510.1 378.4C513.3 384.6 511.6 391.7 506.5 396L378.5 508C372.9 512.1 364.6 513.3 358.6 508.9C352.6 504.6 350.3 496.6 353.3 489.7L391.7 399.1H336C329.3 399.1 323.4 395.9 321 389.6C318.7 383.4 320.4 376.3 325.5 371.1L453.5 259.1C459.1 255 467.4 254.7 473.4 259.1C479.4 263.4 481.6 271.4 478.7 278.3L440.3 367.1zM116.7 219.1L19.85 119.2C-8.112 90.26-6.614 42.31 24.85 15.34C51.82-8.137 93.26-3.642 118.2 21.83L128.2 32.32L137.7 21.83C162.7-3.642 203.6-8.137 231.6 15.34C262.6 42.31 264.1 90.26 236.1 119.2L139.7 219.1C133.2 225.6 122.7 225.6 116.7 219.1H116.7z"
            })
        })
    }
};
const $fcccfb36ed0cde68$var$search = {
    loupe: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
            d: "M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z"
        })
    }),
    delete: $bd9dd35321b03dd4$export$34b9dba7ce09269b("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("path", {
            d: "M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z"
        })
    })
};
var $fcccfb36ed0cde68$export$2e2bcd8739ae039 = {
    categories: $fcccfb36ed0cde68$var$categories,
    search: $fcccfb36ed0cde68$var$search
};
function $254755d3f438722f$export$2e2bcd8739ae039(props) {
    let { id: id, skin: skin, emoji: emoji } = props;
    if (props.shortcodes) {
        const matches = props.shortcodes.match($c4d155af13ad4d4b$export$2e2bcd8739ae039.SHORTCODES_REGEX);
        if (matches) {
            id = matches[1];
            if (matches[2]) skin = matches[2];
        }
    }
    emoji || (emoji = $c4d155af13ad4d4b$export$2e2bcd8739ae039.get(id || props.native));
    if (!emoji) return props.fallback;
    const emojiSkin = emoji.skins[skin - 1] || emoji.skins[0];
    const imageSrc = emojiSkin.src || (props.set != "native" && !props.spritesheet ? typeof props.getImageURL === "function" ? props.getImageURL(props.set, emojiSkin.unified) : `https://cdn.jsdelivr.net/npm/emoji-datasource-${props.set}@14.0.0/img/${props.set}/64/${emojiSkin.unified}.png` : undefined);
    const spritesheetSrc = typeof props.getSpritesheetURL === "function" ? props.getSpritesheetURL(props.set) : `https://cdn.jsdelivr.net/npm/emoji-datasource-${props.set}@14.0.0/img/${props.set}/sheets-256/64.png`;
    return $bd9dd35321b03dd4$export$34b9dba7ce09269b("span", {
        class: "emoji-mart-emoji",
        "data-emoji-set": props.set,
        children: imageSrc ? $bd9dd35321b03dd4$export$34b9dba7ce09269b("img", {
            style: {
                maxWidth: props.size || "1em",
                maxHeight: props.size || "1em",
                display: "inline-block"
            },
            alt: emojiSkin.native || emojiSkin.shortcodes,
            src: imageSrc
        }) : props.set == "native" ? $bd9dd35321b03dd4$export$34b9dba7ce09269b("span", {
            style: {
                fontSize: props.size,
                fontFamily: '"EmojiMart", "Segoe UI Emoji", "Segoe UI Symbol", "Segoe UI", "Apple Color Emoji", "Twemoji Mozilla", "Noto Color Emoji", "Android Emoji"'
            },
            children: emojiSkin.native
        }) : $bd9dd35321b03dd4$export$34b9dba7ce09269b("span", {
            style: {
                display: "block",
                width: props.size,
                height: props.size,
                backgroundImage: `url(${spritesheetSrc})`,
                backgroundSize: `${100 * $7adb23b0109cc36a$export$2d0294657ab35f1b.sheet.cols}% ${100 * $7adb23b0109cc36a$export$2d0294657ab35f1b.sheet.rows}%`,
                backgroundPosition: `${100 / ($7adb23b0109cc36a$export$2d0294657ab35f1b.sheet.cols - 1) * emojiSkin.x}% ${100 / ($7adb23b0109cc36a$export$2d0294657ab35f1b.sheet.rows - 1) * emojiSkin.y}%`
            }
        })
    });
}
const $6f57cc9cd54c5aaa$var$WindowHTMLElement = typeof window !== "undefined" && window.HTMLElement ? window.HTMLElement : Object;
class $6f57cc9cd54c5aaa$export$2e2bcd8739ae039 extends $6f57cc9cd54c5aaa$var$WindowHTMLElement {
    static get observedAttributes() {
        return Object.keys(this.Props);
    }
    update(props = {}) {
        for(let k in props)this.attributeChangedCallback(k, null, props[k]);
    }
    attributeChangedCallback(attr, _, newValue) {
        if (!this.component) return;
        const value = $7adb23b0109cc36a$export$88c9ddb45cea7241(attr, {
            [attr]: newValue
        }, this.constructor.Props, this);
        if (this.component.componentWillReceiveProps) this.component.componentWillReceiveProps({
            [attr]: value
        });
        else {
            this.component.props[attr] = value;
            this.component.forceUpdate();
        }
    }
    disconnectedCallback() {
        this.disconnected = true;
        if (this.component && this.component.unregister) this.component.unregister();
    }
    constructor(props = {}){
        super();
        this.props = props;
        if (props.parent || props.ref) {
            let ref = null;
            const parent = props.parent || (ref = props.ref && props.ref.current);
            if (ref) ref.innerHTML = "";
            if (parent) parent.appendChild(this);
        }
    }
}
class $26f27c338a96b1a6$export$2e2bcd8739ae039 extends $6f57cc9cd54c5aaa$export$2e2bcd8739ae039 {
    setShadow() {
        this.attachShadow({
            mode: "open"
        });
    }
    injectStyles(styles) {
        if (!styles) return;
        const style = document.createElement("style");
        style.textContent = styles;
        this.shadowRoot.insertBefore(style, this.shadowRoot.firstChild);
    }
    constructor(props, { styles: styles } = {}){
        super(props);
        this.setShadow();
        this.injectStyles(styles);
    }
}
var $3d90f6e46fb2dd47$export$2e2bcd8739ae039 = {
    fallback: "",
    id: "",
    native: "",
    shortcodes: "",
    size: {
        value: "",
        transform: (value)=>{
            // If the value is a number, then we assume it’s a pixel value.
            if (!/\D/.test(value)) return `${value}px`;
            return value;
        }
    },
    // Shared
    set: $b247ea80b67298d5$export$2e2bcd8739ae039.set,
    skin: $b247ea80b67298d5$export$2e2bcd8739ae039.skin
};
class $331b4160623139bf$export$2e2bcd8739ae039 extends $6f57cc9cd54c5aaa$export$2e2bcd8739ae039 {
    async connectedCallback() {
        const props = $7adb23b0109cc36a$export$75fe5f91d452f94b(this.props, $3d90f6e46fb2dd47$export$2e2bcd8739ae039, this);
        props.element = this;
        props.ref = (component)=>{
            this.component = component;
        };
        await $7adb23b0109cc36a$export$2cd8252107eb640b();
        if (this.disconnected) return;
        $fb96b826c0c5f37a$export$b3890eb0ae9dca99($bd9dd35321b03dd4$export$34b9dba7ce09269b($254755d3f438722f$export$2e2bcd8739ae039, {
            ...props
        }), this);
    }
    constructor(props){
        super(props);
    }
}
$c770c458706daa72$export$2e2bcd8739ae039($331b4160623139bf$export$2e2bcd8739ae039, "Props", $3d90f6e46fb2dd47$export$2e2bcd8739ae039);
if (typeof customElements !== "undefined" && !customElements.get("em-emoji")) customElements.define("em-emoji", $331b4160623139bf$export$2e2bcd8739ae039);
var $1a9a8ef576b7773d$var$t, $1a9a8ef576b7773d$var$u, $1a9a8ef576b7773d$var$r, $1a9a8ef576b7773d$var$o = 0, $1a9a8ef576b7773d$var$i = [], $1a9a8ef576b7773d$var$c = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__b, $1a9a8ef576b7773d$var$f = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__r, $1a9a8ef576b7773d$var$e = $fb96b826c0c5f37a$export$41c562ebe57d11e2.diffed, $1a9a8ef576b7773d$var$a = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__c, $1a9a8ef576b7773d$var$v = $fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount;
function $1a9a8ef576b7773d$var$m(t1, r1) {
    $fb96b826c0c5f37a$export$41c562ebe57d11e2.__h && $fb96b826c0c5f37a$export$41c562ebe57d11e2.__h($1a9a8ef576b7773d$var$u, t1, $1a9a8ef576b7773d$var$o || r1), $1a9a8ef576b7773d$var$o = 0;
    var i1 = $1a9a8ef576b7773d$var$u.__H || ($1a9a8ef576b7773d$var$u.__H = {
        __: [],
        __h: []
    });
    return t1 >= i1.__.length && i1.__.push({}), i1.__[t1];
}
function $1a9a8ef576b7773d$export$60241385465d0a34(n1) {
    return $1a9a8ef576b7773d$var$o = 1, $1a9a8ef576b7773d$export$13e3392192263954($1a9a8ef576b7773d$var$w, n1);
}
function $1a9a8ef576b7773d$export$13e3392192263954(n2, r2, o1) {
    var i2 = $1a9a8ef576b7773d$var$m($1a9a8ef576b7773d$var$t++, 2);
    return i2.t = n2, i2.__c || (i2.__ = [
        o1 ? o1(r2) : $1a9a8ef576b7773d$var$w(void 0, r2),
        function(n3) {
            var t2 = i2.t(i2.__[0], n3);
            i2.__[0] !== t2 && (i2.__ = [
                t2,
                i2.__[1]
            ], i2.__c.setState({}));
        }
    ], i2.__c = $1a9a8ef576b7773d$var$u), i2.__;
}
function $1a9a8ef576b7773d$export$6d9c69b0de29b591(r3, o2) {
    var i3 = $1a9a8ef576b7773d$var$m($1a9a8ef576b7773d$var$t++, 3);
    !$fb96b826c0c5f37a$export$41c562ebe57d11e2.__s && $1a9a8ef576b7773d$var$k(i3.__H, o2) && (i3.__ = r3, i3.__H = o2, $1a9a8ef576b7773d$var$u.__H.__h.push(i3));
}
function $1a9a8ef576b7773d$export$e5c5a5f917a5871c(r4, o3) {
    var i4 = $1a9a8ef576b7773d$var$m($1a9a8ef576b7773d$var$t++, 4);
    !$fb96b826c0c5f37a$export$41c562ebe57d11e2.__s && $1a9a8ef576b7773d$var$k(i4.__H, o3) && (i4.__ = r4, i4.__H = o3, $1a9a8ef576b7773d$var$u.__h.push(i4));
}
function $1a9a8ef576b7773d$export$b8f5890fc79d6aca(n4) {
    return $1a9a8ef576b7773d$var$o = 5, $1a9a8ef576b7773d$export$1538c33de8887b59(function() {
        return {
            current: n4
        };
    }, []);
}
function $1a9a8ef576b7773d$export$d5a552a76deda3c2(n5, t3, u1) {
    $1a9a8ef576b7773d$var$o = 6, $1a9a8ef576b7773d$export$e5c5a5f917a5871c(function() {
        "function" == typeof n5 ? n5(t3()) : n5 && (n5.current = t3());
    }, null == u1 ? u1 : u1.concat(n5));
}
function $1a9a8ef576b7773d$export$1538c33de8887b59(n6, u2) {
    var r5 = $1a9a8ef576b7773d$var$m($1a9a8ef576b7773d$var$t++, 7);
    return $1a9a8ef576b7773d$var$k(r5.__H, u2) && (r5.__ = n6(), r5.__H = u2, r5.__h = n6), r5.__;
}
function $1a9a8ef576b7773d$export$35808ee640e87ca7(n7, t4) {
    return $1a9a8ef576b7773d$var$o = 8, $1a9a8ef576b7773d$export$1538c33de8887b59(function() {
        return n7;
    }, t4);
}
function $1a9a8ef576b7773d$export$fae74005e78b1a27(n8) {
    var r6 = $1a9a8ef576b7773d$var$u.context[n8.__c], o4 = $1a9a8ef576b7773d$var$m($1a9a8ef576b7773d$var$t++, 9);
    return o4.c = n8, r6 ? (null == o4.__ && (o4.__ = !0, r6.sub($1a9a8ef576b7773d$var$u)), r6.props.value) : n8.__;
}
function $1a9a8ef576b7773d$export$dc8fbce3eb94dc1e(t5, u3) {
    $fb96b826c0c5f37a$export$41c562ebe57d11e2.useDebugValue && $fb96b826c0c5f37a$export$41c562ebe57d11e2.useDebugValue(u3 ? u3(t5) : t5);
}
function $1a9a8ef576b7773d$export$c052f6604b7d51fe(n9) {
    var r7 = $1a9a8ef576b7773d$var$m($1a9a8ef576b7773d$var$t++, 10), o5 = $1a9a8ef576b7773d$export$60241385465d0a34();
    return r7.__ = n9, $1a9a8ef576b7773d$var$u.componentDidCatch || ($1a9a8ef576b7773d$var$u.componentDidCatch = function(n10) {
        r7.__ && r7.__(n10), o5[1](n10);
    }), [
        o5[0],
        function() {
            o5[1](void 0);
        }
    ];
}
function $1a9a8ef576b7773d$var$x() {
    var t6;
    for($1a9a8ef576b7773d$var$i.sort(function(n11, t7) {
        return n11.__v.__b - t7.__v.__b;
    }); t6 = $1a9a8ef576b7773d$var$i.pop();)if (t6.__P) try {
        t6.__H.__h.forEach($1a9a8ef576b7773d$var$g), t6.__H.__h.forEach($1a9a8ef576b7773d$var$j), t6.__H.__h = [];
    } catch (u4) {
        t6.__H.__h = [], $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(u4, t6.__v);
    }
}
$fb96b826c0c5f37a$export$41c562ebe57d11e2.__b = function(n12) {
    $1a9a8ef576b7773d$var$u = null, $1a9a8ef576b7773d$var$c && $1a9a8ef576b7773d$var$c(n12);
}, $fb96b826c0c5f37a$export$41c562ebe57d11e2.__r = function(n13) {
    $1a9a8ef576b7773d$var$f && $1a9a8ef576b7773d$var$f(n13), $1a9a8ef576b7773d$var$t = 0;
    var r8 = ($1a9a8ef576b7773d$var$u = n13.__c).__H;
    r8 && (r8.__h.forEach($1a9a8ef576b7773d$var$g), r8.__h.forEach($1a9a8ef576b7773d$var$j), r8.__h = []);
}, $fb96b826c0c5f37a$export$41c562ebe57d11e2.diffed = function(t8) {
    $1a9a8ef576b7773d$var$e && $1a9a8ef576b7773d$var$e(t8);
    var o6 = t8.__c;
    o6 && o6.__H && o6.__H.__h.length && (1 !== $1a9a8ef576b7773d$var$i.push(o6) && $1a9a8ef576b7773d$var$r === $fb96b826c0c5f37a$export$41c562ebe57d11e2.requestAnimationFrame || (($1a9a8ef576b7773d$var$r = $fb96b826c0c5f37a$export$41c562ebe57d11e2.requestAnimationFrame) || function(n14) {
        var t9, u5 = function() {
            clearTimeout(r9), $1a9a8ef576b7773d$var$b && cancelAnimationFrame(t9), setTimeout(n14);
        }, r9 = setTimeout(u5, 100);
        $1a9a8ef576b7773d$var$b && (t9 = requestAnimationFrame(u5));
    })($1a9a8ef576b7773d$var$x)), $1a9a8ef576b7773d$var$u = null;
}, $fb96b826c0c5f37a$export$41c562ebe57d11e2.__c = function(t10, u6) {
    u6.some(function(t11) {
        try {
            t11.__h.forEach($1a9a8ef576b7773d$var$g), t11.__h = t11.__h.filter(function(n15) {
                return !n15.__ || $1a9a8ef576b7773d$var$j(n15);
            });
        } catch (r10) {
            u6.some(function(n16) {
                n16.__h && (n16.__h = []);
            }), u6 = [], $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(r10, t11.__v);
        }
    }), $1a9a8ef576b7773d$var$a && $1a9a8ef576b7773d$var$a(t10, u6);
}, $fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount = function(t12) {
    $1a9a8ef576b7773d$var$v && $1a9a8ef576b7773d$var$v(t12);
    var u7, r11 = t12.__c;
    r11 && r11.__H && (r11.__H.__.forEach(function(n17) {
        try {
            $1a9a8ef576b7773d$var$g(n17);
        } catch (n18) {
            u7 = n18;
        }
    }), u7 && $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(u7, r11.__v));
};
var $1a9a8ef576b7773d$var$b = "function" == typeof requestAnimationFrame;
function $1a9a8ef576b7773d$var$g(n19) {
    var t13 = $1a9a8ef576b7773d$var$u, r12 = n19.__c;
    "function" == typeof r12 && (n19.__c = void 0, r12()), $1a9a8ef576b7773d$var$u = t13;
}
function $1a9a8ef576b7773d$var$j(n20) {
    var t14 = $1a9a8ef576b7773d$var$u;
    n20.__c = n20.__(), $1a9a8ef576b7773d$var$u = t14;
}
function $1a9a8ef576b7773d$var$k(n21, t15) {
    return !n21 || n21.length !== t15.length || t15.some(function(t16, u8) {
        return t16 !== n21[u8];
    });
}
function $1a9a8ef576b7773d$var$w(n22, t17) {
    return "function" == typeof t17 ? t17(n22) : t17;
}
function $dc040a17866866fa$var$S(n1, t1) {
    for(var e1 in t1)n1[e1] = t1[e1];
    return n1;
}
function $dc040a17866866fa$var$C(n2, t2) {
    for(var e2 in n2)if ("__source" !== e2 && !(e2 in t2)) return !0;
    for(var r1 in t2)if ("__source" !== r1 && n2[r1] !== t2[r1]) return !0;
    return !1;
}
function $dc040a17866866fa$export$221d75b3f55bb0bd(n3) {
    this.props = n3;
}
function $dc040a17866866fa$export$7c73462e0d25e514(n4, t3) {
    function e3(n5) {
        var e4 = this.props.ref, r3 = e4 == n5.ref;
        return !r3 && e4 && (e4.call ? e4(null) : e4.current = null), t3 ? !t3(this.props, n5) || !r3 : $dc040a17866866fa$var$C(this.props, n5);
    }
    function r2(t4) {
        return this.shouldComponentUpdate = e3, $fb96b826c0c5f37a$export$c8a8987d4410bf2d(n4, t4);
    }
    return r2.displayName = "Memo(" + (n4.displayName || n4.name) + ")", r2.prototype.isReactComponent = !0, r2.__f = !0, r2;
}
($dc040a17866866fa$export$221d75b3f55bb0bd.prototype = new $fb96b826c0c5f37a$export$16fa2f45be04daa8).isPureReactComponent = !0, $dc040a17866866fa$export$221d75b3f55bb0bd.prototype.shouldComponentUpdate = function(n6, t5) {
    return $dc040a17866866fa$var$C(this.props, n6) || $dc040a17866866fa$var$C(this.state, t5);
};
var $dc040a17866866fa$var$w = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__b;
$fb96b826c0c5f37a$export$41c562ebe57d11e2.__b = function(n7) {
    n7.type && n7.type.__f && n7.ref && (n7.props.ref = n7.ref, n7.ref = null), $dc040a17866866fa$var$w && $dc040a17866866fa$var$w(n7);
};
var $dc040a17866866fa$var$R = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
function $dc040a17866866fa$export$257a8862b851cb5b(n8) {
    function t6(t7, e5) {
        var r4 = $dc040a17866866fa$var$S({}, t7);
        return delete r4.ref, n8(r4, (e5 = t7.ref || e5) && ("object" != typeof e5 || "current" in e5) ? e5 : null);
    }
    return t6.$$typeof = $dc040a17866866fa$var$R, t6.render = t6, t6.prototype.isReactComponent = t6.__f = !0, t6.displayName = "ForwardRef(" + (n8.displayName || n8.name) + ")", t6;
}
var $dc040a17866866fa$var$N = function(n9, t8) {
    return null == n9 ? null : $fb96b826c0c5f37a$export$47e4c5b300681277($fb96b826c0c5f37a$export$47e4c5b300681277(n9).map(t8));
}, $dc040a17866866fa$export$dca3b0875bd9a954 = {
    map: $dc040a17866866fa$var$N,
    forEach: $dc040a17866866fa$var$N,
    count: function(n10) {
        return n10 ? $fb96b826c0c5f37a$export$47e4c5b300681277(n10).length : 0;
    },
    only: function(n11) {
        var t9 = $fb96b826c0c5f37a$export$47e4c5b300681277(n11);
        if (1 !== t9.length) throw "Children.only";
        return t9[0];
    },
    toArray: $fb96b826c0c5f37a$export$47e4c5b300681277
}, $dc040a17866866fa$var$A = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e;
$fb96b826c0c5f37a$export$41c562ebe57d11e2.__e = function(n12, t10, e6) {
    if (n12.then) {
        for(var r5, u1 = t10; u1 = u1.__;)if ((r5 = u1.__c) && r5.__c) return null == t10.__e && (t10.__e = e6.__e, t10.__k = e6.__k), r5.__c(n12, t10);
    }
    $dc040a17866866fa$var$A(n12, t10, e6);
};
var $dc040a17866866fa$var$O = $fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount;
function $dc040a17866866fa$export$74bf444e3cd11ea5() {
    this.__u = 0, this.t = null, this.__b = null;
}
function $dc040a17866866fa$var$U(n13) {
    var t11 = n13.__.__c;
    return t11 && t11.__e && t11.__e(n13);
}
function $dc040a17866866fa$export$488013bae63b21da(n14) {
    var t12, e7, r6;
    function u2(u3) {
        if (t12 || (t12 = n14()).then(function(n15) {
            e7 = n15.default || n15;
        }, function(n16) {
            r6 = n16;
        }), r6) throw r6;
        if (!e7) throw t12;
        return $fb96b826c0c5f37a$export$c8a8987d4410bf2d(e7, u3);
    }
    return u2.displayName = "Lazy", u2.__f = !0, u2;
}
function $dc040a17866866fa$export$998bcd577473dd93() {
    this.u = null, this.o = null;
}
$fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount = function(n17) {
    var t13 = n17.__c;
    t13 && t13.__R && t13.__R(), t13 && !0 === n17.__h && (n17.type = null), $dc040a17866866fa$var$O && $dc040a17866866fa$var$O(n17);
}, ($dc040a17866866fa$export$74bf444e3cd11ea5.prototype = new $fb96b826c0c5f37a$export$16fa2f45be04daa8).__c = function(n18, t14) {
    var e8 = t14.__c, r7 = this;
    null == r7.t && (r7.t = []), r7.t.push(e8);
    var u4 = $dc040a17866866fa$var$U(r7.__v), o1 = !1, i1 = function() {
        o1 || (o1 = !0, e8.__R = null, u4 ? u4(l1) : l1());
    };
    e8.__R = i1;
    var l1 = function() {
        if (!--r7.__u) {
            if (r7.state.__e) {
                var n19 = r7.state.__e;
                r7.__v.__k[0] = function n22(t17, e9, r8) {
                    return t17 && (t17.__v = null, t17.__k = t17.__k && t17.__k.map(function(t18) {
                        return n22(t18, e9, r8);
                    }), t17.__c && t17.__c.__P === e9 && (t17.__e && r8.insertBefore(t17.__e, t17.__d), t17.__c.__e = !0, t17.__c.__P = r8)), t17;
                }(n19, n19.__c.__P, n19.__c.__O);
            }
            var t15;
            for(r7.setState({
                __e: r7.__b = null
            }); t15 = r7.t.pop();)t15.forceUpdate();
        }
    }, c1 = !0 === t14.__h;
    r7.__u++ || c1 || r7.setState({
        __e: r7.__b = r7.__v.__k[0]
    }), n18.then(i1, i1);
}, $dc040a17866866fa$export$74bf444e3cd11ea5.prototype.componentWillUnmount = function() {
    this.t = [];
}, $dc040a17866866fa$export$74bf444e3cd11ea5.prototype.render = function(n23, t19) {
    if (this.__b) {
        if (this.__v.__k) {
            var e10 = document.createElement("div"), r9 = this.__v.__k[0].__c;
            this.__v.__k[0] = function n24(t20, e13, r12) {
                return t20 && (t20.__c && t20.__c.__H && (t20.__c.__H.__.forEach(function(n25) {
                    "function" == typeof n25.__c && n25.__c();
                }), t20.__c.__H = null), null != (t20 = $dc040a17866866fa$var$S({}, t20)).__c && (t20.__c.__P === r12 && (t20.__c.__P = e13), t20.__c = null), t20.__k = t20.__k && t20.__k.map(function(t21) {
                    return n24(t21, e13, r12);
                })), t20;
            }(this.__b, e10, r9.__O = r9.__P);
        }
        this.__b = null;
    }
    var u5 = t19.__e && $fb96b826c0c5f37a$export$c8a8987d4410bf2d($fb96b826c0c5f37a$export$ffb0004e005737fa, null, n23.fallback);
    return u5 && (u5.__h = null), [
        $fb96b826c0c5f37a$export$c8a8987d4410bf2d($fb96b826c0c5f37a$export$ffb0004e005737fa, null, t19.__e ? null : n23.children),
        u5
    ];
};
var $dc040a17866866fa$var$T = function(n26, t22, e14) {
    if (++e14[1] === e14[0] && n26.o.delete(t22), n26.props.revealOrder && ("t" !== n26.props.revealOrder[0] || !n26.o.size)) for(e14 = n26.u; e14;){
        for(; e14.length > 3;)e14.pop()();
        if (e14[1] < e14[0]) break;
        n26.u = e14 = e14[2];
    }
};
function $dc040a17866866fa$var$D(n27) {
    return this.getChildContext = function() {
        return n27.context;
    }, n27.children;
}
function $dc040a17866866fa$var$I(n28) {
    var t23 = this, e15 = n28.i;
    t23.componentWillUnmount = function() {
        $fb96b826c0c5f37a$export$b3890eb0ae9dca99(null, t23.l), t23.l = null, t23.i = null;
    }, t23.i && t23.i !== e15 && t23.componentWillUnmount(), n28.__v ? (t23.l || (t23.i = e15, t23.l = {
        nodeType: 1,
        parentNode: e15,
        childNodes: [],
        appendChild: function(n29) {
            this.childNodes.push(n29), t23.i.appendChild(n29);
        },
        insertBefore: function(n30, e) {
            this.childNodes.push(n30), t23.i.appendChild(n30);
        },
        removeChild: function(n31) {
            this.childNodes.splice(this.childNodes.indexOf(n31) >>> 1, 1), t23.i.removeChild(n31);
        }
    }), $fb96b826c0c5f37a$export$b3890eb0ae9dca99($fb96b826c0c5f37a$export$c8a8987d4410bf2d($dc040a17866866fa$var$D, {
        context: t23.context
    }, n28.__v), t23.l)) : t23.l && t23.componentWillUnmount();
}
function $dc040a17866866fa$export$d39a5bbd09211389(n32, t24) {
    return $fb96b826c0c5f37a$export$c8a8987d4410bf2d($dc040a17866866fa$var$I, {
        __v: n32,
        i: t24
    });
}
($dc040a17866866fa$export$998bcd577473dd93.prototype = new $fb96b826c0c5f37a$export$16fa2f45be04daa8).__e = function(n33) {
    var t25 = this, e16 = $dc040a17866866fa$var$U(t25.__v), r13 = t25.o.get(n33);
    return r13[0]++, function(u6) {
        var o2 = function() {
            t25.props.revealOrder ? (r13.push(u6), $dc040a17866866fa$var$T(t25, n33, r13)) : u6();
        };
        e16 ? e16(o2) : o2();
    };
}, $dc040a17866866fa$export$998bcd577473dd93.prototype.render = function(n34) {
    this.u = null, this.o = new Map;
    var t26 = $fb96b826c0c5f37a$export$47e4c5b300681277(n34.children);
    n34.revealOrder && "b" === n34.revealOrder[0] && t26.reverse();
    for(var e17 = t26.length; e17--;)this.o.set(t26[e17], this.u = [
        1,
        0,
        this.u
    ]);
    return n34.children;
}, $dc040a17866866fa$export$998bcd577473dd93.prototype.componentDidUpdate = $dc040a17866866fa$export$998bcd577473dd93.prototype.componentDidMount = function() {
    var n35 = this;
    this.o.forEach(function(t27, e18) {
        $dc040a17866866fa$var$T(n35, e18, t27);
    });
};
var $dc040a17866866fa$var$j = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, $dc040a17866866fa$var$P = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, $dc040a17866866fa$var$V = "undefined" != typeof document, $dc040a17866866fa$var$z = function(n36) {
    return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n36);
};
function $dc040a17866866fa$export$b3890eb0ae9dca99(n37, t28, e19) {
    return null == t28.__k && (t28.textContent = ""), $fb96b826c0c5f37a$export$b3890eb0ae9dca99(n37, t28), "function" == typeof e19 && e19(), n37 ? n37.__c : null;
}
function $dc040a17866866fa$export$fa8d919ba61d84db(n38, t29, e20) {
    return $fb96b826c0c5f37a$export$fa8d919ba61d84db(n38, t29), "function" == typeof e20 && e20(), n38 ? n38.__c : null;
}
$fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.isReactComponent = {}, [
    "componentWillMount",
    "componentWillReceiveProps",
    "componentWillUpdate"
].forEach(function(n39) {
    Object.defineProperty($fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype, n39, {
        configurable: !0,
        get: function() {
            return this["UNSAFE_" + n39];
        },
        set: function(t30) {
            Object.defineProperty(this, n39, {
                configurable: !0,
                writable: !0,
                value: t30
            });
        }
    });
});
var $dc040a17866866fa$var$H = $fb96b826c0c5f37a$export$41c562ebe57d11e2.event;
function $dc040a17866866fa$var$Z() {}
function $dc040a17866866fa$var$Y() {
    return this.cancelBubble;
}
function $dc040a17866866fa$var$q() {
    return this.defaultPrevented;
}
$fb96b826c0c5f37a$export$41c562ebe57d11e2.event = function(n40) {
    return $dc040a17866866fa$var$H && (n40 = $dc040a17866866fa$var$H(n40)), n40.persist = $dc040a17866866fa$var$Z, n40.isPropagationStopped = $dc040a17866866fa$var$Y, n40.isDefaultPrevented = $dc040a17866866fa$var$q, n40.nativeEvent = n40;
};
var $dc040a17866866fa$var$G, $dc040a17866866fa$var$J = {
    configurable: !0,
    get: function() {
        return this.class;
    }
}, $dc040a17866866fa$var$K = $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode;
$fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode = function(n41) {
    var t31 = n41.type, e21 = n41.props, r14 = e21;
    if ("string" == typeof t31) {
        var u7 = -1 === t31.indexOf("-");
        for(var o3 in r14 = {}, e21){
            var i2 = e21[o3];
            $dc040a17866866fa$var$V && "children" === o3 && "noscript" === t31 || "value" === o3 && "defaultValue" in e21 && null == i2 || ("defaultValue" === o3 && "value" in e21 && null == e21.value ? o3 = "value" : "download" === o3 && !0 === i2 ? i2 = "" : /ondoubleclick/i.test(o3) ? o3 = "ondblclick" : /^onchange(textarea|input)/i.test(o3 + t31) && !$dc040a17866866fa$var$z(e21.type) ? o3 = "oninput" : /^onfocus$/i.test(o3) ? o3 = "onfocusin" : /^onblur$/i.test(o3) ? o3 = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp)/.test(o3) ? o3 = o3.toLowerCase() : u7 && $dc040a17866866fa$var$P.test(o3) ? o3 = o3.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === i2 && (i2 = void 0), r14[o3] = i2);
        }
        "select" == t31 && r14.multiple && Array.isArray(r14.value) && (r14.value = $fb96b826c0c5f37a$export$47e4c5b300681277(e21.children).forEach(function(n42) {
            n42.props.selected = -1 != r14.value.indexOf(n42.props.value);
        })), "select" == t31 && null != r14.defaultValue && (r14.value = $fb96b826c0c5f37a$export$47e4c5b300681277(e21.children).forEach(function(n43) {
            n43.props.selected = r14.multiple ? -1 != r14.defaultValue.indexOf(n43.props.value) : r14.defaultValue == n43.props.value;
        })), n41.props = r14, e21.class != e21.className && ($dc040a17866866fa$var$J.enumerable = "className" in e21, null != e21.className && (r14.class = e21.className), Object.defineProperty(r14, "className", $dc040a17866866fa$var$J));
    }
    n41.$$typeof = $dc040a17866866fa$var$j, $dc040a17866866fa$var$K && $dc040a17866866fa$var$K(n41);
};
var $dc040a17866866fa$var$Q = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__r;
$fb96b826c0c5f37a$export$41c562ebe57d11e2.__r = function(n44) {
    $dc040a17866866fa$var$Q && $dc040a17866866fa$var$Q(n44), $dc040a17866866fa$var$G = n44.__c;
};
var $dc040a17866866fa$export$ae55be85d98224ed = {
    ReactCurrentDispatcher: {
        current: {
            readContext: function(n45) {
                return $dc040a17866866fa$var$G.__n[n45.__c].props.value;
            }
        }
    }
}, $dc040a17866866fa$export$83d89fbfd8236492 = "17.0.2";
function $dc040a17866866fa$export$d38cd72104c1f0e9(n46) {
    return $fb96b826c0c5f37a$export$c8a8987d4410bf2d.bind(null, n46);
}
function $dc040a17866866fa$export$a8257692ac88316c(n47) {
    return !!n47 && n47.$$typeof === $dc040a17866866fa$var$j;
}
function $dc040a17866866fa$export$e530037191fcd5d7(n48) {
    return $dc040a17866866fa$export$a8257692ac88316c(n48) ? $fb96b826c0c5f37a$export$e530037191fcd5d7.apply(null, arguments) : n48;
}
function $dc040a17866866fa$export$502457920280e6be(n49) {
    return !!n49.__k && ($fb96b826c0c5f37a$export$b3890eb0ae9dca99(null, n49), !0);
}
function $dc040a17866866fa$export$466bfc07425424d5(n50) {
    return n50 && (n50.base || 1 === n50.nodeType && n50) || null;
}
var $dc040a17866866fa$export$c78a37762a8d58e1 = function(n51, t32) {
    return n51(t32);
}, $dc040a17866866fa$export$cd75ccfd720a3cd4 = function(n52, t33) {
    return n52(t33);
}, $dc040a17866866fa$export$5f8d39834fd61797 = $fb96b826c0c5f37a$export$ffb0004e005737fa;
var $dc040a17866866fa$export$2e2bcd8739ae039 = {
    useState: $1a9a8ef576b7773d$export$60241385465d0a34,
    useReducer: $1a9a8ef576b7773d$export$13e3392192263954,
    useEffect: $1a9a8ef576b7773d$export$6d9c69b0de29b591,
    useLayoutEffect: $1a9a8ef576b7773d$export$e5c5a5f917a5871c,
    useRef: $1a9a8ef576b7773d$export$b8f5890fc79d6aca,
    useImperativeHandle: $1a9a8ef576b7773d$export$d5a552a76deda3c2,
    useMemo: $1a9a8ef576b7773d$export$1538c33de8887b59,
    useCallback: $1a9a8ef576b7773d$export$35808ee640e87ca7,
    useContext: $1a9a8ef576b7773d$export$fae74005e78b1a27,
    useDebugValue: $1a9a8ef576b7773d$export$dc8fbce3eb94dc1e,
    version: "17.0.2",
    Children: $dc040a17866866fa$export$dca3b0875bd9a954,
    render: $dc040a17866866fa$export$b3890eb0ae9dca99,
    hydrate: $dc040a17866866fa$export$fa8d919ba61d84db,
    unmountComponentAtNode: $dc040a17866866fa$export$502457920280e6be,
    createPortal: $dc040a17866866fa$export$d39a5bbd09211389,
    createElement: $fb96b826c0c5f37a$export$c8a8987d4410bf2d,
    createContext: $fb96b826c0c5f37a$export$fd42f52fd3ae1109,
    createFactory: $dc040a17866866fa$export$d38cd72104c1f0e9,
    cloneElement: $dc040a17866866fa$export$e530037191fcd5d7,
    createRef: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43,
    Fragment: $fb96b826c0c5f37a$export$ffb0004e005737fa,
    isValidElement: $dc040a17866866fa$export$a8257692ac88316c,
    findDOMNode: $dc040a17866866fa$export$466bfc07425424d5,
    Component: $fb96b826c0c5f37a$export$16fa2f45be04daa8,
    PureComponent: $dc040a17866866fa$export$221d75b3f55bb0bd,
    memo: $dc040a17866866fa$export$7c73462e0d25e514,
    forwardRef: $dc040a17866866fa$export$257a8862b851cb5b,
    flushSync: $dc040a17866866fa$export$cd75ccfd720a3cd4,
    unstable_batchedUpdates: $dc040a17866866fa$export$c78a37762a8d58e1,
    StrictMode: $fb96b826c0c5f37a$export$ffb0004e005737fa,
    Suspense: $dc040a17866866fa$export$74bf444e3cd11ea5,
    SuspenseList: $dc040a17866866fa$export$998bcd577473dd93,
    lazy: $dc040a17866866fa$export$488013bae63b21da,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: $dc040a17866866fa$export$ae55be85d98224ed
};
const $ec8c39fdad15601a$var$THEME_ICONS = {
    light: "outline",
    dark: "solid"
};
class $ec8c39fdad15601a$export$2e2bcd8739ae039 extends $dc040a17866866fa$export$221d75b3f55bb0bd {
    renderIcon(category) {
        const { icon: icon } = category;
        if (icon) {
            if (icon.svg) return $bd9dd35321b03dd4$export$34b9dba7ce09269b("span", {
                class: "flex",
                dangerouslySetInnerHTML: {
                    __html: icon.svg
                }
            });
            if (icon.src) return $bd9dd35321b03dd4$export$34b9dba7ce09269b("img", {
                src: icon.src
            });
        }
        const categoryIcons = $fcccfb36ed0cde68$export$2e2bcd8739ae039.categories[category.id] || $fcccfb36ed0cde68$export$2e2bcd8739ae039.categories.custom;
        const style = this.props.icons == "auto" ? $ec8c39fdad15601a$var$THEME_ICONS[this.props.theme] : this.props.icons;
        return categoryIcons[style] || categoryIcons;
    }
    render() {
        let selectedCategoryIndex = null;
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("nav", {
            id: "nav",
            class: "padding",
            "data-position": this.props.position,
            dir: this.props.dir,
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                class: "flex relative",
                children: [
                    this.categories.map((category, i)=>{
                        const title = category.name || $7adb23b0109cc36a$export$dbe3113d60765c1a.categories[category.id];
                        const selected = !this.props.unfocused && category.id == this.state.categoryId;
                        if (selected) selectedCategoryIndex = i;
                        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("button", {
                            "aria-label": title,
                            "aria-selected": selected || undefined,
                            title: title,
                            type: "button",
                            class: "flex flex-grow flex-center",
                            onMouseDown: (e)=>e.preventDefault(),
                            onClick: ()=>{
                                this.props.onClick({
                                    category: category,
                                    i: i
                                });
                            },
                            children: this.renderIcon(category)
                        });
                    }),
                    $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                        class: "bar",
                        style: {
                            width: `${100 / this.categories.length}%`,
                            opacity: selectedCategoryIndex == null ? 0 : 1,
                            transform: this.props.dir === "rtl" ? `scaleX(-1) translateX(${selectedCategoryIndex * 100}%)` : `translateX(${selectedCategoryIndex * 100}%)`
                        }
                    })
                ]
            })
        });
    }
    constructor(){
        super();
        this.categories = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.filter((category)=>{
            return !category.target;
        });
        this.state = {
            categoryId: this.categories[0].id
        };
    }
}
class $e0d4dda61265ff1e$export$2e2bcd8739ae039 extends $dc040a17866866fa$export$221d75b3f55bb0bd {
    shouldComponentUpdate(nextProps) {
        for(let k in nextProps){
            if (k == "children") continue;
            if (nextProps[k] != this.props[k]) return true;
        }
        return false;
    }
    render() {
        return this.props.children;
    }
}
const $89bd6bb200cc8fef$var$Performance = {
    rowsPerRender: 10
};
class $89bd6bb200cc8fef$export$2e2bcd8739ae039 extends $fb96b826c0c5f37a$export$16fa2f45be04daa8 {
    getInitialState(props = this.props) {
        return {
            skin: $f72b75cf796873c7$export$2e2bcd8739ae039.get("skin") || props.skin,
            theme: this.initTheme(props.theme)
        };
    }
    componentWillMount() {
        this.dir = $7adb23b0109cc36a$export$dbe3113d60765c1a.rtl ? "rtl" : "ltr";
        this.refs = {
            menu: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43(),
            navigation: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43(),
            scroll: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43(),
            search: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43(),
            searchInput: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43(),
            skinToneButton: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43(),
            skinToneRadio: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43()
        };
        this.initGrid();
        if (this.props.stickySearch == false && this.props.searchPosition == "sticky") {
            console.warn("[EmojiMart] Deprecation warning: `stickySearch` has been renamed `searchPosition`.");
            this.props.searchPosition = "static";
        }
    }
    componentDidMount() {
        this.register();
        this.shadowRoot = this.base.parentNode;
        if (this.props.autoFocus) {
            const { searchInput: searchInput } = this.refs;
            if (searchInput.current) searchInput.current.focus();
        }
    }
    componentWillReceiveProps(nextProps) {
        this.nextState || (this.nextState = {});
        for(const k1 in nextProps)this.nextState[k1] = nextProps[k1];
        clearTimeout(this.nextStateTimer);
        this.nextStateTimer = setTimeout(()=>{
            let requiresGridReset = false;
            for(const k in this.nextState){
                this.props[k] = this.nextState[k];
                if (k === "custom" || k === "categories") requiresGridReset = true;
            }
            delete this.nextState;
            const nextState = this.getInitialState();
            if (requiresGridReset) return this.reset(nextState);
            this.setState(nextState);
        });
    }
    componentWillUnmount() {
        this.unregister();
    }
    async reset(nextState = {}) {
        await $7adb23b0109cc36a$export$2cd8252107eb640b(this.props);
        this.initGrid();
        this.unobserve();
        this.setState(nextState, ()=>{
            this.observeCategories();
            this.observeRows();
        });
    }
    register() {
        document.addEventListener("click", this.handleClickOutside);
        this.observe();
    }
    unregister() {
        document.removeEventListener("click", this.handleClickOutside);
        this.unobserve();
    }
    observe() {
        this.observeCategories();
        this.observeRows();
    }
    unobserve({ except: except = [] } = {}) {
        if (!Array.isArray(except)) except = [
            except
        ];
        for (const observer of this.observers){
            if (except.includes(observer)) continue;
            observer.disconnect();
        }
        this.observers = [].concat(except);
    }
    initGrid() {
        const { categories: categories } = $7adb23b0109cc36a$export$2d0294657ab35f1b;
        this.refs.categories = new Map();
        const navKey = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.map((category)=>category.id).join(",");
        if (this.navKey && this.navKey != navKey) this.refs.scroll.current && (this.refs.scroll.current.scrollTop = 0);
        this.navKey = navKey;
        this.grid = [];
        this.grid.setsize = 0;
        const addRow = (rows, category)=>{
            const row = [];
            row.__categoryId = category.id;
            row.__index = rows.length;
            this.grid.push(row);
            const rowIndex = this.grid.length - 1;
            const rowRef = rowIndex % $89bd6bb200cc8fef$var$Performance.rowsPerRender ? {} : $fb96b826c0c5f37a$export$7d1e3a5e95ceca43();
            rowRef.index = rowIndex;
            rowRef.posinset = this.grid.setsize + 1;
            rows.push(rowRef);
            return row;
        };
        for (let category1 of categories){
            const rows = [];
            let row = addRow(rows, category1);
            for (let emoji of category1.emojis){
                if (row.length == this.getPerLine()) row = addRow(rows, category1);
                this.grid.setsize += 1;
                row.push(emoji);
            }
            this.refs.categories.set(category1.id, {
                root: $fb96b826c0c5f37a$export$7d1e3a5e95ceca43(),
                rows: rows
            });
        }
    }
    initTheme(theme) {
        if (theme != "auto") return theme;
        if (!this.darkMedia) {
            this.darkMedia = matchMedia("(prefers-color-scheme: dark)");
            if (this.darkMedia.media.match(/^not/)) return "light";
            this.darkMedia.addListener(()=>{
                if (this.props.theme != "auto") return;
                this.setState({
                    theme: this.darkMedia.matches ? "dark" : "light"
                });
            });
        }
        return this.darkMedia.matches ? "dark" : "light";
    }
    initDynamicPerLine(props = this.props) {
        if (!props.dynamicWidth) return;
        const { element: element, emojiButtonSize: emojiButtonSize } = props;
        const calculatePerLine = ()=>{
            const { width: width } = element.getBoundingClientRect();
            return Math.floor(width / emojiButtonSize);
        };
        const observer = new ResizeObserver(()=>{
            this.unobserve({
                except: observer
            });
            this.setState({
                perLine: calculatePerLine()
            }, ()=>{
                this.initGrid();
                this.forceUpdate(()=>{
                    this.observeCategories();
                    this.observeRows();
                });
            });
        });
        observer.observe(element);
        this.observers.push(observer);
        return calculatePerLine();
    }
    getPerLine() {
        return this.state.perLine || this.props.perLine;
    }
    getEmojiByPos([p1, p2]) {
        const grid = this.state.searchResults || this.grid;
        const emoji = grid[p1] && grid[p1][p2];
        if (!emoji) return;
        return $c4d155af13ad4d4b$export$2e2bcd8739ae039.get(emoji);
    }
    observeCategories() {
        const navigation = this.refs.navigation.current;
        if (!navigation) return;
        const visibleCategories = new Map();
        const setFocusedCategory = (categoryId)=>{
            if (categoryId != navigation.state.categoryId) navigation.setState({
                categoryId: categoryId
            });
        };
        const observerOptions = {
            root: this.refs.scroll.current,
            threshold: [
                0.0,
                1.0
            ]
        };
        const observer = new IntersectionObserver((entries)=>{
            for (const entry of entries){
                const id = entry.target.dataset.id;
                visibleCategories.set(id, entry.intersectionRatio);
            }
            const ratios = [
                ...visibleCategories
            ];
            for (const [id, ratio] of ratios)if (ratio) {
                setFocusedCategory(id);
                break;
            }
        }, observerOptions);
        for (const { root: root } of this.refs.categories.values())observer.observe(root.current);
        this.observers.push(observer);
    }
    observeRows() {
        const visibleRows = {
            ...this.state.visibleRows
        };
        const observer = new IntersectionObserver((entries)=>{
            for (const entry of entries){
                const index = parseInt(entry.target.dataset.index);
                if (entry.isIntersecting) visibleRows[index] = true;
                else delete visibleRows[index];
            }
            this.setState({
                visibleRows: visibleRows
            });
        }, {
            root: this.refs.scroll.current,
            rootMargin: `${this.props.emojiButtonSize * ($89bd6bb200cc8fef$var$Performance.rowsPerRender + 5)}px 0px ${this.props.emojiButtonSize * $89bd6bb200cc8fef$var$Performance.rowsPerRender}px`
        });
        for (const { rows: rows } of this.refs.categories.values()){
            for (const row of rows)if (row.current) observer.observe(row.current);
        }
        this.observers.push(observer);
    }
    preventDefault(e) {
        e.preventDefault();
    }
    unfocusSearch() {
        const input = this.refs.searchInput.current;
        if (!input) return;
        input.blur();
    }
    navigate({ e: e, input: input, left: left, right: right, up: up, down: down }) {
        const grid = this.state.searchResults || this.grid;
        if (!grid.length) return;
        let [p1, p2] = this.state.pos;
        const pos = (()=>{
            if (p1 == 0) {
                if (p2 == 0 && !e.repeat && (left || up)) return null;
            }
            if (p1 == -1) {
                if (!e.repeat && (right || down) && input.selectionStart == input.value.length) return [
                    0,
                    0
                ];
                return null;
            }
            if (left || right) {
                let row = grid[p1];
                const increment = left ? -1 : 1;
                p2 += increment;
                if (!row[p2]) {
                    p1 += increment;
                    row = grid[p1];
                    if (!row) {
                        p1 = left ? 0 : grid.length - 1;
                        p2 = left ? 0 : grid[p1].length - 1;
                        return [
                            p1,
                            p2
                        ];
                    }
                    p2 = left ? row.length - 1 : 0;
                }
                return [
                    p1,
                    p2
                ];
            }
            if (up || down) {
                p1 += up ? -1 : 1;
                const row = grid[p1];
                if (!row) {
                    p1 = up ? 0 : grid.length - 1;
                    p2 = up ? 0 : grid[p1].length - 1;
                    return [
                        p1,
                        p2
                    ];
                }
                if (!row[p2]) p2 = row.length - 1;
                return [
                    p1,
                    p2
                ];
            }
        })();
        if (pos) e.preventDefault();
        else {
            if (this.state.pos[0] > -1) this.setState({
                pos: [
                    -1,
                    -1
                ]
            });
            return;
        }
        this.setState({
            pos: pos,
            keyboard: true
        }, ()=>{
            this.scrollTo({
                row: pos[0]
            });
        });
    }
    scrollTo({ categoryId: categoryId, row: row }) {
        const grid = this.state.searchResults || this.grid;
        if (!grid.length) return;
        const scroll = this.refs.scroll.current;
        const scrollRect = scroll.getBoundingClientRect();
        let scrollTop = 0;
        if (row >= 0) categoryId = grid[row].__categoryId;
        if (categoryId) {
            const ref = this.refs[categoryId] || this.refs.categories.get(categoryId).root;
            const categoryRect = ref.current.getBoundingClientRect();
            scrollTop = categoryRect.top - (scrollRect.top - scroll.scrollTop) + 1;
        }
        if (row >= 0) {
            if (!row) scrollTop = 0;
            else {
                const rowIndex = grid[row].__index;
                const rowTop = scrollTop + rowIndex * this.props.emojiButtonSize;
                const rowBot = rowTop + this.props.emojiButtonSize + this.props.emojiButtonSize * 0.88;
                if (rowTop < scroll.scrollTop) scrollTop = rowTop;
                else if (rowBot > scroll.scrollTop + scrollRect.height) scrollTop = rowBot - scrollRect.height;
                else return;
            }
        }
        this.ignoreMouse();
        scroll.scrollTop = scrollTop;
    }
    ignoreMouse() {
        this.mouseIsIgnored = true;
        clearTimeout(this.ignoreMouseTimer);
        this.ignoreMouseTimer = setTimeout(()=>{
            delete this.mouseIsIgnored;
        }, 100);
    }
    handleEmojiOver(pos) {
        if (this.mouseIsIgnored || this.state.showSkins) return;
        this.setState({
            pos: pos || [
                -1,
                -1
            ],
            keyboard: false
        });
    }
    handleEmojiClick({ e: e, emoji: emoji, pos: pos }) {
        if (!this.props.onEmojiSelect) return;
        if (!emoji && pos) emoji = this.getEmojiByPos(pos);
        if (emoji) {
            const emojiData = $693b183b0a78708f$export$d10ac59fbe52a745(emoji, {
                skinIndex: this.state.skin - 1
            });
            if (this.props.maxFrequentRows) $b22cfd0a55410b4f$export$2e2bcd8739ae039.add(emojiData, this.props);
            this.props.onEmojiSelect(emojiData, e);
        }
    }
    closeSkins() {
        if (!this.state.showSkins) return;
        this.setState({
            showSkins: null,
            tempSkin: null
        });
        this.base.removeEventListener("click", this.handleBaseClick);
        this.base.removeEventListener("keydown", this.handleBaseKeydown);
    }
    handleSkinMouseOver(tempSkin) {
        this.setState({
            tempSkin: tempSkin
        });
    }
    handleSkinClick(skin) {
        this.ignoreMouse();
        this.closeSkins();
        this.setState({
            skin: skin,
            tempSkin: null
        });
        $f72b75cf796873c7$export$2e2bcd8739ae039.set("skin", skin);
    }
    renderNav() {
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b($ec8c39fdad15601a$export$2e2bcd8739ae039, {
            ref: this.refs.navigation,
            icons: this.props.icons,
            theme: this.state.theme,
            dir: this.dir,
            unfocused: !!this.state.searchResults,
            position: this.props.navPosition,
            onClick: this.handleCategoryClick
        }, this.navKey);
    }
    renderPreview() {
        const emoji = this.getEmojiByPos(this.state.pos);
        const noSearchResults = this.state.searchResults && !this.state.searchResults.length;
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
            id: "preview",
            class: "flex flex-middle",
            dir: this.dir,
            "data-position": this.props.previewPosition,
            children: [
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    class: "flex flex-middle flex-grow",
                    children: [
                        $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                            class: "flex flex-auto flex-middle flex-center",
                            style: {
                                height: this.props.emojiButtonSize,
                                fontSize: this.props.emojiButtonSize
                            },
                            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b($254755d3f438722f$export$2e2bcd8739ae039, {
                                emoji: emoji,
                                id: noSearchResults ? this.props.noResultsEmoji || "cry" : this.props.previewEmoji || (this.props.previewPosition == "top" ? "point_down" : "point_up"),
                                set: this.props.set,
                                size: this.props.emojiButtonSize,
                                skin: this.state.tempSkin || this.state.skin,
                                spritesheet: true,
                                getSpritesheetURL: this.props.getSpritesheetURL
                            })
                        }),
                        $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                            class: `margin-${this.dir[0]}`,
                            children: emoji || noSearchResults ? $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                                class: `padding-${this.dir[2]} align-${this.dir[0]}`,
                                children: [
                                    $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                                        class: "preview-title ellipsis",
                                        children: emoji ? emoji.name : $7adb23b0109cc36a$export$dbe3113d60765c1a.search_no_results_1
                                    }),
                                    $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                                        class: "preview-subtitle ellipsis color-c",
                                        children: emoji ? emoji.skins[0].shortcodes : $7adb23b0109cc36a$export$dbe3113d60765c1a.search_no_results_2
                                    })
                                ]
                            }) : $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                                class: "preview-placeholder color-c",
                                children: $7adb23b0109cc36a$export$dbe3113d60765c1a.pick
                            })
                        })
                    ]
                }),
                !emoji && this.props.skinTonePosition == "preview" && this.renderSkinToneButton()
            ]
        });
    }
    renderEmojiButton(emoji, { pos: pos, posinset: posinset, grid: grid }) {
        const size = this.props.emojiButtonSize;
        const skin = this.state.tempSkin || this.state.skin;
        const emojiSkin = emoji.skins[skin - 1] || emoji.skins[0];
        const native = emojiSkin.native;
        const selected = $693b183b0a78708f$export$9cb4719e2e525b7a(this.state.pos, pos);
        const key = pos.concat(emoji.id).join("");
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b($e0d4dda61265ff1e$export$2e2bcd8739ae039, {
            selected: selected,
            skin: skin,
            size: size,
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("button", {
                "aria-label": native,
                "aria-selected": selected || undefined,
                "aria-posinset": posinset,
                "aria-setsize": grid.setsize,
                "data-keyboard": this.state.keyboard,
                title: this.props.previewPosition == "none" ? emoji.name : undefined,
                type: "button",
                class: "flex flex-center flex-middle",
                tabindex: "-1",
                onClick: (e)=>this.handleEmojiClick({
                        e: e,
                        emoji: emoji
                    }),
                onMouseEnter: ()=>this.handleEmojiOver(pos),
                onMouseLeave: ()=>this.handleEmojiOver(),
                style: {
                    width: this.props.emojiButtonSize,
                    height: this.props.emojiButtonSize,
                    fontSize: this.props.emojiSize,
                    lineHeight: 0
                },
                children: [
                    $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                        "aria-hidden": "true",
                        class: "background",
                        style: {
                            borderRadius: this.props.emojiButtonRadius,
                            backgroundColor: this.props.emojiButtonColors ? this.props.emojiButtonColors[(posinset - 1) % this.props.emojiButtonColors.length] : undefined
                        }
                    }),
                    $bd9dd35321b03dd4$export$34b9dba7ce09269b($254755d3f438722f$export$2e2bcd8739ae039, {
                        emoji: emoji,
                        set: this.props.set,
                        size: this.props.emojiSize,
                        skin: skin,
                        spritesheet: true,
                        getSpritesheetURL: this.props.getSpritesheetURL
                    })
                ]
            })
        }, key);
    }
    renderSearch() {
        const renderSkinTone = this.props.previewPosition == "none" || this.props.skinTonePosition == "search";
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
            children: [
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    class: "spacer"
                }),
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    class: "flex flex-middle",
                    children: [
                        $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                            class: "search relative flex-grow",
                            children: [
                                $bd9dd35321b03dd4$export$34b9dba7ce09269b("input", {
                                    type: "search",
                                    ref: this.refs.searchInput,
                                    placeholder: $7adb23b0109cc36a$export$dbe3113d60765c1a.search,
                                    onClick: this.handleSearchClick,
                                    onInput: this.handleSearchInput,
                                    onKeyDown: this.handleSearchKeyDown,
                                    autoComplete: "off"
                                }),
                                $bd9dd35321b03dd4$export$34b9dba7ce09269b("span", {
                                    class: "icon loupe flex",
                                    children: $fcccfb36ed0cde68$export$2e2bcd8739ae039.search.loupe
                                }),
                                this.state.searchResults && $bd9dd35321b03dd4$export$34b9dba7ce09269b("button", {
                                    title: "Clear",
                                    "aria-label": "Clear",
                                    type: "button",
                                    class: "icon delete flex",
                                    onClick: this.clearSearch,
                                    onMouseDown: this.preventDefault,
                                    children: $fcccfb36ed0cde68$export$2e2bcd8739ae039.search.delete
                                })
                            ]
                        }),
                        renderSkinTone && this.renderSkinToneButton()
                    ]
                })
            ]
        });
    }
    renderSearchResults() {
        const { searchResults: searchResults } = this.state;
        if (!searchResults) return null;
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
            class: "category",
            ref: this.refs.search,
            children: [
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    class: `sticky padding-small align-${this.dir[0]}`,
                    children: $7adb23b0109cc36a$export$dbe3113d60765c1a.categories.search
                }),
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    children: !searchResults.length ? $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                        class: `padding-small align-${this.dir[0]}`,
                        children: this.props.onAddCustomEmoji && $bd9dd35321b03dd4$export$34b9dba7ce09269b("a", {
                            onClick: this.props.onAddCustomEmoji,
                            children: $7adb23b0109cc36a$export$dbe3113d60765c1a.add_custom
                        })
                    }) : searchResults.map((row, i)=>{
                        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                            class: "flex",
                            children: row.map((emoji, ii)=>{
                                return this.renderEmojiButton(emoji, {
                                    pos: [
                                        i,
                                        ii
                                    ],
                                    posinset: i * this.props.perLine + ii + 1,
                                    grid: searchResults
                                });
                            })
                        });
                    })
                })
            ]
        });
    }
    renderCategories() {
        const { categories: categories } = $7adb23b0109cc36a$export$2d0294657ab35f1b;
        const hidden = !!this.state.searchResults;
        const perLine = this.getPerLine();
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
            style: {
                visibility: hidden ? "hidden" : undefined,
                display: hidden ? "none" : undefined,
                height: "100%"
            },
            children: categories.map((category)=>{
                const { root: root, rows: rows } = this.refs.categories.get(category.id);
                return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    "data-id": category.target ? category.target.id : category.id,
                    class: "category",
                    ref: root,
                    children: [
                        $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                            class: `sticky padding-small align-${this.dir[0]}`,
                            children: category.name || $7adb23b0109cc36a$export$dbe3113d60765c1a.categories[category.id]
                        }),
                        $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                            class: "relative",
                            style: {
                                height: rows.length * this.props.emojiButtonSize
                            },
                            children: rows.map((row, i)=>{
                                const targetRow = row.index - row.index % $89bd6bb200cc8fef$var$Performance.rowsPerRender;
                                const visible = this.state.visibleRows[targetRow];
                                const ref = "current" in row ? row : undefined;
                                if (!visible && !ref) return null;
                                const start = i * perLine;
                                const end = start + perLine;
                                const emojiIds = category.emojis.slice(start, end);
                                if (emojiIds.length < perLine) emojiIds.push(...new Array(perLine - emojiIds.length));
                                return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                                    "data-index": row.index,
                                    ref: ref,
                                    class: "flex row",
                                    style: {
                                        top: i * this.props.emojiButtonSize
                                    },
                                    children: visible && emojiIds.map((emojiId, ii)=>{
                                        if (!emojiId) return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                                            style: {
                                                width: this.props.emojiButtonSize,
                                                height: this.props.emojiButtonSize
                                            }
                                        });
                                        const emoji = $c4d155af13ad4d4b$export$2e2bcd8739ae039.get(emojiId);
                                        return this.renderEmojiButton(emoji, {
                                            pos: [
                                                row.index,
                                                ii
                                            ],
                                            posinset: row.posinset + ii,
                                            grid: this.grid
                                        });
                                    })
                                }, row.index);
                            })
                        })
                    ]
                });
            })
        });
    }
    renderSkinToneButton() {
        if (this.props.skinTonePosition == "none") return null;
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
            class: "flex flex-auto flex-center flex-middle",
            style: {
                position: "relative",
                width: this.props.emojiButtonSize,
                height: this.props.emojiButtonSize
            },
            children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("button", {
                type: "button",
                ref: this.refs.skinToneButton,
                class: "skin-tone-button flex flex-auto flex-center flex-middle",
                "aria-selected": this.state.showSkins ? "" : undefined,
                "aria-label": $7adb23b0109cc36a$export$dbe3113d60765c1a.skins.choose,
                title: $7adb23b0109cc36a$export$dbe3113d60765c1a.skins.choose,
                onClick: this.openSkins,
                style: {
                    width: this.props.emojiSize,
                    height: this.props.emojiSize
                },
                children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("span", {
                    class: `skin-tone skin-tone-${this.state.skin}`
                })
            })
        });
    }
    renderLiveRegion() {
        const emoji = this.getEmojiByPos(this.state.pos);
        const contents = emoji ? emoji.name : "";
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
            "aria-live": "polite",
            class: "sr-only",
            children: contents
        });
    }
    renderSkins() {
        const skinToneButton = this.refs.skinToneButton.current;
        const skinToneButtonRect = skinToneButton.getBoundingClientRect();
        const baseRect = this.base.getBoundingClientRect();
        const position = {};
        if (this.dir == "ltr") position.right = baseRect.right - skinToneButtonRect.right - 3;
        else position.left = skinToneButtonRect.left - baseRect.left - 3;
        if (this.props.previewPosition == "bottom" && this.props.skinTonePosition == "preview") position.bottom = baseRect.bottom - skinToneButtonRect.top + 6;
        else {
            position.top = skinToneButtonRect.bottom - baseRect.top + 3;
            position.bottom = "auto";
        }
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
            ref: this.refs.menu,
            role: "radiogroup",
            dir: this.dir,
            "aria-label": $7adb23b0109cc36a$export$dbe3113d60765c1a.skins.choose,
            class: "menu hidden",
            "data-position": position.top ? "top" : "bottom",
            style: position,
            children: [
                ...Array(6).keys()
            ].map((i)=>{
                const skin = i + 1;
                const checked = this.state.skin == skin;
                return $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    children: [
                        $bd9dd35321b03dd4$export$34b9dba7ce09269b("input", {
                            type: "radio",
                            name: "skin-tone",
                            value: skin,
                            "aria-label": $7adb23b0109cc36a$export$dbe3113d60765c1a.skins[skin],
                            ref: checked ? this.refs.skinToneRadio : null,
                            defaultChecked: checked,
                            onChange: ()=>this.handleSkinMouseOver(skin),
                            onKeyDown: (e)=>{
                                if (e.code == "Enter" || e.code == "Space" || e.code == "Tab") {
                                    e.preventDefault();
                                    this.handleSkinClick(skin);
                                }
                            }
                        }),
                        $bd9dd35321b03dd4$export$34b9dba7ce09269b("button", {
                            "aria-hidden": "true",
                            tabindex: "-1",
                            onClick: ()=>this.handleSkinClick(skin),
                            onMouseEnter: ()=>this.handleSkinMouseOver(skin),
                            onMouseLeave: ()=>this.handleSkinMouseOver(),
                            class: "option flex flex-grow flex-middle",
                            children: [
                                $bd9dd35321b03dd4$export$34b9dba7ce09269b("span", {
                                    class: `skin-tone skin-tone-${skin}`
                                }),
                                $bd9dd35321b03dd4$export$34b9dba7ce09269b("span", {
                                    class: "margin-small-lr",
                                    children: $7adb23b0109cc36a$export$dbe3113d60765c1a.skins[skin]
                                })
                            ]
                        })
                    ]
                });
            })
        });
    }
    render() {
        const lineWidth = this.props.perLine * this.props.emojiButtonSize;
        return $bd9dd35321b03dd4$export$34b9dba7ce09269b("section", {
            id: "root",
            class: "flex flex-column",
            dir: this.dir,
            style: {
                width: this.props.dynamicWidth ? "100%" : `calc(${lineWidth}px + (var(--padding) + var(--sidebar-width)))`
            },
            "data-emoji-set": this.props.set,
            "data-theme": this.state.theme,
            "data-menu": this.state.showSkins ? "" : undefined,
            children: [
                this.props.previewPosition == "top" && this.renderPreview(),
                this.props.navPosition == "top" && this.renderNav(),
                this.props.searchPosition == "sticky" && $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    class: "padding-lr",
                    children: this.renderSearch()
                }),
                $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                    ref: this.refs.scroll,
                    class: "scroll flex-grow padding-lr",
                    children: $bd9dd35321b03dd4$export$34b9dba7ce09269b("div", {
                        style: {
                            width: this.props.dynamicWidth ? "100%" : lineWidth,
                            height: "100%"
                        },
                        children: [
                            this.props.searchPosition == "static" && this.renderSearch(),
                            this.renderSearchResults(),
                            this.renderCategories()
                        ]
                    })
                }),
                this.props.navPosition == "bottom" && this.renderNav(),
                this.props.previewPosition == "bottom" && this.renderPreview(),
                this.state.showSkins && this.renderSkins(),
                this.renderLiveRegion()
            ]
        });
    }
    constructor(props){
        super();
        $c770c458706daa72$export$2e2bcd8739ae039(this, "handleClickOutside", (e)=>{
            const { element: element } = this.props;
            if (e.target != element) {
                if (this.state.showSkins) this.closeSkins();
                if (this.props.onClickOutside) this.props.onClickOutside(e);
            }
        });
        $c770c458706daa72$export$2e2bcd8739ae039(this, "handleBaseClick", (e)=>{
            if (!this.state.showSkins) return;
            if (!e.target.closest(".menu")) {
                e.preventDefault();
                e.stopImmediatePropagation();
                this.closeSkins();
            }
        });
        $c770c458706daa72$export$2e2bcd8739ae039(this, "handleBaseKeydown", (e)=>{
            if (!this.state.showSkins) return;
            if (e.key == "Escape") {
                e.preventDefault();
                e.stopImmediatePropagation();
                this.closeSkins();
            }
        });
        $c770c458706daa72$export$2e2bcd8739ae039(this, "handleSearchClick", ()=>{
            const emoji = this.getEmojiByPos(this.state.pos);
            if (!emoji) return;
            this.setState({
                pos: [
                    -1,
                    -1
                ]
            });
        });
        $c770c458706daa72$export$2e2bcd8739ae039(this, "handleSearchInput", async ()=>{
            const input = this.refs.searchInput.current;
            if (!input) return;
            const { value: value } = input;
            const searchResults = await $c4d155af13ad4d4b$export$2e2bcd8739ae039.search(value);
            const afterRender = ()=>{
                if (!this.refs.scroll.current) return;
                this.refs.scroll.current.scrollTop = 0;
            };
            if (!searchResults) return this.setState({
                searchResults: searchResults,
                pos: [
                    -1,
                    -1
                ]
            }, afterRender);
            const pos = input.selectionStart == input.value.length ? [
                0,
                0
            ] : [
                -1,
                -1
            ];
            const grid = [];
            grid.setsize = searchResults.length;
            let row = null;
            for (let emoji of searchResults){
                if (!grid.length || row.length == this.getPerLine()) {
                    row = [];
                    row.__categoryId = "search";
                    row.__index = grid.length;
                    grid.push(row);
                }
                row.push(emoji);
            }
            this.ignoreMouse();
            this.setState({
                searchResults: grid,
                pos: pos
            }, afterRender);
        });
        $c770c458706daa72$export$2e2bcd8739ae039(this, "handleSearchKeyDown", (e)=>{
            // const specialKey = e.altKey || e.ctrlKey || e.metaKey
            const input = e.currentTarget;
            e.stopImmediatePropagation();
            switch(e.key){
                case "ArrowLeft":
                    // if (specialKey) return
                    // e.preventDefault()
                    this.navigate({
                        e: e,
                        input: input,
                        left: true
                    });
                    break;
                case "ArrowRight":
                    // if (specialKey) return
                    // e.preventDefault()
                    this.navigate({
                        e: e,
                        input: input,
                        right: true
                    });
                    break;
                case "ArrowUp":
                    // if (specialKey) return
                    // e.preventDefault()
                    this.navigate({
                        e: e,
                        input: input,
                        up: true
                    });
                    break;
                case "ArrowDown":
                    // if (specialKey) return
                    // e.preventDefault()
                    this.navigate({
                        e: e,
                        input: input,
                        down: true
                    });
                    break;
                case "Enter":
                    e.preventDefault();
                    this.handleEmojiClick({
                        e: e,
                        pos: this.state.pos
                    });
                    break;
                case "Escape":
                    e.preventDefault();
                    if (this.state.searchResults) this.clearSearch();
                    else this.unfocusSearch();
                    break;
                default:
                    break;
            }
        });
        $c770c458706daa72$export$2e2bcd8739ae039(this, "clearSearch", ()=>{
            const input = this.refs.searchInput.current;
            if (!input) return;
            input.value = "";
            input.focus();
            this.handleSearchInput();
        });
        $c770c458706daa72$export$2e2bcd8739ae039(this, "handleCategoryClick", ({ category: category, i: i })=>{
            this.scrollTo(i == 0 ? {
                row: -1
            } : {
                categoryId: category.id
            });
        });
        $c770c458706daa72$export$2e2bcd8739ae039(this, "openSkins", (e)=>{
            const { currentTarget: currentTarget } = e;
            const rect = currentTarget.getBoundingClientRect();
            this.setState({
                showSkins: rect
            }, async ()=>{
                // Firefox requires 2 frames for the transition to consistenly work
                await $693b183b0a78708f$export$e772c8ff12451969(2);
                const menu = this.refs.menu.current;
                if (!menu) return;
                menu.classList.remove("hidden");
                this.refs.skinToneRadio.current.focus();
                this.base.addEventListener("click", this.handleBaseClick, true);
                this.base.addEventListener("keydown", this.handleBaseKeydown, true);
            });
        });
        this.observers = [];
        this.state = {
            pos: [
                -1,
                -1
            ],
            perLine: this.initDynamicPerLine(props),
            visibleRows: {
                0: true
            },
            ...this.getInitialState(props)
        };
    }
}
class $efa000751917694d$export$2e2bcd8739ae039 extends $26f27c338a96b1a6$export$2e2bcd8739ae039 {
    async connectedCallback() {
        const props = $7adb23b0109cc36a$export$75fe5f91d452f94b(this.props, $b247ea80b67298d5$export$2e2bcd8739ae039, this);
        props.element = this;
        props.ref = (component)=>{
            this.component = component;
        };
        await $7adb23b0109cc36a$export$2cd8252107eb640b(props);
        if (this.disconnected) return;
        $fb96b826c0c5f37a$export$b3890eb0ae9dca99($bd9dd35321b03dd4$export$34b9dba7ce09269b($89bd6bb200cc8fef$export$2e2bcd8739ae039, {
            ...props
        }), this.shadowRoot);
    }
    constructor(props){
        super(props, {
            styles: /*@__PURE__*/ $parcel$interopDefault($329d53ba9fd7125f$exports)
        });
    }
}
$c770c458706daa72$export$2e2bcd8739ae039($efa000751917694d$export$2e2bcd8739ae039, "Props", $b247ea80b67298d5$export$2e2bcd8739ae039);
if (typeof customElements !== "undefined" && !customElements.get("em-emoji-picker")) customElements.define("em-emoji-picker", $efa000751917694d$export$2e2bcd8739ae039);
var $329d53ba9fd7125f$exports = {};
$329d53ba9fd7125f$exports = ':host {\n  width: min-content;\n  height: 435px;\n  min-height: 230px;\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow);\n  --border-radius: 10px;\n  --category-icon-size: 18px;\n  --font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", sans-serif;\n  --font-size: 15px;\n  --preview-placeholder-size: 21px;\n  --preview-title-size: 1.1em;\n  --preview-subtitle-size: .9em;\n  --shadow-color: 0deg 0% 0%;\n  --shadow: .3px .5px 2.7px hsl(var(--shadow-color) / .14), .4px .8px 1px -3.2px hsl(var(--shadow-color) / .14), 1px 2px 2.5px -4.5px hsl(var(--shadow-color) / .14);\n  display: flex;\n}\n\n[data-theme="light"] {\n  --em-rgb-color: var(--rgb-color, 34, 36, 39);\n  --em-rgb-accent: var(--rgb-accent, 34, 102, 237);\n  --em-rgb-background: var(--rgb-background, 255, 255, 255);\n  --em-rgb-input: var(--rgb-input, 255, 255, 255);\n  --em-color-border: var(--color-border, rgba(0, 0, 0, .05));\n  --em-color-border-over: var(--color-border-over, rgba(0, 0, 0, .1));\n}\n\n[data-theme="dark"] {\n  --em-rgb-color: var(--rgb-color, 222, 222, 221);\n  --em-rgb-accent: var(--rgb-accent, 58, 130, 247);\n  --em-rgb-background: var(--rgb-background, 21, 22, 23);\n  --em-rgb-input: var(--rgb-input, 0, 0, 0);\n  --em-color-border: var(--color-border, rgba(255, 255, 255, .1));\n  --em-color-border-over: var(--color-border-over, rgba(255, 255, 255, .2));\n}\n\n#root {\n  --color-a: rgb(var(--em-rgb-color));\n  --color-b: rgba(var(--em-rgb-color), .65);\n  --color-c: rgba(var(--em-rgb-color), .45);\n  --padding: 12px;\n  --padding-small: calc(var(--padding) / 2);\n  --sidebar-width: 16px;\n  --duration: 225ms;\n  --duration-fast: 125ms;\n  --duration-instant: 50ms;\n  --easing: cubic-bezier(.4, 0, .2, 1);\n  width: 100%;\n  text-align: left;\n  border-radius: var(--border-radius);\n  background-color: rgb(var(--em-rgb-background));\n  position: relative;\n}\n\n@media (prefers-reduced-motion) {\n  #root {\n    --duration: 0;\n    --duration-fast: 0;\n    --duration-instant: 0;\n  }\n}\n\n#root[data-menu] button {\n  cursor: auto;\n}\n\n#root[data-menu] .menu button {\n  cursor: pointer;\n}\n\n:host, #root, input, button {\n  color: rgb(var(--em-rgb-color));\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  line-height: normal;\n}\n\n*, :before, :after {\n  box-sizing: border-box;\n  min-width: 0;\n  margin: 0;\n  padding: 0;\n}\n\n.relative {\n  position: relative;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-auto {\n  flex: none;\n}\n\n.flex-center {\n  justify-content: center;\n}\n\n.flex-column {\n  flex-direction: column;\n}\n\n.flex-grow {\n  flex: auto;\n}\n\n.flex-middle {\n  align-items: center;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.padding {\n  padding: var(--padding);\n}\n\n.padding-t {\n  padding-top: var(--padding);\n}\n\n.padding-lr {\n  padding-left: var(--padding);\n  padding-right: var(--padding);\n}\n\n.padding-r {\n  padding-right: var(--padding);\n}\n\n.padding-small {\n  padding: var(--padding-small);\n}\n\n.padding-small-b {\n  padding-bottom: var(--padding-small);\n}\n\n.padding-small-lr {\n  padding-left: var(--padding-small);\n  padding-right: var(--padding-small);\n}\n\n.margin {\n  margin: var(--padding);\n}\n\n.margin-r {\n  margin-right: var(--padding);\n}\n\n.margin-l {\n  margin-left: var(--padding);\n}\n\n.margin-small-l {\n  margin-left: var(--padding-small);\n}\n\n.margin-small-lr {\n  margin-left: var(--padding-small);\n  margin-right: var(--padding-small);\n}\n\n.align-l {\n  text-align: left;\n}\n\n.align-r {\n  text-align: right;\n}\n\n.color-a {\n  color: var(--color-a);\n}\n\n.color-b {\n  color: var(--color-b);\n}\n\n.color-c {\n  color: var(--color-c);\n}\n\n.ellipsis {\n  white-space: nowrap;\n  max-width: 100%;\n  width: auto;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.sr-only {\n  width: 1px;\n  height: 1px;\n  position: absolute;\n  top: auto;\n  left: -10000px;\n  overflow: hidden;\n}\n\na {\n  cursor: pointer;\n  color: rgb(var(--em-rgb-accent));\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n.spacer {\n  height: 10px;\n}\n\n[dir="rtl"] .scroll {\n  padding-left: 0;\n  padding-right: var(--padding);\n}\n\n.scroll {\n  padding-right: 0;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.scroll::-webkit-scrollbar {\n  width: var(--sidebar-width);\n  height: var(--sidebar-width);\n}\n\n.scroll::-webkit-scrollbar-track {\n  border: 0;\n}\n\n.scroll::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n  display: none;\n}\n\n.scroll::-webkit-scrollbar-corner {\n  background-color: rgba(0, 0, 0, 0);\n}\n\n.scroll::-webkit-scrollbar-thumb {\n  min-height: 20%;\n  min-height: 65px;\n  border: 4px solid rgb(var(--em-rgb-background));\n  border-radius: 8px;\n}\n\n.scroll::-webkit-scrollbar-thumb:hover {\n  background-color: var(--em-color-border-over) !important;\n}\n\n.scroll:hover::-webkit-scrollbar-thumb {\n  background-color: var(--em-color-border);\n}\n\n.sticky {\n  z-index: 1;\n  background-color: rgba(var(--em-rgb-background), .9);\n  -webkit-backdrop-filter: blur(4px);\n  backdrop-filter: blur(4px);\n  font-weight: 500;\n  position: sticky;\n  top: -1px;\n}\n\n[dir="rtl"] .search input[type="search"] {\n  padding: 10px 2.2em 10px 2em;\n}\n\n[dir="rtl"] .search .loupe {\n  left: auto;\n  right: .7em;\n}\n\n[dir="rtl"] .search .delete {\n  left: .7em;\n  right: auto;\n}\n\n.search {\n  z-index: 2;\n  position: relative;\n}\n\n.search input, .search button {\n  font-size: calc(var(--font-size)  - 1px);\n}\n\n.search input[type="search"] {\n  width: 100%;\n  background-color: var(--em-color-border);\n  transition-duration: var(--duration);\n  transition-property: background-color, box-shadow;\n  transition-timing-function: var(--easing);\n  border: 0;\n  border-radius: 10px;\n  outline: 0;\n  padding: 10px 2em 10px 2.2em;\n  display: block;\n}\n\n.search input[type="search"]::-ms-input-placeholder {\n  color: inherit;\n  opacity: .6;\n}\n\n.search input[type="search"]::placeholder {\n  color: inherit;\n  opacity: .6;\n}\n\n.search input[type="search"], .search input[type="search"]::-webkit-search-decoration, .search input[type="search"]::-webkit-search-cancel-button, .search input[type="search"]::-webkit-search-results-button, .search input[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance: none;\n  -ms-appearance: none;\n  appearance: none;\n}\n\n.search input[type="search"]:focus {\n  background-color: rgb(var(--em-rgb-input));\n  box-shadow: inset 0 0 0 1px rgb(var(--em-rgb-accent)), 0 1px 3px rgba(65, 69, 73, .2);\n}\n\n.search .icon {\n  z-index: 1;\n  color: rgba(var(--em-rgb-color), .7);\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.search .loupe {\n  pointer-events: none;\n  left: .7em;\n}\n\n.search .delete {\n  right: .7em;\n}\n\nsvg {\n  fill: currentColor;\n  width: 1em;\n  height: 1em;\n}\n\nbutton {\n  -webkit-appearance: none;\n  -ms-appearance: none;\n  appearance: none;\n  cursor: pointer;\n  color: currentColor;\n  background-color: rgba(0, 0, 0, 0);\n  border: 0;\n}\n\n#nav {\n  z-index: 2;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-right: var(--sidebar-width);\n  position: relative;\n}\n\n#nav button {\n  color: var(--color-b);\n  transition: color var(--duration) var(--easing);\n}\n\n#nav button:hover {\n  color: var(--color-a);\n}\n\n#nav svg, #nav img {\n  width: var(--category-icon-size);\n  height: var(--category-icon-size);\n}\n\n#nav[dir="rtl"] .bar {\n  left: auto;\n  right: 0;\n}\n\n#nav .bar {\n  width: 100%;\n  height: 3px;\n  background-color: rgb(var(--em-rgb-accent));\n  transition: transform var(--duration) var(--easing);\n  border-radius: 3px 3px 0 0;\n  position: absolute;\n  bottom: -12px;\n  left: 0;\n}\n\n#nav button[aria-selected] {\n  color: rgb(var(--em-rgb-accent));\n}\n\n#preview {\n  z-index: 2;\n  padding: calc(var(--padding)  + 4px) var(--padding);\n  padding-right: var(--sidebar-width);\n  position: relative;\n}\n\n#preview .preview-placeholder {\n  font-size: var(--preview-placeholder-size);\n}\n\n#preview .preview-title {\n  font-size: var(--preview-title-size);\n}\n\n#preview .preview-subtitle {\n  font-size: var(--preview-subtitle-size);\n}\n\n#nav:before, #preview:before {\n  content: "";\n  height: 2px;\n  position: absolute;\n  left: 0;\n  right: 0;\n}\n\n#nav[data-position="top"]:before, #preview[data-position="top"]:before {\n  background: linear-gradient(to bottom, var(--em-color-border), transparent);\n  top: 100%;\n}\n\n#nav[data-position="bottom"]:before, #preview[data-position="bottom"]:before {\n  background: linear-gradient(to top, var(--em-color-border), transparent);\n  bottom: 100%;\n}\n\n.category:last-child {\n  min-height: calc(100% + 1px);\n}\n\n.category button {\n  font-family: -apple-system, BlinkMacSystemFont, Helvetica Neue, sans-serif;\n  position: relative;\n}\n\n.category button > * {\n  position: relative;\n}\n\n.category button .background {\n  opacity: 0;\n  background-color: var(--em-color-border);\n  transition: opacity var(--duration-fast) var(--easing) var(--duration-instant);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.category button:hover .background {\n  transition-duration: var(--duration-instant);\n  transition-delay: 0s;\n}\n\n.category button[aria-selected] .background {\n  opacity: 1;\n}\n\n.category button[data-keyboard] .background {\n  transition: none;\n}\n\n.row {\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.skin-tone-button {\n  border: 1px solid rgba(0, 0, 0, 0);\n  border-radius: 100%;\n}\n\n.skin-tone-button:hover {\n  border-color: var(--em-color-border);\n}\n\n.skin-tone-button:active .skin-tone {\n  transform: scale(.85) !important;\n}\n\n.skin-tone-button .skin-tone {\n  transition: transform var(--duration) var(--easing);\n}\n\n.skin-tone-button[aria-selected] {\n  background-color: var(--em-color-border);\n  border-top-color: rgba(0, 0, 0, .05);\n  border-bottom-color: rgba(0, 0, 0, 0);\n  border-left-width: 0;\n  border-right-width: 0;\n}\n\n.skin-tone-button[aria-selected] .skin-tone {\n  transform: scale(.9);\n}\n\n.menu {\n  z-index: 2;\n  white-space: nowrap;\n  border: 1px solid var(--em-color-border);\n  background-color: rgba(var(--em-rgb-background), .9);\n  -webkit-backdrop-filter: blur(4px);\n  backdrop-filter: blur(4px);\n  transition-property: opacity, transform;\n  transition-duration: var(--duration);\n  transition-timing-function: var(--easing);\n  border-radius: 10px;\n  padding: 4px;\n  position: absolute;\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, .05);\n}\n\n.menu.hidden {\n  opacity: 0;\n}\n\n.menu[data-position="bottom"] {\n  transform-origin: 100% 100%;\n}\n\n.menu[data-position="bottom"].hidden {\n  transform: scale(.9)rotate(-3deg)translateY(5%);\n}\n\n.menu[data-position="top"] {\n  transform-origin: 100% 0;\n}\n\n.menu[data-position="top"].hidden {\n  transform: scale(.9)rotate(3deg)translateY(-5%);\n}\n\n.menu input[type="radio"] {\n  clip: rect(0 0 0 0);\n  width: 1px;\n  height: 1px;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  overflow: hidden;\n}\n\n.menu input[type="radio"]:checked + .option {\n  box-shadow: 0 0 0 2px rgb(var(--em-rgb-accent));\n}\n\n.option {\n  width: 100%;\n  border-radius: 6px;\n  padding: 4px 6px;\n}\n\n.option:hover {\n  color: #fff;\n  background-color: rgb(var(--em-rgb-accent));\n}\n\n.skin-tone {\n  width: 16px;\n  height: 16px;\n  border-radius: 100%;\n  display: inline-block;\n  position: relative;\n  overflow: hidden;\n}\n\n.skin-tone:after {\n  content: "";\n  mix-blend-mode: overlay;\n  background: linear-gradient(rgba(255, 255, 255, .2), rgba(0, 0, 0, 0));\n  border: 1px solid rgba(0, 0, 0, .8);\n  border-radius: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  box-shadow: inset 0 -2px 3px #000, inset 0 1px 2px #fff;\n}\n\n.skin-tone-1 {\n  background-color: #ffc93a;\n}\n\n.skin-tone-2 {\n  background-color: #ffdab7;\n}\n\n.skin-tone-3 {\n  background-color: #e7b98f;\n}\n\n.skin-tone-4 {\n  background-color: #c88c61;\n}\n\n.skin-tone-5 {\n  background-color: #a46134;\n}\n\n.skin-tone-6 {\n  background-color: #5d4437;\n}\n\n[data-index] {\n  justify-content: space-between;\n}\n\n[data-emoji-set="twitter"] .skin-tone:after {\n  box-shadow: none;\n  border-color: rgba(0, 0, 0, .5);\n}\n\n[data-emoji-set="twitter"] .skin-tone-1 {\n  background-color: #fade72;\n}\n\n[data-emoji-set="twitter"] .skin-tone-2 {\n  background-color: #f3dfd0;\n}\n\n[data-emoji-set="twitter"] .skin-tone-3 {\n  background-color: #eed3a8;\n}\n\n[data-emoji-set="twitter"] .skin-tone-4 {\n  background-color: #cfad8d;\n}\n\n[data-emoji-set="twitter"] .skin-tone-5 {\n  background-color: #a8805d;\n}\n\n[data-emoji-set="twitter"] .skin-tone-6 {\n  background-color: #765542;\n}\n\n[data-emoji-set="google"] .skin-tone:after {\n  box-shadow: inset 0 0 2px 2px rgba(0, 0, 0, .4);\n}\n\n[data-emoji-set="google"] .skin-tone-1 {\n  background-color: #f5c748;\n}\n\n[data-emoji-set="google"] .skin-tone-2 {\n  background-color: #f1d5aa;\n}\n\n[data-emoji-set="google"] .skin-tone-3 {\n  background-color: #d4b48d;\n}\n\n[data-emoji-set="google"] .skin-tone-4 {\n  background-color: #aa876b;\n}\n\n[data-emoji-set="google"] .skin-tone-5 {\n  background-color: #916544;\n}\n\n[data-emoji-set="google"] .skin-tone-6 {\n  background-color: #61493f;\n}\n\n[data-emoji-set="facebook"] .skin-tone:after {\n  border-color: rgba(0, 0, 0, .4);\n  box-shadow: inset 0 -2px 3px #000, inset 0 1px 4px #fff;\n}\n\n[data-emoji-set="facebook"] .skin-tone-1 {\n  background-color: #f5c748;\n}\n\n[data-emoji-set="facebook"] .skin-tone-2 {\n  background-color: #f1d5aa;\n}\n\n[data-emoji-set="facebook"] .skin-tone-3 {\n  background-color: #d4b48d;\n}\n\n[data-emoji-set="facebook"] .skin-tone-4 {\n  background-color: #aa876b;\n}\n\n[data-emoji-set="facebook"] .skin-tone-5 {\n  background-color: #916544;\n}\n\n[data-emoji-set="facebook"] .skin-tone-6 {\n  background-color: #61493f;\n}\n\n';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dzeg5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _upload = require("./upload");
parcelHelpers.exportAll(_upload, exports);
var _createClientFile = require("./upload/create-client-file");
parcelHelpers.exportAll(_createClientFile, exports);
var _resize = require("./resize");
parcelHelpers.exportAll(_resize, exports);
var _client = require("./client");
parcelHelpers.exportAll(_client, exports);

},{"./upload":"geF8b","./upload/create-client-file":"2JsdW","./resize":"e1EkW","./client":"bG7As","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"geF8b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUploadPolicyFromClientFileInfo", ()=>getUploadPolicyFromClientFileInfo);
parcelHelpers.export(exports, "fetchUploadPolicy", ()=>fetchUploadPolicy);
/**
 * This method can be used on its own for the entire upload process which
 * includes getting the upload policy and then sending the file to the
 * cloud servers on Amazon S3.
 */ parcelHelpers.export(exports, "uploadFile", ()=>uploadFile);
var _constants = require("./constants");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _createClientFile = require("./create-client-file");
parcelHelpers.exportAll(_createClientFile, exports);
var _resize = require("../resize");
parcelHelpers.exportAll(_resize, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function getUploadPolicyFromClientFileInfo({ client, clientFileInfo }) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            const response = yield client.post((0, _constants.UPLOAD_PATH), {
                clientFileInfo
            });
            return response;
        } catch (e) {
            return {
                status: "error",
                message: `Error during getUploadPolicyFromClientFileInfo. ${e}`
            };
        }
    });
}
function fetchUploadPolicy({ client, file }) {
    return __awaiter(this, void 0, void 0, function*() {
        try {
            const clientFile = yield (0, _createClientFile.createClientFile)(file);
            // const apiGetPolicyUrl = `${client.apiOrigin}${UPLOAD_PATH}`
            const { // disable to allow eating a property
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            objectUrl: $1, // disable to allow eating a property
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            file: $2 } = clientFile, clientFileInfo = __rest(clientFile, [
                "objectUrl",
                "file"
            ]);
            return yield getUploadPolicyFromClientFileInfo({
                client,
                clientFileInfo
            });
        } catch (e) {
            return {
                status: "error",
                message: `Error during getUploadPolicy. ${e}`
            };
        }
    });
}
function uploadFile({ client, file, onBeforeFetch = ()=>{
/* noop */ }, onBeforeSend = ()=>{
/* noop */ }, onProgress = ()=>{
/* noop */ }, onError = ()=>{
/* noop */ }, onSuccess = ()=>{
/* noop */ }, onFinish = ()=>{
/* noop */ }, onUpdate = ()=>{
/* noop */ } }) {
    return __awaiter(this, void 0, void 0, function*() {
        const clientFile = yield (0, _createClientFile.createClientFile)(file);
        const beforeFetchEvent = {
            type: "beforeFetch",
            file,
            clientFile
        };
        onBeforeFetch(beforeFetchEvent);
        onUpdate(beforeFetchEvent);
        const uploadPolicyResponse = yield fetchUploadPolicy({
            client,
            file
        });
        if (uploadPolicyResponse.status === "error") {
            const errorEvent = {
                type: "error",
                file,
                clientFile,
                message: uploadPolicyResponse.message
            };
            onError(errorEvent);
            onFinish(errorEvent);
            onUpdate(errorEvent);
            return errorEvent;
        }
        const { formFields, apiUrl: uploadUrl, fileUrl } = uploadPolicyResponse.data;
        const hostedFile = clientFile.type === "image" ? {
            type: "image",
            url: fileUrl,
            width: clientFile.width,
            height: clientFile.height
        } : {
            type: "generic",
            url: fileUrl
        };
        /**
         * Execute `onStart` callback
         */ const beforeSendEvent = {
            type: "beforeSend",
            file,
            clientFile,
            hostedFile
        };
        onBeforeSend(beforeSendEvent);
        // upload file to Amazon
        const form = new FormData();
        for (const [key, value] of Object.entries(formFields))form.append(key, value);
        form.append("content-type", file.type);
        form.append("file", clientFile.file);
        /**
         * Post to S3 with a callback for returning progress
         */ const uploadResponse = yield (0, _axiosDefault.default).post(uploadUrl, form, {
            onUploadProgress (e) {
                const progressEvent = {
                    type: "progress",
                    file,
                    clientFile,
                    hostedFile,
                    sentBytes: e.loaded,
                    totalBytes: e.total
                };
                onProgress(progressEvent);
                onUpdate(progressEvent);
            }
        });
        if (uploadResponse.status !== 204) {
            const errorEvent = {
                type: "error",
                file,
                clientFile,
                message: `Error during upload ${JSON.stringify(uploadResponse.data, null, 2)}`
            };
            onError(errorEvent);
            onFinish(errorEvent);
            onUpdate(errorEvent);
            return errorEvent;
        }
        const successEvent = {
            type: "success",
            file,
            clientFile,
            hostedFile
        };
        onSuccess(successEvent);
        onFinish(successEvent);
        onUpdate(successEvent);
        return successEvent;
    });
}

},{"./constants":"3DSkI","axios":"jo6P5","./create-client-file":"2JsdW","../resize":"e1EkW","./types":"bH6zD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3DSkI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_ORIGIN_URL", ()=>DEFAULT_ORIGIN_URL);
parcelHelpers.export(exports, "UPLOAD_PATH", ()=>UPLOAD_PATH);
const DEFAULT_ORIGIN_URL = "https://api.portive.com";
const UPLOAD_PATH = "/api/v1/upload";
/**
 * These just protect us from stupid mistakes
 */ if (DEFAULT_ORIGIN_URL.endsWith("/")) throw new Error(`DEFAULT_ROGIN_URL should not end with a '/'`);
if (!UPLOAD_PATH.startsWith("/")) throw new Error("UPLOAD_PATH should start with a '/'");

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jo6P5":[function(require,module,exports) {
module.exports = require("9f37cef8b0e13afc");

},{"9f37cef8b0e13afc":"63MyY"}],"63MyY":[function(require,module,exports) {
"use strict";
var utils = require("1137fef34918bf53");
var bind = require("ce63a8247a300202");
var Axios = require("c14c66f4c3ec48a2");
var mergeConfig = require("345f9ec0ee8efc80");
var defaults = require("27bdb15d131780c5");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Expose Cancel & CancelToken
axios.CanceledError = require("99821b4fc0ba2f69");
axios.CancelToken = require("853fec7db7d524b4");
axios.isCancel = require("322a636c3e2325e1");
axios.VERSION = require("3d6b2db6c802d85d").version;
axios.toFormData = require("ef33bb7abb9fa67d");
// Expose AxiosError class
axios.AxiosError = require("a5206ee4d751b44");
// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require("75c7c70e55d88256");
// Expose isAxiosError
axios.isAxiosError = require("543a1da09311ae9b");
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"1137fef34918bf53":"5By4s","ce63a8247a300202":"haRQb","c14c66f4c3ec48a2":"cpqD8","345f9ec0ee8efc80":"b85oP","27bdb15d131780c5":"hXfHM","99821b4fc0ba2f69":"9PwCG","853fec7db7d524b4":"45wzn","322a636c3e2325e1":"a0VmF","3d6b2db6c802d85d":"h29L9","ef33bb7abb9fa67d":"ajoez","a5206ee4d751b44":"3u8Tl","75c7c70e55d88256":"dyQ8N","543a1da09311ae9b":"eyiLq"}],"5By4s":[function(require,module,exports) {
"use strict";
var bind = require("a7c7b4094caa86ac");
// utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
// eslint-disable-next-line func-names
var kindOf = function(cache) {
    // eslint-disable-next-line func-names
    return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    };
}(Object.create(null));
function kindOfTest(type) {
    type = type.toLowerCase();
    return function isKindOf(thing) {
        return kindOf(thing) === type;
    };
}
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return Array.isArray(val);
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === "undefined";
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ var isArrayBuffer = kindOfTest("ArrayBuffer");
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && isArrayBuffer(val.buffer);
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === "string";
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === "number";
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === "object";
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (kindOf(val) !== "object") return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ var isDate = kindOfTest("Date");
/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ var isFile = kindOfTest("File");
/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ var isBlob = kindOfTest("Blob");
/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ var isFileList = kindOfTest("FileList");
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === "[object Function]";
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(thing) {
    var pattern = "[object FormData]";
    return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
}
/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ var isURLSearchParams = kindOfTest("URLSearchParams");
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {};
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({}, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);
    return content;
}
/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */ function inherits(constructor, superConstructor, props, descriptors) {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    props && Object.assign(constructor.prototype, props);
}
/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */ function toFlatObject(sourceObj, destObj, filter) {
    var props;
    var i;
    var prop;
    var merged = {};
    destObj = destObj || {};
    do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while(i-- > 0){
            prop = props[i];
            if (!merged[prop]) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
            }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
    }while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
}
/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */ function endsWith(str, searchString, position) {
    str = String(str);
    if (position === undefined || position > str.length) position = str.length;
    position -= searchString.length;
    var lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
}
/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */ function toArray(thing) {
    if (!thing) return null;
    var i = thing.length;
    if (isUndefined(i)) return null;
    var arr = new Array(i);
    while(i-- > 0)arr[i] = thing[i];
    return arr;
}
// eslint-disable-next-line func-names
var isTypedArray = function(TypedArray) {
    // eslint-disable-next-line func-names
    return function(thing) {
        return TypedArray && thing instanceof TypedArray;
    };
}(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM,
    inherits: inherits,
    toFlatObject: toFlatObject,
    kindOf: kindOf,
    kindOfTest: kindOfTest,
    endsWith: endsWith,
    toArray: toArray,
    isTypedArray: isTypedArray,
    isFileList: isFileList
};

},{"a7c7b4094caa86ac":"haRQb"}],"haRQb":[function(require,module,exports) {
"use strict";
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"cpqD8":[function(require,module,exports) {
"use strict";
var utils = require("2cd2d0baba832579");
var buildURL = require("945ebba9256ed84f");
var InterceptorManager = require("fc2d71ae77ba798e");
var dispatchRequest = require("77b4f57f4d663a9b");
var mergeConfig = require("5db81a4f62f8927d");
var buildFullPath = require("bba783c05a4f93f7");
var validator = require("d0f5147a00cee7c5");
var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
    } else config = configOrUrl || {};
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = "get";
    var transitional = config.transitional;
    if (transitional !== undefined) validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
        var chain = [
            dispatchRequest,
            undefined
        ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while(chain.length)promise = promise.then(chain.shift(), chain.shift());
        return promise;
    }
    var newConfig = config;
    while(requestInterceptorChain.length){
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
            newConfig = onFulfilled(newConfig);
        } catch (error) {
            onRejected(error);
            break;
        }
    }
    try {
        promise = dispatchRequest(newConfig);
    } catch (error) {
        return Promise.reject(error);
    }
    while(responseInterceptorChain.length)promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    var fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
};
// Provide aliases for supported request methods
utils.forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: (config || {}).data
        }));
    };
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
            return this.request(mergeConfig(config || {}, {
                method: method,
                headers: isForm ? {
                    "Content-Type": "multipart/form-data"
                } : {},
                url: url,
                data: data
            }));
        };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
module.exports = Axios;

},{"2cd2d0baba832579":"5By4s","945ebba9256ed84f":"3bwC2","fc2d71ae77ba798e":"1VRIM","77b4f57f4d663a9b":"6sjJ6","5db81a4f62f8927d":"b85oP","bba783c05a4f93f7":"1I5TW","d0f5147a00cee7c5":"9vgkY"}],"3bwC2":[function(require,module,exports) {
"use strict";
var utils = require("d198994ea2a45305");
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") return;
            if (utils.isArray(val)) key = key + "[]";
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + "=" + encode(v));
            });
        });
        serializedParams = parts.join("&");
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
};

},{"d198994ea2a45305":"5By4s"}],"1VRIM":[function(require,module,exports) {
"use strict";
var utils = require("982be9ba543c1801");
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"982be9ba543c1801":"5By4s"}],"6sjJ6":[function(require,module,exports) {
"use strict";
var utils = require("dccb83262660ba2a");
var transformData = require("670a836c9c5a1abe");
var isCancel = require("9b938a75c8452b2f");
var defaults = require("293260d2186f65fb");
var CanceledError = require("babe605ae6871369");
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
    if (config.signal && config.signal.aborted) throw new CanceledError();
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {};
    // Transform request data
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach([
        "delete",
        "get",
        "head",
        "post",
        "put",
        "patch",
        "common"
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"dccb83262660ba2a":"5By4s","670a836c9c5a1abe":"eRqJY","9b938a75c8452b2f":"a0VmF","293260d2186f65fb":"hXfHM","babe605ae6871369":"9PwCG"}],"eRqJY":[function(require,module,exports) {
"use strict";
var utils = require("506225f7f22ee5b3");
var defaults = require("933dc4966aff4cbe");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    var context = this || defaults;
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
    });
    return data;
};

},{"506225f7f22ee5b3":"5By4s","933dc4966aff4cbe":"hXfHM"}],"hXfHM":[function(require,module,exports) {
var process = require("8191483f14ddb73c");
"use strict";
var utils = require("e81e3dbd1959aa01");
var normalizeHeaderName = require("753007ee6e6399c7");
var AxiosError = require("e9c38e32fac9e03e");
var transitionalDefaults = require("5a1b45724cbabfe9");
var toFormData = require("ce7605268fbf7e42");
var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") // For browsers use XHR adapter
    adapter = require("96a55d646cd53040");
    else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") // For node use HTTP adapter
    adapter = require("3d0364fd0ce54db5");
    return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
    } catch (e) {
        if (e.name !== "SyntaxError") throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
    transitional: transitionalDefaults,
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, "Accept");
            normalizeHeaderName(headers, "Content-Type");
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                return data.toString();
            }
            var isObjectPayload = utils.isObject(data);
            var contentType = headers && headers["Content-Type"];
            var isFileList;
            if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
                var _FormData = this.env && this.env.FormData;
                return toFormData(isFileList ? {
                    "files[]": data
                } : data, _FormData && new _FormData());
            } else if (isObjectPayload || contentType === "application/json") {
                setContentTypeIfUnset(headers, "application/json");
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            var transitional = this.transitional || defaults.transitional;
            var silentJSONParsing = transitional && transitional.silentJSONParsing;
            var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
            if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                return JSON.parse(data);
            } catch (e) {
                if (strictJSONParsing) {
                    if (e.name === "SyntaxError") throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
                    throw e;
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
        FormData: require("2c6a31d8df55e92a")
    },
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            "Accept": "application/json, text/plain, */*"
        }
    }
};
utils.forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"8191483f14ddb73c":"d5jf4","e81e3dbd1959aa01":"5By4s","753007ee6e6399c7":"adBZo","e9c38e32fac9e03e":"3u8Tl","5a1b45724cbabfe9":"lM32f","ce7605268fbf7e42":"ajoez","96a55d646cd53040":"ldm57","3d0364fd0ce54db5":"ldm57","2c6a31d8df55e92a":"aFlee"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"adBZo":[function(require,module,exports) {
"use strict";
var utils = require("5f8afca0889a63e1");
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"5f8afca0889a63e1":"5By4s"}],"3u8Tl":[function(require,module,exports) {
"use strict";
var utils = require("90d7c965e732ce33");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ function AxiosError(message, code, config, request, response) {
    Error.call(this);
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
}
utils.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED"
].forEach(function(code) {
    descriptors[code] = {
        value: code
    };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", {
    value: true
});
// eslint-disable-next-line func-names
AxiosError.from = function(error, code, config, request, response, customProps) {
    var axiosError = Object.create(prototype);
    utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
    });
    AxiosError.call(axiosError, error.message, code, config, request, response);
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
};
module.exports = AxiosError;

},{"90d7c965e732ce33":"5By4s"}],"lM32f":[function(require,module,exports) {
"use strict";
module.exports = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
};

},{}],"ajoez":[function(require,module,exports) {
var Buffer = require("adfd9b103875c2dd").Buffer;
"use strict";
var utils = require("3a99ebcd36a8733f");
/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/ function toFormData(obj, formData) {
    // eslint-disable-next-line no-param-reassign
    formData = formData || new FormData();
    var stack = [];
    function convertValue(value) {
        if (value === null) return "";
        if (utils.isDate(value)) return value.toISOString();
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) return typeof Blob === "function" ? new Blob([
            value
        ]) : Buffer.from(value);
        return value;
    }
    function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
            if (stack.indexOf(data) !== -1) throw Error("Circular reference detected in " + parentKey);
            stack.push(data);
            utils.forEach(data, function each(value, key) {
                if (utils.isUndefined(value)) return;
                var fullKey = parentKey ? parentKey + "." + key : key;
                var arr;
                if (value && !parentKey && typeof value === "object") {
                    if (utils.endsWith(key, "{}")) // eslint-disable-next-line no-param-reassign
                    value = JSON.stringify(value);
                    else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                        // eslint-disable-next-line func-names
                        arr.forEach(function(el) {
                            !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                        });
                        return;
                    }
                }
                build(value, fullKey);
            });
            stack.pop();
        } else formData.append(parentKey, convertValue(data));
    }
    build(obj);
    return formData;
}
module.exports = toFormData;

},{"adfd9b103875c2dd":"fCgem","3a99ebcd36a8733f":"5By4s"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("9c62938f1dccc73c");
const ieee754 = require("aceacb6a4531a9d2");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"9c62938f1dccc73c":"eIiSV","aceacb6a4531a9d2":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"ldm57":[function(require,module,exports) {
"use strict";
var utils = require("2bb8b5f6db10dd6d");
var settle = require("a7b983c12bb9f77f");
var cookies = require("19bdb320f45f036e");
var buildURL = require("568f70ee55491398");
var buildFullPath = require("a1fd5a6807469b6d");
var parseHeaders = require("f197d20bdfdcd5a4");
var isURLSameOrigin = require("32737c301de74bf5");
var transitionalDefaults = require("acf3ae0da9073396");
var AxiosError = require("5cdb5bed725b4b9d");
var CanceledError = require("4bb5ca1319af05c5");
var parseProtocol = require("edff7382320539d7");
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
            if (config.cancelToken) config.cancelToken.unsubscribe(onCanceled);
            if (config.signal) config.signal.removeEventListener("abort", onCanceled);
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) delete requestHeaders["Content-Type"]; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            var transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ("setRequestHeader" in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== "json") request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = function(cancel) {
                if (!request) return;
                reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
        if (!requestData) requestData = null;
        var protocol = parseProtocol(fullPath);
        if (protocol && [
            "http",
            "https",
            "file"
        ].indexOf(protocol) === -1) {
            reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
            return;
        }
        // Send the request
        request.send(requestData);
    });
};

},{"2bb8b5f6db10dd6d":"5By4s","a7b983c12bb9f77f":"dD9aC","19bdb320f45f036e":"4WJjt","568f70ee55491398":"3bwC2","a1fd5a6807469b6d":"1I5TW","f197d20bdfdcd5a4":"kqDd5","32737c301de74bf5":"lxXtv","acf3ae0da9073396":"lM32f","5cdb5bed725b4b9d":"3u8Tl","4bb5ca1319af05c5":"9PwCG","edff7382320539d7":"7NfWU"}],"dD9aC":[function(require,module,exports) {
"use strict";
var AxiosError = require("99b767d0f87e1d33");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(new AxiosError("Request failed with status code " + response.status, [
        AxiosError.ERR_BAD_REQUEST,
        AxiosError.ERR_BAD_RESPONSE
    ][Math.floor(response.status / 100) - 4], response.config, response.request, response));
};

},{"99b767d0f87e1d33":"3u8Tl"}],"4WJjt":[function(require,module,exports) {
"use strict";
var utils = require("c987331427b8b2ad");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push("path=" + path);
            if (utils.isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();

},{"c987331427b8b2ad":"5By4s"}],"1I5TW":[function(require,module,exports) {
"use strict";
var isAbsoluteURL = require("5ff0e8c05aa13380");
var combineURLs = require("e1ac36eef7d02fa4");
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"5ff0e8c05aa13380":"jD6NM","e1ac36eef7d02fa4":"brOWK"}],"jD6NM":[function(require,module,exports) {
"use strict";
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

},{}],"brOWK":[function(require,module,exports) {
"use strict";
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};

},{}],"kqDd5":[function(require,module,exports) {
"use strict";
var utils = require("5802dc5113a634d0");
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === "set-cookie") parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
    });
    return parsed;
};

},{"5802dc5113a634d0":"5By4s"}],"lxXtv":[function(require,module,exports) {
"use strict";
var utils = require("c8f79893fd676b4c");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();

},{"c8f79893fd676b4c":"5By4s"}],"9PwCG":[function(require,module,exports) {
"use strict";
var AxiosError = require("d49629127e21c372");
var utils = require("a3a18563c2683e33");
/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function CanceledError(message) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
    this.name = "CanceledError";
}
utils.inherits(CanceledError, AxiosError, {
    __CANCEL__: true
});
module.exports = CanceledError;

},{"d49629127e21c372":"3u8Tl","a3a18563c2683e33":"5By4s"}],"7NfWU":[function(require,module,exports) {
"use strict";
module.exports = function parseProtocol(url) {
    var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || "";
};

},{}],"aFlee":[function(require,module,exports) {
// eslint-disable-next-line strict
module.exports = null;

},{}],"a0VmF":[function(require,module,exports) {
"use strict";
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"b85oP":[function(require,module,exports) {
"use strict";
var utils = require("99adbff39af8f677");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({}, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(prop) {
        if (prop in config2) return getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) return getMergedValue(undefined, config1[prop]);
    }
    var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
    };
    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
};

},{"99adbff39af8f677":"5By4s"}],"9vgkY":[function(require,module,exports) {
"use strict";
var VERSION = require("e9aa819e853e8a05").version;
var AxiosError = require("d650eba95d68de74");
var validators = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach(function(type, i) {
    validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */ validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
        if (validator === false) throw new AxiosError(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError.ERR_DEPRECATED);
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
    var keys = Object.keys(options);
    var i = keys.length;
    while(i-- > 0){
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
            var value = options[opt];
            var result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
            continue;
        }
        if (allowUnknown !== true) throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
    }
}
module.exports = {
    assertOptions: assertOptions,
    validators: validators
};

},{"e9aa819e853e8a05":"h29L9","d650eba95d68de74":"3u8Tl"}],"h29L9":[function(require,module,exports) {
module.exports = {
    "version": "0.27.2"
};

},{}],"45wzn":[function(require,module,exports) {
"use strict";
var CanceledError = require("b6a43aee12b81881");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== "function") throw new TypeError("executor must be a function.");
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    // eslint-disable-next-line func-names
    this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for(i = 0; i < l; i++)token._listeners[i](cancel);
        token._listeners = null;
    });
    // eslint-disable-next-line func-names
    this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
            token.subscribe(resolve);
            _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
            token.unsubscribe(_resolve);
        };
        return promise;
    };
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Subscribe to the cancel signal
 */ CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
        listener(this.reason);
        return;
    }
    if (this._listeners) this._listeners.push(listener);
    else this._listeners = [
        listener
    ];
};
/**
 * Unsubscribe from the cancel signal
 */ CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) return;
    var index = this._listeners.indexOf(listener);
    if (index !== -1) this._listeners.splice(index, 1);
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"b6a43aee12b81881":"9PwCG"}],"dyQ8N":[function(require,module,exports) {
"use strict";
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"eyiLq":[function(require,module,exports) {
"use strict";
var utils = require("231ee4a1ecb1dc47");
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return utils.isObject(payload) && payload.isAxiosError === true;
};

},{"231ee4a1ecb1dc47":"5By4s"}],"2JsdW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns true if the passed in `File` object is a supported image type.
 * A supported image is able to be resized dynamically on the server.
 */ parcelHelpers.export(exports, "isHostedImage", ()=>isHostedImage);
/**
 * Takes a `File` object and returns a `ClientFile` object with some useful
 * properties. The values are cached in the WeakMap `CLIENT_FILE_MAP` because
 * of the expensive `getImageSize` function.
 *
 * - type: `image` or `generic`
 * - size: [width, height]
 * - objectUrl: a URL that can be used as the image src before the image is uploaded
 */ parcelHelpers.export(exports, "createClientFile", ()=>createClientFile);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * Array of supported image content types.
 */ const SUPPORTED_IMAGE_TYPES = [
    "image/jpg",
    "image/jpeg",
    "image/png",
    "image/gif",
    "image/webp"
];
function isHostedImage(file) {
    return SUPPORTED_IMAGE_TYPES.includes(file.type);
}
/**
 * Takes a `url` to an image and returns its size as a tuple `[width, height]`.
 *
 * It works by creating an `Image` object, assigning the `url` to its `src`
 * and waiting for it to load then finding its `naturalWidth` and `naturalHeight`.
 */ function getImageSize(url) {
    return __awaiter(this, void 0, void 0, function*() {
        return new Promise((resolve)=>{
            const image = new Image();
            image.addEventListener("load", function() {
                resolve({
                    width: this.naturalWidth,
                    height: this.naturalHeight
                });
            });
            image.src = url;
        });
    });
}
/**
 * Keeps a WeakMap of `File` to `ClientFile` mappings. This lets a developer
 * call `createClientFile` before the `uploadFile` method to get important
 * information about the file. The operation to the get the image width/height
 * is costly so we use this WeakMap to memoize the results.
 */ const CLIENT_FILE_MAP = new WeakMap();
function createClientFile(file) {
    return __awaiter(this, void 0, void 0, function*() {
        if (!(file instanceof File)) return file;
        const cachedClientFile = CLIENT_FILE_MAP.get(file);
        if (cachedClientFile !== undefined) return cachedClientFile;
        const objectUrl = URL.createObjectURL(file);
        if (isHostedImage(file)) {
            const imageSize = yield getImageSize(objectUrl);
            const clientImageFile = {
                type: "image",
                filename: file.name,
                contentType: file.type,
                bytes: file.size,
                width: imageSize.width,
                height: imageSize.height,
                file,
                objectUrl
            };
            CLIENT_FILE_MAP.set(file, clientImageFile);
            return clientImageFile;
        } else {
            const clientGenericFile = {
                type: "generic",
                filename: file.name,
                contentType: file.type,
                bytes: file.size,
                file,
                objectUrl
            };
            CLIENT_FILE_MAP.set(file, clientGenericFile);
            return clientGenericFile;
        }
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e1EkW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeIn", ()=>resizeIn);
parcelHelpers.export(exports, "resizeInWidth", ()=>resizeInWidth);
parcelHelpers.export(exports, "resizeInHeight", ()=>resizeInHeight);
function resizeIn(size, bounds) {
    if (size.width <= 0) throw new Error(`width must be greater than 0`);
    if (size.height <= 0) throw new Error(`height must be greater than 0`);
    if (bounds.width <= 0) throw new Error(`bounds width must be greater than 0`);
    if (bounds.height <= 0) throw new Error(`bounds height must be greater than 0`);
    // if size is smaller than bounds leave it alone
    if (size.width < bounds.width && size.height < bounds.height) return size;
    const aspect = size.width / size.height;
    const boundsAspect = bounds.width / bounds.height;
    if (aspect > boundsAspect) // src is wider than inside so constrain by width
    return {
        width: bounds.width,
        height: Math.max(1, Math.round(bounds.width / aspect))
    };
    else // src is taller than inside so constrain by height
    return {
        width: Math.max(1, Math.round(bounds.height * aspect)),
        height: bounds.height
    };
}
const BIG_DIMENSION = 100000;
const resizeInWidth = (size, width)=>resizeIn(size, {
        width,
        height: BIG_DIMENSION
    });
const resizeInHeight = (size, height)=>resizeIn(size, {
        width: BIG_DIMENSION,
        height
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bH6zD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bG7As":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a `Client` object and return it.
 */ parcelHelpers.export(exports, "createClient", ()=>createClient);
/**
 * Create a `Client` object that we pass to the API functions.
 *
 * We enforce the creation of a `Client` object for a few reasons:
 *
 * 1. It helps us not have to deal with `authTokenable` separately for every
 *    API function call.
 * 2. It makes it easy for any components to support any initialization changes
 *    by just initializing with `ClienOptions`. For example, if we wanted to
 *    add a `path` property back in the future, we just have to implement at
 *    one place.
 * 3. It's self documenting on what you should probably accept as part of your
 *    initialization if you want to fully support all the options. For example,
 *    we can see here that `apiOrigin` is an option to support. If it's
 *    part of multiple function signature like in `upload`, then it may not
 *    be so easy to remember to pass all the values through at each function
 *    invocation location.
 */ parcelHelpers.export(exports, "Client", ()=>Client);
var _constants = require("../upload/constants");
var _resolvableValue = require("resolvable-value");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function createClient(options) {
    return new Client(options);
}
class Client {
    constructor({ apiKey, authToken, apiOrigin = (0, _constants.DEFAULT_ORIGIN_URL) }){
        if (apiKey == null && authToken == null) throw new Error(`apiKey or authToken must be defined but neither are defined`);
        if (apiOrigin.endsWith("/")) throw new Error("apiOrigin should not end with a '/'");
        if (!apiOrigin.startsWith("http")) throw new Error(`Expected apiOrigin to start with http`);
        // this.authTokenable = authToken
        this.unresolvedApiKey = apiKey;
        this.unresolvedAuthToken = authToken;
        this.apiOrigin = apiOrigin;
    }
    /**
     * Posts at the given path with the `apiKey` or `authToken`.
     */ post(path, data) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!path.startsWith("/")) throw new Error(`Expected path to start with "/" but is ${JSON.stringify(path)}`);
            const url = `${this.apiOrigin}${path}`;
            const post = {
                data
            };
            const authToken = yield this.getAuthToken();
            const apiKey = yield this.getApiKey();
            if (typeof authToken === "string" && typeof apiKey === "string") throw new Error(`Expected one of 'authToken' or 'apiKey' to be defined but both are defined which is ambiguous`);
            else if (typeof authToken === "string") post.authToken = authToken;
            else if (typeof apiKey === "string") post.apiKey = apiKey;
            else throw new Error(`Expected either 'authToken' or 'apiKey' to be defined but neither are defined`);
            const axiosResponse = yield (0, _axiosDefault.default).post(url, post);
            return axiosResponse.data;
        });
    }
    /**
     * Gets the apiKey for the client. If it is a function, it gets the return
     * value of the function. If that returns a promise, it awaits it.
     */ getApiKey() {
        return __awaiter(this, void 0, void 0, function*() {
            return this.unresolvedApiKey ? (0, _resolvableValue.resolve)(this.unresolvedApiKey) : undefined;
        });
    }
    /**
     * Gets the authToken for the client. If it is a function, it gets the return
     * value of the function. If that returns a promise, it awaits it.
     */ getAuthToken() {
        return __awaiter(this, void 0, void 0, function*() {
            return this.unresolvedAuthToken ? (0, _resolvableValue.resolve)(this.unresolvedAuthToken) : undefined;
        });
    }
}

},{"../upload/constants":"3DSkI","resolvable-value":"9x9tW","axios":"jo6P5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9x9tW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolve", ()=>resolve);
function isFunction(value) {
    return typeof value === "function";
}
async function resolve(resolvableValue) {
    /**
     * This doesn't work if we use `typeof resolvableValue === Function` so
     * we need to add the `isFunction` method. See this TypeScript issue
     * below for more information.
     *
     * https://github.com/microsoft/TypeScript/issues/37663#issuecomment-1081610403
     */ const promisableValue = isFunction(resolvableValue) ? resolvableValue() : resolvableValue;
    const value = await promisableValue;
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ifus":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nanoid", ()=>nanoid);
parcelHelpers.export(exports, "customAlphabet", ()=>customAlphabet);
parcelHelpers.export(exports, "customRandom", ()=>customRandom);
parcelHelpers.export(exports, "urlAlphabet", ()=>(0, _indexJs.urlAlphabet));
parcelHelpers.export(exports, "random", ()=>random);
var _indexJs = require("./url-alphabet/index.js");
let random = (bytes)=>crypto.getRandomValues(new Uint8Array(bytes));
let customRandom = (alphabet, defaultSize, getRandom)=>{
    let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
    let step = -~(1.6 * mask * defaultSize / alphabet.length);
    return (size = defaultSize)=>{
        let id = "";
        while(true){
            let bytes = getRandom(step);
            let j = step;
            while(j--){
                id += alphabet[bytes[j] & mask] || "";
                if (id.length === size) return id;
            }
        }
    };
};
let customAlphabet = (alphabet, size = 21)=>customRandom(alphabet, size, random);
let nanoid = (size = 21)=>crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte)=>{
        byte &= 63;
        if (byte < 36) id += byte.toString(36);
        else if (byte < 62) id += (byte - 26).toString(36).toUpperCase();
        else if (byte > 62) id += "-";
        else id += "_";
        return id;
    }, "");

},{"./url-alphabet/index.js":"8jQFj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8jQFj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "urlAlphabet", ()=>urlAlphabet);
let urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"03QgC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HISTORY", ()=>HISTORY);
parcelHelpers.export(exports, "History", ()=>History);
parcelHelpers.export(exports, "HistoryEditor", ()=>HistoryEditor);
parcelHelpers.export(exports, "MERGING", ()=>MERGING);
parcelHelpers.export(exports, "SAVING", ()=>SAVING);
parcelHelpers.export(exports, "withHistory", ()=>withHistory);
var _isPlainObject = require("is-plain-object");
var _slate = require("slate");
var History = {
    /**
   * Check if a value is a `History` object.
   */ isHistory (value) {
        return (0, _isPlainObject.isPlainObject)(value) && Array.isArray(value.redos) && Array.isArray(value.undos) && (value.redos.length === 0 || (0, _slate.Operation).isOperationList(value.redos[0])) && (value.undos.length === 0 || (0, _slate.Operation).isOperationList(value.undos[0]));
    }
};
/**
 * Weakmaps for attaching state to the editor.
 */ var HISTORY = new WeakMap();
var SAVING = new WeakMap();
var MERGING = new WeakMap(); // eslint-disable-next-line no-redeclare
var HistoryEditor = {
    /**
   * Check if a value is a `HistoryEditor` object.
   */ isHistoryEditor (value) {
        return History.isHistory(value.history) && (0, _slate.Editor).isEditor(value);
    },
    /**
   * Get the merge flag's current value.
   */ isMerging (editor) {
        return MERGING.get(editor);
    },
    /**
   * Get the saving flag's current value.
   */ isSaving (editor) {
        return SAVING.get(editor);
    },
    /**
   * Redo to the previous saved state.
   */ redo (editor) {
        editor.redo();
    },
    /**
   * Undo to the previous saved state.
   */ undo (editor) {
        editor.undo();
    },
    /**
   * Apply a series of changes inside a synchronous `fn`, without merging any of
   * the new operations into previous save point in the history.
   */ withoutMerging (editor, fn) {
        var prev = HistoryEditor.isMerging(editor);
        MERGING.set(editor, false);
        fn();
        MERGING.set(editor, prev);
    },
    /**
   * Apply a series of changes inside a synchronous `fn`, without saving any of
   * their operations into the history.
   */ withoutSaving (editor, fn) {
        var prev = HistoryEditor.isSaving(editor);
        SAVING.set(editor, false);
        fn();
        SAVING.set(editor, prev);
    }
};
/**
 * The `withHistory` plugin keeps track of the operation history of a Slate
 * editor as operations are applied to it, using undo and redo stacks.
 *
 * If you are using TypeScript, you must extend Slate's CustomTypes to use
 * this plugin.
 *
 * See https://docs.slatejs.org/concepts/11-typescript to learn how.
 */ var withHistory = (editor)=>{
    var e = editor;
    var { apply } = e;
    e.history = {
        undos: [],
        redos: []
    };
    e.redo = ()=>{
        var { history } = e;
        var { redos } = history;
        if (redos.length > 0) {
            var batch = redos[redos.length - 1];
            if (batch.selectionBefore) (0, _slate.Transforms).setSelection(e, batch.selectionBefore);
            HistoryEditor.withoutSaving(e, ()=>{
                (0, _slate.Editor).withoutNormalizing(e, ()=>{
                    for (var op of batch.operations)e.apply(op);
                });
            });
            history.redos.pop();
            history.undos.push(batch);
        }
    };
    e.undo = ()=>{
        var { history } = e;
        var { undos } = history;
        if (undos.length > 0) {
            var batch = undos[undos.length - 1];
            HistoryEditor.withoutSaving(e, ()=>{
                (0, _slate.Editor).withoutNormalizing(e, ()=>{
                    var inverseOps = batch.operations.map((0, _slate.Operation).inverse).reverse();
                    for (var op of inverseOps)e.apply(op);
                    if (batch.selectionBefore) (0, _slate.Transforms).setSelection(e, batch.selectionBefore);
                });
            });
            history.redos.push(batch);
            history.undos.pop();
        }
    };
    e.apply = (op)=>{
        var { operations, history } = e;
        var { undos } = history;
        var lastBatch = undos[undos.length - 1];
        var lastOp = lastBatch && lastBatch.operations[lastBatch.operations.length - 1];
        var save = HistoryEditor.isSaving(e);
        var merge = HistoryEditor.isMerging(e);
        if (save == null) save = shouldSave(op);
        if (save) {
            if (merge == null) {
                if (lastBatch == null) merge = false;
                else if (operations.length !== 0) merge = true;
                else merge = shouldMerge(op, lastOp);
            }
            if (lastBatch && merge) lastBatch.operations.push(op);
            else {
                var batch = {
                    operations: [
                        op
                    ],
                    selectionBefore: e.selection
                };
                undos.push(batch);
            }
            while(undos.length > 100)undos.shift();
            history.redos = [];
        }
        apply(op);
    };
    return e;
};
/**
 * Check whether to merge an operation into the previous operation.
 */ var shouldMerge = (op, prev)=>{
    if (prev && op.type === "insert_text" && prev.type === "insert_text" && op.offset === prev.offset + prev.text.length && (0, _slate.Path).equals(op.path, prev.path)) return true;
    if (prev && op.type === "remove_text" && prev.type === "remove_text" && op.offset + op.text.length === prev.offset && (0, _slate.Path).equals(op.path, prev.path)) return true;
    return false;
};
/**
 * Check whether an operation needs to be saved to the history.
 */ var shouldSave = (op, prev)=>{
    if (op.type === "set_selection") return false;
    return true;
};

},{"is-plain-object":"5FM20","slate":"bnHwp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["3QC3y","bB7Pu"], "bB7Pu", "parcelRequireba17")

//# sourceMappingURL=index.3d214d75.js.map
